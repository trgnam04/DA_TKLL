
STMF103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f54  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000764  0800a068  0800a068  0001a068  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7cc  0800a7cc  00020200  2**0
                  CONTENTS
  4 .ARM          00000000  0800a7cc  0800a7cc  00020200  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a7cc  0800a7cc  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7cc  0800a7cc  0001a7cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7d0  0800a7d0  0001a7d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800a7d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a20  20000200  0800a9d4  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c20  0800a9d4  00020c20  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020229  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016a68  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004041  00000000  00000000  00036cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014f0  00000000  00000000  0003ad18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000101f  00000000  00000000  0003c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bd1a  00000000  00000000  0003d227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cb0e  00000000  00000000  00058f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090165  00000000  00000000  00075a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000654c  00000000  00000000  00105bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003b  00000000  00000000  0010c100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a04c 	.word	0x0800a04c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	0800a04c 	.word	0x0800a04c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <ATC_Init>:
static const char* esp_error = "ERROR\r\n";
static const char* esp_busy = "busy p...\r\n";



void ATC_Init(ATC_Handletypedef* hAtc, UART_HandleTypeDef* hUart){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
	hAtc->RxIdx = 0;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2200      	movs	r2, #0
 8000a96:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	hAtc->hUart = hUart;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	683a      	ldr	r2, [r7, #0]
 8000a9e:	601a      	str	r2, [r3, #0]
	hAtc->Size = BUFFER_SIZE;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aa6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	memset(hAtc->pRxbuff, 0, BUFFER_SIZE);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	3304      	adds	r3, #4
 8000aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f007 fa7e 	bl	8007fb6 <memset>

	// init DMA UART
	HAL_UART_Receive_IT(hAtc->hUart, &hAtc->pReadBuff, 1);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6818      	ldr	r0, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	f005 fcb0 	bl	800642c <HAL_UART_Receive_IT>
}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <ATC_TxRaw>:

bool ATC_TxRaw(ATC_Handletypedef* hAtc, const uint8_t* pData, uint16_t len){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	80fb      	strh	r3, [r7, #6]
	bool answer = false;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	75fb      	strb	r3, [r7, #23]
	do
	{
		if (HAL_UART_Transmit_DMA(hAtc->hUart, pData, len) != HAL_OK)
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	88fa      	ldrh	r2, [r7, #6]
 8000aec:	68b9      	ldr	r1, [r7, #8]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f005 fcc2 	bl	8006478 <HAL_UART_Transmit_DMA>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d102      	bne.n	8000b00 <ATC_TxRaw+0x2c>
		{
			break;
		}
		answer = true;
 8000afa:	2301      	movs	r3, #1
 8000afc:	75fb      	strb	r3, [r7, #23]
 8000afe:	e000      	b.n	8000b02 <ATC_TxRaw+0x2e>
			break;
 8000b00:	bf00      	nop

	} while (0);

	return answer;
 8000b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <ATC_TxBusy>:

bool ATC_TxBusy(ATC_Handletypedef* hAtc){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX))
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f006 f83d 	bl	8006b98 <HAL_UART_GetState>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b21      	cmp	r3, #33	; 0x21
 8000b22:	d007      	beq.n	8000b34 <ATC_TxBusy+0x28>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f006 f835 	bl	8006b98 <HAL_UART_GetState>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b23      	cmp	r3, #35	; 0x23
 8000b32:	d101      	bne.n	8000b38 <ATC_TxBusy+0x2c>
		return true;
 8000b34:	2301      	movs	r3, #1
 8000b36:	e000      	b.n	8000b3a <ATC_TxBusy+0x2e>
	else
		return false;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <ATC_TxWait>:

bool ATC_TxWait(ATC_Handletypedef* hAtc, uint32_t TIMEOUT){
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b084      	sub	sp, #16
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
 8000b4a:	6039      	str	r1, [r7, #0]
	bool answer = false;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	73fb      	strb	r3, [r7, #15]
	uint32_t start_time = HAL_GetTick();
 8000b50:	f002 f89e 	bl	8002c90 <HAL_GetTick>
 8000b54:	60b8      	str	r0, [r7, #8]
	while (1)
	{
		HAL_Delay(1);
 8000b56:	2001      	movs	r0, #1
 8000b58:	f002 f8a4 	bl	8002ca4 <HAL_Delay>
		if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_READY))
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f006 f819 	bl	8006b98 <HAL_UART_GetState>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b22      	cmp	r3, #34	; 0x22
 8000b6a:	d007      	beq.n	8000b7c <ATC_TxWait+0x3a>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f006 f811 	bl	8006b98 <HAL_UART_GetState>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b20      	cmp	r3, #32
 8000b7a:	d102      	bne.n	8000b82 <ATC_TxWait+0x40>
		{
			answer = true;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	73fb      	strb	r3, [r7, #15]
			break;
 8000b80:	e01c      	b.n	8000bbc <ATC_TxWait+0x7a>
		}
		if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_ERROR) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_TIMEOUT))
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f006 f806 	bl	8006b98 <HAL_UART_GetState>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2be0      	cmp	r3, #224	; 0xe0
 8000b90:	d014      	beq.n	8000bbc <ATC_TxWait+0x7a>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f005 fffe 	bl	8006b98 <HAL_UART_GetState>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2ba0      	cmp	r3, #160	; 0xa0
 8000ba0:	d00c      	beq.n	8000bbc <ATC_TxWait+0x7a>
		{
			  break;
		}
		if (HAL_GetTick() - start_time >= TIMEOUT)
 8000ba2:	f002 f875 	bl	8002c90 <HAL_GetTick>
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	683a      	ldr	r2, [r7, #0]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d8d1      	bhi.n	8000b56 <ATC_TxWait+0x14>
		{
		  HAL_UART_AbortTransmit(hAtc->hUart);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f005 fcce 	bl	8006558 <HAL_UART_AbortTransmit>
		  break;
		}
	}

	return answer;
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <ATC_RxFlush>:

void ATC_RxFlush(ATC_Handletypedef* hAtc){
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
	memset(hAtc->pRxbuff, 0, BUFFER_SIZE);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f007 f9ec 	bl	8007fb6 <memset>
	hAtc->RxIdx = 0;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2200      	movs	r2, #0
 8000be2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <ATC_CheckError>:

void ATC_CheckError(ATC_Handletypedef* hAtc){
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
	return; //for dummy
 8000bf6:	bf00      	nop
}
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <ATC_Send>:

int ATC_SendReceive(ATC_Handletypedef* hAtc, const char* pCmd, uint32_t TxTimeout, uint32_t RxTimeout){
	return 0; // for dummy
}

bool ATC_Send(ATC_Handletypedef* hAtc, const char* pCmd, uint32_t TxTimeout){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
	bool answer = false;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	75fb      	strb	r3, [r7, #23]
	do{
		if (ATC_TxBusy(hAtc) == true)
 8000c10:	68f8      	ldr	r0, [r7, #12]
 8000c12:	f7ff ff7b 	bl	8000b0c <ATC_TxBusy>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d122      	bne.n	8000c62 <ATC_Send+0x62>
		{
		  break;
		}
		ATC_CheckError(hAtc);
 8000c1c:	68f8      	ldr	r0, [r7, #12]
 8000c1e:	f7ff ffe6 	bl	8000bee <ATC_CheckError>
		ATC_RxFlush(hAtc);
 8000c22:	68f8      	ldr	r0, [r7, #12]
 8000c24:	f7ff ffcf 	bl	8000bc6 <ATC_RxFlush>
		if (ATC_TxRaw(hAtc, (const uint8_t*)pCmd, strlen((char*)pCmd)) == false)
 8000c28:	68b8      	ldr	r0, [r7, #8]
 8000c2a:	f7ff fa91 	bl	8000150 <strlen>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	461a      	mov	r2, r3
 8000c34:	68b9      	ldr	r1, [r7, #8]
 8000c36:	68f8      	ldr	r0, [r7, #12]
 8000c38:	f7ff ff4c 	bl	8000ad4 <ATC_TxRaw>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	f083 0301 	eor.w	r3, r3, #1
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d10e      	bne.n	8000c66 <ATC_Send+0x66>
		{
		  break;
		}
		if (ATC_TxWait(hAtc, TxTimeout) == false)
 8000c48:	6879      	ldr	r1, [r7, #4]
 8000c4a:	68f8      	ldr	r0, [r7, #12]
 8000c4c:	f7ff ff79 	bl	8000b42 <ATC_TxWait>
 8000c50:	4603      	mov	r3, r0
 8000c52:	f083 0301 	eor.w	r3, r3, #1
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d106      	bne.n	8000c6a <ATC_Send+0x6a>
		{
		  break;
		}

		answer = true;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	75fb      	strb	r3, [r7, #23]
 8000c60:	e004      	b.n	8000c6c <ATC_Send+0x6c>
		  break;
 8000c62:	bf00      	nop
 8000c64:	e002      	b.n	8000c6c <ATC_Send+0x6c>
		  break;
 8000c66:	bf00      	nop
 8000c68:	e000      	b.n	8000c6c <ATC_Send+0x6c>
		  break;
 8000c6a:	bf00      	nop
	}
	while(0);

	return answer;
 8000c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <ATC_Receive>:

bool ATC_Receive(ATC_Handletypedef* hAtc, const char* expectedResponse, uint32_t RxTimeout){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
	bool answer = false;
 8000c84:	2300      	movs	r3, #0
 8000c86:	75fb      	strb	r3, [r7, #23]

	uint32_t start_time = HAL_GetTick();
 8000c88:	f002 f802 	bl	8002c90 <HAL_GetTick>
 8000c8c:	6138      	str	r0, [r7, #16]
	while (HAL_GetTick() - start_time < RxTimeout) {
 8000c8e:	e024      	b.n	8000cda <ATC_Receive+0x62>
	   if(strstr((char*)hAtc->pRxbuff, expectedResponse) != NULL) {
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	3304      	adds	r3, #4
 8000c94:	68b9      	ldr	r1, [r7, #8]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f007 f995 	bl	8007fc6 <strstr>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d002      	beq.n	8000ca8 <ATC_Receive+0x30>
		   answer = true;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	75fb      	strb	r3, [r7, #23]
		   break;
 8000ca6:	e022      	b.n	8000cee <ATC_Receive+0x76>
	   }
	   if(strstr((char*)hAtc->pRxbuff, esp_ok) != NULL) {
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	3304      	adds	r3, #4
 8000cac:	4a19      	ldr	r2, [pc, #100]	; (8000d14 <ATC_Receive+0x9c>)
 8000cae:	6812      	ldr	r2, [r2, #0]
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f007 f987 	bl	8007fc6 <strstr>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d002      	beq.n	8000cc4 <ATC_Receive+0x4c>
		   answer = true;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	75fb      	strb	r3, [r7, #23]
		   break;
 8000cc2:	e014      	b.n	8000cee <ATC_Receive+0x76>
	   }
	   if(strstr((char*)hAtc->pRxbuff, esp_error) != NULL) {
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	3304      	adds	r3, #4
 8000cc8:	4a13      	ldr	r2, [pc, #76]	; (8000d18 <ATC_Receive+0xa0>)
 8000cca:	6812      	ldr	r2, [r2, #0]
 8000ccc:	4611      	mov	r1, r2
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f007 f979 	bl	8007fc6 <strstr>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d108      	bne.n	8000cec <ATC_Receive+0x74>
	while (HAL_GetTick() - start_time < RxTimeout) {
 8000cda:	f001 ffd9 	bl	8002c90 <HAL_GetTick>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d8d2      	bhi.n	8000c90 <ATC_Receive+0x18>
 8000cea:	e000      	b.n	8000cee <ATC_Receive+0x76>
		   break;
 8000cec:	bf00      	nop
	   }
//	   if(strstr((char*)hAtc->pRxbuff, esp_busy) != NULL) {
//		   break;
//	   }
	}
	HAL_UART_Transmit(&huart1, (uint8_t*)hAtc->pRxbuff, hAtc->RxIdx + 1, 1000);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	1d19      	adds	r1, r3, #4
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d02:	4806      	ldr	r0, [pc, #24]	; (8000d1c <ATC_Receive+0xa4>)
 8000d04:	f005 fb07 	bl	8006316 <HAL_UART_Transmit>

	return answer;
 8000d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000000 	.word	0x20000000
 8000d18:	20000004 	.word	0x20000004
 8000d1c:	2000099c 	.word	0x2000099c

08000d20 <init_button>:
static GPIO_PinState debounceButton2[NO_OF_BUTTON];
static GPIO_PinState debounceButton3[NO_OF_BUTTON];
static uint8_t flagforButtonPressed1s[NO_OF_BUTTON];
static uint8_t counterforButtonPressed1s[NO_OF_BUTTON];

void init_button(void){
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTON; i++){
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	e011      	b.n	8000d50 <init_button+0x30>
		debounceButton1[i] = GPIO_PIN_SET;
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <init_button+0x44>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	2201      	movs	r2, #1
 8000d34:	701a      	strb	r2, [r3, #0]
		debounceButton2[i] = GPIO_PIN_SET;
 8000d36:	4a0c      	ldr	r2, [pc, #48]	; (8000d68 <init_button+0x48>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	701a      	strb	r2, [r3, #0]
		debounceButton3[i] = GPIO_PIN_SET;
 8000d40:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <init_button+0x4c>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_BUTTON; i++){
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	ddea      	ble.n	8000d2c <init_button+0xc>
	}
}
 8000d56:	bf00      	nop
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000220 	.word	0x20000220
 8000d68:	20000224 	.word	0x20000224
 8000d6c:	20000228 	.word	0x20000228

08000d70 <button_reading>:

void button_reading(void){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(task1_GPIO_Port, task1_Pin);
 8000d76:	2101      	movs	r1, #1
 8000d78:	4831      	ldr	r0, [pc, #196]	; (8000e40 <button_reading+0xd0>)
 8000d7a:	f002 fd24 	bl	80037c6 <HAL_GPIO_TogglePin>
	for(int i = 0; i < NO_OF_BUTTON; i++){
 8000d7e:	2300      	movs	r3, #0
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	e054      	b.n	8000e2e <button_reading+0xbe>
		debounceButton3[i] = debounceButton2[i];
 8000d84:	4a2f      	ldr	r2, [pc, #188]	; (8000e44 <button_reading+0xd4>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	7819      	ldrb	r1, [r3, #0]
 8000d8c:	4a2e      	ldr	r2, [pc, #184]	; (8000e48 <button_reading+0xd8>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	460a      	mov	r2, r1
 8000d94:	701a      	strb	r2, [r3, #0]
		debounceButton2[i] = debounceButton1[i];
 8000d96:	4a2d      	ldr	r2, [pc, #180]	; (8000e4c <button_reading+0xdc>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	7819      	ldrb	r1, [r3, #0]
 8000d9e:	4a29      	ldr	r2, [pc, #164]	; (8000e44 <button_reading+0xd4>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4413      	add	r3, r2
 8000da4:	460a      	mov	r2, r1
 8000da6:	701a      	strb	r2, [r3, #0]
		updateButtonState(i);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 f855 	bl	8000e5c <updateButtonState>

		if(debounceButton3[i] == debounceButton1[i]){
 8000db2:	4a25      	ldr	r2, [pc, #148]	; (8000e48 <button_reading+0xd8>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4413      	add	r3, r2
 8000db8:	781a      	ldrb	r2, [r3, #0]
 8000dba:	4924      	ldr	r1, [pc, #144]	; (8000e4c <button_reading+0xdc>)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	440b      	add	r3, r1
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d130      	bne.n	8000e28 <button_reading+0xb8>
			buttonBuffer[i] = debounceButton1[i];
 8000dc6:	4a21      	ldr	r2, [pc, #132]	; (8000e4c <button_reading+0xdc>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4413      	add	r3, r2
 8000dcc:	7819      	ldrb	r1, [r3, #0]
 8000dce:	4a20      	ldr	r2, [pc, #128]	; (8000e50 <button_reading+0xe0>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	460a      	mov	r2, r1
 8000dd6:	701a      	strb	r2, [r3, #0]
			if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000dd8:	4a1d      	ldr	r2, [pc, #116]	; (8000e50 <button_reading+0xe0>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d117      	bne.n	8000e14 <button_reading+0xa4>
				if(counterforButtonPressed1s[i] < DURATION_FOR_AUTO_INCREASING){
 8000de4:	4a1b      	ldr	r2, [pc, #108]	; (8000e54 <button_reading+0xe4>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b63      	cmp	r3, #99	; 0x63
 8000dee:	d80b      	bhi.n	8000e08 <button_reading+0x98>
					counterforButtonPressed1s[i]++;
 8000df0:	4a18      	ldr	r2, [pc, #96]	; (8000e54 <button_reading+0xe4>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	b2d9      	uxtb	r1, r3
 8000dfc:	4a15      	ldr	r2, [pc, #84]	; (8000e54 <button_reading+0xe4>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	460a      	mov	r2, r1
 8000e04:	701a      	strb	r2, [r3, #0]
 8000e06:	e00f      	b.n	8000e28 <button_reading+0xb8>
				}
				else{
					flagforButtonPressed1s[i] = 1;
 8000e08:	4a13      	ldr	r2, [pc, #76]	; (8000e58 <button_reading+0xe8>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	2201      	movs	r2, #1
 8000e10:	701a      	strb	r2, [r3, #0]
 8000e12:	e009      	b.n	8000e28 <button_reading+0xb8>
				}
			}
			else{
				flagforButtonPressed1s[i] = 0;
 8000e14:	4a10      	ldr	r2, [pc, #64]	; (8000e58 <button_reading+0xe8>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	701a      	strb	r2, [r3, #0]
				counterforButtonPressed1s[i] = 0;
 8000e1e:	4a0d      	ldr	r2, [pc, #52]	; (8000e54 <button_reading+0xe4>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4413      	add	r3, r2
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_BUTTON; i++){
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	dda7      	ble.n	8000d84 <button_reading+0x14>
			}
		}
	}
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40010c00 	.word	0x40010c00
 8000e44:	20000224 	.word	0x20000224
 8000e48:	20000228 	.word	0x20000228
 8000e4c:	20000220 	.word	0x20000220
 8000e50:	2000021c 	.word	0x2000021c
 8000e54:	20000230 	.word	0x20000230
 8000e58:	2000022c 	.word	0x2000022c

08000e5c <updateButtonState>:

void updateButtonState(uint8_t idx){
 8000e5c:	b590      	push	{r4, r7, lr}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
	switch(idx){
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d01a      	beq.n	8000ea2 <updateButtonState+0x46>
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	dc22      	bgt.n	8000eb6 <updateButtonState+0x5a>
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d002      	beq.n	8000e7a <updateButtonState+0x1e>
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d00a      	beq.n	8000e8e <updateButtonState+0x32>
	case 2:{
		debounceButton1[idx] = HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin);
		break;
	}
	default:{
		break;
 8000e78:	e01d      	b.n	8000eb6 <updateButtonState+0x5a>
		debounceButton1[idx] = HAL_GPIO_ReadPin(BTN0_GPIO_Port, BTN0_Pin);
 8000e7a:	79fc      	ldrb	r4, [r7, #7]
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	4810      	ldr	r0, [pc, #64]	; (8000ec0 <updateButtonState+0x64>)
 8000e80:	f002 fc72 	bl	8003768 <HAL_GPIO_ReadPin>
 8000e84:	4603      	mov	r3, r0
 8000e86:	461a      	mov	r2, r3
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <updateButtonState+0x68>)
 8000e8a:	551a      	strb	r2, [r3, r4]
		break;
 8000e8c:	e014      	b.n	8000eb8 <updateButtonState+0x5c>
		debounceButton1[idx] = HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin);
 8000e8e:	79fc      	ldrb	r4, [r7, #7]
 8000e90:	2102      	movs	r1, #2
 8000e92:	480b      	ldr	r0, [pc, #44]	; (8000ec0 <updateButtonState+0x64>)
 8000e94:	f002 fc68 	bl	8003768 <HAL_GPIO_ReadPin>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <updateButtonState+0x68>)
 8000e9e:	551a      	strb	r2, [r3, r4]
		break;
 8000ea0:	e00a      	b.n	8000eb8 <updateButtonState+0x5c>
		debounceButton1[idx] = HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin);
 8000ea2:	79fc      	ldrb	r4, [r7, #7]
 8000ea4:	2110      	movs	r1, #16
 8000ea6:	4806      	ldr	r0, [pc, #24]	; (8000ec0 <updateButtonState+0x64>)
 8000ea8:	f002 fc5e 	bl	8003768 <HAL_GPIO_ReadPin>
 8000eac:	4603      	mov	r3, r0
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <updateButtonState+0x68>)
 8000eb2:	551a      	strb	r2, [r3, r4]
		break;
 8000eb4:	e000      	b.n	8000eb8 <updateButtonState+0x5c>
		break;
 8000eb6:	bf00      	nop
	}
	}
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd90      	pop	{r4, r7, pc}
 8000ec0:	40010800 	.word	0x40010800
 8000ec4:	20000220 	.word	0x20000220

08000ec8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_DMA_Init+0x38>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <MX_DMA_Init+0x38>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6153      	str	r3, [r2, #20]
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_DMA_Init+0x38>)
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	200c      	movs	r0, #12
 8000eec:	f001 ffd5 	bl	8002e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ef0:	200c      	movs	r0, #12
 8000ef2:	f001 ffee 	bl	8002ed2 <HAL_NVIC_EnableIRQ>

}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40021000 	.word	0x40021000

08000f04 <InitESP>:
ESP_HandleTypeDef hEsp;

// UART timeout (ms)
#define UART_TIMEOUT 1000

void InitESP(void){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
	ATC_Init(&hEsp.hAtc, &huart3);
 8000f08:	4902      	ldr	r1, [pc, #8]	; (8000f14 <InitESP+0x10>)
 8000f0a:	4803      	ldr	r0, [pc, #12]	; (8000f18 <InitESP+0x14>)
 8000f0c:	f7ff fdbc 	bl	8000a88 <ATC_Init>
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000a2c 	.word	0x20000a2c
 8000f18:	20000234 	.word	0x20000234

08000f1c <ESP_Init>:


// ESP
bool ESP_Init(ESP_HandleTypeDef* hEsp){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	bool answer = false;
 8000f24:	2300      	movs	r3, #0
 8000f26:	73fb      	strb	r3, [r7, #15]
	do{
		if(!ATC_Send(&hEsp->hAtc, "AT\r\n", 100)){
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2264      	movs	r2, #100	; 0x64
 8000f2c:	4910      	ldr	r1, [pc, #64]	; (8000f70 <ESP_Init+0x54>)
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fe66 	bl	8000c00 <ATC_Send>
 8000f34:	4603      	mov	r3, r0
 8000f36:	f083 0301 	eor.w	r3, r3, #1
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d10f      	bne.n	8000f60 <ESP_Init+0x44>

			break;
		}
		if(!ATC_Receive(&hEsp->hAtc, esp_ok, 100)){
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a0c      	ldr	r2, [pc, #48]	; (8000f74 <ESP_Init+0x58>)
 8000f44:	6811      	ldr	r1, [r2, #0]
 8000f46:	2264      	movs	r2, #100	; 0x64
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fe95 	bl	8000c78 <ATC_Receive>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	f083 0301 	eor.w	r3, r3, #1
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d104      	bne.n	8000f64 <ESP_Init+0x48>

			break;
		}

		answer = true;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	73fb      	strb	r3, [r7, #15]
 8000f5e:	e002      	b.n	8000f66 <ESP_Init+0x4a>
			break;
 8000f60:	bf00      	nop
 8000f62:	e000      	b.n	8000f66 <ESP_Init+0x4a>
			break;
 8000f64:	bf00      	nop
	}
	while(0);

	// debug log if needed

	return answer;
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	0800a08c 	.word	0x0800a08c
 8000f74:	20000008 	.word	0x20000008

08000f78 <ESP_WifiInit>:
	} while (0);

	return answer;
}

bool ESP_WifiInit(ESP_HandleTypeDef* hEsp){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	bool answer = false;
 8000f80:	2300      	movs	r3, #0
 8000f82:	73fb      	strb	r3, [r7, #15]
	do{
		if(!ATC_Send(&hEsp->hAtc, "AT+CWINIT=1\r\n", 100)){
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2264      	movs	r2, #100	; 0x64
 8000f88:	4910      	ldr	r1, [pc, #64]	; (8000fcc <ESP_WifiInit+0x54>)
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fe38 	bl	8000c00 <ATC_Send>
 8000f90:	4603      	mov	r3, r0
 8000f92:	f083 0301 	eor.w	r3, r3, #1
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d10f      	bne.n	8000fbc <ESP_WifiInit+0x44>
			break;
		}
		if(!ATC_Receive(&hEsp->hAtc, esp_ok, 100)){
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a0c      	ldr	r2, [pc, #48]	; (8000fd0 <ESP_WifiInit+0x58>)
 8000fa0:	6811      	ldr	r1, [r2, #0]
 8000fa2:	2264      	movs	r2, #100	; 0x64
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fe67 	bl	8000c78 <ATC_Receive>
 8000faa:	4603      	mov	r3, r0
 8000fac:	f083 0301 	eor.w	r3, r3, #1
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d104      	bne.n	8000fc0 <ESP_WifiInit+0x48>
			break;
		}
		answer = true;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	73fb      	strb	r3, [r7, #15]
 8000fba:	e002      	b.n	8000fc2 <ESP_WifiInit+0x4a>
			break;
 8000fbc:	bf00      	nop
 8000fbe:	e000      	b.n	8000fc2 <ESP_WifiInit+0x4a>
			break;
 8000fc0:	bf00      	nop
	}
	while(0);


	return answer;
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	0800a0d4 	.word	0x0800a0d4
 8000fd0:	20000008 	.word	0x20000008

08000fd4 <ESP_WifiStationConnect>:
	while(0);

	return answer;
}

bool ESP_WifiStationConnect(ESP_HandleTypeDef* hEsp, const char* pSSID, const char* pPass, const char* pMac, uint16_t Timeout){
 8000fd4:	b590      	push	{r4, r7, lr}
 8000fd6:	b0c7      	sub	sp, #284	; 0x11c
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8000fde:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 8000fe2:	6020      	str	r0, [r4, #0]
 8000fe4:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8000fe8:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
 8000fec:	6001      	str	r1, [r0, #0]
 8000fee:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000ff2:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 8000ff6:	600a      	str	r2, [r1, #0]
 8000ff8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000ffc:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8001000:	6013      	str	r3, [r2, #0]
	bool answer = false;
 8001002:	2300      	movs	r3, #0
 8001004:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	char str_at[256];
	memset(str_at, 0, sizeof(str_at));
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f006 ffcf 	bl	8007fb6 <memset>
	do
	{
		sprintf(str_at, "AT+CWJAP=\"%s\",\"%s\"", pSSID, pPass);
 8001018:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800101c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001020:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001024:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001028:	f107 0014 	add.w	r0, r7, #20
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	6812      	ldr	r2, [r2, #0]
 8001030:	4921      	ldr	r1, [pc, #132]	; (80010b8 <ESP_WifiStationConnect+0xe4>)
 8001032:	f006 ff5d 	bl	8007ef0 <siprintf>
//			strcat(str_at, "\",");
//			strcat(str_at, ",,,,");
////			sprintf(str_timeout, "%d", Timeout);
//			strcat(str_at, "10000");
//		}
		strcat(str_at, "\r\n");
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff f888 	bl	8000150 <strlen>
 8001040:	4603      	mov	r3, r0
 8001042:	461a      	mov	r2, r3
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	4413      	add	r3, r2
 800104a:	4a1c      	ldr	r2, [pc, #112]	; (80010bc <ESP_WifiStationConnect+0xe8>)
 800104c:	8811      	ldrh	r1, [r2, #0]
 800104e:	7892      	ldrb	r2, [r2, #2]
 8001050:	8019      	strh	r1, [r3, #0]
 8001052:	709a      	strb	r2, [r3, #2]
		if(!ATC_Send(&hEsp->hAtc, str_at, 1000)){
 8001054:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001058:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f107 0114 	add.w	r1, r7, #20
 8001062:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fdca 	bl	8000c00 <ATC_Send>
 800106c:	4603      	mov	r3, r0
 800106e:	f083 0301 	eor.w	r3, r3, #1
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d115      	bne.n	80010a4 <ESP_WifiStationConnect+0xd0>
			break;
		}
		if(!ATC_Receive(&hEsp->hAtc, esp_ok, 1000)){
 8001078:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800107c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a0f      	ldr	r2, [pc, #60]	; (80010c0 <ESP_WifiStationConnect+0xec>)
 8001084:	6811      	ldr	r1, [r2, #0]
 8001086:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fdf4 	bl	8000c78 <ATC_Receive>
 8001090:	4603      	mov	r3, r0
 8001092:	f083 0301 	eor.w	r3, r3, #1
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b00      	cmp	r3, #0
 800109a:	d105      	bne.n	80010a8 <ESP_WifiStationConnect+0xd4>
			break;
		}
		answer = true;
 800109c:	2301      	movs	r3, #1
 800109e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80010a2:	e002      	b.n	80010aa <ESP_WifiStationConnect+0xd6>
			break;
 80010a4:	bf00      	nop
 80010a6:	e000      	b.n	80010aa <ESP_WifiStationConnect+0xd6>
			break;
 80010a8:	bf00      	nop
	} while (0);

	return answer;
 80010aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd90      	pop	{r4, r7, pc}
 80010b8:	0800a0f4 	.word	0x0800a0f4
 80010bc:	0800a108 	.word	0x0800a108
 80010c0:	20000008 	.word	0x20000008

080010c4 <ESP_WifiMode>:
	while(0);

	return answer;
}

bool ESP_WifiMode(ESP_HandleTypeDef* hEsp, ESP_WifiModeTypeDef WifiMode, bool StationAutoConnect){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b0c4      	sub	sp, #272	; 0x110
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010d2:	6018      	str	r0, [r3, #0]
 80010d4:	4608      	mov	r0, r1
 80010d6:	4611      	mov	r1, r2
 80010d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010dc:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 80010e0:	4602      	mov	r2, r0
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010e8:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 80010ec:	460a      	mov	r2, r1
 80010ee:	701a      	strb	r2, [r3, #0]
	bool answer = false;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	char str_at[256];
	memset(str_at, 0, sizeof(str_at));
 80010f6:	f107 030c 	add.w	r3, r7, #12
 80010fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f006 ff58 	bl	8007fb6 <memset>
	do
	{
		sprintf(str_at, "AT+CWMODE=%d,%d\r\n", WifiMode, StationAutoConnect);
 8001106:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800110a:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 800110e:	781a      	ldrb	r2, [r3, #0]
 8001110:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001114:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	f107 000c 	add.w	r0, r7, #12
 800111e:	4919      	ldr	r1, [pc, #100]	; (8001184 <ESP_WifiMode+0xc0>)
 8001120:	f006 fee6 	bl	8007ef0 <siprintf>
		if (!ATC_Send(&hEsp->hAtc, str_at, 100))
 8001124:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001128:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f107 010c 	add.w	r1, r7, #12
 8001132:	2264      	movs	r2, #100	; 0x64
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fd63 	bl	8000c00 <ATC_Send>
 800113a:	4603      	mov	r3, r0
 800113c:	f083 0301 	eor.w	r3, r3, #1
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d114      	bne.n	8001170 <ESP_WifiMode+0xac>
		{
		  break;
		}
		if (!ATC_Receive(&hEsp->hAtc, esp_ok, 100))
 8001146:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800114a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0d      	ldr	r2, [pc, #52]	; (8001188 <ESP_WifiMode+0xc4>)
 8001152:	6811      	ldr	r1, [r2, #0]
 8001154:	2264      	movs	r2, #100	; 0x64
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fd8e 	bl	8000c78 <ATC_Receive>
 800115c:	4603      	mov	r3, r0
 800115e:	f083 0301 	eor.w	r3, r3, #1
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b00      	cmp	r3, #0
 8001166:	d105      	bne.n	8001174 <ESP_WifiMode+0xb0>
		{
		  break;
		}
		answer = true;
 8001168:	2301      	movs	r3, #1
 800116a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800116e:	e002      	b.n	8001176 <ESP_WifiMode+0xb2>
		  break;
 8001170:	bf00      	nop
 8001172:	e000      	b.n	8001176 <ESP_WifiMode+0xb2>
		  break;
 8001174:	bf00      	nop

	} while (0);

	return answer;
 8001176:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
}
 800117a:	4618      	mov	r0, r3
 800117c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	0800a118 	.word	0x0800a118
 8001188:	20000008 	.word	0x20000008

0800118c <ESP_MQTTConfig>:


// MQTT
bool ESP_MQTTConfig(ESP_HandleTypeDef* hEsp, const char* Username, const char* Key){
 800118c:	b580      	push	{r7, lr}
 800118e:	b0c8      	sub	sp, #288	; 0x120
 8001190:	af02      	add	r7, sp, #8
 8001192:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001196:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800119a:	6018      	str	r0, [r3, #0]
 800119c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80011a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80011a4:	6019      	str	r1, [r3, #0]
 80011a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80011aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80011ae:	601a      	str	r2, [r3, #0]
	bool answer = false;
 80011b0:	2300      	movs	r3, #0
 80011b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	char cmd[256];
	snprintf(cmd, sizeof(cmd), "AT+MQTTUSERCFG=0,1,\"\",\"%s\",\"%s\",0,0,\"\"\r\n", Username, Key);
 80011b6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80011ba:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80011be:	f107 0014 	add.w	r0, r7, #20
 80011c2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80011c6:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80011ca:	6812      	ldr	r2, [r2, #0]
 80011cc:	9200      	str	r2, [sp, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <ESP_MQTTConfig+0xb4>)
 80011d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d6:	f006 fe57 	bl	8007e88 <sniprintf>
	do
	{
		if (!ATC_Send(&hEsp->hAtc, cmd, 1000))
 80011da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80011de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f107 0114 	add.w	r1, r7, #20
 80011e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fd07 	bl	8000c00 <ATC_Send>
 80011f2:	4603      	mov	r3, r0
 80011f4:	f083 0301 	eor.w	r3, r3, #1
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d115      	bne.n	800122a <ESP_MQTTConfig+0x9e>
		{
		  break;
		}
		if (!ATC_Receive(&hEsp->hAtc, esp_ok, 1000))
 80011fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001202:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0e      	ldr	r2, [pc, #56]	; (8001244 <ESP_MQTTConfig+0xb8>)
 800120a:	6811      	ldr	r1, [r2, #0]
 800120c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fd31 	bl	8000c78 <ATC_Receive>
 8001216:	4603      	mov	r3, r0
 8001218:	f083 0301 	eor.w	r3, r3, #1
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d105      	bne.n	800122e <ESP_MQTTConfig+0xa2>
		{
		  break;
		}


		answer = true;
 8001222:	2301      	movs	r3, #1
 8001224:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8001228:	e002      	b.n	8001230 <ESP_MQTTConfig+0xa4>
		  break;
 800122a:	bf00      	nop
 800122c:	e000      	b.n	8001230 <ESP_MQTTConfig+0xa4>
		  break;
 800122e:	bf00      	nop

	} while (0);

	return answer;
 8001230:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
}
 8001234:	4618      	mov	r0, r3
 8001236:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	0800a12c 	.word	0x0800a12c
 8001244:	20000008 	.word	0x20000008

08001248 <ESP_MQTTConnect>:

bool ESP_MQTTConnect(ESP_HandleTypeDef* hEsp, const char* Server, uint16_t Port){
 8001248:	b580      	push	{r7, lr}
 800124a:	b0c8      	sub	sp, #288	; 0x120
 800124c:	af02      	add	r7, sp, #8
 800124e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001252:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001256:	6018      	str	r0, [r3, #0]
 8001258:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800125c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001260:	6019      	str	r1, [r3, #0]
 8001262:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001266:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 800126a:	801a      	strh	r2, [r3, #0]
	bool answer = false;
 800126c:	2300      	movs	r3, #0
 800126e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	char cmd[256];
	snprintf(cmd, sizeof(cmd), "AT+MQTTCONN=0,\"%s\",%d,0\r\n", Server, Port);
 8001272:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001276:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 800127a:	881a      	ldrh	r2, [r3, #0]
 800127c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001280:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001284:	f107 0014 	add.w	r0, r7, #20
 8001288:	9200      	str	r2, [sp, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a1b      	ldr	r2, [pc, #108]	; (80012fc <ESP_MQTTConnect+0xb4>)
 800128e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001292:	f006 fdf9 	bl	8007e88 <sniprintf>
	do
	{
		if (!ATC_Send(&hEsp->hAtc, cmd, 1000))
 8001296:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800129a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f107 0114 	add.w	r1, r7, #20
 80012a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fca9 	bl	8000c00 <ATC_Send>
 80012ae:	4603      	mov	r3, r0
 80012b0:	f083 0301 	eor.w	r3, r3, #1
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d115      	bne.n	80012e6 <ESP_MQTTConnect+0x9e>
		{
		  break;
		}
		if (!ATC_Receive(&hEsp->hAtc, esp_ok, 1000))
 80012ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80012be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <ESP_MQTTConnect+0xb8>)
 80012c6:	6811      	ldr	r1, [r2, #0]
 80012c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fcd3 	bl	8000c78 <ATC_Receive>
 80012d2:	4603      	mov	r3, r0
 80012d4:	f083 0301 	eor.w	r3, r3, #1
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d105      	bne.n	80012ea <ESP_MQTTConnect+0xa2>
		{
		  break;
		}


		answer = true;
 80012de:	2301      	movs	r3, #1
 80012e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80012e4:	e002      	b.n	80012ec <ESP_MQTTConnect+0xa4>
		  break;
 80012e6:	bf00      	nop
 80012e8:	e000      	b.n	80012ec <ESP_MQTTConnect+0xa4>
		  break;
 80012ea:	bf00      	nop

	} while (0);

	return answer;
 80012ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	0800a158 	.word	0x0800a158
 8001300:	20000008 	.word	0x20000008

08001304 <ESP_MQTTPublish>:

bool ESP_MQTTPublish(ESP_HandleTypeDef* hEsp, const char* Topic, const char* Message){
 8001304:	b580      	push	{r7, lr}
 8001306:	b0c8      	sub	sp, #288	; 0x120
 8001308:	af02      	add	r7, sp, #8
 800130a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800130e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001312:	6018      	str	r0, [r3, #0]
 8001314:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001318:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800131c:	6019      	str	r1, [r3, #0]
 800131e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001322:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001326:	601a      	str	r2, [r3, #0]
	bool answer = false;
 8001328:	2300      	movs	r3, #0
 800132a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	char cmd[256];
	snprintf(cmd, sizeof(cmd), "AT+MQTTPUB=0,\"%s\",\"%s\",0,0\r\n", Topic, Message);
 800132e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001332:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001336:	f107 0014 	add.w	r0, r7, #20
 800133a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800133e:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8001342:	6812      	ldr	r2, [r2, #0]
 8001344:	9200      	str	r2, [sp, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a17      	ldr	r2, [pc, #92]	; (80013a8 <ESP_MQTTPublish+0xa4>)
 800134a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800134e:	f006 fd9b 	bl	8007e88 <sniprintf>
	do{
		if (!ATC_Send(&hEsp->hAtc, cmd, 100))
 8001352:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001356:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f107 0114 	add.w	r1, r7, #20
 8001360:	2264      	movs	r2, #100	; 0x64
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fc4c 	bl	8000c00 <ATC_Send>
 8001368:	4603      	mov	r3, r0
 800136a:	f083 0301 	eor.w	r3, r3, #1
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d110      	bne.n	8001396 <ESP_MQTTPublish+0x92>
		{
		  break;
		}
		if (!ATC_Receive(&hEsp->hAtc, esp_ok, 100))
 8001374:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001378:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <ESP_MQTTPublish+0xa8>)
 8001380:	6811      	ldr	r1, [r2, #0]
 8001382:	2264      	movs	r2, #100	; 0x64
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fc77 	bl	8000c78 <ATC_Receive>
 800138a:	4603      	mov	r3, r0
 800138c:	f083 0301 	eor.w	r3, r3, #1
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	e000      	b.n	8001398 <ESP_MQTTPublish+0x94>
		  break;
 8001396:	bf00      	nop
		{
		  break;
		}
	}
	while(0);
	return answer;
 8001398:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
}
 800139c:	4618      	mov	r0, r3
 800139e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	0800a174 	.word	0x0800a174
 80013ac:	20000008 	.word	0x20000008

080013b0 <ESP_Callback>:

	return answer;
}


void ESP_Callback(UART_HandleTypeDef* huart){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	if(hEsp.hAtc.hUart == huart){
 80013b8:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <ESP_Callback+0x40>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d112      	bne.n	80013e8 <ESP_Callback+0x38>
		hEsp.hAtc.pRxbuff[hEsp.hAtc.RxIdx++] = hEsp.hAtc.pReadBuff;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <ESP_Callback+0x40>)
 80013c4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80013c8:	1c5a      	adds	r2, r3, #1
 80013ca:	4909      	ldr	r1, [pc, #36]	; (80013f0 <ESP_Callback+0x40>)
 80013cc:	f8c1 2208 	str.w	r2, [r1, #520]	; 0x208
 80013d0:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <ESP_Callback+0x40>)
 80013d2:	f892 1204 	ldrb.w	r1, [r2, #516]	; 0x204
 80013d6:	4a06      	ldr	r2, [pc, #24]	; (80013f0 <ESP_Callback+0x40>)
 80013d8:	4413      	add	r3, r2
 80013da:	460a      	mov	r2, r1
 80013dc:	711a      	strb	r2, [r3, #4]
		if(hEsp.hAtc.pReadBuff > (BUFFER_SIZE - 1)) hEsp.hAtc.pReadBuff = 0;
		HAL_UART_Receive_IT(huart, &hEsp.hAtc.pReadBuff, 1);
 80013de:	2201      	movs	r2, #1
 80013e0:	4904      	ldr	r1, [pc, #16]	; (80013f4 <ESP_Callback+0x44>)
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f005 f822 	bl	800642c <HAL_UART_Receive_IT>
	}
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000234 	.word	0x20000234
 80013f4:	20000438 	.word	0x20000438

080013f8 <init_System>:
static unsigned char tempState1 = 0;
static unsigned char tempState2 = 0;
static unsigned char tempState3 = 0;
static WeatherStation_t mobj;

void init_System(void){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	InitPhysics();
 80013fc:	f000 f9a8 	bl	8001750 <InitPhysics>
	mobj.activate_state = IDLE;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <init_System+0x24>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
	mobj.activate_substate.settingState = INIT;
 8001406:	4b05      	ldr	r3, [pc, #20]	; (800141c <init_System+0x24>)
 8001408:	2200      	movs	r2, #0
 800140a:	705a      	strb	r2, [r3, #1]
	mobj.activate_substate.uartState = INIT_UART;
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <init_System+0x24>)
 800140e:	2200      	movs	r2, #0
 8001410:	709a      	strb	r2, [r3, #2]
	mobj.activate_substate.unitState = INIT_UNIT;
 8001412:	4b02      	ldr	r3, [pc, #8]	; (800141c <init_System+0x24>)
 8001414:	2200      	movs	r2, #0
 8001416:	70da      	strb	r2, [r3, #3]

}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000444 	.word	0x20000444

08001420 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	f107 0310 	add.w	r3, r7, #16
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001434:	4b37      	ldr	r3, [pc, #220]	; (8001514 <MX_GPIO_Init+0xf4>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	4a36      	ldr	r2, [pc, #216]	; (8001514 <MX_GPIO_Init+0xf4>)
 800143a:	f043 0310 	orr.w	r3, r3, #16
 800143e:	6193      	str	r3, [r2, #24]
 8001440:	4b34      	ldr	r3, [pc, #208]	; (8001514 <MX_GPIO_Init+0xf4>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	f003 0310 	and.w	r3, r3, #16
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144c:	4b31      	ldr	r3, [pc, #196]	; (8001514 <MX_GPIO_Init+0xf4>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	4a30      	ldr	r2, [pc, #192]	; (8001514 <MX_GPIO_Init+0xf4>)
 8001452:	f043 0304 	orr.w	r3, r3, #4
 8001456:	6193      	str	r3, [r2, #24]
 8001458:	4b2e      	ldr	r3, [pc, #184]	; (8001514 <MX_GPIO_Init+0xf4>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001464:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <MX_GPIO_Init+0xf4>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	4a2a      	ldr	r2, [pc, #168]	; (8001514 <MX_GPIO_Init+0xf4>)
 800146a:	f043 0308 	orr.w	r3, r3, #8
 800146e:	6193      	str	r3, [r2, #24]
 8001470:	4b28      	ldr	r3, [pc, #160]	; (8001514 <MX_GPIO_Init+0xf4>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Debug_Led_GPIO_Port, Debug_Led_Pin, GPIO_PIN_RESET);
 800147c:	2200      	movs	r2, #0
 800147e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001482:	4825      	ldr	r0, [pc, #148]	; (8001518 <MX_GPIO_Init+0xf8>)
 8001484:	f002 f987 	bl	8003796 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	21e0      	movs	r1, #224	; 0xe0
 800148c:	4823      	ldr	r0, [pc, #140]	; (800151c <MX_GPIO_Init+0xfc>)
 800148e:	f002 f982 	bl	8003796 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, task1_Pin|task2_Pin, GPIO_PIN_RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	2103      	movs	r1, #3
 8001496:	4822      	ldr	r0, [pc, #136]	; (8001520 <MX_GPIO_Init+0x100>)
 8001498:	f002 f97d 	bl	8003796 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Debug_Led_Pin;
 800149c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a2:	2301      	movs	r3, #1
 80014a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2302      	movs	r3, #2
 80014ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Debug_Led_GPIO_Port, &GPIO_InitStruct);
 80014ae:	f107 0310 	add.w	r3, r7, #16
 80014b2:	4619      	mov	r1, r3
 80014b4:	4818      	ldr	r0, [pc, #96]	; (8001518 <MX_GPIO_Init+0xf8>)
 80014b6:	f001 ffd3 	bl	8003460 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|BTN2_Pin;
 80014ba:	2313      	movs	r3, #19
 80014bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 0310 	add.w	r3, r7, #16
 80014ca:	4619      	mov	r1, r3
 80014cc:	4813      	ldr	r0, [pc, #76]	; (800151c <MX_GPIO_Init+0xfc>)
 80014ce:	f001 ffc7 	bl	8003460 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin;
 80014d2:	23e0      	movs	r3, #224	; 0xe0
 80014d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2302      	movs	r3, #2
 80014e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e2:	f107 0310 	add.w	r3, r7, #16
 80014e6:	4619      	mov	r1, r3
 80014e8:	480c      	ldr	r0, [pc, #48]	; (800151c <MX_GPIO_Init+0xfc>)
 80014ea:	f001 ffb9 	bl	8003460 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = task1_Pin|task2_Pin;
 80014ee:	2303      	movs	r3, #3
 80014f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f2:	2301      	movs	r3, #1
 80014f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2302      	movs	r3, #2
 80014fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fe:	f107 0310 	add.w	r3, r7, #16
 8001502:	4619      	mov	r1, r3
 8001504:	4806      	ldr	r0, [pc, #24]	; (8001520 <MX_GPIO_Init+0x100>)
 8001506:	f001 ffab 	bl	8003460 <HAL_GPIO_Init>

}
 800150a:	bf00      	nop
 800150c:	3720      	adds	r7, #32
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40021000 	.word	0x40021000
 8001518:	40011000 	.word	0x40011000
 800151c:	40010800 	.word	0x40010800
 8001520:	40010c00 	.word	0x40010c00

08001524 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <MX_I2C1_Init+0x50>)
 800152a:	4a13      	ldr	r2, [pc, #76]	; (8001578 <MX_I2C1_Init+0x54>)
 800152c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_I2C1_Init+0x50>)
 8001530:	4a12      	ldr	r2, [pc, #72]	; (800157c <MX_I2C1_Init+0x58>)
 8001532:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <MX_I2C1_Init+0x50>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <MX_I2C1_Init+0x50>)
 800153c:	2200      	movs	r2, #0
 800153e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <MX_I2C1_Init+0x50>)
 8001542:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001546:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001548:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <MX_I2C1_Init+0x50>)
 800154a:	2200      	movs	r2, #0
 800154c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MX_I2C1_Init+0x50>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001554:	4b07      	ldr	r3, [pc, #28]	; (8001574 <MX_I2C1_Init+0x50>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <MX_I2C1_Init+0x50>)
 800155c:	2200      	movs	r2, #0
 800155e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001560:	4804      	ldr	r0, [pc, #16]	; (8001574 <MX_I2C1_Init+0x50>)
 8001562:	f002 f949 	bl	80037f8 <HAL_I2C_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800156c:	f000 f8eb 	bl	8001746 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000448 	.word	0x20000448
 8001578:	40005400 	.word	0x40005400
 800157c:	000186a0 	.word	0x000186a0

08001580 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	; 0x28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a1d      	ldr	r2, [pc, #116]	; (8001610 <HAL_I2C_MspInit+0x90>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d132      	bne.n	8001606 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a0:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <HAL_I2C_MspInit+0x94>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a1b      	ldr	r2, [pc, #108]	; (8001614 <HAL_I2C_MspInit+0x94>)
 80015a6:	f043 0308 	orr.w	r3, r3, #8
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b19      	ldr	r3, [pc, #100]	; (8001614 <HAL_I2C_MspInit+0x94>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0308 	and.w	r3, r3, #8
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015be:	2312      	movs	r3, #18
 80015c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c2:	2303      	movs	r3, #3
 80015c4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	4812      	ldr	r0, [pc, #72]	; (8001618 <HAL_I2C_MspInit+0x98>)
 80015ce:	f001 ff47 	bl	8003460 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80015d2:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_I2C_MspInit+0x9c>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	f043 0302 	orr.w	r3, r3, #2
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
 80015e8:	4a0c      	ldr	r2, [pc, #48]	; (800161c <HAL_I2C_MspInit+0x9c>)
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <HAL_I2C_MspInit+0x94>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	4a08      	ldr	r2, [pc, #32]	; (8001614 <HAL_I2C_MspInit+0x94>)
 80015f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015f8:	61d3      	str	r3, [r2, #28]
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_I2C_MspInit+0x94>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001606:	bf00      	nop
 8001608:	3728      	adds	r7, #40	; 0x28
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40005400 	.word	0x40005400
 8001614:	40021000 	.word	0x40021000
 8001618:	40010c00 	.word	0x40010c00
 800161c:	40010000 	.word	0x40010000

08001620 <task1>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void task1(){
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(task1_GPIO_Port, task1_Pin);
 8001624:	2101      	movs	r1, #1
 8001626:	4802      	ldr	r0, [pc, #8]	; (8001630 <task1+0x10>)
 8001628:	f002 f8cd 	bl	80037c6 <HAL_GPIO_TogglePin>
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40010c00 	.word	0x40010c00

08001634 <task2>:


void task2(){
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(task2_GPIO_Port, task2_Pin);
 8001638:	2102      	movs	r1, #2
 800163a:	4802      	ldr	r0, [pc, #8]	; (8001644 <task2+0x10>)
 800163c:	f002 f8c3 	bl	80037c6 <HAL_GPIO_TogglePin>
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40010c00 	.word	0x40010c00

08001648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800164c:	f001 fac8 	bl	8002be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001650:	f000 f83e 	bl	80016d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001654:	f7ff fee4 	bl	8001420 <MX_GPIO_Init>
  MX_DMA_Init();
 8001658:	f7ff fc36 	bl	8000ec8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800165c:	f000 fed6 	bl	800240c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001660:	f000 fdcc 	bl	80021fc <MX_TIM2_Init>
  MX_I2C1_Init();
 8001664:	f7ff ff5e 	bl	8001524 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001668:	f000 fd10 	bl	800208c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800166c:	f000 ff22 	bl	80024b4 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001670:	f000 fef6 	bl	8002460 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  init_System();
 8001674:	f7ff fec0 	bl	80013f8 <init_System>
  InitESP();
 8001678:	f7ff fc44 	bl	8000f04 <InitESP>
  Connect_AdafruitServer();
 800167c:	f000 f898 	bl	80017b0 <Connect_AdafruitServer>
  SCH_Init();
 8001680:	f000 f9c4 	bl	8001a0c <SCH_Init>
  SCH_Add_Task(button_reading, 1, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2101      	movs	r1, #1
 8001688:	480c      	ldr	r0, [pc, #48]	; (80016bc <main+0x74>)
 800168a:	f000 f9d9 	bl	8001a40 <SCH_Add_Task>
  SCH_Add_Task(task1, 1, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2101      	movs	r1, #1
 8001692:	480b      	ldr	r0, [pc, #44]	; (80016c0 <main+0x78>)
 8001694:	f000 f9d4 	bl	8001a40 <SCH_Add_Task>
  SCH_Add_Task(task2, 1, 0);
 8001698:	2200      	movs	r2, #0
 800169a:	2101      	movs	r1, #1
 800169c:	4809      	ldr	r0, [pc, #36]	; (80016c4 <main+0x7c>)
 800169e:	f000 f9cf 	bl	8001a40 <SCH_Add_Task>
//  SCH_Add_Task(WeatherStation, 1, 0);
//  SCH_Add_Task(fsm_readSensor, 100, 0);
//  SCH_Add_Task(Uart_SendData, 300, 0);
  SCH_Add_Task(Publish_Task, 500, 10);
 80016a2:	220a      	movs	r2, #10
 80016a4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80016a8:	4807      	ldr	r0, [pc, #28]	; (80016c8 <main+0x80>)
 80016aa:	f000 f9c9 	bl	8001a40 <SCH_Add_Task>
  HAL_TIM_Base_Start_IT(&htim2);
 80016ae:	4807      	ldr	r0, [pc, #28]	; (80016cc <main+0x84>)
 80016b0:	f003 fe86 	bl	80053c0 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch_Task();
 80016b4:	f000 fb68 	bl	8001d88 <SCH_Dispatch_Task>
 80016b8:	e7fc      	b.n	80016b4 <main+0x6c>
 80016ba:	bf00      	nop
 80016bc:	08000d71 	.word	0x08000d71
 80016c0:	08001621 	.word	0x08001621
 80016c4:	08001635 	.word	0x08001635
 80016c8:	0800199d 	.word	0x0800199d
 80016cc:	2000054c 	.word	0x2000054c

080016d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b090      	sub	sp, #64	; 0x40
 80016d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d6:	f107 0318 	add.w	r3, r7, #24
 80016da:	2228      	movs	r2, #40	; 0x28
 80016dc:	2100      	movs	r1, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f006 fc69 	bl	8007fb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016f2:	2302      	movs	r3, #2
 80016f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f6:	2301      	movs	r3, #1
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016fa:	2310      	movs	r3, #16
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016fe:	2300      	movs	r3, #0
 8001700:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001702:	f107 0318 	add.w	r3, r7, #24
 8001706:	4618      	mov	r0, r3
 8001708:	f003 f9fa 	bl	8004b00 <HAL_RCC_OscConfig>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001712:	f000 f818 	bl	8001746 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001716:	230f      	movs	r3, #15
 8001718:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	2100      	movs	r1, #0
 800172e:	4618      	mov	r0, r3
 8001730:	f003 fc68 	bl	8005004 <HAL_RCC_ClockConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800173a:	f000 f804 	bl	8001746 <Error_Handler>
  }
}
 800173e:	bf00      	nop
 8001740:	3740      	adds	r7, #64	; 0x40
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800174a:	b672      	cpsid	i
}
 800174c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800174e:	e7fe      	b.n	800174e <Error_Handler+0x8>

08001750 <InitPhysics>:
const char* Server = "io.adafruit.com";
const uint16_t Port = 1883;

static unsigned char flagConnect =  false;

void InitPhysics(){
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af02      	add	r7, sp, #8
	led_t.tim = &htim1;
 8001756:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <InitPhysics+0x44>)
 8001758:	4a0f      	ldr	r2, [pc, #60]	; (8001798 <InitPhysics+0x48>)
 800175a:	605a      	str	r2, [r3, #4]
	CLCD_I2C_Init(&LCD_t, &hi2c1, 0x4e, 20, 4);
 800175c:	2304      	movs	r3, #4
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	2314      	movs	r3, #20
 8001762:	224e      	movs	r2, #78	; 0x4e
 8001764:	490d      	ldr	r1, [pc, #52]	; (800179c <InitPhysics+0x4c>)
 8001766:	480e      	ldr	r0, [pc, #56]	; (80017a0 <InitPhysics+0x50>)
 8001768:	f001 f98e 	bl	8002a88 <CLCD_I2C_Init>
	init_ledRGB(&htim1);
 800176c:	480a      	ldr	r0, [pc, #40]	; (8001798 <InitPhysics+0x48>)
 800176e:	f001 fa12 	bl	8002b96 <init_ledRGB>
	init_button();
 8001772:	f7ff fad5 	bl	8000d20 <init_button>
	BMP180_Init(&hi2c1, &BMP180_t);
 8001776:	490b      	ldr	r1, [pc, #44]	; (80017a4 <InitPhysics+0x54>)
 8001778:	4808      	ldr	r0, [pc, #32]	; (800179c <InitPhysics+0x4c>)
 800177a:	f001 f80d 	bl	8002798 <BMP180_Init>
	BH1750_Init(&hi2c1, &BH1750_t);
 800177e:	490a      	ldr	r1, [pc, #40]	; (80017a8 <InitPhysics+0x58>)
 8001780:	4806      	ldr	r0, [pc, #24]	; (800179c <InitPhysics+0x4c>)
 8001782:	f000 ffee 	bl	8002762 <BH1750_Init>
	DHT20_Init(&hi2c1, &DHT20_t);
 8001786:	4909      	ldr	r1, [pc, #36]	; (80017ac <InitPhysics+0x5c>)
 8001788:	4804      	ldr	r0, [pc, #16]	; (800179c <InitPhysics+0x4c>)
 800178a:	f001 f9ed 	bl	8002b68 <DHT20_Init>
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	200004a8 	.word	0x200004a8
 8001798:	20000504 	.word	0x20000504
 800179c:	20000448 	.word	0x20000448
 80017a0:	2000049c 	.word	0x2000049c
 80017a4:	200004b0 	.word	0x200004b0
 80017a8:	200004c0 	.word	0x200004c0
 80017ac:	200004cc 	.word	0x200004cc

080017b0 <Connect_AdafruitServer>:
}


// AT API

void Connect_AdafruitServer(void){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af02      	add	r7, sp, #8
//	turnOnBlue();

	while(!ESP_Init(&hEsp)){
 80017b6:	e006      	b.n	80017c6 <Connect_AdafruitServer+0x16>
//		turnOnRed();
		HAL_Delay(1000);
 80017b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017bc:	f001 fa72 	bl	8002ca4 <HAL_Delay>
		ESP_Init(&hEsp);
 80017c0:	4838      	ldr	r0, [pc, #224]	; (80018a4 <Connect_AdafruitServer+0xf4>)
 80017c2:	f7ff fbab 	bl	8000f1c <ESP_Init>
	while(!ESP_Init(&hEsp)){
 80017c6:	4837      	ldr	r0, [pc, #220]	; (80018a4 <Connect_AdafruitServer+0xf4>)
 80017c8:	f7ff fba8 	bl	8000f1c <ESP_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f083 0301 	eor.w	r3, r3, #1
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1ef      	bne.n	80017b8 <Connect_AdafruitServer+0x8>
	}

//	turnOnBlue();

	ESP_WifiInit(&hEsp);
 80017d8:	4832      	ldr	r0, [pc, #200]	; (80018a4 <Connect_AdafruitServer+0xf4>)
 80017da:	f7ff fbcd 	bl	8000f78 <ESP_WifiInit>
	ESP_WifiMode(&hEsp, ESP_WIFIMODE_STATION, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2101      	movs	r1, #1
 80017e2:	4830      	ldr	r0, [pc, #192]	; (80018a4 <Connect_AdafruitServer+0xf4>)
 80017e4:	f7ff fc6e 	bl	80010c4 <ESP_WifiMode>
	while(!ESP_WifiStationConnect(&hEsp, pSSID, PassWord, NULL, 10000)){
 80017e8:	e00e      	b.n	8001808 <Connect_AdafruitServer+0x58>
//		turnOnRed();
		HAL_Delay(1000);
 80017ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017ee:	f001 fa59 	bl	8002ca4 <HAL_Delay>
		ESP_WifiStationConnect(&hEsp, pSSID, PassWord, NULL, 10000);
 80017f2:	4b2d      	ldr	r3, [pc, #180]	; (80018a8 <Connect_AdafruitServer+0xf8>)
 80017f4:	6819      	ldr	r1, [r3, #0]
 80017f6:	4b2d      	ldr	r3, [pc, #180]	; (80018ac <Connect_AdafruitServer+0xfc>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	f242 7310 	movw	r3, #10000	; 0x2710
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	2300      	movs	r3, #0
 8001802:	4828      	ldr	r0, [pc, #160]	; (80018a4 <Connect_AdafruitServer+0xf4>)
 8001804:	f7ff fbe6 	bl	8000fd4 <ESP_WifiStationConnect>
	while(!ESP_WifiStationConnect(&hEsp, pSSID, PassWord, NULL, 10000)){
 8001808:	4b27      	ldr	r3, [pc, #156]	; (80018a8 <Connect_AdafruitServer+0xf8>)
 800180a:	6819      	ldr	r1, [r3, #0]
 800180c:	4b27      	ldr	r3, [pc, #156]	; (80018ac <Connect_AdafruitServer+0xfc>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	f242 7310 	movw	r3, #10000	; 0x2710
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2300      	movs	r3, #0
 8001818:	4822      	ldr	r0, [pc, #136]	; (80018a4 <Connect_AdafruitServer+0xf4>)
 800181a:	f7ff fbdb 	bl	8000fd4 <ESP_WifiStationConnect>
 800181e:	4603      	mov	r3, r0
 8001820:	f083 0301 	eor.w	r3, r3, #1
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1df      	bne.n	80017ea <Connect_AdafruitServer+0x3a>
	}

//	turnOnBlue();

	while(!ESP_MQTTConfig(&hEsp, UserID, Key)){
 800182a:	e00b      	b.n	8001844 <Connect_AdafruitServer+0x94>
//		turnOnRed();
		HAL_Delay(3000);
 800182c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001830:	f001 fa38 	bl	8002ca4 <HAL_Delay>
		ESP_MQTTConfig(&hEsp, UserID, Key);
 8001834:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <Connect_AdafruitServer+0x100>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a1e      	ldr	r2, [pc, #120]	; (80018b4 <Connect_AdafruitServer+0x104>)
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	4619      	mov	r1, r3
 800183e:	4819      	ldr	r0, [pc, #100]	; (80018a4 <Connect_AdafruitServer+0xf4>)
 8001840:	f7ff fca4 	bl	800118c <ESP_MQTTConfig>
	while(!ESP_MQTTConfig(&hEsp, UserID, Key)){
 8001844:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <Connect_AdafruitServer+0x100>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a1a      	ldr	r2, [pc, #104]	; (80018b4 <Connect_AdafruitServer+0x104>)
 800184a:	6812      	ldr	r2, [r2, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	4815      	ldr	r0, [pc, #84]	; (80018a4 <Connect_AdafruitServer+0xf4>)
 8001850:	f7ff fc9c 	bl	800118c <ESP_MQTTConfig>
 8001854:	4603      	mov	r3, r0
 8001856:	f083 0301 	eor.w	r3, r3, #1
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1e5      	bne.n	800182c <Connect_AdafruitServer+0x7c>
	}

//	turnOnBlue();

	while(!ESP_MQTTConnect(&hEsp, Server, Port)){
 8001860:	e00b      	b.n	800187a <Connect_AdafruitServer+0xca>
//		turnOnRed();
		HAL_Delay(5000);
 8001862:	f241 3088 	movw	r0, #5000	; 0x1388
 8001866:	f001 fa1d 	bl	8002ca4 <HAL_Delay>
		ESP_MQTTConnect(&hEsp, Server, Port);
 800186a:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <Connect_AdafruitServer+0x108>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f240 725b 	movw	r2, #1883	; 0x75b
 8001872:	4619      	mov	r1, r3
 8001874:	480b      	ldr	r0, [pc, #44]	; (80018a4 <Connect_AdafruitServer+0xf4>)
 8001876:	f7ff fce7 	bl	8001248 <ESP_MQTTConnect>
	while(!ESP_MQTTConnect(&hEsp, Server, Port)){
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <Connect_AdafruitServer+0x108>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f240 725b 	movw	r2, #1883	; 0x75b
 8001882:	4619      	mov	r1, r3
 8001884:	4807      	ldr	r0, [pc, #28]	; (80018a4 <Connect_AdafruitServer+0xf4>)
 8001886:	f7ff fcdf 	bl	8001248 <ESP_MQTTConnect>
 800188a:	4603      	mov	r3, r0
 800188c:	f083 0301 	eor.w	r3, r3, #1
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1e5      	bne.n	8001862 <Connect_AdafruitServer+0xb2>
	}

	flagConnect = true;
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <Connect_AdafruitServer+0x10c>)
 8001898:	2201      	movs	r2, #1
 800189a:	701a      	strb	r2, [r3, #0]

//	turnOnGreen();

}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000234 	.word	0x20000234
 80018a8:	20000018 	.word	0x20000018
 80018ac:	2000001c 	.word	0x2000001c
 80018b0:	20000020 	.word	0x20000020
 80018b4:	20000024 	.word	0x20000024
 80018b8:	20000028 	.word	0x20000028
 80018bc:	200004fa 	.word	0x200004fa

080018c0 <Publish_Humidity_Task>:
		sprintf(TemperatureStr, "%0.1f", DHT20_t.Temperature);
		ESP_MQTTPublish(&hEsp, TemperatureFeed, TemperatureStr);
	}
}

void Publish_Humidity_Task(void){
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	if(flagConnect){
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <Publish_Humidity_Task+0x34>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d011      	beq.n	80018f0 <Publish_Humidity_Task+0x30>
		sprintf(HumidityStr, "%0.1f", DHT20_t.Humidity);
 80018cc:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <Publish_Humidity_Task+0x38>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fda9 	bl	8000428 <__aeabi_f2d>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4908      	ldr	r1, [pc, #32]	; (80018fc <Publish_Humidity_Task+0x3c>)
 80018dc:	4808      	ldr	r0, [pc, #32]	; (8001900 <Publish_Humidity_Task+0x40>)
 80018de:	f006 fb07 	bl	8007ef0 <siprintf>
		ESP_MQTTPublish(&hEsp, HumidityFeed, HumidityStr);
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <Publish_Humidity_Task+0x44>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a06      	ldr	r2, [pc, #24]	; (8001900 <Publish_Humidity_Task+0x40>)
 80018e8:	4619      	mov	r1, r3
 80018ea:	4807      	ldr	r0, [pc, #28]	; (8001908 <Publish_Humidity_Task+0x48>)
 80018ec:	f7ff fd0a 	bl	8001304 <ESP_MQTTPublish>
	}


}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	200004fa 	.word	0x200004fa
 80018f8:	200004cc 	.word	0x200004cc
 80018fc:	0800a428 	.word	0x0800a428
 8001900:	200004e4 	.word	0x200004e4
 8001904:	20000014 	.word	0x20000014
 8001908:	20000234 	.word	0x20000234

0800190c <Publish_LightIntensity_Task>:

void Publish_LightIntensity_Task(void){
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	if(flagConnect){
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <Publish_LightIntensity_Task+0x2c>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d00d      	beq.n	8001934 <Publish_LightIntensity_Task+0x28>
		sprintf(LightIntensityStr, "%d", BH1750_t.Value);
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <Publish_LightIntensity_Task+0x30>)
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	461a      	mov	r2, r3
 800191e:	4908      	ldr	r1, [pc, #32]	; (8001940 <Publish_LightIntensity_Task+0x34>)
 8001920:	4808      	ldr	r0, [pc, #32]	; (8001944 <Publish_LightIntensity_Task+0x38>)
 8001922:	f006 fae5 	bl	8007ef0 <siprintf>
		ESP_MQTTPublish(&hEsp, LightIntensityFeed, LightIntensityStr);
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <Publish_LightIntensity_Task+0x3c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a06      	ldr	r2, [pc, #24]	; (8001944 <Publish_LightIntensity_Task+0x38>)
 800192c:	4619      	mov	r1, r3
 800192e:	4807      	ldr	r0, [pc, #28]	; (800194c <Publish_LightIntensity_Task+0x40>)
 8001930:	f7ff fce8 	bl	8001304 <ESP_MQTTPublish>
	}

}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}
 8001938:	200004fa 	.word	0x200004fa
 800193c:	200004c0 	.word	0x200004c0
 8001940:	0800a430 	.word	0x0800a430
 8001944:	200004d8 	.word	0x200004d8
 8001948:	2000000c 	.word	0x2000000c
 800194c:	20000234 	.word	0x20000234

08001950 <Publish_AirPressure_Task>:

void Publish_AirPressure_Task(void){
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
	if(flagConnect){
 8001954:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <Publish_AirPressure_Task+0x34>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d011      	beq.n	8001980 <Publish_AirPressure_Task+0x30>
		sprintf(AirPressureStr, "%0.1f", BMP180_t.Pressure);
 800195c:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <Publish_AirPressure_Task+0x38>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fd61 	bl	8000428 <__aeabi_f2d>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4908      	ldr	r1, [pc, #32]	; (800198c <Publish_AirPressure_Task+0x3c>)
 800196c:	4808      	ldr	r0, [pc, #32]	; (8001990 <Publish_AirPressure_Task+0x40>)
 800196e:	f006 fabf 	bl	8007ef0 <siprintf>
		ESP_MQTTPublish(&hEsp, AirPressureFeed, AirPressureStr);
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <Publish_AirPressure_Task+0x44>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a06      	ldr	r2, [pc, #24]	; (8001990 <Publish_AirPressure_Task+0x40>)
 8001978:	4619      	mov	r1, r3
 800197a:	4807      	ldr	r0, [pc, #28]	; (8001998 <Publish_AirPressure_Task+0x48>)
 800197c:	f7ff fcc2 	bl	8001304 <ESP_MQTTPublish>
	}
}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	200004fa 	.word	0x200004fa
 8001988:	200004b0 	.word	0x200004b0
 800198c:	0800a428 	.word	0x0800a428
 8001990:	200004f0 	.word	0x200004f0
 8001994:	20000010 	.word	0x20000010
 8001998:	20000234 	.word	0x20000234

0800199c <Publish_Task>:

void Publish_Task(void){
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
	Publish_AirPressure_Task();
 80019a0:	f7ff ffd6 	bl	8001950 <Publish_AirPressure_Task>
//	Publish_Humidity_Task();
//	Publish_AirPressure_Task();
//	Publish_LightIntensity_Task();

	SCH_Add_Task(Publish_Humidity_Task, 0, 5);
 80019a4:	2205      	movs	r2, #5
 80019a6:	2100      	movs	r1, #0
 80019a8:	4807      	ldr	r0, [pc, #28]	; (80019c8 <Publish_Task+0x2c>)
 80019aa:	f000 f849 	bl	8001a40 <SCH_Add_Task>
	SCH_Add_Task(Publish_AirPressure_Task, 0, 10);
 80019ae:	220a      	movs	r2, #10
 80019b0:	2100      	movs	r1, #0
 80019b2:	4806      	ldr	r0, [pc, #24]	; (80019cc <Publish_Task+0x30>)
 80019b4:	f000 f844 	bl	8001a40 <SCH_Add_Task>
	SCH_Add_Task(Publish_LightIntensity_Task, 0, 15);
 80019b8:	220f      	movs	r2, #15
 80019ba:	2100      	movs	r1, #0
 80019bc:	4804      	ldr	r0, [pc, #16]	; (80019d0 <Publish_Task+0x34>)
 80019be:	f000 f83f 	bl	8001a40 <SCH_Add_Task>
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	080018c1 	.word	0x080018c1
 80019cc:	08001951 	.word	0x08001951
 80019d0:	0800190d 	.word	0x0800190d

080019d4 <addNode>:

#include "scheduler_O(1).h"

Container* container = NULL;

S_Task* addNode(void(*pFunction)(), int delay, int period){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
	S_Task* newNode = (struct S_Task*)malloc(sizeof(struct S_Task));
 80019e0:	2010      	movs	r0, #16
 80019e2:	f005 fc7d 	bl	80072e0 <malloc>
 80019e6:	4603      	mov	r3, r0
 80019e8:	617b      	str	r3, [r7, #20]
	newNode->Delay = delay;
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	601a      	str	r2, [r3, #0]
	newNode->Period = period;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	605a      	str	r2, [r3, #4]
	newNode->pTask = pFunction;
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	609a      	str	r2, [r3, #8]
	newNode->next = NULL;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	2200      	movs	r2, #0
 8001a00:	60da      	str	r2, [r3, #12]
	return newNode;
 8001a02:	697b      	ldr	r3, [r7, #20]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <SCH_Init>:

void SCH_Init(void){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
	container = (struct Container*)malloc(sizeof(struct Container));
 8001a10:	2008      	movs	r0, #8
 8001a12:	f005 fc65 	bl	80072e0 <malloc>
 8001a16:	4603      	mov	r3, r0
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <SCH_Init+0x30>)
 8001a1c:	601a      	str	r2, [r3, #0]
	container->tail = NULL;
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <SCH_Init+0x30>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2200      	movs	r2, #0
 8001a24:	605a      	str	r2, [r3, #4]
	container->numTask = 0;
 8001a26:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <SCH_Init+0x30>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	705a      	strb	r2, [r3, #1]
	container->emptySlot = 0;
 8001a2e:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <SCH_Init+0x30>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200004fc 	.word	0x200004fc

08001a40 <SCH_Add_Task>:

void SCH_Add_Task(void(*pFunction)(), int PERIOD, int DELAY){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08a      	sub	sp, #40	; 0x28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
    S_Task* newNode;

    if(container->tail == NULL){
 8001a4c:	4b80      	ldr	r3, [pc, #512]	; (8001c50 <SCH_Add_Task+0x210>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d115      	bne.n	8001a82 <SCH_Add_Task+0x42>
        // add first node
        newNode = addNode(pFunction, DELAY, PERIOD);
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f7ff ffba 	bl	80019d4 <addNode>
 8001a60:	6178      	str	r0, [r7, #20]
        container->tail = newNode;
 8001a62:	4b7b      	ldr	r3, [pc, #492]	; (8001c50 <SCH_Add_Task+0x210>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	605a      	str	r2, [r3, #4]
        container->tail->next =  newNode;
 8001a6a:	4b79      	ldr	r3, [pc, #484]	; (8001c50 <SCH_Add_Task+0x210>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	60da      	str	r2, [r3, #12]
        container->numTask++;
 8001a74:	4b76      	ldr	r3, [pc, #472]	; (8001c50 <SCH_Add_Task+0x210>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	785a      	ldrb	r2, [r3, #1]
 8001a7a:	3201      	adds	r2, #1
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	705a      	strb	r2, [r3, #1]
 8001a80:	e134      	b.n	8001cec <SCH_Add_Task+0x2ac>
    }
    else{
        S_Task* prevTail = container->tail->next;
 8001a82:	4b73      	ldr	r3, [pc, #460]	; (8001c50 <SCH_Add_Task+0x210>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
        S_Task* temp = container->tail->next;
 8001a8c:	4b70      	ldr	r3, [pc, #448]	; (8001c50 <SCH_Add_Task+0x210>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	623b      	str	r3, [r7, #32]
        int Total = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
        for(int i = 0; i < container->numTask; i++){
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
 8001a9e:	e11d      	b.n	8001cdc <SCH_Add_Task+0x29c>
            Total += temp->Delay;
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	69fa      	ldr	r2, [r7, #28]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	61fb      	str	r3, [r7, #28]
            if((Total + temp->next->Delay > DELAY) && temp != container->tail){
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	f280 80b4 	bge.w	8001c24 <SCH_Add_Task+0x1e4>
 8001abc:	4b64      	ldr	r3, [pc, #400]	; (8001c50 <SCH_Add_Task+0x210>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	6a3a      	ldr	r2, [r7, #32]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	f000 80ad 	beq.w	8001c24 <SCH_Add_Task+0x1e4>
                // add head
                if(Total > DELAY){
 8001aca:	69fa      	ldr	r2, [r7, #28]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	dd4a      	ble.n	8001b68 <SCH_Add_Task+0x128>
                    if(container->emptySlot == 0){
 8001ad2:	4b5f      	ldr	r3, [pc, #380]	; (8001c50 <SCH_Add_Task+0x210>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d11a      	bne.n	8001b12 <SCH_Add_Task+0xd2>
                        newNode = addNode(pFunction, DELAY, PERIOD);
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	68f8      	ldr	r0, [r7, #12]
 8001ae2:	f7ff ff77 	bl	80019d4 <addNode>
 8001ae6:	6178      	str	r0, [r7, #20]
                        // update next node DELAY
                        temp->Delay -= DELAY;
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	1ad2      	subs	r2, r2, r3
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	601a      	str	r2, [r3, #0]
                        // update newNode position
                        newNode->next = temp;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	6a3a      	ldr	r2, [r7, #32]
 8001af8:	60da      	str	r2, [r3, #12]
                        container->tail->next = newNode;
 8001afa:	4b55      	ldr	r3, [pc, #340]	; (8001c50 <SCH_Add_Task+0x210>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	60da      	str	r2, [r3, #12]
                        //update numTask
                        container->numTask++;
 8001b04:	4b52      	ldr	r3, [pc, #328]	; (8001c50 <SCH_Add_Task+0x210>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	785a      	ldrb	r2, [r3, #1]
 8001b0a:	3201      	adds	r2, #1
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	705a      	strb	r2, [r3, #1]
                        return;
 8001b10:	e0ec      	b.n	8001cec <SCH_Add_Task+0x2ac>
                    }
                    else{
                        // update new head
                        container->tail->Delay = DELAY;
 8001b12:	4b4f      	ldr	r3, [pc, #316]	; (8001c50 <SCH_Add_Task+0x210>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	601a      	str	r2, [r3, #0]
                        container->tail->Period = PERIOD;
 8001b1c:	4b4c      	ldr	r3, [pc, #304]	; (8001c50 <SCH_Add_Task+0x210>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	605a      	str	r2, [r3, #4]
                        container->tail->pTask = pFunction;
 8001b26:	4b4a      	ldr	r3, [pc, #296]	; (8001c50 <SCH_Add_Task+0x210>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	609a      	str	r2, [r3, #8]
                        //update next to node DELAY
                        temp->Delay -= DELAY;
 8001b30:	6a3b      	ldr	r3, [r7, #32]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	1ad2      	subs	r2, r2, r3
 8001b38:	6a3b      	ldr	r3, [r7, #32]
 8001b3a:	601a      	str	r2, [r3, #0]
                        // update tail
                        while(prevTail->next != container->tail){
 8001b3c:	e002      	b.n	8001b44 <SCH_Add_Task+0x104>
                            prevTail = prevTail->next;
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
                        while(prevTail->next != container->tail){
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	68da      	ldr	r2, [r3, #12]
 8001b48:	4b41      	ldr	r3, [pc, #260]	; (8001c50 <SCH_Add_Task+0x210>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d1f5      	bne.n	8001b3e <SCH_Add_Task+0xfe>
                        }
                        container->tail = prevTail;
 8001b52:	4b3f      	ldr	r3, [pc, #252]	; (8001c50 <SCH_Add_Task+0x210>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b58:	605a      	str	r2, [r3, #4]
                        // update emptySlot
                        container->emptySlot--;
 8001b5a:	4b3d      	ldr	r3, [pc, #244]	; (8001c50 <SCH_Add_Task+0x210>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	781a      	ldrb	r2, [r3, #0]
 8001b60:	3a01      	subs	r2, #1
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	701a      	strb	r2, [r3, #0]
                        return;
 8001b66:	e0c1      	b.n	8001cec <SCH_Add_Task+0x2ac>
                    }
                }
                // add middle
                if(container->emptySlot == 0){
 8001b68:	4b39      	ldr	r3, [pc, #228]	; (8001c50 <SCH_Add_Task+0x210>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d11f      	bne.n	8001bb2 <SCH_Add_Task+0x172>
                    // update newNode DELAY
                    newNode = addNode(pFunction, DELAY - Total, PERIOD);
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	68ba      	ldr	r2, [r7, #8]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f7ff ff29 	bl	80019d4 <addNode>
 8001b82:	6178      	str	r0, [r7, #20]
                    // update position
                    newNode->next = temp->next;
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	68da      	ldr	r2, [r3, #12]
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	60da      	str	r2, [r3, #12]
                    temp->next = newNode;
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	60da      	str	r2, [r3, #12]
                    // update next to DELAY
                    newNode->next->Delay -=  newNode->Delay;
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	6819      	ldr	r1, [r3, #0]
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	1a8a      	subs	r2, r1, r2
 8001ba2:	601a      	str	r2, [r3, #0]

                    container->numTask++;
 8001ba4:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <SCH_Add_Task+0x210>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	785a      	ldrb	r2, [r3, #1]
 8001baa:	3201      	adds	r2, #1
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	705a      	strb	r2, [r3, #1]
                    return;
 8001bb0:	e09c      	b.n	8001cec <SCH_Add_Task+0x2ac>
                }
                else{
                    // update newNode DELAY
                    newNode = container->tail;
 8001bb2:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <SCH_Add_Task+0x210>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	617b      	str	r3, [r7, #20]
                    newNode->Delay = DELAY - Total;
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	1ad2      	subs	r2, r2, r3
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	601a      	str	r2, [r3, #0]
                    newNode->Period = PERIOD;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	605a      	str	r2, [r3, #4]
                    newNode->pTask = pFunction;
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	609a      	str	r2, [r3, #8]
                    // update new tail
                    while(prevTail->next != container->tail){
 8001bd0:	e002      	b.n	8001bd8 <SCH_Add_Task+0x198>
                        prevTail = prevTail->next;
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
                    while(prevTail->next != container->tail){
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <SCH_Add_Task+0x210>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d1f5      	bne.n	8001bd2 <SCH_Add_Task+0x192>
                    }
                    prevTail->next = newNode->next;
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	68da      	ldr	r2, [r3, #12]
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	60da      	str	r2, [r3, #12]
                    container->tail = prevTail;
 8001bee:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <SCH_Add_Task+0x210>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf4:	605a      	str	r2, [r3, #4]
                    // update new node position
                    newNode->next = temp->next;
 8001bf6:	6a3b      	ldr	r3, [r7, #32]
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	60da      	str	r2, [r3, #12]
                    temp->next = newNode;
 8001bfe:	6a3b      	ldr	r3, [r7, #32]
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	60da      	str	r2, [r3, #12]
                    // update next to DELAY
                    newNode->next->Delay -= newNode->Delay;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	6819      	ldr	r1, [r3, #0]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	1a8a      	subs	r2, r1, r2
 8001c14:	601a      	str	r2, [r3, #0]

                    container->emptySlot--;
 8001c16:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <SCH_Add_Task+0x210>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	781a      	ldrb	r2, [r3, #0]
 8001c1c:	3a01      	subs	r2, #1
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	701a      	strb	r2, [r3, #0]
                    return;
 8001c22:	e063      	b.n	8001cec <SCH_Add_Task+0x2ac>
                }
            }

            // add tail
            if(temp->pTask == NULL){
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d113      	bne.n	8001c54 <SCH_Add_Task+0x214>
                temp->Delay = DELAY - Total;
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	1ad2      	subs	r2, r2, r3
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	601a      	str	r2, [r3, #0]
                temp->Period = PERIOD;
 8001c36:	6a3b      	ldr	r3, [r7, #32]
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	605a      	str	r2, [r3, #4]
                temp->pTask = pFunction;
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	609a      	str	r2, [r3, #8]
                // update empty slot
                container->emptySlot--;
 8001c42:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <SCH_Add_Task+0x210>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	781a      	ldrb	r2, [r3, #0]
 8001c48:	3a01      	subs	r2, #1
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	701a      	strb	r2, [r3, #0]
                return;
 8001c4e:	e04d      	b.n	8001cec <SCH_Add_Task+0x2ac>
 8001c50:	200004fc 	.word	0x200004fc
            }
            if(temp == container->tail){
 8001c54:	4b27      	ldr	r3, [pc, #156]	; (8001cf4 <SCH_Add_Task+0x2b4>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	6a3a      	ldr	r2, [r7, #32]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d137      	bne.n	8001cd0 <SCH_Add_Task+0x290>
                if(container->emptySlot == 0){
 8001c60:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <SCH_Add_Task+0x2b4>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d11a      	bne.n	8001ca0 <SCH_Add_Task+0x260>
                    // printf("%d\n", DELAY);
                    // printf("%d\n", Total);
                    // update DELAY
                    newNode = addNode(pFunction, DELAY - Total, PERIOD);
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	4619      	mov	r1, r3
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f7ff fead 	bl	80019d4 <addNode>
 8001c7a:	6178      	str	r0, [r7, #20]
                    // update position
                    newNode->next = temp->next;
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	60da      	str	r2, [r3, #12]
                    temp->next = newNode;
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	60da      	str	r2, [r3, #12]
                    container->tail = newNode;
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <SCH_Add_Task+0x2b4>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	605a      	str	r2, [r3, #4]
                    // update num Task
                    container->numTask++;
 8001c92:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <SCH_Add_Task+0x2b4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	785a      	ldrb	r2, [r3, #1]
 8001c98:	3201      	adds	r2, #1
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	705a      	strb	r2, [r3, #1]
                    return;
 8001c9e:	e025      	b.n	8001cec <SCH_Add_Task+0x2ac>
                }
                else{ // error here
                    container->tail->Delay = DELAY - Total;
 8001ca0:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <SCH_Add_Task+0x2b4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	69fa      	ldr	r2, [r7, #28]
 8001caa:	1a8a      	subs	r2, r1, r2
 8001cac:	601a      	str	r2, [r3, #0]
                    container->tail->Period = PERIOD;
 8001cae:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <SCH_Add_Task+0x2b4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	605a      	str	r2, [r3, #4]
                    container->tail->pTask = pFunction;
 8001cb8:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <SCH_Add_Task+0x2b4>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	609a      	str	r2, [r3, #8]
                    // update empty slot
                    container->emptySlot--;
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <SCH_Add_Task+0x2b4>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	781a      	ldrb	r2, [r3, #0]
 8001cc8:	3a01      	subs	r2, #1
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	701a      	strb	r2, [r3, #0]
                    return;
 8001cce:	e00d      	b.n	8001cec <SCH_Add_Task+0x2ac>
                }
            }
            temp = temp->next;
 8001cd0:	6a3b      	ldr	r3, [r7, #32]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	623b      	str	r3, [r7, #32]
        for(int i = 0; i < container->numTask; i++){
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	61bb      	str	r3, [r7, #24]
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <SCH_Add_Task+0x2b4>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	785b      	ldrb	r3, [r3, #1]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	f6ff aeda 	blt.w	8001aa0 <SCH_Add_Task+0x60>
        }
    }
}
 8001cec:	3728      	adds	r7, #40	; 0x28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	200004fc 	.word	0x200004fc

08001cf8 <SCH_Delete_Task>:

void SCH_Delete_Task(void){
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
	container->tail->next->Delay = 0;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <SCH_Delete_Task+0x4c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
	container->tail->next->Period = 0;
 8001d08:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <SCH_Delete_Task+0x4c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	605a      	str	r2, [r3, #4]
	container->tail->next->pTask = NULL;
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <SCH_Delete_Task+0x4c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	609a      	str	r2, [r3, #8]
	container->tail = container->tail->next;
 8001d20:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <SCH_Delete_Task+0x4c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <SCH_Delete_Task+0x4c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68d2      	ldr	r2, [r2, #12]
 8001d2c:	605a      	str	r2, [r3, #4]
	container->emptySlot++;
 8001d2e:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <SCH_Delete_Task+0x4c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	781a      	ldrb	r2, [r3, #0]
 8001d34:	3201      	adds	r2, #1
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	701a      	strb	r2, [r3, #0]
}
 8001d3a:	bf00      	nop
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	200004fc 	.word	0x200004fc

08001d48 <SCH_Update_Task>:

void SCH_Update_Task(void){
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
	if(container != NULL && container->tail != NULL){
 8001d4c:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <SCH_Update_Task+0x3c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d012      	beq.n	8001d7a <SCH_Update_Task+0x32>
 8001d54:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <SCH_Update_Task+0x3c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00d      	beq.n	8001d7a <SCH_Update_Task+0x32>
		if(container->tail->next->Delay > 0){
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <SCH_Update_Task+0x3c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	dd06      	ble.n	8001d7a <SCH_Update_Task+0x32>
			container->tail->next->Delay--;
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <SCH_Update_Task+0x3c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	3a01      	subs	r2, #1
 8001d78:	601a      	str	r2, [r3, #0]
		}
	}

}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	200004fc 	.word	0x200004fc

08001d88 <SCH_Dispatch_Task>:

void SCH_Dispatch_Task(void){
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
	if(container->tail->next->Delay == 0){
 8001d8e:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <SCH_Dispatch_Task+0x50>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d118      	bne.n	8001dce <SCH_Dispatch_Task+0x46>
		(*(container -> tail -> next -> pTask))();
 8001d9c:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <SCH_Dispatch_Task+0x50>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	4798      	blx	r3
		struct S_Task temp = *(container -> tail -> next);
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <SCH_Dispatch_Task+0x50>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	463c      	mov	r4, r7
 8001db2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001db4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		SCH_Delete_Task();
 8001db8:	f7ff ff9e 	bl	8001cf8 <SCH_Delete_Task>
		if(temp.Period != 0){
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d005      	beq.n	8001dce <SCH_Dispatch_Task+0x46>
			SCH_Add_Task(temp.pTask, temp.Period, temp.Period);
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff fe39 	bl	8001a40 <SCH_Add_Task>
		}
	}

//	SCH_Go_To_Sleep();
}
 8001dce:	bf00      	nop
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd90      	pop	{r4, r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	200004fc 	.word	0x200004fc

08001ddc <HAL_TIM_PeriodElapsedCallback>:
	}
}



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dec:	d101      	bne.n	8001df2 <HAL_TIM_PeriodElapsedCallback+0x16>
		SCH_Update_Task();
 8001dee:	f7ff ffab 	bl	8001d48 <SCH_Update_Task>
	}
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <HAL_MspInit+0x5c>)
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	4a14      	ldr	r2, [pc, #80]	; (8001e58 <HAL_MspInit+0x5c>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6193      	str	r3, [r2, #24]
 8001e0e:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_MspInit+0x5c>)
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1a:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <HAL_MspInit+0x5c>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	4a0e      	ldr	r2, [pc, #56]	; (8001e58 <HAL_MspInit+0x5c>)
 8001e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e24:	61d3      	str	r3, [r2, #28]
 8001e26:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <HAL_MspInit+0x5c>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2e:	607b      	str	r3, [r7, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_MspInit+0x60>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <HAL_MspInit+0x60>)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40010000 	.word	0x40010000

08001e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e64:	e7fe      	b.n	8001e64 <NMI_Handler+0x4>

08001e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6a:	e7fe      	b.n	8001e6a <HardFault_Handler+0x4>

08001e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <MemManage_Handler+0x4>

08001e72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e76:	e7fe      	b.n	8001e76 <BusFault_Handler+0x4>

08001e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <UsageFault_Handler+0x4>

08001e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr

08001e8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr

08001e96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr

08001ea2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea6:	f000 fee1 	bl	8002c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <DMA1_Channel2_IRQHandler+0x10>)
 8001eb6:	f001 f995 	bl	80031e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000a74 	.word	0x20000a74

08001ec4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ec8:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <TIM2_IRQHandler+0x10>)
 8001eca:	f003 fbc5 	bl	8005658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	2000054c 	.word	0x2000054c

08001ed8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001edc:	4802      	ldr	r0, [pc, #8]	; (8001ee8 <USART1_IRQHandler+0x10>)
 8001ede:	f004 fba3 	bl	8006628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2000099c 	.word	0x2000099c

08001eec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ef0:	4802      	ldr	r0, [pc, #8]	; (8001efc <USART3_IRQHandler+0x10>)
 8001ef2:	f004 fb99 	bl	8006628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000a2c 	.word	0x20000a2c

08001f00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  return 1;
 8001f04:	2301      	movs	r3, #1
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr

08001f0e <_kill>:

int _kill(int pid, int sig)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f18:	f006 f8c6 	bl	80080a8 <__errno>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2216      	movs	r2, #22
 8001f20:	601a      	str	r2, [r3, #0]
  return -1;
 8001f22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <_exit>:

void _exit (int status)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f36:	f04f 31ff 	mov.w	r1, #4294967295
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff ffe7 	bl	8001f0e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f40:	e7fe      	b.n	8001f40 <_exit+0x12>

08001f42 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b086      	sub	sp, #24
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	e00a      	b.n	8001f6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f54:	f3af 8000 	nop.w
 8001f58:	4601      	mov	r1, r0
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	60ba      	str	r2, [r7, #8]
 8001f60:	b2ca      	uxtb	r2, r1
 8001f62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	3301      	adds	r3, #1
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	dbf0      	blt.n	8001f54 <_read+0x12>
  }

  return len;
 8001f72:	687b      	ldr	r3, [r7, #4]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	e009      	b.n	8001fa2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	1c5a      	adds	r2, r3, #1
 8001f92:	60ba      	str	r2, [r7, #8]
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	dbf1      	blt.n	8001f8e <_write+0x12>
  }
  return len;
 8001faa:	687b      	ldr	r3, [r7, #4]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <_close>:

int _close(int file)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr

08001fca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fda:	605a      	str	r2, [r3, #4]
  return 0;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <_isatty>:

int _isatty(int file)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ff0:	2301      	movs	r3, #1
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800201c:	4a14      	ldr	r2, [pc, #80]	; (8002070 <_sbrk+0x5c>)
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <_sbrk+0x60>)
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002028:	4b13      	ldr	r3, [pc, #76]	; (8002078 <_sbrk+0x64>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d102      	bne.n	8002036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <_sbrk+0x64>)
 8002032:	4a12      	ldr	r2, [pc, #72]	; (800207c <_sbrk+0x68>)
 8002034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002036:	4b10      	ldr	r3, [pc, #64]	; (8002078 <_sbrk+0x64>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4413      	add	r3, r2
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	429a      	cmp	r2, r3
 8002042:	d207      	bcs.n	8002054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002044:	f006 f830 	bl	80080a8 <__errno>
 8002048:	4603      	mov	r3, r0
 800204a:	220c      	movs	r2, #12
 800204c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800204e:	f04f 33ff 	mov.w	r3, #4294967295
 8002052:	e009      	b.n	8002068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <_sbrk+0x64>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800205a:	4b07      	ldr	r3, [pc, #28]	; (8002078 <_sbrk+0x64>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	4a05      	ldr	r2, [pc, #20]	; (8002078 <_sbrk+0x64>)
 8002064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002066:	68fb      	ldr	r3, [r7, #12]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20005000 	.word	0x20005000
 8002074:	00000400 	.word	0x00000400
 8002078:	20000500 	.word	0x20000500
 800207c:	20000c20 	.word	0x20000c20

08002080 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr

0800208c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b096      	sub	sp, #88	; 0x58
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002092:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	609a      	str	r2, [r3, #8]
 800209e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	60da      	str	r2, [r3, #12]
 80020b8:	611a      	str	r2, [r3, #16]
 80020ba:	615a      	str	r2, [r3, #20]
 80020bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	2220      	movs	r2, #32
 80020c2:	2100      	movs	r1, #0
 80020c4:	4618      	mov	r0, r3
 80020c6:	f005 ff76 	bl	8007fb6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020ca:	4b4a      	ldr	r3, [pc, #296]	; (80021f4 <MX_TIM1_Init+0x168>)
 80020cc:	4a4a      	ldr	r2, [pc, #296]	; (80021f8 <MX_TIM1_Init+0x16c>)
 80020ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 799;
 80020d0:	4b48      	ldr	r3, [pc, #288]	; (80021f4 <MX_TIM1_Init+0x168>)
 80020d2:	f240 321f 	movw	r2, #799	; 0x31f
 80020d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d8:	4b46      	ldr	r3, [pc, #280]	; (80021f4 <MX_TIM1_Init+0x168>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 80020de:	4b45      	ldr	r3, [pc, #276]	; (80021f4 <MX_TIM1_Init+0x168>)
 80020e0:	2209      	movs	r2, #9
 80020e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020e4:	4b43      	ldr	r3, [pc, #268]	; (80021f4 <MX_TIM1_Init+0x168>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020ea:	4b42      	ldr	r3, [pc, #264]	; (80021f4 <MX_TIM1_Init+0x168>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f0:	4b40      	ldr	r3, [pc, #256]	; (80021f4 <MX_TIM1_Init+0x168>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020f6:	483f      	ldr	r0, [pc, #252]	; (80021f4 <MX_TIM1_Init+0x168>)
 80020f8:	f003 f912 	bl	8005320 <HAL_TIM_Base_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002102:	f7ff fb20 	bl	8001746 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800210a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800210c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002110:	4619      	mov	r1, r3
 8002112:	4838      	ldr	r0, [pc, #224]	; (80021f4 <MX_TIM1_Init+0x168>)
 8002114:	f003 fc52 	bl	80059bc <HAL_TIM_ConfigClockSource>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800211e:	f7ff fb12 	bl	8001746 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002122:	4834      	ldr	r0, [pc, #208]	; (80021f4 <MX_TIM1_Init+0x168>)
 8002124:	f003 f99e 	bl	8005464 <HAL_TIM_PWM_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800212e:	f7ff fb0a 	bl	8001746 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002132:	2300      	movs	r3, #0
 8002134:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800213a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800213e:	4619      	mov	r1, r3
 8002140:	482c      	ldr	r0, [pc, #176]	; (80021f4 <MX_TIM1_Init+0x168>)
 8002142:	f003 ffd7 	bl	80060f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800214c:	f7ff fafb 	bl	8001746 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002150:	2360      	movs	r3, #96	; 0x60
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002158:	2300      	movs	r3, #0
 800215a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800215c:	2300      	movs	r3, #0
 800215e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002160:	2300      	movs	r3, #0
 8002162:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002164:	2300      	movs	r3, #0
 8002166:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002168:	2300      	movs	r3, #0
 800216a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800216c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002170:	2200      	movs	r2, #0
 8002172:	4619      	mov	r1, r3
 8002174:	481f      	ldr	r0, [pc, #124]	; (80021f4 <MX_TIM1_Init+0x168>)
 8002176:	f003 fb5f 	bl	8005838 <HAL_TIM_PWM_ConfigChannel>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002180:	f7ff fae1 	bl	8001746 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002188:	2204      	movs	r2, #4
 800218a:	4619      	mov	r1, r3
 800218c:	4819      	ldr	r0, [pc, #100]	; (80021f4 <MX_TIM1_Init+0x168>)
 800218e:	f003 fb53 	bl	8005838 <HAL_TIM_PWM_ConfigChannel>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002198:	f7ff fad5 	bl	8001746 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800219c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a0:	2208      	movs	r2, #8
 80021a2:	4619      	mov	r1, r3
 80021a4:	4813      	ldr	r0, [pc, #76]	; (80021f4 <MX_TIM1_Init+0x168>)
 80021a6:	f003 fb47 	bl	8005838 <HAL_TIM_PWM_ConfigChannel>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80021b0:	f7ff fac9 	bl	8001746 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021d2:	1d3b      	adds	r3, r7, #4
 80021d4:	4619      	mov	r1, r3
 80021d6:	4807      	ldr	r0, [pc, #28]	; (80021f4 <MX_TIM1_Init+0x168>)
 80021d8:	f003 ffea 	bl	80061b0 <HAL_TIMEx_ConfigBreakDeadTime>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80021e2:	f7ff fab0 	bl	8001746 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80021e6:	4803      	ldr	r0, [pc, #12]	; (80021f4 <MX_TIM1_Init+0x168>)
 80021e8:	f000 f88c 	bl	8002304 <HAL_TIM_MspPostInit>

}
 80021ec:	bf00      	nop
 80021ee:	3758      	adds	r7, #88	; 0x58
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20000504 	.word	0x20000504
 80021f8:	40012c00 	.word	0x40012c00

080021fc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002202:	f107 0308 	add.w	r3, r7, #8
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002210:	463b      	mov	r3, r7
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002218:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <MX_TIM2_Init+0x94>)
 800221a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800221e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8002220:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <MX_TIM2_Init+0x94>)
 8002222:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002226:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002228:	4b19      	ldr	r3, [pc, #100]	; (8002290 <MX_TIM2_Init+0x94>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800222e:	4b18      	ldr	r3, [pc, #96]	; (8002290 <MX_TIM2_Init+0x94>)
 8002230:	2209      	movs	r2, #9
 8002232:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002234:	4b16      	ldr	r3, [pc, #88]	; (8002290 <MX_TIM2_Init+0x94>)
 8002236:	2200      	movs	r2, #0
 8002238:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800223a:	4b15      	ldr	r3, [pc, #84]	; (8002290 <MX_TIM2_Init+0x94>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002240:	4813      	ldr	r0, [pc, #76]	; (8002290 <MX_TIM2_Init+0x94>)
 8002242:	f003 f86d 	bl	8005320 <HAL_TIM_Base_Init>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800224c:	f7ff fa7b 	bl	8001746 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002254:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002256:	f107 0308 	add.w	r3, r7, #8
 800225a:	4619      	mov	r1, r3
 800225c:	480c      	ldr	r0, [pc, #48]	; (8002290 <MX_TIM2_Init+0x94>)
 800225e:	f003 fbad 	bl	80059bc <HAL_TIM_ConfigClockSource>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002268:	f7ff fa6d 	bl	8001746 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800226c:	2300      	movs	r3, #0
 800226e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002270:	2300      	movs	r3, #0
 8002272:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002274:	463b      	mov	r3, r7
 8002276:	4619      	mov	r1, r3
 8002278:	4805      	ldr	r0, [pc, #20]	; (8002290 <MX_TIM2_Init+0x94>)
 800227a:	f003 ff3b 	bl	80060f4 <HAL_TIMEx_MasterConfigSynchronization>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002284:	f7ff fa5f 	bl	8001746 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002288:	bf00      	nop
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	2000054c 	.word	0x2000054c

08002294 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a16      	ldr	r2, [pc, #88]	; (80022fc <HAL_TIM_Base_MspInit+0x68>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d10c      	bne.n	80022c0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022a6:	4b16      	ldr	r3, [pc, #88]	; (8002300 <HAL_TIM_Base_MspInit+0x6c>)
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	4a15      	ldr	r2, [pc, #84]	; (8002300 <HAL_TIM_Base_MspInit+0x6c>)
 80022ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022b0:	6193      	str	r3, [r2, #24]
 80022b2:	4b13      	ldr	r3, [pc, #76]	; (8002300 <HAL_TIM_Base_MspInit+0x6c>)
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80022be:	e018      	b.n	80022f2 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c8:	d113      	bne.n	80022f2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022ca:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <HAL_TIM_Base_MspInit+0x6c>)
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	4a0c      	ldr	r2, [pc, #48]	; (8002300 <HAL_TIM_Base_MspInit+0x6c>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	61d3      	str	r3, [r2, #28]
 80022d6:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <HAL_TIM_Base_MspInit+0x6c>)
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022e2:	2200      	movs	r2, #0
 80022e4:	2100      	movs	r1, #0
 80022e6:	201c      	movs	r0, #28
 80022e8:	f000 fdd7 	bl	8002e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022ec:	201c      	movs	r0, #28
 80022ee:	f000 fdf0 	bl	8002ed2 <HAL_NVIC_EnableIRQ>
}
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40012c00 	.word	0x40012c00
 8002300:	40021000 	.word	0x40021000

08002304 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230c:	f107 0310 	add.w	r3, r7, #16
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a10      	ldr	r2, [pc, #64]	; (8002360 <HAL_TIM_MspPostInit+0x5c>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d118      	bne.n	8002356 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002324:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <HAL_TIM_MspPostInit+0x60>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	4a0e      	ldr	r2, [pc, #56]	; (8002364 <HAL_TIM_MspPostInit+0x60>)
 800232a:	f043 0304 	orr.w	r3, r3, #4
 800232e:	6193      	str	r3, [r2, #24]
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <HAL_TIM_MspPostInit+0x60>)
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800233c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002340:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	2302      	movs	r3, #2
 8002344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002346:	2302      	movs	r3, #2
 8002348:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234a:	f107 0310 	add.w	r3, r7, #16
 800234e:	4619      	mov	r1, r3
 8002350:	4805      	ldr	r0, [pc, #20]	; (8002368 <HAL_TIM_MspPostInit+0x64>)
 8002352:	f001 f885 	bl	8003460 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002356:	bf00      	nop
 8002358:	3720      	adds	r7, #32
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40012c00 	.word	0x40012c00
 8002364:	40021000 	.word	0x40021000
 8002368:	40010800 	.word	0x40010800

0800236c <HAL_UART_RxCpltCallback>:
	Uart_ESPSendByte(str, sizeof(str));
}

// call back

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
	ESP_Callback(huart);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff f81b 	bl	80013b0 <ESP_Callback>
	if(huart->Instance == USART1){
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a19      	ldr	r2, [pc, #100]	; (80023e4 <HAL_UART_RxCpltCallback+0x78>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d112      	bne.n	80023aa <HAL_UART_RxCpltCallback+0x3e>
		buffer1_flag = 1;
 8002384:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <HAL_UART_RxCpltCallback+0x7c>)
 8002386:	2201      	movs	r2, #1
 8002388:	701a      	strb	r2, [r3, #0]
		buffer1[index_buffer1++] = receive_buffer1;
 800238a:	4b18      	ldr	r3, [pc, #96]	; (80023ec <HAL_UART_RxCpltCallback+0x80>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	b2d1      	uxtb	r1, r2
 8002392:	4a16      	ldr	r2, [pc, #88]	; (80023ec <HAL_UART_RxCpltCallback+0x80>)
 8002394:	7011      	strb	r1, [r2, #0]
 8002396:	461a      	mov	r2, r3
 8002398:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <HAL_UART_RxCpltCallback+0x84>)
 800239a:	7819      	ldrb	r1, [r3, #0]
 800239c:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <HAL_UART_RxCpltCallback+0x88>)
 800239e:	5499      	strb	r1, [r3, r2]
		if(index_buffer1 > (BUFFER_SIZE - 1)) index_buffer1 = 0;
		HAL_UART_Receive_IT(huart, &receive_buffer1, 1);
 80023a0:	2201      	movs	r2, #1
 80023a2:	4913      	ldr	r1, [pc, #76]	; (80023f0 <HAL_UART_RxCpltCallback+0x84>)
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f004 f841 	bl	800642c <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a12      	ldr	r2, [pc, #72]	; (80023f8 <HAL_UART_RxCpltCallback+0x8c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d112      	bne.n	80023da <HAL_UART_RxCpltCallback+0x6e>
		buffer2_flag = 1;
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <HAL_UART_RxCpltCallback+0x90>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	701a      	strb	r2, [r3, #0]
		buffer2[index_buffer2++] = receive_buffer2;
 80023ba:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_UART_RxCpltCallback+0x94>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	b2d1      	uxtb	r1, r2
 80023c2:	4a0f      	ldr	r2, [pc, #60]	; (8002400 <HAL_UART_RxCpltCallback+0x94>)
 80023c4:	7011      	strb	r1, [r2, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <HAL_UART_RxCpltCallback+0x98>)
 80023ca:	7819      	ldrb	r1, [r3, #0]
 80023cc:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <HAL_UART_RxCpltCallback+0x9c>)
 80023ce:	5499      	strb	r1, [r3, r2]
		if(index_buffer2 > (BUFFER_SIZE - 1)) index_buffer2 = 0;
		HAL_UART_Receive_IT(huart, &receive_buffer2, 1);
 80023d0:	2201      	movs	r2, #1
 80023d2:	490c      	ldr	r1, [pc, #48]	; (8002404 <HAL_UART_RxCpltCallback+0x98>)
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f004 f829 	bl	800642c <HAL_UART_Receive_IT>

	}
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40013800 	.word	0x40013800
 80023e8:	20000596 	.word	0x20000596
 80023ec:	20000998 	.word	0x20000998
 80023f0:	20000594 	.word	0x20000594
 80023f4:	20000598 	.word	0x20000598
 80023f8:	40004400 	.word	0x40004400
 80023fc:	20000597 	.word	0x20000597
 8002400:	20000999 	.word	0x20000999
 8002404:	20000595 	.word	0x20000595
 8002408:	20000798 	.word	0x20000798

0800240c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002410:	4b11      	ldr	r3, [pc, #68]	; (8002458 <MX_USART1_UART_Init+0x4c>)
 8002412:	4a12      	ldr	r2, [pc, #72]	; (800245c <MX_USART1_UART_Init+0x50>)
 8002414:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002416:	4b10      	ldr	r3, [pc, #64]	; (8002458 <MX_USART1_UART_Init+0x4c>)
 8002418:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800241c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800241e:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <MX_USART1_UART_Init+0x4c>)
 8002420:	2200      	movs	r2, #0
 8002422:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <MX_USART1_UART_Init+0x4c>)
 8002426:	2200      	movs	r2, #0
 8002428:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800242a:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <MX_USART1_UART_Init+0x4c>)
 800242c:	2200      	movs	r2, #0
 800242e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002430:	4b09      	ldr	r3, [pc, #36]	; (8002458 <MX_USART1_UART_Init+0x4c>)
 8002432:	220c      	movs	r2, #12
 8002434:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002436:	4b08      	ldr	r3, [pc, #32]	; (8002458 <MX_USART1_UART_Init+0x4c>)
 8002438:	2200      	movs	r2, #0
 800243a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <MX_USART1_UART_Init+0x4c>)
 800243e:	2200      	movs	r2, #0
 8002440:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002442:	4805      	ldr	r0, [pc, #20]	; (8002458 <MX_USART1_UART_Init+0x4c>)
 8002444:	f003 ff17 	bl	8006276 <HAL_UART_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800244e:	f7ff f97a 	bl	8001746 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	2000099c 	.word	0x2000099c
 800245c:	40013800 	.word	0x40013800

08002460 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002464:	4b11      	ldr	r3, [pc, #68]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 8002466:	4a12      	ldr	r2, [pc, #72]	; (80024b0 <MX_USART2_UART_Init+0x50>)
 8002468:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800246a:	4b10      	ldr	r3, [pc, #64]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 800246c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002470:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002472:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 8002474:	2200      	movs	r2, #0
 8002476:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 800247a:	2200      	movs	r2, #0
 800247c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800247e:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 8002480:	2200      	movs	r2, #0
 8002482:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002484:	4b09      	ldr	r3, [pc, #36]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 8002486:	220c      	movs	r2, #12
 8002488:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800248a:	4b08      	ldr	r3, [pc, #32]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 800248c:	2200      	movs	r2, #0
 800248e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002490:	4b06      	ldr	r3, [pc, #24]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 8002492:	2200      	movs	r2, #0
 8002494:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002496:	4805      	ldr	r0, [pc, #20]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 8002498:	f003 feed 	bl	8006276 <HAL_UART_Init>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80024a2:	f7ff f950 	bl	8001746 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	200009e4 	.word	0x200009e4
 80024b0:	40004400 	.word	0x40004400

080024b4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <MX_USART3_UART_Init+0x4c>)
 80024ba:	4a12      	ldr	r2, [pc, #72]	; (8002504 <MX_USART3_UART_Init+0x50>)
 80024bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80024be:	4b10      	ldr	r3, [pc, #64]	; (8002500 <MX_USART3_UART_Init+0x4c>)
 80024c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024c6:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <MX_USART3_UART_Init+0x4c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <MX_USART3_UART_Init+0x4c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024d2:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <MX_USART3_UART_Init+0x4c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024d8:	4b09      	ldr	r3, [pc, #36]	; (8002500 <MX_USART3_UART_Init+0x4c>)
 80024da:	220c      	movs	r2, #12
 80024dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <MX_USART3_UART_Init+0x4c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e4:	4b06      	ldr	r3, [pc, #24]	; (8002500 <MX_USART3_UART_Init+0x4c>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024ea:	4805      	ldr	r0, [pc, #20]	; (8002500 <MX_USART3_UART_Init+0x4c>)
 80024ec:	f003 fec3 	bl	8006276 <HAL_UART_Init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80024f6:	f7ff f926 	bl	8001746 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000a2c 	.word	0x20000a2c
 8002504:	40004800 	.word	0x40004800

08002508 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08e      	sub	sp, #56	; 0x38
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a74      	ldr	r2, [pc, #464]	; (80026f4 <HAL_UART_MspInit+0x1ec>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d146      	bne.n	80025b6 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002528:	4b73      	ldr	r3, [pc, #460]	; (80026f8 <HAL_UART_MspInit+0x1f0>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	4a72      	ldr	r2, [pc, #456]	; (80026f8 <HAL_UART_MspInit+0x1f0>)
 800252e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002532:	6193      	str	r3, [r2, #24]
 8002534:	4b70      	ldr	r3, [pc, #448]	; (80026f8 <HAL_UART_MspInit+0x1f0>)
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800253c:	623b      	str	r3, [r7, #32]
 800253e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002540:	4b6d      	ldr	r3, [pc, #436]	; (80026f8 <HAL_UART_MspInit+0x1f0>)
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	4a6c      	ldr	r2, [pc, #432]	; (80026f8 <HAL_UART_MspInit+0x1f0>)
 8002546:	f043 0308 	orr.w	r3, r3, #8
 800254a:	6193      	str	r3, [r2, #24]
 800254c:	4b6a      	ldr	r3, [pc, #424]	; (80026f8 <HAL_UART_MspInit+0x1f0>)
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	61fb      	str	r3, [r7, #28]
 8002556:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002558:	2340      	movs	r3, #64	; 0x40
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255c:	2302      	movs	r3, #2
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002560:	2303      	movs	r3, #3
 8002562:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002568:	4619      	mov	r1, r3
 800256a:	4864      	ldr	r0, [pc, #400]	; (80026fc <HAL_UART_MspInit+0x1f4>)
 800256c:	f000 ff78 	bl	8003460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002574:	2300      	movs	r3, #0
 8002576:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002580:	4619      	mov	r1, r3
 8002582:	485e      	ldr	r0, [pc, #376]	; (80026fc <HAL_UART_MspInit+0x1f4>)
 8002584:	f000 ff6c 	bl	8003460 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002588:	4b5d      	ldr	r3, [pc, #372]	; (8002700 <HAL_UART_MspInit+0x1f8>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	637b      	str	r3, [r7, #52]	; 0x34
 800258e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002590:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002594:	637b      	str	r3, [r7, #52]	; 0x34
 8002596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002598:	f043 0304 	orr.w	r3, r3, #4
 800259c:	637b      	str	r3, [r7, #52]	; 0x34
 800259e:	4a58      	ldr	r2, [pc, #352]	; (8002700 <HAL_UART_MspInit+0x1f8>)
 80025a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a2:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025a4:	2200      	movs	r2, #0
 80025a6:	2100      	movs	r1, #0
 80025a8:	2025      	movs	r0, #37	; 0x25
 80025aa:	f000 fc76 	bl	8002e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025ae:	2025      	movs	r0, #37	; 0x25
 80025b0:	f000 fc8f 	bl	8002ed2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80025b4:	e09a      	b.n	80026ec <HAL_UART_MspInit+0x1e4>
  else if(uartHandle->Instance==USART2)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a52      	ldr	r2, [pc, #328]	; (8002704 <HAL_UART_MspInit+0x1fc>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d130      	bne.n	8002622 <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80025c0:	4b4d      	ldr	r3, [pc, #308]	; (80026f8 <HAL_UART_MspInit+0x1f0>)
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	4a4c      	ldr	r2, [pc, #304]	; (80026f8 <HAL_UART_MspInit+0x1f0>)
 80025c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ca:	61d3      	str	r3, [r2, #28]
 80025cc:	4b4a      	ldr	r3, [pc, #296]	; (80026f8 <HAL_UART_MspInit+0x1f0>)
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d8:	4b47      	ldr	r3, [pc, #284]	; (80026f8 <HAL_UART_MspInit+0x1f0>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	4a46      	ldr	r2, [pc, #280]	; (80026f8 <HAL_UART_MspInit+0x1f0>)
 80025de:	f043 0304 	orr.w	r3, r3, #4
 80025e2:	6193      	str	r3, [r2, #24]
 80025e4:	4b44      	ldr	r3, [pc, #272]	; (80026f8 <HAL_UART_MspInit+0x1f0>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025f0:	2304      	movs	r3, #4
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f4:	2302      	movs	r3, #2
 80025f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025f8:	2303      	movs	r3, #3
 80025fa:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002600:	4619      	mov	r1, r3
 8002602:	4841      	ldr	r0, [pc, #260]	; (8002708 <HAL_UART_MspInit+0x200>)
 8002604:	f000 ff2c 	bl	8003460 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002608:	2308      	movs	r3, #8
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800260c:	2300      	movs	r3, #0
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002618:	4619      	mov	r1, r3
 800261a:	483b      	ldr	r0, [pc, #236]	; (8002708 <HAL_UART_MspInit+0x200>)
 800261c:	f000 ff20 	bl	8003460 <HAL_GPIO_Init>
}
 8002620:	e064      	b.n	80026ec <HAL_UART_MspInit+0x1e4>
  else if(uartHandle->Instance==USART3)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a39      	ldr	r2, [pc, #228]	; (800270c <HAL_UART_MspInit+0x204>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d15f      	bne.n	80026ec <HAL_UART_MspInit+0x1e4>
    __HAL_RCC_USART3_CLK_ENABLE();
 800262c:	4b32      	ldr	r3, [pc, #200]	; (80026f8 <HAL_UART_MspInit+0x1f0>)
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	4a31      	ldr	r2, [pc, #196]	; (80026f8 <HAL_UART_MspInit+0x1f0>)
 8002632:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002636:	61d3      	str	r3, [r2, #28]
 8002638:	4b2f      	ldr	r3, [pc, #188]	; (80026f8 <HAL_UART_MspInit+0x1f0>)
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002644:	4b2c      	ldr	r3, [pc, #176]	; (80026f8 <HAL_UART_MspInit+0x1f0>)
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	4a2b      	ldr	r2, [pc, #172]	; (80026f8 <HAL_UART_MspInit+0x1f0>)
 800264a:	f043 0308 	orr.w	r3, r3, #8
 800264e:	6193      	str	r3, [r2, #24]
 8002650:	4b29      	ldr	r3, [pc, #164]	; (80026f8 <HAL_UART_MspInit+0x1f0>)
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800265c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002662:	2302      	movs	r3, #2
 8002664:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002666:	2303      	movs	r3, #3
 8002668:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800266a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800266e:	4619      	mov	r1, r3
 8002670:	4822      	ldr	r0, [pc, #136]	; (80026fc <HAL_UART_MspInit+0x1f4>)
 8002672:	f000 fef5 	bl	8003460 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002676:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800267a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800267c:	2300      	movs	r3, #0
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002688:	4619      	mov	r1, r3
 800268a:	481c      	ldr	r0, [pc, #112]	; (80026fc <HAL_UART_MspInit+0x1f4>)
 800268c:	f000 fee8 	bl	8003460 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8002690:	4b1f      	ldr	r3, [pc, #124]	; (8002710 <HAL_UART_MspInit+0x208>)
 8002692:	4a20      	ldr	r2, [pc, #128]	; (8002714 <HAL_UART_MspInit+0x20c>)
 8002694:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002696:	4b1e      	ldr	r3, [pc, #120]	; (8002710 <HAL_UART_MspInit+0x208>)
 8002698:	2210      	movs	r2, #16
 800269a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800269c:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <HAL_UART_MspInit+0x208>)
 800269e:	2200      	movs	r2, #0
 80026a0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026a2:	4b1b      	ldr	r3, [pc, #108]	; (8002710 <HAL_UART_MspInit+0x208>)
 80026a4:	2280      	movs	r2, #128	; 0x80
 80026a6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026a8:	4b19      	ldr	r3, [pc, #100]	; (8002710 <HAL_UART_MspInit+0x208>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026ae:	4b18      	ldr	r3, [pc, #96]	; (8002710 <HAL_UART_MspInit+0x208>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80026b4:	4b16      	ldr	r3, [pc, #88]	; (8002710 <HAL_UART_MspInit+0x208>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026ba:	4b15      	ldr	r3, [pc, #84]	; (8002710 <HAL_UART_MspInit+0x208>)
 80026bc:	2200      	movs	r2, #0
 80026be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80026c0:	4813      	ldr	r0, [pc, #76]	; (8002710 <HAL_UART_MspInit+0x208>)
 80026c2:	f000 fc21 	bl	8002f08 <HAL_DMA_Init>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_UART_MspInit+0x1c8>
      Error_Handler();
 80026cc:	f7ff f83b 	bl	8001746 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a0f      	ldr	r2, [pc, #60]	; (8002710 <HAL_UART_MspInit+0x208>)
 80026d4:	639a      	str	r2, [r3, #56]	; 0x38
 80026d6:	4a0e      	ldr	r2, [pc, #56]	; (8002710 <HAL_UART_MspInit+0x208>)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80026dc:	2200      	movs	r2, #0
 80026de:	2100      	movs	r1, #0
 80026e0:	2027      	movs	r0, #39	; 0x27
 80026e2:	f000 fbda 	bl	8002e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80026e6:	2027      	movs	r0, #39	; 0x27
 80026e8:	f000 fbf3 	bl	8002ed2 <HAL_NVIC_EnableIRQ>
}
 80026ec:	bf00      	nop
 80026ee:	3738      	adds	r7, #56	; 0x38
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40013800 	.word	0x40013800
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40010c00 	.word	0x40010c00
 8002700:	40010000 	.word	0x40010000
 8002704:	40004400 	.word	0x40004400
 8002708:	40010800 	.word	0x40010800
 800270c:	40004800 	.word	0x40004800
 8002710:	20000a74 	.word	0x20000a74
 8002714:	4002001c 	.word	0x4002001c

08002718 <Reset_Handler>:
 8002718:	f7ff fcb2 	bl	8002080 <SystemInit>
 800271c:	480b      	ldr	r0, [pc, #44]	; (800274c <LoopFillZerobss+0xe>)
 800271e:	490c      	ldr	r1, [pc, #48]	; (8002750 <LoopFillZerobss+0x12>)
 8002720:	4a0c      	ldr	r2, [pc, #48]	; (8002754 <LoopFillZerobss+0x16>)
 8002722:	2300      	movs	r3, #0
 8002724:	e002      	b.n	800272c <LoopCopyDataInit>

08002726 <CopyDataInit>:
 8002726:	58d4      	ldr	r4, [r2, r3]
 8002728:	50c4      	str	r4, [r0, r3]
 800272a:	3304      	adds	r3, #4

0800272c <LoopCopyDataInit>:
 800272c:	18c4      	adds	r4, r0, r3
 800272e:	428c      	cmp	r4, r1
 8002730:	d3f9      	bcc.n	8002726 <CopyDataInit>
 8002732:	4a09      	ldr	r2, [pc, #36]	; (8002758 <LoopFillZerobss+0x1a>)
 8002734:	4c09      	ldr	r4, [pc, #36]	; (800275c <LoopFillZerobss+0x1e>)
 8002736:	2300      	movs	r3, #0
 8002738:	e001      	b.n	800273e <LoopFillZerobss>

0800273a <FillZerobss>:
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	3204      	adds	r2, #4

0800273e <LoopFillZerobss>:
 800273e:	42a2      	cmp	r2, r4
 8002740:	d3fb      	bcc.n	800273a <FillZerobss>
 8002742:	f005 fcb7 	bl	80080b4 <__libc_init_array>
 8002746:	f7fe ff7f 	bl	8001648 <main>
 800274a:	4770      	bx	lr
 800274c:	20000000 	.word	0x20000000
 8002750:	20000200 	.word	0x20000200
 8002754:	0800a7d4 	.word	0x0800a7d4
 8002758:	20000200 	.word	0x20000200
 800275c:	20000c20 	.word	0x20000c20

08002760 <ADC1_2_IRQHandler>:
 8002760:	e7fe      	b.n	8002760 <ADC1_2_IRQHandler>

08002762 <BH1750_Init>:

#include "BH1750.h"

uint8_t buffer[2];

HAL_StatusTypeDef BH1750_Init(I2C_HandleTypeDef* I2C_Name, BH1750_Typedef* BH1750_Name){
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]
	BH1750_Name->I2C_Name = I2C_Name;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	609a      	str	r2, [r3, #8]
	BH1750_Name->Address_r = BH1750_GROUND_ADDR_READ;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	2247      	movs	r2, #71	; 0x47
 8002776:	709a      	strb	r2, [r3, #2]
	BH1750_Name->Address_w = BH1750_GROUND_ADDR_WRITE;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	2246      	movs	r2, #70	; 0x46
 800277c:	70da      	strb	r2, [r3, #3]
	BH1750_Name->Mode = CMD_H_RES_MODE2;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2211      	movs	r2, #17
 8002782:	711a      	strb	r2, [r3, #4]
	BH1750_Name->Value = 0;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	2200      	movs	r2, #0
 8002788:	801a      	strh	r2, [r3, #0]

	return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
	...

08002798 <BMP180_Init>:
int16_t unCompTemp; // raw data
uint32_t unCompPresure; // raw data
float presureATM;
//------------------------------------------------------------

HAL_StatusTypeDef BMP180_Init(I2C_HandleTypeDef* I2C_Name, BMP180_Typedef* BMP180_Name){
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
	BMP180_Name->Pressure = 0;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	605a      	str	r2, [r3, #4]
	BMP180_Name->PressureATM = 0;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	609a      	str	r2, [r3, #8]
	BMP180_Name->Temperature = 0;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
	BMP180_Name->I2C_Name = I2C_Name;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	60da      	str	r2, [r3, #12]

	if(HAL_I2C_IsDeviceReady(I2C_Name, BMP180_DEVICE_WRITE_REGISTER_ADDRESS, 1, 100000) != HAL_OK){
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <BMP180_Init+0x58>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	21ee      	movs	r1, #238	; 0xee
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f001 fccc 	bl	8004164 <HAL_I2C_IsDeviceReady>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <BMP180_Init+0x3e>
		return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e008      	b.n	80027e8 <BMP180_Init+0x50>
	}

	if(BMP180_Get_Calibration_Values(BMP180_Name) != HAL_OK){
 80027d6:	6838      	ldr	r0, [r7, #0]
 80027d8:	f000 f80c 	bl	80027f4 <BMP180_Get_Calibration_Values>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <BMP180_Init+0x4e>
		return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <BMP180_Init+0x50>
	}


	return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	000186a0 	.word	0x000186a0

080027f4 <BMP180_Get_Calibration_Values>:

HAL_StatusTypeDef BMP180_Get_Calibration_Values(BMP180_Typedef* BMP180_Name){
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08c      	sub	sp, #48	; 0x30
 80027f8:	af04      	add	r7, sp, #16
 80027fa:	6078      	str	r0, [r7, #4]
	uint8_t calibrationBuff[BMP180_CALIBRATION_VALUE_LENGTH] = {0};
 80027fc:	2300      	movs	r3, #0
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	f107 030c 	add.w	r3, r7, #12
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	60da      	str	r2, [r3, #12]
 800280e:	821a      	strh	r2, [r3, #16]
	uint8_t status = HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	77fb      	strb	r3, [r7, #31]
	status = HAL_I2C_Mem_Read(BMP180_Name->I2C_Name, BMP180_DEVICE_READ_REGISTER_ADDRESS, BMP180_CALIBRATION_START_ADDRESS, 1, calibrationBuff, BMP180_CALIBRATION_VALUE_LENGTH, 10000); // error here
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68d8      	ldr	r0, [r3, #12]
 8002818:	f242 7310 	movw	r3, #10000	; 0x2710
 800281c:	9302      	str	r3, [sp, #8]
 800281e:	2316      	movs	r3, #22
 8002820:	9301      	str	r3, [sp, #4]
 8002822:	f107 0308 	add.w	r3, r7, #8
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	2301      	movs	r3, #1
 800282a:	22aa      	movs	r2, #170	; 0xaa
 800282c:	21ef      	movs	r1, #239	; 0xef
 800282e:	f001 fa25 	bl	8003c7c <HAL_I2C_Mem_Read>
 8002832:	4603      	mov	r3, r0
 8002834:	77fb      	strb	r3, [r7, #31]
	/*shifting operations*/
	AC1 = calibrationBuff[0]<<8 | calibrationBuff[1]; //8 bit MSB shifting left(15,14,13..), 8 bit LSB stay(7,6,5,..0)
 8002836:	7a3b      	ldrb	r3, [r7, #8]
 8002838:	021b      	lsls	r3, r3, #8
 800283a:	b21a      	sxth	r2, r3
 800283c:	7a7b      	ldrb	r3, [r7, #9]
 800283e:	b21b      	sxth	r3, r3
 8002840:	4313      	orrs	r3, r2
 8002842:	b21a      	sxth	r2, r3
 8002844:	4b56      	ldr	r3, [pc, #344]	; (80029a0 <BMP180_Get_Calibration_Values+0x1ac>)
 8002846:	801a      	strh	r2, [r3, #0]
	AC2 = calibrationBuff[2]<<8 | calibrationBuff[3];
 8002848:	7abb      	ldrb	r3, [r7, #10]
 800284a:	021b      	lsls	r3, r3, #8
 800284c:	b21a      	sxth	r2, r3
 800284e:	7afb      	ldrb	r3, [r7, #11]
 8002850:	b21b      	sxth	r3, r3
 8002852:	4313      	orrs	r3, r2
 8002854:	b21a      	sxth	r2, r3
 8002856:	4b53      	ldr	r3, [pc, #332]	; (80029a4 <BMP180_Get_Calibration_Values+0x1b0>)
 8002858:	801a      	strh	r2, [r3, #0]
	AC3 = calibrationBuff[4]<<8 | calibrationBuff[5];
 800285a:	7b3b      	ldrb	r3, [r7, #12]
 800285c:	021b      	lsls	r3, r3, #8
 800285e:	b21a      	sxth	r2, r3
 8002860:	7b7b      	ldrb	r3, [r7, #13]
 8002862:	b21b      	sxth	r3, r3
 8002864:	4313      	orrs	r3, r2
 8002866:	b21a      	sxth	r2, r3
 8002868:	4b4f      	ldr	r3, [pc, #316]	; (80029a8 <BMP180_Get_Calibration_Values+0x1b4>)
 800286a:	801a      	strh	r2, [r3, #0]
	AC4 = calibrationBuff[6]<<8 | calibrationBuff[7];
 800286c:	7bbb      	ldrb	r3, [r7, #14]
 800286e:	021b      	lsls	r3, r3, #8
 8002870:	b21a      	sxth	r2, r3
 8002872:	7bfb      	ldrb	r3, [r7, #15]
 8002874:	b21b      	sxth	r3, r3
 8002876:	4313      	orrs	r3, r2
 8002878:	b21a      	sxth	r2, r3
 800287a:	4b4c      	ldr	r3, [pc, #304]	; (80029ac <BMP180_Get_Calibration_Values+0x1b8>)
 800287c:	801a      	strh	r2, [r3, #0]
	AC5 = calibrationBuff[8]<<8 | calibrationBuff[9];
 800287e:	7c3b      	ldrb	r3, [r7, #16]
 8002880:	021b      	lsls	r3, r3, #8
 8002882:	b21a      	sxth	r2, r3
 8002884:	7c7b      	ldrb	r3, [r7, #17]
 8002886:	b21b      	sxth	r3, r3
 8002888:	4313      	orrs	r3, r2
 800288a:	b21a      	sxth	r2, r3
 800288c:	4b48      	ldr	r3, [pc, #288]	; (80029b0 <BMP180_Get_Calibration_Values+0x1bc>)
 800288e:	801a      	strh	r2, [r3, #0]
	AC6 =calibrationBuff[10]<<8 | calibrationBuff[11];
 8002890:	7cbb      	ldrb	r3, [r7, #18]
 8002892:	021b      	lsls	r3, r3, #8
 8002894:	b21a      	sxth	r2, r3
 8002896:	7cfb      	ldrb	r3, [r7, #19]
 8002898:	b21b      	sxth	r3, r3
 800289a:	4313      	orrs	r3, r2
 800289c:	b21a      	sxth	r2, r3
 800289e:	4b45      	ldr	r3, [pc, #276]	; (80029b4 <BMP180_Get_Calibration_Values+0x1c0>)
 80028a0:	801a      	strh	r2, [r3, #0]
	B1 = calibrationBuff[12]<<8 | calibrationBuff[13];
 80028a2:	7d3b      	ldrb	r3, [r7, #20]
 80028a4:	021b      	lsls	r3, r3, #8
 80028a6:	b21a      	sxth	r2, r3
 80028a8:	7d7b      	ldrb	r3, [r7, #21]
 80028aa:	b21b      	sxth	r3, r3
 80028ac:	4313      	orrs	r3, r2
 80028ae:	b21a      	sxth	r2, r3
 80028b0:	4b41      	ldr	r3, [pc, #260]	; (80029b8 <BMP180_Get_Calibration_Values+0x1c4>)
 80028b2:	801a      	strh	r2, [r3, #0]
	B2 = calibrationBuff[14]<<8 | calibrationBuff[15];
 80028b4:	7dbb      	ldrb	r3, [r7, #22]
 80028b6:	021b      	lsls	r3, r3, #8
 80028b8:	b21a      	sxth	r2, r3
 80028ba:	7dfb      	ldrb	r3, [r7, #23]
 80028bc:	b21b      	sxth	r3, r3
 80028be:	4313      	orrs	r3, r2
 80028c0:	b21a      	sxth	r2, r3
 80028c2:	4b3e      	ldr	r3, [pc, #248]	; (80029bc <BMP180_Get_Calibration_Values+0x1c8>)
 80028c4:	801a      	strh	r2, [r3, #0]
	MB = calibrationBuff[16]<<8 | calibrationBuff[17];
 80028c6:	7e3b      	ldrb	r3, [r7, #24]
 80028c8:	021b      	lsls	r3, r3, #8
 80028ca:	b21a      	sxth	r2, r3
 80028cc:	7e7b      	ldrb	r3, [r7, #25]
 80028ce:	b21b      	sxth	r3, r3
 80028d0:	4313      	orrs	r3, r2
 80028d2:	b21a      	sxth	r2, r3
 80028d4:	4b3a      	ldr	r3, [pc, #232]	; (80029c0 <BMP180_Get_Calibration_Values+0x1cc>)
 80028d6:	801a      	strh	r2, [r3, #0]
	MC = calibrationBuff[18]<<8 | calibrationBuff[19];
 80028d8:	7ebb      	ldrb	r3, [r7, #26]
 80028da:	021b      	lsls	r3, r3, #8
 80028dc:	b21a      	sxth	r2, r3
 80028de:	7efb      	ldrb	r3, [r7, #27]
 80028e0:	b21b      	sxth	r3, r3
 80028e2:	4313      	orrs	r3, r2
 80028e4:	b21a      	sxth	r2, r3
 80028e6:	4b37      	ldr	r3, [pc, #220]	; (80029c4 <BMP180_Get_Calibration_Values+0x1d0>)
 80028e8:	801a      	strh	r2, [r3, #0]
	MD = calibrationBuff[20]<<8 | calibrationBuff[21];
 80028ea:	7f3b      	ldrb	r3, [r7, #28]
 80028ec:	021b      	lsls	r3, r3, #8
 80028ee:	b21a      	sxth	r2, r3
 80028f0:	7f7b      	ldrb	r3, [r7, #29]
 80028f2:	b21b      	sxth	r3, r3
 80028f4:	4313      	orrs	r3, r2
 80028f6:	b21a      	sxth	r2, r3
 80028f8:	4b33      	ldr	r3, [pc, #204]	; (80029c8 <BMP180_Get_Calibration_Values+0x1d4>)
 80028fa:	801a      	strh	r2, [r3, #0]

	/*CONTROL CALIBRATION VALUEs COMING FROM to EEPROM, IF THERE IS A PROBLEM, ORANGE LED WILL TURN ON*/
	/*IF ORANGE LED DOESN'T WORK, EVERYTHINK IS OK*/

	if(AC1 == 0x0000 || AC1 == 0xFFFF)
 80028fc:	4b28      	ldr	r3, [pc, #160]	; (80029a0 <BMP180_Get_Calibration_Values+0x1ac>)
 80028fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <BMP180_Get_Calibration_Values+0x116>
	{
		return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e046      	b.n	8002998 <BMP180_Get_Calibration_Values+0x1a4>
	}

	if(AC2 == 0x0000 || AC2 == 0xFFFF)
 800290a:	4b26      	ldr	r3, [pc, #152]	; (80029a4 <BMP180_Get_Calibration_Values+0x1b0>)
 800290c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <BMP180_Get_Calibration_Values+0x124>
	{
		return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e03f      	b.n	8002998 <BMP180_Get_Calibration_Values+0x1a4>
	}
	if(AC3 == 0x0000 || AC3 == 0xFFFF)
 8002918:	4b23      	ldr	r3, [pc, #140]	; (80029a8 <BMP180_Get_Calibration_Values+0x1b4>)
 800291a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <BMP180_Get_Calibration_Values+0x132>
	{
		return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e038      	b.n	8002998 <BMP180_Get_Calibration_Values+0x1a4>
	}
	if(AC4 == 0x0000 || AC4 == 0xFFFF)
 8002926:	4b21      	ldr	r3, [pc, #132]	; (80029ac <BMP180_Get_Calibration_Values+0x1b8>)
 8002928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <BMP180_Get_Calibration_Values+0x140>
	{
		return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e031      	b.n	8002998 <BMP180_Get_Calibration_Values+0x1a4>
	}
	if(AC5 == 0x0000 || AC5 == 0xFFFF)
 8002934:	4b1e      	ldr	r3, [pc, #120]	; (80029b0 <BMP180_Get_Calibration_Values+0x1bc>)
 8002936:	f9b3 3000 	ldrsh.w	r3, [r3]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <BMP180_Get_Calibration_Values+0x14e>
	{
		return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e02a      	b.n	8002998 <BMP180_Get_Calibration_Values+0x1a4>
	}
	if(AC6 == 0x0000 || AC6 == 0xFFFF)
 8002942:	4b1c      	ldr	r3, [pc, #112]	; (80029b4 <BMP180_Get_Calibration_Values+0x1c0>)
 8002944:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <BMP180_Get_Calibration_Values+0x15c>
	{
		return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e023      	b.n	8002998 <BMP180_Get_Calibration_Values+0x1a4>
	}
	if(B1 == 0x0000 || B1 == 0xFFFF)
 8002950:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <BMP180_Get_Calibration_Values+0x1c4>)
 8002952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <BMP180_Get_Calibration_Values+0x16a>
	{
		return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e01c      	b.n	8002998 <BMP180_Get_Calibration_Values+0x1a4>
	}
	if(B2 == 0x0000 || B2 == 0xFFFF)
 800295e:	4b17      	ldr	r3, [pc, #92]	; (80029bc <BMP180_Get_Calibration_Values+0x1c8>)
 8002960:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <BMP180_Get_Calibration_Values+0x178>
	{
		return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e015      	b.n	8002998 <BMP180_Get_Calibration_Values+0x1a4>
	}
	if(MB == 0x0000 || MB == 0xFFFF)
 800296c:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <BMP180_Get_Calibration_Values+0x1cc>)
 800296e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <BMP180_Get_Calibration_Values+0x186>
	{
		return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e00e      	b.n	8002998 <BMP180_Get_Calibration_Values+0x1a4>
	}
	if(MC == 0x0000 || MC == 0xFFFF)
 800297a:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <BMP180_Get_Calibration_Values+0x1d0>)
 800297c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <BMP180_Get_Calibration_Values+0x194>
	{
		return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e007      	b.n	8002998 <BMP180_Get_Calibration_Values+0x1a4>
	}
	if(MD == 0x0000 || MD == 0xFFFF)
 8002988:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <BMP180_Get_Calibration_Values+0x1d4>)
 800298a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <BMP180_Get_Calibration_Values+0x1a2>
	{
		return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <BMP180_Get_Calibration_Values+0x1a4>
	}

	return status;
 8002996:	7ffb      	ldrb	r3, [r7, #31]

}
 8002998:	4618      	mov	r0, r3
 800299a:	3720      	adds	r7, #32
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20000ab8 	.word	0x20000ab8
 80029a4:	20000aba 	.word	0x20000aba
 80029a8:	20000abc 	.word	0x20000abc
 80029ac:	20000abe 	.word	0x20000abe
 80029b0:	20000ac0 	.word	0x20000ac0
 80029b4:	20000ac2 	.word	0x20000ac2
 80029b8:	20000ac4 	.word	0x20000ac4
 80029bc:	20000ac6 	.word	0x20000ac6
 80029c0:	20000ac8 	.word	0x20000ac8
 80029c4:	20000aca 	.word	0x20000aca
 80029c8:	20000acc 	.word	0x20000acc

080029cc <CLCD_Delay>:
******************************************************************************************************************/
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 80029d6:	88fb      	ldrh	r3, [r7, #6]
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 f963 	bl	8002ca4 <HAL_Delay>
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b086      	sub	sp, #24
 80029ea:	af02      	add	r7, sp, #8
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	460b      	mov	r3, r1
 80029f0:	70fb      	strb	r3, [r7, #3]
 80029f2:	4613      	mov	r3, r2
 80029f4:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 80029f6:	78fb      	ldrb	r3, [r7, #3]
 80029f8:	f023 030f 	bic.w	r3, r3, #15
 80029fc:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 80029fe:	78fb      	ldrb	r3, [r7, #3]
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	7adb      	ldrb	r3, [r3, #11]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d007      	beq.n	8002a1c <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT; 
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
 8002a0e:	f043 0308 	orr.w	r3, r3, #8
 8002a12:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT; 
 8002a14:	7bbb      	ldrb	r3, [r7, #14]
 8002a16:	f043 0308 	orr.w	r3, r3, #8
 8002a1a:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 8002a1c:	78bb      	ldrb	r3, [r7, #2]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d108      	bne.n	8002a34 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 8002a2a:	7bbb      	ldrb	r3, [r7, #14]
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	73bb      	strb	r3, [r7, #14]
 8002a32:	e00a      	b.n	8002a4a <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 8002a34:	78bb      	ldrb	r3, [r7, #2]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d107      	bne.n	8002a4a <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
 8002a3c:	f023 0301 	bic.w	r3, r3, #1
 8002a40:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 8002a42:	7bbb      	ldrb	r3, [r7, #14]
 8002a44:	f023 0301 	bic.w	r3, r3, #1
 8002a48:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	f043 0304 	orr.w	r3, r3, #4
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	723b      	strb	r3, [r7, #8]
	Data_I2C[1] = Data_H;
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 8002a58:	7bbb      	ldrb	r3, [r7, #14]
 8002a5a:	f043 0304 	orr.w	r3, r3, #4
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	72bb      	strb	r3, [r7, #10]
	Data_I2C[3] = Data_L;
 8002a62:	7bbb      	ldrb	r3, [r7, #14]
 8002a64:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	791b      	ldrb	r3, [r3, #4]
 8002a6e:	b299      	uxth	r1, r3
 8002a70:	f107 0208 	add.w	r2, r7, #8
 8002a74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	2304      	movs	r3, #4
 8002a7c:	f001 f800 	bl	8003a80 <HAL_I2C_Master_Transmit>
}
 8002a80:	bf00      	nop
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	4611      	mov	r1, r2
 8002a94:	461a      	mov	r2, r3
 8002a96:	460b      	mov	r3, r1
 8002a98:	71fb      	strb	r3, [r7, #7]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	79fa      	ldrb	r2, [r7, #7]
 8002aa8:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	79ba      	ldrb	r2, [r7, #6]
 8002aae:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	7e3a      	ldrb	r2, [r7, #24]
 8002ab4:	719a      	strb	r2, [r3, #6]
	
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2228      	movs	r2, #40	; 0x28
 8002aba:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2206      	movs	r2, #6
 8002ac0:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	220c      	movs	r2, #12
 8002ac6:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2214      	movs	r2, #20
 8002acc:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2208      	movs	r2, #8
 8002ad2:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8002ad4:	2032      	movs	r0, #50	; 0x32
 8002ad6:	f7ff ff79 	bl	80029cc <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8002ada:	2200      	movs	r2, #0
 8002adc:	2133      	movs	r1, #51	; 0x33
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f7ff ff81 	bl	80029e6 <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2133      	movs	r1, #51	; 0x33
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f7ff ff7c 	bl	80029e6 <CLCD_WriteI2C>
	CLCD_Delay(5);
 8002aee:	2005      	movs	r0, #5
 8002af0:	f7ff ff6c 	bl	80029cc <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8002af4:	2200      	movs	r2, #0
 8002af6:	2132      	movs	r1, #50	; 0x32
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f7ff ff74 	bl	80029e6 <CLCD_WriteI2C>
	CLCD_Delay(5);
 8002afe:	2005      	movs	r0, #5
 8002b00:	f7ff ff64 	bl	80029cc <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8002b04:	2200      	movs	r2, #0
 8002b06:	2120      	movs	r1, #32
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f7ff ff6c 	bl	80029e6 <CLCD_WriteI2C>
	CLCD_Delay(5);
 8002b0e:	2005      	movs	r0, #5
 8002b10:	f7ff ff5c 	bl	80029cc <CLCD_Delay>
	
	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	79db      	ldrb	r3, [r3, #7]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f7ff ff62 	bl	80029e6 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	7a1b      	ldrb	r3, [r3, #8]
 8002b26:	2200      	movs	r2, #0
 8002b28:	4619      	mov	r1, r3
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f7ff ff5b 	bl	80029e6 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	7a5b      	ldrb	r3, [r3, #9]
 8002b34:	2200      	movs	r2, #0
 8002b36:	4619      	mov	r1, r3
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f7ff ff54 	bl	80029e6 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	7a9b      	ldrb	r3, [r3, #10]
 8002b42:	2200      	movs	r2, #0
 8002b44:	4619      	mov	r1, r3
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f7ff ff4d 	bl	80029e6 <CLCD_WriteI2C>
	
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2101      	movs	r1, #1
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f7ff ff48 	bl	80029e6 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 8002b56:	2200      	movs	r2, #0
 8002b58:	2102      	movs	r1, #2
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f7ff ff43 	bl	80029e6 <CLCD_WriteI2C>
}
 8002b60:	bf00      	nop
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <DHT20_Init>:
 *      Author: ASUS
 */

#include "DHT20.h"

void DHT20_Init(I2C_HandleTypeDef* i2c, DHT20_Typedef* DHT_Name){
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
	HAL_Delay(100);
 8002b72:	2064      	movs	r0, #100	; 0x64
 8002b74:	f000 f896 	bl	8002ca4 <HAL_Delay>
	DHT_Name->Humidity = 0;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
	DHT_Name->Temperature = 0;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	605a      	str	r2, [r3, #4]
	DHT_Name->I2C_Name = i2c;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	609a      	str	r2, [r3, #8]
}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <init_ledRGB>:
 *  Created on: Sep 20, 2024
 *      Author: ASUS
 */
#include "ledRGB.h"

HAL_StatusTypeDef init_ledRGB(TIM_HandleTypeDef* htim_rgb){
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
	if(HAL_TIM_PWM_Start(htim_rgb, TIM_CHANNEL_1) != HAL_OK){
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f002 fcb7 	bl	8005514 <HAL_TIM_PWM_Start>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <init_ledRGB+0x1a>
		return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e012      	b.n	8002bd6 <init_ledRGB+0x40>
	}
	else if(HAL_TIM_PWM_Start(htim_rgb, TIM_CHANNEL_2) != HAL_OK){
 8002bb0:	2104      	movs	r1, #4
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f002 fcae 	bl	8005514 <HAL_TIM_PWM_Start>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <init_ledRGB+0x2c>
		return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e009      	b.n	8002bd6 <init_ledRGB+0x40>
	}
	else if(HAL_TIM_PWM_Start(htim_rgb, TIM_CHANNEL_3) != HAL_OK){
 8002bc2:	2108      	movs	r1, #8
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f002 fca5 	bl	8005514 <HAL_TIM_PWM_Start>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <init_ledRGB+0x3e>
		return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e000      	b.n	8002bd6 <init_ledRGB+0x40>
	}
	return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002be4:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <HAL_Init+0x28>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a07      	ldr	r2, [pc, #28]	; (8002c08 <HAL_Init+0x28>)
 8002bea:	f043 0310 	orr.w	r3, r3, #16
 8002bee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bf0:	2003      	movs	r0, #3
 8002bf2:	f000 f947 	bl	8002e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bf6:	200f      	movs	r0, #15
 8002bf8:	f000 f808 	bl	8002c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bfc:	f7ff f8fe 	bl	8001dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40022000 	.word	0x40022000

08002c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c14:	4b12      	ldr	r3, [pc, #72]	; (8002c60 <HAL_InitTick+0x54>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <HAL_InitTick+0x58>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 f95f 	bl	8002eee <HAL_SYSTICK_Config>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e00e      	b.n	8002c58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b0f      	cmp	r3, #15
 8002c3e:	d80a      	bhi.n	8002c56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c40:	2200      	movs	r2, #0
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	f04f 30ff 	mov.w	r0, #4294967295
 8002c48:	f000 f927 	bl	8002e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c4c:	4a06      	ldr	r2, [pc, #24]	; (8002c68 <HAL_InitTick+0x5c>)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e000      	b.n	8002c58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	2000002c 	.word	0x2000002c
 8002c64:	20000034 	.word	0x20000034
 8002c68:	20000030 	.word	0x20000030

08002c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c70:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <HAL_IncTick+0x1c>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_IncTick+0x20>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	4a03      	ldr	r2, [pc, #12]	; (8002c8c <HAL_IncTick+0x20>)
 8002c7e:	6013      	str	r3, [r2, #0]
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr
 8002c88:	20000034 	.word	0x20000034
 8002c8c:	20000ad0 	.word	0x20000ad0

08002c90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return uwTick;
 8002c94:	4b02      	ldr	r3, [pc, #8]	; (8002ca0 <HAL_GetTick+0x10>)
 8002c96:	681b      	ldr	r3, [r3, #0]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr
 8002ca0:	20000ad0 	.word	0x20000ad0

08002ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cac:	f7ff fff0 	bl	8002c90 <HAL_GetTick>
 8002cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbc:	d005      	beq.n	8002cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <HAL_Delay+0x44>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cca:	bf00      	nop
 8002ccc:	f7ff ffe0 	bl	8002c90 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d8f7      	bhi.n	8002ccc <HAL_Delay+0x28>
  {
  }
}
 8002cdc:	bf00      	nop
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20000034 	.word	0x20000034

08002cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cfc:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <__NVIC_SetPriorityGrouping+0x44>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d08:	4013      	ands	r3, r2
 8002d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d1e:	4a04      	ldr	r2, [pc, #16]	; (8002d30 <__NVIC_SetPriorityGrouping+0x44>)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	60d3      	str	r3, [r2, #12]
}
 8002d24:	bf00      	nop
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d38:	4b04      	ldr	r3, [pc, #16]	; (8002d4c <__NVIC_GetPriorityGrouping+0x18>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	0a1b      	lsrs	r3, r3, #8
 8002d3e:	f003 0307 	and.w	r3, r3, #7
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	db0b      	blt.n	8002d7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	f003 021f 	and.w	r2, r3, #31
 8002d68:	4906      	ldr	r1, [pc, #24]	; (8002d84 <__NVIC_EnableIRQ+0x34>)
 8002d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	2001      	movs	r0, #1
 8002d72:	fa00 f202 	lsl.w	r2, r0, r2
 8002d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr
 8002d84:	e000e100 	.word	0xe000e100

08002d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	6039      	str	r1, [r7, #0]
 8002d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	db0a      	blt.n	8002db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	490c      	ldr	r1, [pc, #48]	; (8002dd4 <__NVIC_SetPriority+0x4c>)
 8002da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da6:	0112      	lsls	r2, r2, #4
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	440b      	add	r3, r1
 8002dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002db0:	e00a      	b.n	8002dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	4908      	ldr	r1, [pc, #32]	; (8002dd8 <__NVIC_SetPriority+0x50>)
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	3b04      	subs	r3, #4
 8002dc0:	0112      	lsls	r2, r2, #4
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	761a      	strb	r2, [r3, #24]
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	e000e100 	.word	0xe000e100
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b089      	sub	sp, #36	; 0x24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f1c3 0307 	rsb	r3, r3, #7
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	bf28      	it	cs
 8002dfa:	2304      	movcs	r3, #4
 8002dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	3304      	adds	r3, #4
 8002e02:	2b06      	cmp	r3, #6
 8002e04:	d902      	bls.n	8002e0c <NVIC_EncodePriority+0x30>
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	3b03      	subs	r3, #3
 8002e0a:	e000      	b.n	8002e0e <NVIC_EncodePriority+0x32>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e10:	f04f 32ff 	mov.w	r2, #4294967295
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43da      	mvns	r2, r3
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	401a      	ands	r2, r3
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e24:	f04f 31ff 	mov.w	r1, #4294967295
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2e:	43d9      	mvns	r1, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e34:	4313      	orrs	r3, r2
         );
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3724      	adds	r7, #36	; 0x24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr

08002e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e50:	d301      	bcc.n	8002e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e52:	2301      	movs	r3, #1
 8002e54:	e00f      	b.n	8002e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e56:	4a0a      	ldr	r2, [pc, #40]	; (8002e80 <SysTick_Config+0x40>)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e5e:	210f      	movs	r1, #15
 8002e60:	f04f 30ff 	mov.w	r0, #4294967295
 8002e64:	f7ff ff90 	bl	8002d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <SysTick_Config+0x40>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e6e:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <SysTick_Config+0x40>)
 8002e70:	2207      	movs	r2, #7
 8002e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	e000e010 	.word	0xe000e010

08002e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff ff2d 	bl	8002cec <__NVIC_SetPriorityGrouping>
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b086      	sub	sp, #24
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
 8002ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002eac:	f7ff ff42 	bl	8002d34 <__NVIC_GetPriorityGrouping>
 8002eb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	6978      	ldr	r0, [r7, #20]
 8002eb8:	f7ff ff90 	bl	8002ddc <NVIC_EncodePriority>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff ff5f 	bl	8002d88 <__NVIC_SetPriority>
}
 8002eca:	bf00      	nop
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	4603      	mov	r3, r0
 8002eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff ff35 	bl	8002d50 <__NVIC_EnableIRQ>
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b082      	sub	sp, #8
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7ff ffa2 	bl	8002e40 <SysTick_Config>
 8002efc:	4603      	mov	r3, r0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e043      	b.n	8002fa6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	461a      	mov	r2, r3
 8002f24:	4b22      	ldr	r3, [pc, #136]	; (8002fb0 <HAL_DMA_Init+0xa8>)
 8002f26:	4413      	add	r3, r2
 8002f28:	4a22      	ldr	r2, [pc, #136]	; (8002fb4 <HAL_DMA_Init+0xac>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	091b      	lsrs	r3, r3, #4
 8002f30:	009a      	lsls	r2, r3, #2
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a1f      	ldr	r2, [pc, #124]	; (8002fb8 <HAL_DMA_Init+0xb0>)
 8002f3a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002f52:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002f56:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002f60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr
 8002fb0:	bffdfff8 	.word	0xbffdfff8
 8002fb4:	cccccccd 	.word	0xcccccccd
 8002fb8:	40020000 	.word	0x40020000

08002fbc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
 8002fc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_DMA_Start_IT+0x20>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e04b      	b.n	8003074 <HAL_DMA_Start_IT+0xb8>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d13a      	bne.n	8003066 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0201 	bic.w	r2, r2, #1
 800300c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	68b9      	ldr	r1, [r7, #8]
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f000 f9f6 	bl	8003406 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	2b00      	cmp	r3, #0
 8003020:	d008      	beq.n	8003034 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 020e 	orr.w	r2, r2, #14
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	e00f      	b.n	8003054 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0204 	bic.w	r2, r2, #4
 8003042:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 020a 	orr.w	r2, r2, #10
 8003052:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0201 	orr.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	e005      	b.n	8003072 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800306e:	2302      	movs	r3, #2
 8003070:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003072:	7dfb      	ldrb	r3, [r7, #23]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d008      	beq.n	80030a6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2204      	movs	r2, #4
 8003098:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e020      	b.n	80030e8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 020e 	bic.w	r2, r2, #14
 80030b4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0201 	bic.w	r2, r2, #1
 80030c4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ce:	2101      	movs	r1, #1
 80030d0:	fa01 f202 	lsl.w	r2, r1, r2
 80030d4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc80      	pop	{r7}
 80030f0:	4770      	bx	lr
	...

080030f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030fc:	2300      	movs	r3, #0
 80030fe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d005      	beq.n	8003118 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2204      	movs	r2, #4
 8003110:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	73fb      	strb	r3, [r7, #15]
 8003116:	e051      	b.n	80031bc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 020e 	bic.w	r2, r2, #14
 8003126:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0201 	bic.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a22      	ldr	r2, [pc, #136]	; (80031c8 <HAL_DMA_Abort_IT+0xd4>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d029      	beq.n	8003196 <HAL_DMA_Abort_IT+0xa2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a21      	ldr	r2, [pc, #132]	; (80031cc <HAL_DMA_Abort_IT+0xd8>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d022      	beq.n	8003192 <HAL_DMA_Abort_IT+0x9e>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a1f      	ldr	r2, [pc, #124]	; (80031d0 <HAL_DMA_Abort_IT+0xdc>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d01a      	beq.n	800318c <HAL_DMA_Abort_IT+0x98>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a1e      	ldr	r2, [pc, #120]	; (80031d4 <HAL_DMA_Abort_IT+0xe0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d012      	beq.n	8003186 <HAL_DMA_Abort_IT+0x92>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a1c      	ldr	r2, [pc, #112]	; (80031d8 <HAL_DMA_Abort_IT+0xe4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00a      	beq.n	8003180 <HAL_DMA_Abort_IT+0x8c>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a1b      	ldr	r2, [pc, #108]	; (80031dc <HAL_DMA_Abort_IT+0xe8>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d102      	bne.n	800317a <HAL_DMA_Abort_IT+0x86>
 8003174:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003178:	e00e      	b.n	8003198 <HAL_DMA_Abort_IT+0xa4>
 800317a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800317e:	e00b      	b.n	8003198 <HAL_DMA_Abort_IT+0xa4>
 8003180:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003184:	e008      	b.n	8003198 <HAL_DMA_Abort_IT+0xa4>
 8003186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800318a:	e005      	b.n	8003198 <HAL_DMA_Abort_IT+0xa4>
 800318c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003190:	e002      	b.n	8003198 <HAL_DMA_Abort_IT+0xa4>
 8003192:	2310      	movs	r3, #16
 8003194:	e000      	b.n	8003198 <HAL_DMA_Abort_IT+0xa4>
 8003196:	2301      	movs	r3, #1
 8003198:	4a11      	ldr	r2, [pc, #68]	; (80031e0 <HAL_DMA_Abort_IT+0xec>)
 800319a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	4798      	blx	r3
    } 
  }
  return status;
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40020008 	.word	0x40020008
 80031cc:	4002001c 	.word	0x4002001c
 80031d0:	40020030 	.word	0x40020030
 80031d4:	40020044 	.word	0x40020044
 80031d8:	40020058 	.word	0x40020058
 80031dc:	4002006c 	.word	0x4002006c
 80031e0:	40020000 	.word	0x40020000

080031e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	2204      	movs	r2, #4
 8003202:	409a      	lsls	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4013      	ands	r3, r2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d04f      	beq.n	80032ac <HAL_DMA_IRQHandler+0xc8>
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b00      	cmp	r3, #0
 8003214:	d04a      	beq.n	80032ac <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0320 	and.w	r3, r3, #32
 8003220:	2b00      	cmp	r3, #0
 8003222:	d107      	bne.n	8003234 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0204 	bic.w	r2, r2, #4
 8003232:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a66      	ldr	r2, [pc, #408]	; (80033d4 <HAL_DMA_IRQHandler+0x1f0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d029      	beq.n	8003292 <HAL_DMA_IRQHandler+0xae>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a65      	ldr	r2, [pc, #404]	; (80033d8 <HAL_DMA_IRQHandler+0x1f4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d022      	beq.n	800328e <HAL_DMA_IRQHandler+0xaa>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a63      	ldr	r2, [pc, #396]	; (80033dc <HAL_DMA_IRQHandler+0x1f8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d01a      	beq.n	8003288 <HAL_DMA_IRQHandler+0xa4>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a62      	ldr	r2, [pc, #392]	; (80033e0 <HAL_DMA_IRQHandler+0x1fc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d012      	beq.n	8003282 <HAL_DMA_IRQHandler+0x9e>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a60      	ldr	r2, [pc, #384]	; (80033e4 <HAL_DMA_IRQHandler+0x200>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d00a      	beq.n	800327c <HAL_DMA_IRQHandler+0x98>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a5f      	ldr	r2, [pc, #380]	; (80033e8 <HAL_DMA_IRQHandler+0x204>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d102      	bne.n	8003276 <HAL_DMA_IRQHandler+0x92>
 8003270:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003274:	e00e      	b.n	8003294 <HAL_DMA_IRQHandler+0xb0>
 8003276:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800327a:	e00b      	b.n	8003294 <HAL_DMA_IRQHandler+0xb0>
 800327c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003280:	e008      	b.n	8003294 <HAL_DMA_IRQHandler+0xb0>
 8003282:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003286:	e005      	b.n	8003294 <HAL_DMA_IRQHandler+0xb0>
 8003288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800328c:	e002      	b.n	8003294 <HAL_DMA_IRQHandler+0xb0>
 800328e:	2340      	movs	r3, #64	; 0x40
 8003290:	e000      	b.n	8003294 <HAL_DMA_IRQHandler+0xb0>
 8003292:	2304      	movs	r3, #4
 8003294:	4a55      	ldr	r2, [pc, #340]	; (80033ec <HAL_DMA_IRQHandler+0x208>)
 8003296:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 8094 	beq.w	80033ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80032aa:	e08e      	b.n	80033ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	2202      	movs	r2, #2
 80032b2:	409a      	lsls	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d056      	beq.n	800336a <HAL_DMA_IRQHandler+0x186>
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d051      	beq.n	800336a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10b      	bne.n	80032ec <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 020a 	bic.w	r2, r2, #10
 80032e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a38      	ldr	r2, [pc, #224]	; (80033d4 <HAL_DMA_IRQHandler+0x1f0>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d029      	beq.n	800334a <HAL_DMA_IRQHandler+0x166>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a37      	ldr	r2, [pc, #220]	; (80033d8 <HAL_DMA_IRQHandler+0x1f4>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d022      	beq.n	8003346 <HAL_DMA_IRQHandler+0x162>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a35      	ldr	r2, [pc, #212]	; (80033dc <HAL_DMA_IRQHandler+0x1f8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d01a      	beq.n	8003340 <HAL_DMA_IRQHandler+0x15c>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a34      	ldr	r2, [pc, #208]	; (80033e0 <HAL_DMA_IRQHandler+0x1fc>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d012      	beq.n	800333a <HAL_DMA_IRQHandler+0x156>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a32      	ldr	r2, [pc, #200]	; (80033e4 <HAL_DMA_IRQHandler+0x200>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d00a      	beq.n	8003334 <HAL_DMA_IRQHandler+0x150>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a31      	ldr	r2, [pc, #196]	; (80033e8 <HAL_DMA_IRQHandler+0x204>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d102      	bne.n	800332e <HAL_DMA_IRQHandler+0x14a>
 8003328:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800332c:	e00e      	b.n	800334c <HAL_DMA_IRQHandler+0x168>
 800332e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003332:	e00b      	b.n	800334c <HAL_DMA_IRQHandler+0x168>
 8003334:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003338:	e008      	b.n	800334c <HAL_DMA_IRQHandler+0x168>
 800333a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800333e:	e005      	b.n	800334c <HAL_DMA_IRQHandler+0x168>
 8003340:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003344:	e002      	b.n	800334c <HAL_DMA_IRQHandler+0x168>
 8003346:	2320      	movs	r3, #32
 8003348:	e000      	b.n	800334c <HAL_DMA_IRQHandler+0x168>
 800334a:	2302      	movs	r3, #2
 800334c:	4a27      	ldr	r2, [pc, #156]	; (80033ec <HAL_DMA_IRQHandler+0x208>)
 800334e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335c:	2b00      	cmp	r3, #0
 800335e:	d034      	beq.n	80033ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003368:	e02f      	b.n	80033ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	2208      	movs	r2, #8
 8003370:	409a      	lsls	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4013      	ands	r3, r2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d028      	beq.n	80033cc <HAL_DMA_IRQHandler+0x1e8>
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f003 0308 	and.w	r3, r3, #8
 8003380:	2b00      	cmp	r3, #0
 8003382:	d023      	beq.n	80033cc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 020e 	bic.w	r2, r2, #14
 8003392:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339c:	2101      	movs	r1, #1
 800339e:	fa01 f202 	lsl.w	r2, r1, r2
 80033a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d004      	beq.n	80033cc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	4798      	blx	r3
    }
  }
  return;
 80033ca:	bf00      	nop
 80033cc:	bf00      	nop
}
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40020008 	.word	0x40020008
 80033d8:	4002001c 	.word	0x4002001c
 80033dc:	40020030 	.word	0x40020030
 80033e0:	40020044 	.word	0x40020044
 80033e4:	40020058 	.word	0x40020058
 80033e8:	4002006c 	.word	0x4002006c
 80033ec:	40020000 	.word	0x40020000

080033f0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	bc80      	pop	{r7}
 8003404:	4770      	bx	lr

08003406 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003406:	b480      	push	{r7}
 8003408:	b085      	sub	sp, #20
 800340a:	af00      	add	r7, sp, #0
 800340c:	60f8      	str	r0, [r7, #12]
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
 8003412:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341c:	2101      	movs	r1, #1
 800341e:	fa01 f202 	lsl.w	r2, r1, r2
 8003422:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b10      	cmp	r3, #16
 8003432:	d108      	bne.n	8003446 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003444:	e007      	b.n	8003456 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	60da      	str	r2, [r3, #12]
}
 8003456:	bf00      	nop
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr

08003460 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003460:	b480      	push	{r7}
 8003462:	b08b      	sub	sp, #44	; 0x2c
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800346a:	2300      	movs	r3, #0
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800346e:	2300      	movs	r3, #0
 8003470:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003472:	e169      	b.n	8003748 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003474:	2201      	movs	r2, #1
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	4013      	ands	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	429a      	cmp	r2, r3
 800348e:	f040 8158 	bne.w	8003742 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	4a9a      	ldr	r2, [pc, #616]	; (8003700 <HAL_GPIO_Init+0x2a0>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d05e      	beq.n	800355a <HAL_GPIO_Init+0xfa>
 800349c:	4a98      	ldr	r2, [pc, #608]	; (8003700 <HAL_GPIO_Init+0x2a0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d875      	bhi.n	800358e <HAL_GPIO_Init+0x12e>
 80034a2:	4a98      	ldr	r2, [pc, #608]	; (8003704 <HAL_GPIO_Init+0x2a4>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d058      	beq.n	800355a <HAL_GPIO_Init+0xfa>
 80034a8:	4a96      	ldr	r2, [pc, #600]	; (8003704 <HAL_GPIO_Init+0x2a4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d86f      	bhi.n	800358e <HAL_GPIO_Init+0x12e>
 80034ae:	4a96      	ldr	r2, [pc, #600]	; (8003708 <HAL_GPIO_Init+0x2a8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d052      	beq.n	800355a <HAL_GPIO_Init+0xfa>
 80034b4:	4a94      	ldr	r2, [pc, #592]	; (8003708 <HAL_GPIO_Init+0x2a8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d869      	bhi.n	800358e <HAL_GPIO_Init+0x12e>
 80034ba:	4a94      	ldr	r2, [pc, #592]	; (800370c <HAL_GPIO_Init+0x2ac>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d04c      	beq.n	800355a <HAL_GPIO_Init+0xfa>
 80034c0:	4a92      	ldr	r2, [pc, #584]	; (800370c <HAL_GPIO_Init+0x2ac>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d863      	bhi.n	800358e <HAL_GPIO_Init+0x12e>
 80034c6:	4a92      	ldr	r2, [pc, #584]	; (8003710 <HAL_GPIO_Init+0x2b0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d046      	beq.n	800355a <HAL_GPIO_Init+0xfa>
 80034cc:	4a90      	ldr	r2, [pc, #576]	; (8003710 <HAL_GPIO_Init+0x2b0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d85d      	bhi.n	800358e <HAL_GPIO_Init+0x12e>
 80034d2:	2b12      	cmp	r3, #18
 80034d4:	d82a      	bhi.n	800352c <HAL_GPIO_Init+0xcc>
 80034d6:	2b12      	cmp	r3, #18
 80034d8:	d859      	bhi.n	800358e <HAL_GPIO_Init+0x12e>
 80034da:	a201      	add	r2, pc, #4	; (adr r2, 80034e0 <HAL_GPIO_Init+0x80>)
 80034dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e0:	0800355b 	.word	0x0800355b
 80034e4:	08003535 	.word	0x08003535
 80034e8:	08003547 	.word	0x08003547
 80034ec:	08003589 	.word	0x08003589
 80034f0:	0800358f 	.word	0x0800358f
 80034f4:	0800358f 	.word	0x0800358f
 80034f8:	0800358f 	.word	0x0800358f
 80034fc:	0800358f 	.word	0x0800358f
 8003500:	0800358f 	.word	0x0800358f
 8003504:	0800358f 	.word	0x0800358f
 8003508:	0800358f 	.word	0x0800358f
 800350c:	0800358f 	.word	0x0800358f
 8003510:	0800358f 	.word	0x0800358f
 8003514:	0800358f 	.word	0x0800358f
 8003518:	0800358f 	.word	0x0800358f
 800351c:	0800358f 	.word	0x0800358f
 8003520:	0800358f 	.word	0x0800358f
 8003524:	0800353d 	.word	0x0800353d
 8003528:	08003551 	.word	0x08003551
 800352c:	4a79      	ldr	r2, [pc, #484]	; (8003714 <HAL_GPIO_Init+0x2b4>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d013      	beq.n	800355a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003532:	e02c      	b.n	800358e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	623b      	str	r3, [r7, #32]
          break;
 800353a:	e029      	b.n	8003590 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	3304      	adds	r3, #4
 8003542:	623b      	str	r3, [r7, #32]
          break;
 8003544:	e024      	b.n	8003590 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	3308      	adds	r3, #8
 800354c:	623b      	str	r3, [r7, #32]
          break;
 800354e:	e01f      	b.n	8003590 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	330c      	adds	r3, #12
 8003556:	623b      	str	r3, [r7, #32]
          break;
 8003558:	e01a      	b.n	8003590 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d102      	bne.n	8003568 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003562:	2304      	movs	r3, #4
 8003564:	623b      	str	r3, [r7, #32]
          break;
 8003566:	e013      	b.n	8003590 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d105      	bne.n	800357c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003570:	2308      	movs	r3, #8
 8003572:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	611a      	str	r2, [r3, #16]
          break;
 800357a:	e009      	b.n	8003590 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800357c:	2308      	movs	r3, #8
 800357e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	69fa      	ldr	r2, [r7, #28]
 8003584:	615a      	str	r2, [r3, #20]
          break;
 8003586:	e003      	b.n	8003590 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003588:	2300      	movs	r3, #0
 800358a:	623b      	str	r3, [r7, #32]
          break;
 800358c:	e000      	b.n	8003590 <HAL_GPIO_Init+0x130>
          break;
 800358e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	2bff      	cmp	r3, #255	; 0xff
 8003594:	d801      	bhi.n	800359a <HAL_GPIO_Init+0x13a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	e001      	b.n	800359e <HAL_GPIO_Init+0x13e>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3304      	adds	r3, #4
 800359e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	2bff      	cmp	r3, #255	; 0xff
 80035a4:	d802      	bhi.n	80035ac <HAL_GPIO_Init+0x14c>
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	e002      	b.n	80035b2 <HAL_GPIO_Init+0x152>
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	3b08      	subs	r3, #8
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	210f      	movs	r1, #15
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	fa01 f303 	lsl.w	r3, r1, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	401a      	ands	r2, r3
 80035c4:	6a39      	ldr	r1, [r7, #32]
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	fa01 f303 	lsl.w	r3, r1, r3
 80035cc:	431a      	orrs	r2, r3
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 80b1 	beq.w	8003742 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035e0:	4b4d      	ldr	r3, [pc, #308]	; (8003718 <HAL_GPIO_Init+0x2b8>)
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	4a4c      	ldr	r2, [pc, #304]	; (8003718 <HAL_GPIO_Init+0x2b8>)
 80035e6:	f043 0301 	orr.w	r3, r3, #1
 80035ea:	6193      	str	r3, [r2, #24]
 80035ec:	4b4a      	ldr	r3, [pc, #296]	; (8003718 <HAL_GPIO_Init+0x2b8>)
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035f8:	4a48      	ldr	r2, [pc, #288]	; (800371c <HAL_GPIO_Init+0x2bc>)
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	089b      	lsrs	r3, r3, #2
 80035fe:	3302      	adds	r3, #2
 8003600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003604:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	f003 0303 	and.w	r3, r3, #3
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	220f      	movs	r2, #15
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	43db      	mvns	r3, r3
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4013      	ands	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a40      	ldr	r2, [pc, #256]	; (8003720 <HAL_GPIO_Init+0x2c0>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d013      	beq.n	800364c <HAL_GPIO_Init+0x1ec>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a3f      	ldr	r2, [pc, #252]	; (8003724 <HAL_GPIO_Init+0x2c4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d00d      	beq.n	8003648 <HAL_GPIO_Init+0x1e8>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a3e      	ldr	r2, [pc, #248]	; (8003728 <HAL_GPIO_Init+0x2c8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d007      	beq.n	8003644 <HAL_GPIO_Init+0x1e4>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a3d      	ldr	r2, [pc, #244]	; (800372c <HAL_GPIO_Init+0x2cc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d101      	bne.n	8003640 <HAL_GPIO_Init+0x1e0>
 800363c:	2303      	movs	r3, #3
 800363e:	e006      	b.n	800364e <HAL_GPIO_Init+0x1ee>
 8003640:	2304      	movs	r3, #4
 8003642:	e004      	b.n	800364e <HAL_GPIO_Init+0x1ee>
 8003644:	2302      	movs	r3, #2
 8003646:	e002      	b.n	800364e <HAL_GPIO_Init+0x1ee>
 8003648:	2301      	movs	r3, #1
 800364a:	e000      	b.n	800364e <HAL_GPIO_Init+0x1ee>
 800364c:	2300      	movs	r3, #0
 800364e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003650:	f002 0203 	and.w	r2, r2, #3
 8003654:	0092      	lsls	r2, r2, #2
 8003656:	4093      	lsls	r3, r2
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	4313      	orrs	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800365e:	492f      	ldr	r1, [pc, #188]	; (800371c <HAL_GPIO_Init+0x2bc>)
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	089b      	lsrs	r3, r3, #2
 8003664:	3302      	adds	r3, #2
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d006      	beq.n	8003686 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003678:	4b2d      	ldr	r3, [pc, #180]	; (8003730 <HAL_GPIO_Init+0x2d0>)
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	492c      	ldr	r1, [pc, #176]	; (8003730 <HAL_GPIO_Init+0x2d0>)
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	4313      	orrs	r3, r2
 8003682:	608b      	str	r3, [r1, #8]
 8003684:	e006      	b.n	8003694 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003686:	4b2a      	ldr	r3, [pc, #168]	; (8003730 <HAL_GPIO_Init+0x2d0>)
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	43db      	mvns	r3, r3
 800368e:	4928      	ldr	r1, [pc, #160]	; (8003730 <HAL_GPIO_Init+0x2d0>)
 8003690:	4013      	ands	r3, r2
 8003692:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d006      	beq.n	80036ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80036a0:	4b23      	ldr	r3, [pc, #140]	; (8003730 <HAL_GPIO_Init+0x2d0>)
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	4922      	ldr	r1, [pc, #136]	; (8003730 <HAL_GPIO_Init+0x2d0>)
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60cb      	str	r3, [r1, #12]
 80036ac:	e006      	b.n	80036bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80036ae:	4b20      	ldr	r3, [pc, #128]	; (8003730 <HAL_GPIO_Init+0x2d0>)
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	43db      	mvns	r3, r3
 80036b6:	491e      	ldr	r1, [pc, #120]	; (8003730 <HAL_GPIO_Init+0x2d0>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d006      	beq.n	80036d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80036c8:	4b19      	ldr	r3, [pc, #100]	; (8003730 <HAL_GPIO_Init+0x2d0>)
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	4918      	ldr	r1, [pc, #96]	; (8003730 <HAL_GPIO_Init+0x2d0>)
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	604b      	str	r3, [r1, #4]
 80036d4:	e006      	b.n	80036e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80036d6:	4b16      	ldr	r3, [pc, #88]	; (8003730 <HAL_GPIO_Init+0x2d0>)
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	43db      	mvns	r3, r3
 80036de:	4914      	ldr	r1, [pc, #80]	; (8003730 <HAL_GPIO_Init+0x2d0>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d021      	beq.n	8003734 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80036f0:	4b0f      	ldr	r3, [pc, #60]	; (8003730 <HAL_GPIO_Init+0x2d0>)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	490e      	ldr	r1, [pc, #56]	; (8003730 <HAL_GPIO_Init+0x2d0>)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	600b      	str	r3, [r1, #0]
 80036fc:	e021      	b.n	8003742 <HAL_GPIO_Init+0x2e2>
 80036fe:	bf00      	nop
 8003700:	10320000 	.word	0x10320000
 8003704:	10310000 	.word	0x10310000
 8003708:	10220000 	.word	0x10220000
 800370c:	10210000 	.word	0x10210000
 8003710:	10120000 	.word	0x10120000
 8003714:	10110000 	.word	0x10110000
 8003718:	40021000 	.word	0x40021000
 800371c:	40010000 	.word	0x40010000
 8003720:	40010800 	.word	0x40010800
 8003724:	40010c00 	.word	0x40010c00
 8003728:	40011000 	.word	0x40011000
 800372c:	40011400 	.word	0x40011400
 8003730:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003734:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <HAL_GPIO_Init+0x304>)
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	43db      	mvns	r3, r3
 800373c:	4909      	ldr	r1, [pc, #36]	; (8003764 <HAL_GPIO_Init+0x304>)
 800373e:	4013      	ands	r3, r2
 8003740:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	3301      	adds	r3, #1
 8003746:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	fa22 f303 	lsr.w	r3, r2, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	f47f ae8e 	bne.w	8003474 <HAL_GPIO_Init+0x14>
  }
}
 8003758:	bf00      	nop
 800375a:	bf00      	nop
 800375c:	372c      	adds	r7, #44	; 0x2c
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr
 8003764:	40010400 	.word	0x40010400

08003768 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	887b      	ldrh	r3, [r7, #2]
 800377a:	4013      	ands	r3, r2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003780:	2301      	movs	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
 8003784:	e001      	b.n	800378a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003786:	2300      	movs	r3, #0
 8003788:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800378a:	7bfb      	ldrb	r3, [r7, #15]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr

08003796 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	460b      	mov	r3, r1
 80037a0:	807b      	strh	r3, [r7, #2]
 80037a2:	4613      	mov	r3, r2
 80037a4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037a6:	787b      	ldrb	r3, [r7, #1]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ac:	887a      	ldrh	r2, [r7, #2]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80037b2:	e003      	b.n	80037bc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80037b4:	887b      	ldrh	r3, [r7, #2]
 80037b6:	041a      	lsls	r2, r3, #16
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	611a      	str	r2, [r3, #16]
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bc80      	pop	{r7}
 80037c4:	4770      	bx	lr

080037c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b085      	sub	sp, #20
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
 80037ce:	460b      	mov	r3, r1
 80037d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037d8:	887a      	ldrh	r2, [r7, #2]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4013      	ands	r3, r2
 80037de:	041a      	lsls	r2, r3, #16
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	43d9      	mvns	r1, r3
 80037e4:	887b      	ldrh	r3, [r7, #2]
 80037e6:	400b      	ands	r3, r1
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	611a      	str	r2, [r3, #16]
}
 80037ee:	bf00      	nop
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr

080037f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e12b      	b.n	8003a62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d106      	bne.n	8003824 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fd feae 	bl	8001580 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2224      	movs	r2, #36	; 0x24
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0201 	bic.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800384a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800385a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800385c:	f001 fd1a 	bl	8005294 <HAL_RCC_GetPCLK1Freq>
 8003860:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4a81      	ldr	r2, [pc, #516]	; (8003a6c <HAL_I2C_Init+0x274>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d807      	bhi.n	800387c <HAL_I2C_Init+0x84>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4a80      	ldr	r2, [pc, #512]	; (8003a70 <HAL_I2C_Init+0x278>)
 8003870:	4293      	cmp	r3, r2
 8003872:	bf94      	ite	ls
 8003874:	2301      	movls	r3, #1
 8003876:	2300      	movhi	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	e006      	b.n	800388a <HAL_I2C_Init+0x92>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4a7d      	ldr	r2, [pc, #500]	; (8003a74 <HAL_I2C_Init+0x27c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	bf94      	ite	ls
 8003884:	2301      	movls	r3, #1
 8003886:	2300      	movhi	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e0e7      	b.n	8003a62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4a78      	ldr	r2, [pc, #480]	; (8003a78 <HAL_I2C_Init+0x280>)
 8003896:	fba2 2303 	umull	r2, r3, r2, r3
 800389a:	0c9b      	lsrs	r3, r3, #18
 800389c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	4a6a      	ldr	r2, [pc, #424]	; (8003a6c <HAL_I2C_Init+0x274>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d802      	bhi.n	80038cc <HAL_I2C_Init+0xd4>
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	3301      	adds	r3, #1
 80038ca:	e009      	b.n	80038e0 <HAL_I2C_Init+0xe8>
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038d2:	fb02 f303 	mul.w	r3, r2, r3
 80038d6:	4a69      	ldr	r2, [pc, #420]	; (8003a7c <HAL_I2C_Init+0x284>)
 80038d8:	fba2 2303 	umull	r2, r3, r2, r3
 80038dc:	099b      	lsrs	r3, r3, #6
 80038de:	3301      	adds	r3, #1
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6812      	ldr	r2, [r2, #0]
 80038e4:	430b      	orrs	r3, r1
 80038e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	495c      	ldr	r1, [pc, #368]	; (8003a6c <HAL_I2C_Init+0x274>)
 80038fc:	428b      	cmp	r3, r1
 80038fe:	d819      	bhi.n	8003934 <HAL_I2C_Init+0x13c>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1e59      	subs	r1, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	fbb1 f3f3 	udiv	r3, r1, r3
 800390e:	1c59      	adds	r1, r3, #1
 8003910:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003914:	400b      	ands	r3, r1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <HAL_I2C_Init+0x138>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	1e59      	subs	r1, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	fbb1 f3f3 	udiv	r3, r1, r3
 8003928:	3301      	adds	r3, #1
 800392a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800392e:	e051      	b.n	80039d4 <HAL_I2C_Init+0x1dc>
 8003930:	2304      	movs	r3, #4
 8003932:	e04f      	b.n	80039d4 <HAL_I2C_Init+0x1dc>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d111      	bne.n	8003960 <HAL_I2C_Init+0x168>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	1e58      	subs	r0, r3, #1
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6859      	ldr	r1, [r3, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	440b      	add	r3, r1
 800394a:	fbb0 f3f3 	udiv	r3, r0, r3
 800394e:	3301      	adds	r3, #1
 8003950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003954:	2b00      	cmp	r3, #0
 8003956:	bf0c      	ite	eq
 8003958:	2301      	moveq	r3, #1
 800395a:	2300      	movne	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	e012      	b.n	8003986 <HAL_I2C_Init+0x18e>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	1e58      	subs	r0, r3, #1
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6859      	ldr	r1, [r3, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	0099      	lsls	r1, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	fbb0 f3f3 	udiv	r3, r0, r3
 8003976:	3301      	adds	r3, #1
 8003978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800397c:	2b00      	cmp	r3, #0
 800397e:	bf0c      	ite	eq
 8003980:	2301      	moveq	r3, #1
 8003982:	2300      	movne	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_I2C_Init+0x196>
 800398a:	2301      	movs	r3, #1
 800398c:	e022      	b.n	80039d4 <HAL_I2C_Init+0x1dc>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10e      	bne.n	80039b4 <HAL_I2C_Init+0x1bc>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	1e58      	subs	r0, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6859      	ldr	r1, [r3, #4]
 800399e:	460b      	mov	r3, r1
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	440b      	add	r3, r1
 80039a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80039a8:	3301      	adds	r3, #1
 80039aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039b2:	e00f      	b.n	80039d4 <HAL_I2C_Init+0x1dc>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	1e58      	subs	r0, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6859      	ldr	r1, [r3, #4]
 80039bc:	460b      	mov	r3, r1
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	0099      	lsls	r1, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ca:	3301      	adds	r3, #1
 80039cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	6809      	ldr	r1, [r1, #0]
 80039d8:	4313      	orrs	r3, r2
 80039da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69da      	ldr	r2, [r3, #28]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6911      	ldr	r1, [r2, #16]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	68d2      	ldr	r2, [r2, #12]
 8003a0e:	4311      	orrs	r1, r2
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	430b      	orrs	r3, r1
 8003a16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	695a      	ldr	r2, [r3, #20]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0201 	orr.w	r2, r2, #1
 8003a42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	000186a0 	.word	0x000186a0
 8003a70:	001e847f 	.word	0x001e847f
 8003a74:	003d08ff 	.word	0x003d08ff
 8003a78:	431bde83 	.word	0x431bde83
 8003a7c:	10624dd3 	.word	0x10624dd3

08003a80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	817b      	strh	r3, [r7, #10]
 8003a90:	4613      	mov	r3, r2
 8003a92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a94:	f7ff f8fc 	bl	8002c90 <HAL_GetTick>
 8003a98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b20      	cmp	r3, #32
 8003aa4:	f040 80e0 	bne.w	8003c68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	2319      	movs	r3, #25
 8003aae:	2201      	movs	r2, #1
 8003ab0:	4970      	ldr	r1, [pc, #448]	; (8003c74 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 fdee 	bl	8004694 <I2C_WaitOnFlagUntilTimeout>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e0d3      	b.n	8003c6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <HAL_I2C_Master_Transmit+0x50>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e0cc      	b.n	8003c6a <HAL_I2C_Master_Transmit+0x1ea>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d007      	beq.n	8003af6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f042 0201 	orr.w	r2, r2, #1
 8003af4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2221      	movs	r2, #33	; 0x21
 8003b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2210      	movs	r2, #16
 8003b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	893a      	ldrh	r2, [r7, #8]
 8003b26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4a50      	ldr	r2, [pc, #320]	; (8003c78 <HAL_I2C_Master_Transmit+0x1f8>)
 8003b36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b38:	8979      	ldrh	r1, [r7, #10]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	6a3a      	ldr	r2, [r7, #32]
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 fc3e 	bl	80043c0 <I2C_MasterRequestWrite>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e08d      	b.n	8003c6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b4e:	2300      	movs	r3, #0
 8003b50:	613b      	str	r3, [r7, #16]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	613b      	str	r3, [r7, #16]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003b64:	e066      	b.n	8003c34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	6a39      	ldr	r1, [r7, #32]
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 feac 	bl	80048c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00d      	beq.n	8003b92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d107      	bne.n	8003b8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e06b      	b.n	8003c6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	781a      	ldrb	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d11b      	bne.n	8003c08 <HAL_I2C_Master_Transmit+0x188>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d017      	beq.n	8003c08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	781a      	ldrb	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	6a39      	ldr	r1, [r7, #32]
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 fea3 	bl	8004958 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00d      	beq.n	8003c34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d107      	bne.n	8003c30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e01a      	b.n	8003c6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d194      	bne.n	8003b66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	e000      	b.n	8003c6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c68:	2302      	movs	r3, #2
  }
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	00100002 	.word	0x00100002
 8003c78:	ffff0000 	.word	0xffff0000

08003c7c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08c      	sub	sp, #48	; 0x30
 8003c80:	af02      	add	r7, sp, #8
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	4608      	mov	r0, r1
 8003c86:	4611      	mov	r1, r2
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	817b      	strh	r3, [r7, #10]
 8003c8e:	460b      	mov	r3, r1
 8003c90:	813b      	strh	r3, [r7, #8]
 8003c92:	4613      	mov	r3, r2
 8003c94:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c9a:	f7fe fff9 	bl	8002c90 <HAL_GetTick>
 8003c9e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b20      	cmp	r3, #32
 8003caa:	f040 8250 	bne.w	800414e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	2319      	movs	r3, #25
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	4982      	ldr	r1, [pc, #520]	; (8003ec0 <HAL_I2C_Mem_Read+0x244>)
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 fceb 	bl	8004694 <I2C_WaitOnFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	e243      	b.n	8004150 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_I2C_Mem_Read+0x5a>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e23c      	b.n	8004150 <HAL_I2C_Mem_Read+0x4d4>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d007      	beq.n	8003cfc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0201 	orr.w	r2, r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2222      	movs	r2, #34	; 0x22
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2240      	movs	r2, #64	; 0x40
 8003d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4a62      	ldr	r2, [pc, #392]	; (8003ec4 <HAL_I2C_Mem_Read+0x248>)
 8003d3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d3e:	88f8      	ldrh	r0, [r7, #6]
 8003d40:	893a      	ldrh	r2, [r7, #8]
 8003d42:	8979      	ldrh	r1, [r7, #10]
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	9301      	str	r3, [sp, #4]
 8003d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 fbb8 	bl	80044c4 <I2C_RequestMemoryRead>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e1f8      	b.n	8004150 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d113      	bne.n	8003d8e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d66:	2300      	movs	r3, #0
 8003d68:	61fb      	str	r3, [r7, #28]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	61fb      	str	r3, [r7, #28]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	61fb      	str	r3, [r7, #28]
 8003d7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	e1cc      	b.n	8004128 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d11e      	bne.n	8003dd4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003da4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003da6:	b672      	cpsid	i
}
 8003da8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003daa:	2300      	movs	r3, #0
 8003dac:	61bb      	str	r3, [r7, #24]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	61bb      	str	r3, [r7, #24]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	61bb      	str	r3, [r7, #24]
 8003dbe:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003dd0:	b662      	cpsie	i
}
 8003dd2:	e035      	b.n	8003e40 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d11e      	bne.n	8003e1a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003dec:	b672      	cpsid	i
}
 8003dee:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df0:	2300      	movs	r3, #0
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e16:	b662      	cpsie	i
}
 8003e18:	e012      	b.n	8003e40 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e28:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	613b      	str	r3, [r7, #16]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	613b      	str	r3, [r7, #16]
 8003e3e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003e40:	e172      	b.n	8004128 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e46:	2b03      	cmp	r3, #3
 8003e48:	f200 811f 	bhi.w	800408a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d123      	bne.n	8003e9c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 fdc5 	bl	80049e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e173      	b.n	8004150 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e9a:	e145      	b.n	8004128 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d152      	bne.n	8003f4a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eaa:	2200      	movs	r2, #0
 8003eac:	4906      	ldr	r1, [pc, #24]	; (8003ec8 <HAL_I2C_Mem_Read+0x24c>)
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 fbf0 	bl	8004694 <I2C_WaitOnFlagUntilTimeout>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d008      	beq.n	8003ecc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e148      	b.n	8004150 <HAL_I2C_Mem_Read+0x4d4>
 8003ebe:	bf00      	nop
 8003ec0:	00100002 	.word	0x00100002
 8003ec4:	ffff0000 	.word	0xffff0000
 8003ec8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003ecc:	b672      	cpsid	i
}
 8003ece:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ede:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	691a      	ldr	r2, [r3, #16]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003f12:	b662      	cpsie	i
}
 8003f14:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	b2d2      	uxtb	r2, r2
 8003f22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f48:	e0ee      	b.n	8004128 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f50:	2200      	movs	r2, #0
 8003f52:	4981      	ldr	r1, [pc, #516]	; (8004158 <HAL_I2C_Mem_Read+0x4dc>)
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 fb9d 	bl	8004694 <I2C_WaitOnFlagUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e0f5      	b.n	8004150 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f72:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f74:	b672      	cpsid	i
}
 8003f76:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691a      	ldr	r2, [r3, #16]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003faa:	4b6c      	ldr	r3, [pc, #432]	; (800415c <HAL_I2C_Mem_Read+0x4e0>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	08db      	lsrs	r3, r3, #3
 8003fb0:	4a6b      	ldr	r2, [pc, #428]	; (8004160 <HAL_I2C_Mem_Read+0x4e4>)
 8003fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb6:	0a1a      	lsrs	r2, r3, #8
 8003fb8:	4613      	mov	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	00da      	lsls	r2, r3, #3
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d118      	bne.n	8004002 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f043 0220 	orr.w	r2, r3, #32
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003ff2:	b662      	cpsie	i
}
 8003ff4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e0a6      	b.n	8004150 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b04      	cmp	r3, #4
 800400e:	d1d9      	bne.n	8003fc4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800401e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	691a      	ldr	r2, [r3, #16]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004048:	b29b      	uxth	r3, r3
 800404a:	3b01      	subs	r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004052:	b662      	cpsie	i
}
 8004054:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	691a      	ldr	r2, [r3, #16]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004072:	3b01      	subs	r3, #1
 8004074:	b29a      	uxth	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407e:	b29b      	uxth	r3, r3
 8004080:	3b01      	subs	r3, #1
 8004082:	b29a      	uxth	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004088:	e04e      	b.n	8004128 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800408a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800408c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 fcaa 	bl	80049e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e058      	b.n	8004150 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	3b01      	subs	r3, #1
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d124      	bne.n	8004128 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	d107      	bne.n	80040f6 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412c:	2b00      	cmp	r3, #0
 800412e:	f47f ae88 	bne.w	8003e42 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2220      	movs	r2, #32
 8004136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	e000      	b.n	8004150 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800414e:	2302      	movs	r3, #2
  }
}
 8004150:	4618      	mov	r0, r3
 8004152:	3728      	adds	r7, #40	; 0x28
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	00010004 	.word	0x00010004
 800415c:	2000002c 	.word	0x2000002c
 8004160:	14f8b589 	.word	0x14f8b589

08004164 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08a      	sub	sp, #40	; 0x28
 8004168:	af02      	add	r7, sp, #8
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	607a      	str	r2, [r7, #4]
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	460b      	mov	r3, r1
 8004172:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004174:	f7fe fd8c 	bl	8002c90 <HAL_GetTick>
 8004178:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800417a:	2300      	movs	r3, #0
 800417c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b20      	cmp	r3, #32
 8004188:	f040 8111 	bne.w	80043ae <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	2319      	movs	r3, #25
 8004192:	2201      	movs	r2, #1
 8004194:	4988      	ldr	r1, [pc, #544]	; (80043b8 <HAL_I2C_IsDeviceReady+0x254>)
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 fa7c 	bl	8004694 <I2C_WaitOnFlagUntilTimeout>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80041a2:	2302      	movs	r3, #2
 80041a4:	e104      	b.n	80043b0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d101      	bne.n	80041b4 <HAL_I2C_IsDeviceReady+0x50>
 80041b0:	2302      	movs	r3, #2
 80041b2:	e0fd      	b.n	80043b0 <HAL_I2C_IsDeviceReady+0x24c>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d007      	beq.n	80041da <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f042 0201 	orr.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2224      	movs	r2, #36	; 0x24
 80041ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4a70      	ldr	r2, [pc, #448]	; (80043bc <HAL_I2C_IsDeviceReady+0x258>)
 80041fc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800420c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2200      	movs	r2, #0
 8004216:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 fa3a 	bl	8004694 <I2C_WaitOnFlagUntilTimeout>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00d      	beq.n	8004242 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004234:	d103      	bne.n	800423e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800423c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e0b6      	b.n	80043b0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004242:	897b      	ldrh	r3, [r7, #10]
 8004244:	b2db      	uxtb	r3, r3
 8004246:	461a      	mov	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004250:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004252:	f7fe fd1d 	bl	8002c90 <HAL_GetTick>
 8004256:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b02      	cmp	r3, #2
 8004264:	bf0c      	ite	eq
 8004266:	2301      	moveq	r3, #1
 8004268:	2300      	movne	r3, #0
 800426a:	b2db      	uxtb	r3, r3
 800426c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800427c:	bf0c      	ite	eq
 800427e:	2301      	moveq	r3, #1
 8004280:	2300      	movne	r3, #0
 8004282:	b2db      	uxtb	r3, r3
 8004284:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004286:	e025      	b.n	80042d4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004288:	f7fe fd02 	bl	8002c90 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d302      	bcc.n	800429e <HAL_I2C_IsDeviceReady+0x13a>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d103      	bne.n	80042a6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	22a0      	movs	r2, #160	; 0xa0
 80042a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	bf0c      	ite	eq
 80042b4:	2301      	moveq	r3, #1
 80042b6:	2300      	movne	r3, #0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ca:	bf0c      	ite	eq
 80042cc:	2301      	moveq	r3, #1
 80042ce:	2300      	movne	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2ba0      	cmp	r3, #160	; 0xa0
 80042de:	d005      	beq.n	80042ec <HAL_I2C_IsDeviceReady+0x188>
 80042e0:	7dfb      	ldrb	r3, [r7, #23]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d102      	bne.n	80042ec <HAL_I2C_IsDeviceReady+0x188>
 80042e6:	7dbb      	ldrb	r3, [r7, #22]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0cd      	beq.n	8004288 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d129      	bne.n	8004356 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004310:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004312:	2300      	movs	r3, #0
 8004314:	613b      	str	r3, [r7, #16]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	613b      	str	r3, [r7, #16]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	613b      	str	r3, [r7, #16]
 8004326:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	2319      	movs	r3, #25
 800432e:	2201      	movs	r2, #1
 8004330:	4921      	ldr	r1, [pc, #132]	; (80043b8 <HAL_I2C_IsDeviceReady+0x254>)
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 f9ae 	bl	8004694 <I2C_WaitOnFlagUntilTimeout>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e036      	b.n	80043b0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2220      	movs	r2, #32
 8004346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004352:	2300      	movs	r3, #0
 8004354:	e02c      	b.n	80043b0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004364:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800436e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	2319      	movs	r3, #25
 8004376:	2201      	movs	r2, #1
 8004378:	490f      	ldr	r1, [pc, #60]	; (80043b8 <HAL_I2C_IsDeviceReady+0x254>)
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 f98a 	bl	8004694 <I2C_WaitOnFlagUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e012      	b.n	80043b0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	3301      	adds	r3, #1
 800438e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	429a      	cmp	r2, r3
 8004396:	f4ff af32 	bcc.w	80041fe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2220      	movs	r2, #32
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e000      	b.n	80043b0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80043ae:	2302      	movs	r3, #2
  }
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3720      	adds	r7, #32
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	00100002 	.word	0x00100002
 80043bc:	ffff0000 	.word	0xffff0000

080043c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b088      	sub	sp, #32
 80043c4:	af02      	add	r7, sp, #8
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	607a      	str	r2, [r7, #4]
 80043ca:	603b      	str	r3, [r7, #0]
 80043cc:	460b      	mov	r3, r1
 80043ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d006      	beq.n	80043ea <I2C_MasterRequestWrite+0x2a>
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d003      	beq.n	80043ea <I2C_MasterRequestWrite+0x2a>
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043e8:	d108      	bne.n	80043fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	e00b      	b.n	8004414 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004400:	2b12      	cmp	r3, #18
 8004402:	d107      	bne.n	8004414 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004412:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 f937 	bl	8004694 <I2C_WaitOnFlagUntilTimeout>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00d      	beq.n	8004448 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800443a:	d103      	bne.n	8004444 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004442:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e035      	b.n	80044b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004450:	d108      	bne.n	8004464 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004452:	897b      	ldrh	r3, [r7, #10]
 8004454:	b2db      	uxtb	r3, r3
 8004456:	461a      	mov	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004460:	611a      	str	r2, [r3, #16]
 8004462:	e01b      	b.n	800449c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004464:	897b      	ldrh	r3, [r7, #10]
 8004466:	11db      	asrs	r3, r3, #7
 8004468:	b2db      	uxtb	r3, r3
 800446a:	f003 0306 	and.w	r3, r3, #6
 800446e:	b2db      	uxtb	r3, r3
 8004470:	f063 030f 	orn	r3, r3, #15
 8004474:	b2da      	uxtb	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	490e      	ldr	r1, [pc, #56]	; (80044bc <I2C_MasterRequestWrite+0xfc>)
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f980 	bl	8004788 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e010      	b.n	80044b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004492:	897b      	ldrh	r3, [r7, #10]
 8004494:	b2da      	uxtb	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	4907      	ldr	r1, [pc, #28]	; (80044c0 <I2C_MasterRequestWrite+0x100>)
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 f970 	bl	8004788 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e000      	b.n	80044b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	00010008 	.word	0x00010008
 80044c0:	00010002 	.word	0x00010002

080044c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b088      	sub	sp, #32
 80044c8:	af02      	add	r7, sp, #8
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	4608      	mov	r0, r1
 80044ce:	4611      	mov	r1, r2
 80044d0:	461a      	mov	r2, r3
 80044d2:	4603      	mov	r3, r0
 80044d4:	817b      	strh	r3, [r7, #10]
 80044d6:	460b      	mov	r3, r1
 80044d8:	813b      	strh	r3, [r7, #8]
 80044da:	4613      	mov	r3, r2
 80044dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	2200      	movs	r2, #0
 8004506:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 f8c2 	bl	8004694 <I2C_WaitOnFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00d      	beq.n	8004532 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004524:	d103      	bne.n	800452e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800452c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e0aa      	b.n	8004688 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004532:	897b      	ldrh	r3, [r7, #10]
 8004534:	b2db      	uxtb	r3, r3
 8004536:	461a      	mov	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004540:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	6a3a      	ldr	r2, [r7, #32]
 8004546:	4952      	ldr	r1, [pc, #328]	; (8004690 <I2C_RequestMemoryRead+0x1cc>)
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 f91d 	bl	8004788 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e097      	b.n	8004688 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004558:	2300      	movs	r3, #0
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	617b      	str	r3, [r7, #20]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	617b      	str	r3, [r7, #20]
 800456c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800456e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004570:	6a39      	ldr	r1, [r7, #32]
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 f9a8 	bl	80048c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00d      	beq.n	800459a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	2b04      	cmp	r3, #4
 8004584:	d107      	bne.n	8004596 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004594:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e076      	b.n	8004688 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800459a:	88fb      	ldrh	r3, [r7, #6]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d105      	bne.n	80045ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045a0:	893b      	ldrh	r3, [r7, #8]
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	611a      	str	r2, [r3, #16]
 80045aa:	e021      	b.n	80045f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045ac:	893b      	ldrh	r3, [r7, #8]
 80045ae:	0a1b      	lsrs	r3, r3, #8
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045bc:	6a39      	ldr	r1, [r7, #32]
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 f982 	bl	80048c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00d      	beq.n	80045e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d107      	bne.n	80045e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e050      	b.n	8004688 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045e6:	893b      	ldrh	r3, [r7, #8]
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f2:	6a39      	ldr	r1, [r7, #32]
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 f967 	bl	80048c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00d      	beq.n	800461c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004604:	2b04      	cmp	r3, #4
 8004606:	d107      	bne.n	8004618 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004616:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e035      	b.n	8004688 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800462a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	2200      	movs	r2, #0
 8004634:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 f82b 	bl	8004694 <I2C_WaitOnFlagUntilTimeout>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00d      	beq.n	8004660 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004652:	d103      	bne.n	800465c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800465a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e013      	b.n	8004688 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004660:	897b      	ldrh	r3, [r7, #10]
 8004662:	b2db      	uxtb	r3, r3
 8004664:	f043 0301 	orr.w	r3, r3, #1
 8004668:	b2da      	uxtb	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	6a3a      	ldr	r2, [r7, #32]
 8004674:	4906      	ldr	r1, [pc, #24]	; (8004690 <I2C_RequestMemoryRead+0x1cc>)
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 f886 	bl	8004788 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	00010002 	.word	0x00010002

08004694 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	4613      	mov	r3, r2
 80046a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046a4:	e048      	b.n	8004738 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ac:	d044      	beq.n	8004738 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ae:	f7fe faef 	bl	8002c90 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d302      	bcc.n	80046c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d139      	bne.n	8004738 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	0c1b      	lsrs	r3, r3, #16
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d10d      	bne.n	80046ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	43da      	mvns	r2, r3
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	4013      	ands	r3, r2
 80046da:	b29b      	uxth	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	bf0c      	ite	eq
 80046e0:	2301      	moveq	r3, #1
 80046e2:	2300      	movne	r3, #0
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	461a      	mov	r2, r3
 80046e8:	e00c      	b.n	8004704 <I2C_WaitOnFlagUntilTimeout+0x70>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	43da      	mvns	r2, r3
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	4013      	ands	r3, r2
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	bf0c      	ite	eq
 80046fc:	2301      	moveq	r3, #1
 80046fe:	2300      	movne	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	461a      	mov	r2, r3
 8004704:	79fb      	ldrb	r3, [r7, #7]
 8004706:	429a      	cmp	r2, r3
 8004708:	d116      	bne.n	8004738 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	f043 0220 	orr.w	r2, r3, #32
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e023      	b.n	8004780 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	0c1b      	lsrs	r3, r3, #16
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b01      	cmp	r3, #1
 8004740:	d10d      	bne.n	800475e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	43da      	mvns	r2, r3
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	4013      	ands	r3, r2
 800474e:	b29b      	uxth	r3, r3
 8004750:	2b00      	cmp	r3, #0
 8004752:	bf0c      	ite	eq
 8004754:	2301      	moveq	r3, #1
 8004756:	2300      	movne	r3, #0
 8004758:	b2db      	uxtb	r3, r3
 800475a:	461a      	mov	r2, r3
 800475c:	e00c      	b.n	8004778 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	43da      	mvns	r2, r3
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	4013      	ands	r3, r2
 800476a:	b29b      	uxth	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	bf0c      	ite	eq
 8004770:	2301      	moveq	r3, #1
 8004772:	2300      	movne	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	461a      	mov	r2, r3
 8004778:	79fb      	ldrb	r3, [r7, #7]
 800477a:	429a      	cmp	r2, r3
 800477c:	d093      	beq.n	80046a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004796:	e071      	b.n	800487c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a6:	d123      	bne.n	80047f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2220      	movs	r2, #32
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047dc:	f043 0204 	orr.w	r2, r3, #4
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e067      	b.n	80048c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f6:	d041      	beq.n	800487c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f8:	f7fe fa4a 	bl	8002c90 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	429a      	cmp	r2, r3
 8004806:	d302      	bcc.n	800480e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d136      	bne.n	800487c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	0c1b      	lsrs	r3, r3, #16
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b01      	cmp	r3, #1
 8004816:	d10c      	bne.n	8004832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	43da      	mvns	r2, r3
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	4013      	ands	r3, r2
 8004824:	b29b      	uxth	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	bf14      	ite	ne
 800482a:	2301      	movne	r3, #1
 800482c:	2300      	moveq	r3, #0
 800482e:	b2db      	uxtb	r3, r3
 8004830:	e00b      	b.n	800484a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	43da      	mvns	r2, r3
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	4013      	ands	r3, r2
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	bf14      	ite	ne
 8004844:	2301      	movne	r3, #1
 8004846:	2300      	moveq	r3, #0
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d016      	beq.n	800487c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2220      	movs	r2, #32
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	f043 0220 	orr.w	r2, r3, #32
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e021      	b.n	80048c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	0c1b      	lsrs	r3, r3, #16
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b01      	cmp	r3, #1
 8004884:	d10c      	bne.n	80048a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	43da      	mvns	r2, r3
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	4013      	ands	r3, r2
 8004892:	b29b      	uxth	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	bf14      	ite	ne
 8004898:	2301      	movne	r3, #1
 800489a:	2300      	moveq	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	e00b      	b.n	80048b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	43da      	mvns	r2, r3
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	4013      	ands	r3, r2
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	bf14      	ite	ne
 80048b2:	2301      	movne	r3, #1
 80048b4:	2300      	moveq	r3, #0
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f47f af6d 	bne.w	8004798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048d4:	e034      	b.n	8004940 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 f8e3 	bl	8004aa2 <I2C_IsAcknowledgeFailed>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e034      	b.n	8004950 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ec:	d028      	beq.n	8004940 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ee:	f7fe f9cf 	bl	8002c90 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d302      	bcc.n	8004904 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d11d      	bne.n	8004940 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490e:	2b80      	cmp	r3, #128	; 0x80
 8004910:	d016      	beq.n	8004940 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2220      	movs	r2, #32
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492c:	f043 0220 	orr.w	r2, r3, #32
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e007      	b.n	8004950 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494a:	2b80      	cmp	r3, #128	; 0x80
 800494c:	d1c3      	bne.n	80048d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004964:	e034      	b.n	80049d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 f89b 	bl	8004aa2 <I2C_IsAcknowledgeFailed>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e034      	b.n	80049e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497c:	d028      	beq.n	80049d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800497e:	f7fe f987 	bl	8002c90 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	429a      	cmp	r2, r3
 800498c:	d302      	bcc.n	8004994 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d11d      	bne.n	80049d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	f003 0304 	and.w	r3, r3, #4
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d016      	beq.n	80049d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	f043 0220 	orr.w	r2, r3, #32
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e007      	b.n	80049e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	f003 0304 	and.w	r3, r3, #4
 80049da:	2b04      	cmp	r3, #4
 80049dc:	d1c3      	bne.n	8004966 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049f4:	e049      	b.n	8004a8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	f003 0310 	and.w	r3, r3, #16
 8004a00:	2b10      	cmp	r3, #16
 8004a02:	d119      	bne.n	8004a38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f06f 0210 	mvn.w	r2, #16
 8004a0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e030      	b.n	8004a9a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a38:	f7fe f92a 	bl	8002c90 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d302      	bcc.n	8004a4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d11d      	bne.n	8004a8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a58:	2b40      	cmp	r3, #64	; 0x40
 8004a5a:	d016      	beq.n	8004a8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	f043 0220 	orr.w	r2, r3, #32
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e007      	b.n	8004a9a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a94:	2b40      	cmp	r3, #64	; 0x40
 8004a96:	d1ae      	bne.n	80049f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab8:	d11b      	bne.n	8004af2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ac2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2220      	movs	r2, #32
 8004ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	f043 0204 	orr.w	r2, r3, #4
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bc80      	pop	{r7}
 8004afc:	4770      	bx	lr
	...

08004b00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e272      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 8087 	beq.w	8004c2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b20:	4b92      	ldr	r3, [pc, #584]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f003 030c 	and.w	r3, r3, #12
 8004b28:	2b04      	cmp	r3, #4
 8004b2a:	d00c      	beq.n	8004b46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b2c:	4b8f      	ldr	r3, [pc, #572]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f003 030c 	and.w	r3, r3, #12
 8004b34:	2b08      	cmp	r3, #8
 8004b36:	d112      	bne.n	8004b5e <HAL_RCC_OscConfig+0x5e>
 8004b38:	4b8c      	ldr	r3, [pc, #560]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b44:	d10b      	bne.n	8004b5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b46:	4b89      	ldr	r3, [pc, #548]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d06c      	beq.n	8004c2c <HAL_RCC_OscConfig+0x12c>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d168      	bne.n	8004c2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e24c      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b66:	d106      	bne.n	8004b76 <HAL_RCC_OscConfig+0x76>
 8004b68:	4b80      	ldr	r3, [pc, #512]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a7f      	ldr	r2, [pc, #508]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b72:	6013      	str	r3, [r2, #0]
 8004b74:	e02e      	b.n	8004bd4 <HAL_RCC_OscConfig+0xd4>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10c      	bne.n	8004b98 <HAL_RCC_OscConfig+0x98>
 8004b7e:	4b7b      	ldr	r3, [pc, #492]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a7a      	ldr	r2, [pc, #488]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	4b78      	ldr	r3, [pc, #480]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a77      	ldr	r2, [pc, #476]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004b90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b94:	6013      	str	r3, [r2, #0]
 8004b96:	e01d      	b.n	8004bd4 <HAL_RCC_OscConfig+0xd4>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ba0:	d10c      	bne.n	8004bbc <HAL_RCC_OscConfig+0xbc>
 8004ba2:	4b72      	ldr	r3, [pc, #456]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a71      	ldr	r2, [pc, #452]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	4b6f      	ldr	r3, [pc, #444]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a6e      	ldr	r2, [pc, #440]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	e00b      	b.n	8004bd4 <HAL_RCC_OscConfig+0xd4>
 8004bbc:	4b6b      	ldr	r3, [pc, #428]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a6a      	ldr	r2, [pc, #424]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	4b68      	ldr	r3, [pc, #416]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a67      	ldr	r2, [pc, #412]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d013      	beq.n	8004c04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bdc:	f7fe f858 	bl	8002c90 <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004be4:	f7fe f854 	bl	8002c90 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b64      	cmp	r3, #100	; 0x64
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e200      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bf6:	4b5d      	ldr	r3, [pc, #372]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0f0      	beq.n	8004be4 <HAL_RCC_OscConfig+0xe4>
 8004c02:	e014      	b.n	8004c2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c04:	f7fe f844 	bl	8002c90 <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c0c:	f7fe f840 	bl	8002c90 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b64      	cmp	r3, #100	; 0x64
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e1ec      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c1e:	4b53      	ldr	r3, [pc, #332]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1f0      	bne.n	8004c0c <HAL_RCC_OscConfig+0x10c>
 8004c2a:	e000      	b.n	8004c2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d063      	beq.n	8004d02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c3a:	4b4c      	ldr	r3, [pc, #304]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f003 030c 	and.w	r3, r3, #12
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00b      	beq.n	8004c5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c46:	4b49      	ldr	r3, [pc, #292]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f003 030c 	and.w	r3, r3, #12
 8004c4e:	2b08      	cmp	r3, #8
 8004c50:	d11c      	bne.n	8004c8c <HAL_RCC_OscConfig+0x18c>
 8004c52:	4b46      	ldr	r3, [pc, #280]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d116      	bne.n	8004c8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c5e:	4b43      	ldr	r3, [pc, #268]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d005      	beq.n	8004c76 <HAL_RCC_OscConfig+0x176>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d001      	beq.n	8004c76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e1c0      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c76:	4b3d      	ldr	r3, [pc, #244]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	4939      	ldr	r1, [pc, #228]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c8a:	e03a      	b.n	8004d02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d020      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c94:	4b36      	ldr	r3, [pc, #216]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004c96:	2201      	movs	r2, #1
 8004c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c9a:	f7fd fff9 	bl	8002c90 <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ca2:	f7fd fff5 	bl	8002c90 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e1a1      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cb4:	4b2d      	ldr	r3, [pc, #180]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0f0      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc0:	4b2a      	ldr	r3, [pc, #168]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	4927      	ldr	r1, [pc, #156]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	600b      	str	r3, [r1, #0]
 8004cd4:	e015      	b.n	8004d02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cd6:	4b26      	ldr	r3, [pc, #152]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cdc:	f7fd ffd8 	bl	8002c90 <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ce4:	f7fd ffd4 	bl	8002c90 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e180      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cf6:	4b1d      	ldr	r3, [pc, #116]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f0      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0308 	and.w	r3, r3, #8
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d03a      	beq.n	8004d84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d019      	beq.n	8004d4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d16:	4b17      	ldr	r3, [pc, #92]	; (8004d74 <HAL_RCC_OscConfig+0x274>)
 8004d18:	2201      	movs	r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d1c:	f7fd ffb8 	bl	8002c90 <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d24:	f7fd ffb4 	bl	8002c90 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e160      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d36:	4b0d      	ldr	r3, [pc, #52]	; (8004d6c <HAL_RCC_OscConfig+0x26c>)
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0f0      	beq.n	8004d24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d42:	2001      	movs	r0, #1
 8004d44:	f000 face 	bl	80052e4 <RCC_Delay>
 8004d48:	e01c      	b.n	8004d84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d4a:	4b0a      	ldr	r3, [pc, #40]	; (8004d74 <HAL_RCC_OscConfig+0x274>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d50:	f7fd ff9e 	bl	8002c90 <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d56:	e00f      	b.n	8004d78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d58:	f7fd ff9a 	bl	8002c90 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d908      	bls.n	8004d78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e146      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
 8004d6a:	bf00      	nop
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	42420000 	.word	0x42420000
 8004d74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d78:	4b92      	ldr	r3, [pc, #584]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1e9      	bne.n	8004d58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 80a6 	beq.w	8004ede <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d92:	2300      	movs	r3, #0
 8004d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d96:	4b8b      	ldr	r3, [pc, #556]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10d      	bne.n	8004dbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004da2:	4b88      	ldr	r3, [pc, #544]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	4a87      	ldr	r2, [pc, #540]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dac:	61d3      	str	r3, [r2, #28]
 8004dae:	4b85      	ldr	r3, [pc, #532]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db6:	60bb      	str	r3, [r7, #8]
 8004db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dbe:	4b82      	ldr	r3, [pc, #520]	; (8004fc8 <HAL_RCC_OscConfig+0x4c8>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d118      	bne.n	8004dfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dca:	4b7f      	ldr	r3, [pc, #508]	; (8004fc8 <HAL_RCC_OscConfig+0x4c8>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a7e      	ldr	r2, [pc, #504]	; (8004fc8 <HAL_RCC_OscConfig+0x4c8>)
 8004dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dd6:	f7fd ff5b 	bl	8002c90 <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dde:	f7fd ff57 	bl	8002c90 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b64      	cmp	r3, #100	; 0x64
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e103      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df0:	4b75      	ldr	r3, [pc, #468]	; (8004fc8 <HAL_RCC_OscConfig+0x4c8>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0f0      	beq.n	8004dde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d106      	bne.n	8004e12 <HAL_RCC_OscConfig+0x312>
 8004e04:	4b6f      	ldr	r3, [pc, #444]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	4a6e      	ldr	r2, [pc, #440]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004e0a:	f043 0301 	orr.w	r3, r3, #1
 8004e0e:	6213      	str	r3, [r2, #32]
 8004e10:	e02d      	b.n	8004e6e <HAL_RCC_OscConfig+0x36e>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10c      	bne.n	8004e34 <HAL_RCC_OscConfig+0x334>
 8004e1a:	4b6a      	ldr	r3, [pc, #424]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	4a69      	ldr	r2, [pc, #420]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004e20:	f023 0301 	bic.w	r3, r3, #1
 8004e24:	6213      	str	r3, [r2, #32]
 8004e26:	4b67      	ldr	r3, [pc, #412]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	4a66      	ldr	r2, [pc, #408]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004e2c:	f023 0304 	bic.w	r3, r3, #4
 8004e30:	6213      	str	r3, [r2, #32]
 8004e32:	e01c      	b.n	8004e6e <HAL_RCC_OscConfig+0x36e>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	2b05      	cmp	r3, #5
 8004e3a:	d10c      	bne.n	8004e56 <HAL_RCC_OscConfig+0x356>
 8004e3c:	4b61      	ldr	r3, [pc, #388]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	4a60      	ldr	r2, [pc, #384]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004e42:	f043 0304 	orr.w	r3, r3, #4
 8004e46:	6213      	str	r3, [r2, #32]
 8004e48:	4b5e      	ldr	r3, [pc, #376]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	4a5d      	ldr	r2, [pc, #372]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004e4e:	f043 0301 	orr.w	r3, r3, #1
 8004e52:	6213      	str	r3, [r2, #32]
 8004e54:	e00b      	b.n	8004e6e <HAL_RCC_OscConfig+0x36e>
 8004e56:	4b5b      	ldr	r3, [pc, #364]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	4a5a      	ldr	r2, [pc, #360]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004e5c:	f023 0301 	bic.w	r3, r3, #1
 8004e60:	6213      	str	r3, [r2, #32]
 8004e62:	4b58      	ldr	r3, [pc, #352]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	4a57      	ldr	r2, [pc, #348]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004e68:	f023 0304 	bic.w	r3, r3, #4
 8004e6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d015      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e76:	f7fd ff0b 	bl	8002c90 <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e7c:	e00a      	b.n	8004e94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e7e:	f7fd ff07 	bl	8002c90 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e0b1      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e94:	4b4b      	ldr	r3, [pc, #300]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d0ee      	beq.n	8004e7e <HAL_RCC_OscConfig+0x37e>
 8004ea0:	e014      	b.n	8004ecc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ea2:	f7fd fef5 	bl	8002c90 <HAL_GetTick>
 8004ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ea8:	e00a      	b.n	8004ec0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eaa:	f7fd fef1 	bl	8002c90 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e09b      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ec0:	4b40      	ldr	r3, [pc, #256]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1ee      	bne.n	8004eaa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ecc:	7dfb      	ldrb	r3, [r7, #23]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d105      	bne.n	8004ede <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ed2:	4b3c      	ldr	r3, [pc, #240]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	4a3b      	ldr	r2, [pc, #236]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004edc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 8087 	beq.w	8004ff6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ee8:	4b36      	ldr	r3, [pc, #216]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f003 030c 	and.w	r3, r3, #12
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d061      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	69db      	ldr	r3, [r3, #28]
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d146      	bne.n	8004f8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004efc:	4b33      	ldr	r3, [pc, #204]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f02:	f7fd fec5 	bl	8002c90 <HAL_GetTick>
 8004f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f08:	e008      	b.n	8004f1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f0a:	f7fd fec1 	bl	8002c90 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d901      	bls.n	8004f1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e06d      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f1c:	4b29      	ldr	r3, [pc, #164]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1f0      	bne.n	8004f0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f30:	d108      	bne.n	8004f44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f32:	4b24      	ldr	r3, [pc, #144]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	4921      	ldr	r1, [pc, #132]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f44:	4b1f      	ldr	r3, [pc, #124]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a19      	ldr	r1, [r3, #32]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	430b      	orrs	r3, r1
 8004f56:	491b      	ldr	r1, [pc, #108]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f5c:	4b1b      	ldr	r3, [pc, #108]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004f5e:	2201      	movs	r2, #1
 8004f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f62:	f7fd fe95 	bl	8002c90 <HAL_GetTick>
 8004f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f68:	e008      	b.n	8004f7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f6a:	f7fd fe91 	bl	8002c90 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d901      	bls.n	8004f7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e03d      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f7c:	4b11      	ldr	r3, [pc, #68]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0f0      	beq.n	8004f6a <HAL_RCC_OscConfig+0x46a>
 8004f88:	e035      	b.n	8004ff6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f8a:	4b10      	ldr	r3, [pc, #64]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f90:	f7fd fe7e 	bl	8002c90 <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f96:	e008      	b.n	8004faa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f98:	f7fd fe7a 	bl	8002c90 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e026      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004faa:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <HAL_RCC_OscConfig+0x4c4>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1f0      	bne.n	8004f98 <HAL_RCC_OscConfig+0x498>
 8004fb6:	e01e      	b.n	8004ff6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	69db      	ldr	r3, [r3, #28]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d107      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e019      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	40007000 	.word	0x40007000
 8004fcc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004fd0:	4b0b      	ldr	r3, [pc, #44]	; (8005000 <HAL_RCC_OscConfig+0x500>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d106      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d001      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e000      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3718      	adds	r7, #24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	40021000 	.word	0x40021000

08005004 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e0d0      	b.n	80051ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005018:	4b6a      	ldr	r3, [pc, #424]	; (80051c4 <HAL_RCC_ClockConfig+0x1c0>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0307 	and.w	r3, r3, #7
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	429a      	cmp	r2, r3
 8005024:	d910      	bls.n	8005048 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005026:	4b67      	ldr	r3, [pc, #412]	; (80051c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f023 0207 	bic.w	r2, r3, #7
 800502e:	4965      	ldr	r1, [pc, #404]	; (80051c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	4313      	orrs	r3, r2
 8005034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005036:	4b63      	ldr	r3, [pc, #396]	; (80051c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	429a      	cmp	r2, r3
 8005042:	d001      	beq.n	8005048 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e0b8      	b.n	80051ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d020      	beq.n	8005096 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005060:	4b59      	ldr	r3, [pc, #356]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	4a58      	ldr	r2, [pc, #352]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005066:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800506a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0308 	and.w	r3, r3, #8
 8005074:	2b00      	cmp	r3, #0
 8005076:	d005      	beq.n	8005084 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005078:	4b53      	ldr	r3, [pc, #332]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	4a52      	ldr	r2, [pc, #328]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 800507e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005082:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005084:	4b50      	ldr	r3, [pc, #320]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	494d      	ldr	r1, [pc, #308]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005092:	4313      	orrs	r3, r2
 8005094:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d040      	beq.n	8005124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d107      	bne.n	80050ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050aa:	4b47      	ldr	r3, [pc, #284]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d115      	bne.n	80050e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e07f      	b.n	80051ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d107      	bne.n	80050d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050c2:	4b41      	ldr	r3, [pc, #260]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d109      	bne.n	80050e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e073      	b.n	80051ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050d2:	4b3d      	ldr	r3, [pc, #244]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e06b      	b.n	80051ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050e2:	4b39      	ldr	r3, [pc, #228]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f023 0203 	bic.w	r2, r3, #3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	4936      	ldr	r1, [pc, #216]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050f4:	f7fd fdcc 	bl	8002c90 <HAL_GetTick>
 80050f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fa:	e00a      	b.n	8005112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050fc:	f7fd fdc8 	bl	8002c90 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	f241 3288 	movw	r2, #5000	; 0x1388
 800510a:	4293      	cmp	r3, r2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e053      	b.n	80051ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005112:	4b2d      	ldr	r3, [pc, #180]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f003 020c 	and.w	r2, r3, #12
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	429a      	cmp	r2, r3
 8005122:	d1eb      	bne.n	80050fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005124:	4b27      	ldr	r3, [pc, #156]	; (80051c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0307 	and.w	r3, r3, #7
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	429a      	cmp	r2, r3
 8005130:	d210      	bcs.n	8005154 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005132:	4b24      	ldr	r3, [pc, #144]	; (80051c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f023 0207 	bic.w	r2, r3, #7
 800513a:	4922      	ldr	r1, [pc, #136]	; (80051c4 <HAL_RCC_ClockConfig+0x1c0>)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	4313      	orrs	r3, r2
 8005140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005142:	4b20      	ldr	r3, [pc, #128]	; (80051c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d001      	beq.n	8005154 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e032      	b.n	80051ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d008      	beq.n	8005172 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005160:	4b19      	ldr	r3, [pc, #100]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	4916      	ldr	r1, [pc, #88]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 800516e:	4313      	orrs	r3, r2
 8005170:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b00      	cmp	r3, #0
 800517c:	d009      	beq.n	8005192 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800517e:	4b12      	ldr	r3, [pc, #72]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	490e      	ldr	r1, [pc, #56]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 800518e:	4313      	orrs	r3, r2
 8005190:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005192:	f000 f821 	bl	80051d8 <HAL_RCC_GetSysClockFreq>
 8005196:	4602      	mov	r2, r0
 8005198:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	091b      	lsrs	r3, r3, #4
 800519e:	f003 030f 	and.w	r3, r3, #15
 80051a2:	490a      	ldr	r1, [pc, #40]	; (80051cc <HAL_RCC_ClockConfig+0x1c8>)
 80051a4:	5ccb      	ldrb	r3, [r1, r3]
 80051a6:	fa22 f303 	lsr.w	r3, r2, r3
 80051aa:	4a09      	ldr	r2, [pc, #36]	; (80051d0 <HAL_RCC_ClockConfig+0x1cc>)
 80051ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051ae:	4b09      	ldr	r3, [pc, #36]	; (80051d4 <HAL_RCC_ClockConfig+0x1d0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fd fd2a 	bl	8002c0c <HAL_InitTick>

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40022000 	.word	0x40022000
 80051c8:	40021000 	.word	0x40021000
 80051cc:	0800a434 	.word	0x0800a434
 80051d0:	2000002c 	.word	0x2000002c
 80051d4:	20000030 	.word	0x20000030

080051d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	2300      	movs	r3, #0
 80051e4:	60bb      	str	r3, [r7, #8]
 80051e6:	2300      	movs	r3, #0
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	2300      	movs	r3, #0
 80051ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80051f2:	4b1e      	ldr	r3, [pc, #120]	; (800526c <HAL_RCC_GetSysClockFreq+0x94>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f003 030c 	and.w	r3, r3, #12
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d002      	beq.n	8005208 <HAL_RCC_GetSysClockFreq+0x30>
 8005202:	2b08      	cmp	r3, #8
 8005204:	d003      	beq.n	800520e <HAL_RCC_GetSysClockFreq+0x36>
 8005206:	e027      	b.n	8005258 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005208:	4b19      	ldr	r3, [pc, #100]	; (8005270 <HAL_RCC_GetSysClockFreq+0x98>)
 800520a:	613b      	str	r3, [r7, #16]
      break;
 800520c:	e027      	b.n	800525e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	0c9b      	lsrs	r3, r3, #18
 8005212:	f003 030f 	and.w	r3, r3, #15
 8005216:	4a17      	ldr	r2, [pc, #92]	; (8005274 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005218:	5cd3      	ldrb	r3, [r2, r3]
 800521a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d010      	beq.n	8005248 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005226:	4b11      	ldr	r3, [pc, #68]	; (800526c <HAL_RCC_GetSysClockFreq+0x94>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	0c5b      	lsrs	r3, r3, #17
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	4a11      	ldr	r2, [pc, #68]	; (8005278 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005232:	5cd3      	ldrb	r3, [r2, r3]
 8005234:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a0d      	ldr	r2, [pc, #52]	; (8005270 <HAL_RCC_GetSysClockFreq+0x98>)
 800523a:	fb03 f202 	mul.w	r2, r3, r2
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	fbb2 f3f3 	udiv	r3, r2, r3
 8005244:	617b      	str	r3, [r7, #20]
 8005246:	e004      	b.n	8005252 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a0c      	ldr	r2, [pc, #48]	; (800527c <HAL_RCC_GetSysClockFreq+0xa4>)
 800524c:	fb02 f303 	mul.w	r3, r2, r3
 8005250:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	613b      	str	r3, [r7, #16]
      break;
 8005256:	e002      	b.n	800525e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005258:	4b05      	ldr	r3, [pc, #20]	; (8005270 <HAL_RCC_GetSysClockFreq+0x98>)
 800525a:	613b      	str	r3, [r7, #16]
      break;
 800525c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800525e:	693b      	ldr	r3, [r7, #16]
}
 8005260:	4618      	mov	r0, r3
 8005262:	371c      	adds	r7, #28
 8005264:	46bd      	mov	sp, r7
 8005266:	bc80      	pop	{r7}
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	40021000 	.word	0x40021000
 8005270:	007a1200 	.word	0x007a1200
 8005274:	0800a44c 	.word	0x0800a44c
 8005278:	0800a45c 	.word	0x0800a45c
 800527c:	003d0900 	.word	0x003d0900

08005280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005280:	b480      	push	{r7}
 8005282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005284:	4b02      	ldr	r3, [pc, #8]	; (8005290 <HAL_RCC_GetHCLKFreq+0x10>)
 8005286:	681b      	ldr	r3, [r3, #0]
}
 8005288:	4618      	mov	r0, r3
 800528a:	46bd      	mov	sp, r7
 800528c:	bc80      	pop	{r7}
 800528e:	4770      	bx	lr
 8005290:	2000002c 	.word	0x2000002c

08005294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005298:	f7ff fff2 	bl	8005280 <HAL_RCC_GetHCLKFreq>
 800529c:	4602      	mov	r2, r0
 800529e:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	0a1b      	lsrs	r3, r3, #8
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	4903      	ldr	r1, [pc, #12]	; (80052b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052aa:	5ccb      	ldrb	r3, [r1, r3]
 80052ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	40021000 	.word	0x40021000
 80052b8:	0800a444 	.word	0x0800a444

080052bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052c0:	f7ff ffde 	bl	8005280 <HAL_RCC_GetHCLKFreq>
 80052c4:	4602      	mov	r2, r0
 80052c6:	4b05      	ldr	r3, [pc, #20]	; (80052dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	0adb      	lsrs	r3, r3, #11
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	4903      	ldr	r1, [pc, #12]	; (80052e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052d2:	5ccb      	ldrb	r3, [r1, r3]
 80052d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052d8:	4618      	mov	r0, r3
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	40021000 	.word	0x40021000
 80052e0:	0800a444 	.word	0x0800a444

080052e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80052ec:	4b0a      	ldr	r3, [pc, #40]	; (8005318 <RCC_Delay+0x34>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a0a      	ldr	r2, [pc, #40]	; (800531c <RCC_Delay+0x38>)
 80052f2:	fba2 2303 	umull	r2, r3, r2, r3
 80052f6:	0a5b      	lsrs	r3, r3, #9
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	fb02 f303 	mul.w	r3, r2, r3
 80052fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005300:	bf00      	nop
  }
  while (Delay --);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	1e5a      	subs	r2, r3, #1
 8005306:	60fa      	str	r2, [r7, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1f9      	bne.n	8005300 <RCC_Delay+0x1c>
}
 800530c:	bf00      	nop
 800530e:	bf00      	nop
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	bc80      	pop	{r7}
 8005316:	4770      	bx	lr
 8005318:	2000002c 	.word	0x2000002c
 800531c:	10624dd3 	.word	0x10624dd3

08005320 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e041      	b.n	80053b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d106      	bne.n	800534c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7fc ffa4 	bl	8002294 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3304      	adds	r3, #4
 800535c:	4619      	mov	r1, r3
 800535e:	4610      	mov	r0, r2
 8005360:	f000 fc18 	bl	8005b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
	...

080053c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d001      	beq.n	80053d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e03a      	b.n	800544e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2202      	movs	r2, #2
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0201 	orr.w	r2, r2, #1
 80053ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a18      	ldr	r2, [pc, #96]	; (8005458 <HAL_TIM_Base_Start_IT+0x98>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d00e      	beq.n	8005418 <HAL_TIM_Base_Start_IT+0x58>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005402:	d009      	beq.n	8005418 <HAL_TIM_Base_Start_IT+0x58>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a14      	ldr	r2, [pc, #80]	; (800545c <HAL_TIM_Base_Start_IT+0x9c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d004      	beq.n	8005418 <HAL_TIM_Base_Start_IT+0x58>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a13      	ldr	r2, [pc, #76]	; (8005460 <HAL_TIM_Base_Start_IT+0xa0>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d111      	bne.n	800543c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f003 0307 	and.w	r3, r3, #7
 8005422:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b06      	cmp	r3, #6
 8005428:	d010      	beq.n	800544c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f042 0201 	orr.w	r2, r2, #1
 8005438:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800543a:	e007      	b.n	800544c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0201 	orr.w	r2, r2, #1
 800544a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	bc80      	pop	{r7}
 8005456:	4770      	bx	lr
 8005458:	40012c00 	.word	0x40012c00
 800545c:	40000400 	.word	0x40000400
 8005460:	40000800 	.word	0x40000800

08005464 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e041      	b.n	80054fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d106      	bne.n	8005490 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f839 	bl	8005502 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	3304      	adds	r3, #4
 80054a0:	4619      	mov	r1, r3
 80054a2:	4610      	mov	r0, r2
 80054a4:	f000 fb76 	bl	8005b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005502:	b480      	push	{r7}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	bc80      	pop	{r7}
 8005512:	4770      	bx	lr

08005514 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d109      	bne.n	8005538 <HAL_TIM_PWM_Start+0x24>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b01      	cmp	r3, #1
 800552e:	bf14      	ite	ne
 8005530:	2301      	movne	r3, #1
 8005532:	2300      	moveq	r3, #0
 8005534:	b2db      	uxtb	r3, r3
 8005536:	e022      	b.n	800557e <HAL_TIM_PWM_Start+0x6a>
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	2b04      	cmp	r3, #4
 800553c:	d109      	bne.n	8005552 <HAL_TIM_PWM_Start+0x3e>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b01      	cmp	r3, #1
 8005548:	bf14      	ite	ne
 800554a:	2301      	movne	r3, #1
 800554c:	2300      	moveq	r3, #0
 800554e:	b2db      	uxtb	r3, r3
 8005550:	e015      	b.n	800557e <HAL_TIM_PWM_Start+0x6a>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b08      	cmp	r3, #8
 8005556:	d109      	bne.n	800556c <HAL_TIM_PWM_Start+0x58>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b01      	cmp	r3, #1
 8005562:	bf14      	ite	ne
 8005564:	2301      	movne	r3, #1
 8005566:	2300      	moveq	r3, #0
 8005568:	b2db      	uxtb	r3, r3
 800556a:	e008      	b.n	800557e <HAL_TIM_PWM_Start+0x6a>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b01      	cmp	r3, #1
 8005576:	bf14      	ite	ne
 8005578:	2301      	movne	r3, #1
 800557a:	2300      	moveq	r3, #0
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e05e      	b.n	8005644 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d104      	bne.n	8005596 <HAL_TIM_PWM_Start+0x82>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2202      	movs	r2, #2
 8005590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005594:	e013      	b.n	80055be <HAL_TIM_PWM_Start+0xaa>
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b04      	cmp	r3, #4
 800559a:	d104      	bne.n	80055a6 <HAL_TIM_PWM_Start+0x92>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2202      	movs	r2, #2
 80055a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055a4:	e00b      	b.n	80055be <HAL_TIM_PWM_Start+0xaa>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b08      	cmp	r3, #8
 80055aa:	d104      	bne.n	80055b6 <HAL_TIM_PWM_Start+0xa2>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055b4:	e003      	b.n	80055be <HAL_TIM_PWM_Start+0xaa>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2202      	movs	r2, #2
 80055ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2201      	movs	r2, #1
 80055c4:	6839      	ldr	r1, [r7, #0]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fd70 	bl	80060ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a1e      	ldr	r2, [pc, #120]	; (800564c <HAL_TIM_PWM_Start+0x138>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d107      	bne.n	80055e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a18      	ldr	r2, [pc, #96]	; (800564c <HAL_TIM_PWM_Start+0x138>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00e      	beq.n	800560e <HAL_TIM_PWM_Start+0xfa>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f8:	d009      	beq.n	800560e <HAL_TIM_PWM_Start+0xfa>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a14      	ldr	r2, [pc, #80]	; (8005650 <HAL_TIM_PWM_Start+0x13c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d004      	beq.n	800560e <HAL_TIM_PWM_Start+0xfa>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a12      	ldr	r2, [pc, #72]	; (8005654 <HAL_TIM_PWM_Start+0x140>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d111      	bne.n	8005632 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f003 0307 	and.w	r3, r3, #7
 8005618:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2b06      	cmp	r3, #6
 800561e:	d010      	beq.n	8005642 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0201 	orr.w	r2, r2, #1
 800562e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005630:	e007      	b.n	8005642 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f042 0201 	orr.w	r2, r2, #1
 8005640:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	40012c00 	.word	0x40012c00
 8005650:	40000400 	.word	0x40000400
 8005654:	40000800 	.word	0x40000800

08005658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d020      	beq.n	80056bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d01b      	beq.n	80056bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f06f 0202 	mvn.w	r2, #2
 800568c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	f003 0303 	and.w	r3, r3, #3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fa5a 	bl	8005b5c <HAL_TIM_IC_CaptureCallback>
 80056a8:	e005      	b.n	80056b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fa4d 	bl	8005b4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 fa5c 	bl	8005b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f003 0304 	and.w	r3, r3, #4
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d020      	beq.n	8005708 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f003 0304 	and.w	r3, r3, #4
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d01b      	beq.n	8005708 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f06f 0204 	mvn.w	r2, #4
 80056d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2202      	movs	r2, #2
 80056de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fa34 	bl	8005b5c <HAL_TIM_IC_CaptureCallback>
 80056f4:	e005      	b.n	8005702 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 fa27 	bl	8005b4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 fa36 	bl	8005b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f003 0308 	and.w	r3, r3, #8
 800570e:	2b00      	cmp	r3, #0
 8005710:	d020      	beq.n	8005754 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f003 0308 	and.w	r3, r3, #8
 8005718:	2b00      	cmp	r3, #0
 800571a:	d01b      	beq.n	8005754 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f06f 0208 	mvn.w	r2, #8
 8005724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2204      	movs	r2, #4
 800572a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	69db      	ldr	r3, [r3, #28]
 8005732:	f003 0303 	and.w	r3, r3, #3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 fa0e 	bl	8005b5c <HAL_TIM_IC_CaptureCallback>
 8005740:	e005      	b.n	800574e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fa01 	bl	8005b4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fa10 	bl	8005b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	f003 0310 	and.w	r3, r3, #16
 800575a:	2b00      	cmp	r3, #0
 800575c:	d020      	beq.n	80057a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f003 0310 	and.w	r3, r3, #16
 8005764:	2b00      	cmp	r3, #0
 8005766:	d01b      	beq.n	80057a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f06f 0210 	mvn.w	r2, #16
 8005770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2208      	movs	r2, #8
 8005776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f9e8 	bl	8005b5c <HAL_TIM_IC_CaptureCallback>
 800578c:	e005      	b.n	800579a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f9db 	bl	8005b4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f9ea 	bl	8005b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00c      	beq.n	80057c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d007      	beq.n	80057c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f06f 0201 	mvn.w	r2, #1
 80057bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7fc fb0c 	bl	8001ddc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00c      	beq.n	80057e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d007      	beq.n	80057e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fd3e 	bl	8006264 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00c      	beq.n	800580c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d007      	beq.n	800580c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f9ba 	bl	8005b80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	f003 0320 	and.w	r3, r3, #32
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00c      	beq.n	8005830 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f003 0320 	and.w	r3, r3, #32
 800581c:	2b00      	cmp	r3, #0
 800581e:	d007      	beq.n	8005830 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f06f 0220 	mvn.w	r2, #32
 8005828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fd11 	bl	8006252 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005830:	bf00      	nop
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005844:	2300      	movs	r3, #0
 8005846:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800584e:	2b01      	cmp	r3, #1
 8005850:	d101      	bne.n	8005856 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005852:	2302      	movs	r3, #2
 8005854:	e0ae      	b.n	80059b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b0c      	cmp	r3, #12
 8005862:	f200 809f 	bhi.w	80059a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005866:	a201      	add	r2, pc, #4	; (adr r2, 800586c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586c:	080058a1 	.word	0x080058a1
 8005870:	080059a5 	.word	0x080059a5
 8005874:	080059a5 	.word	0x080059a5
 8005878:	080059a5 	.word	0x080059a5
 800587c:	080058e1 	.word	0x080058e1
 8005880:	080059a5 	.word	0x080059a5
 8005884:	080059a5 	.word	0x080059a5
 8005888:	080059a5 	.word	0x080059a5
 800588c:	08005923 	.word	0x08005923
 8005890:	080059a5 	.word	0x080059a5
 8005894:	080059a5 	.word	0x080059a5
 8005898:	080059a5 	.word	0x080059a5
 800589c:	08005963 	.word	0x08005963
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68b9      	ldr	r1, [r7, #8]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 f9e2 	bl	8005c70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	699a      	ldr	r2, [r3, #24]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0208 	orr.w	r2, r2, #8
 80058ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	699a      	ldr	r2, [r3, #24]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 0204 	bic.w	r2, r2, #4
 80058ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6999      	ldr	r1, [r3, #24]
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	691a      	ldr	r2, [r3, #16]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	619a      	str	r2, [r3, #24]
      break;
 80058de:	e064      	b.n	80059aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68b9      	ldr	r1, [r7, #8]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 fa28 	bl	8005d3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	699a      	ldr	r2, [r3, #24]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	699a      	ldr	r2, [r3, #24]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800590a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6999      	ldr	r1, [r3, #24]
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	021a      	lsls	r2, r3, #8
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	430a      	orrs	r2, r1
 800591e:	619a      	str	r2, [r3, #24]
      break;
 8005920:	e043      	b.n	80059aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68b9      	ldr	r1, [r7, #8]
 8005928:	4618      	mov	r0, r3
 800592a:	f000 fa71 	bl	8005e10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	69da      	ldr	r2, [r3, #28]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f042 0208 	orr.w	r2, r2, #8
 800593c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	69da      	ldr	r2, [r3, #28]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0204 	bic.w	r2, r2, #4
 800594c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69d9      	ldr	r1, [r3, #28]
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	691a      	ldr	r2, [r3, #16]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	61da      	str	r2, [r3, #28]
      break;
 8005960:	e023      	b.n	80059aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68b9      	ldr	r1, [r7, #8]
 8005968:	4618      	mov	r0, r3
 800596a:	f000 fabb 	bl	8005ee4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	69da      	ldr	r2, [r3, #28]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800597c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69da      	ldr	r2, [r3, #28]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800598c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69d9      	ldr	r1, [r3, #28]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	021a      	lsls	r2, r3, #8
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	61da      	str	r2, [r3, #28]
      break;
 80059a2:	e002      	b.n	80059aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	75fb      	strb	r3, [r7, #23]
      break;
 80059a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3718      	adds	r7, #24
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059c6:	2300      	movs	r3, #0
 80059c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d101      	bne.n	80059d8 <HAL_TIM_ConfigClockSource+0x1c>
 80059d4:	2302      	movs	r3, #2
 80059d6:	e0b4      	b.n	8005b42 <HAL_TIM_ConfigClockSource+0x186>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a10:	d03e      	beq.n	8005a90 <HAL_TIM_ConfigClockSource+0xd4>
 8005a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a16:	f200 8087 	bhi.w	8005b28 <HAL_TIM_ConfigClockSource+0x16c>
 8005a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a1e:	f000 8086 	beq.w	8005b2e <HAL_TIM_ConfigClockSource+0x172>
 8005a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a26:	d87f      	bhi.n	8005b28 <HAL_TIM_ConfigClockSource+0x16c>
 8005a28:	2b70      	cmp	r3, #112	; 0x70
 8005a2a:	d01a      	beq.n	8005a62 <HAL_TIM_ConfigClockSource+0xa6>
 8005a2c:	2b70      	cmp	r3, #112	; 0x70
 8005a2e:	d87b      	bhi.n	8005b28 <HAL_TIM_ConfigClockSource+0x16c>
 8005a30:	2b60      	cmp	r3, #96	; 0x60
 8005a32:	d050      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0x11a>
 8005a34:	2b60      	cmp	r3, #96	; 0x60
 8005a36:	d877      	bhi.n	8005b28 <HAL_TIM_ConfigClockSource+0x16c>
 8005a38:	2b50      	cmp	r3, #80	; 0x50
 8005a3a:	d03c      	beq.n	8005ab6 <HAL_TIM_ConfigClockSource+0xfa>
 8005a3c:	2b50      	cmp	r3, #80	; 0x50
 8005a3e:	d873      	bhi.n	8005b28 <HAL_TIM_ConfigClockSource+0x16c>
 8005a40:	2b40      	cmp	r3, #64	; 0x40
 8005a42:	d058      	beq.n	8005af6 <HAL_TIM_ConfigClockSource+0x13a>
 8005a44:	2b40      	cmp	r3, #64	; 0x40
 8005a46:	d86f      	bhi.n	8005b28 <HAL_TIM_ConfigClockSource+0x16c>
 8005a48:	2b30      	cmp	r3, #48	; 0x30
 8005a4a:	d064      	beq.n	8005b16 <HAL_TIM_ConfigClockSource+0x15a>
 8005a4c:	2b30      	cmp	r3, #48	; 0x30
 8005a4e:	d86b      	bhi.n	8005b28 <HAL_TIM_ConfigClockSource+0x16c>
 8005a50:	2b20      	cmp	r3, #32
 8005a52:	d060      	beq.n	8005b16 <HAL_TIM_ConfigClockSource+0x15a>
 8005a54:	2b20      	cmp	r3, #32
 8005a56:	d867      	bhi.n	8005b28 <HAL_TIM_ConfigClockSource+0x16c>
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d05c      	beq.n	8005b16 <HAL_TIM_ConfigClockSource+0x15a>
 8005a5c:	2b10      	cmp	r3, #16
 8005a5e:	d05a      	beq.n	8005b16 <HAL_TIM_ConfigClockSource+0x15a>
 8005a60:	e062      	b.n	8005b28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a72:	f000 fafc 	bl	800606e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	609a      	str	r2, [r3, #8]
      break;
 8005a8e:	e04f      	b.n	8005b30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005aa0:	f000 fae5 	bl	800606e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689a      	ldr	r2, [r3, #8]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ab2:	609a      	str	r2, [r3, #8]
      break;
 8005ab4:	e03c      	b.n	8005b30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f000 fa5c 	bl	8005f80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2150      	movs	r1, #80	; 0x50
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f000 fab3 	bl	800603a <TIM_ITRx_SetConfig>
      break;
 8005ad4:	e02c      	b.n	8005b30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	f000 fa7a 	bl	8005fdc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2160      	movs	r1, #96	; 0x60
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 faa3 	bl	800603a <TIM_ITRx_SetConfig>
      break;
 8005af4:	e01c      	b.n	8005b30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b02:	461a      	mov	r2, r3
 8005b04:	f000 fa3c 	bl	8005f80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2140      	movs	r1, #64	; 0x40
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 fa93 	bl	800603a <TIM_ITRx_SetConfig>
      break;
 8005b14:	e00c      	b.n	8005b30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4619      	mov	r1, r3
 8005b20:	4610      	mov	r0, r2
 8005b22:	f000 fa8a 	bl	800603a <TIM_ITRx_SetConfig>
      break;
 8005b26:	e003      	b.n	8005b30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b2c:	e000      	b.n	8005b30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b083      	sub	sp, #12
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b52:	bf00      	nop
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bc80      	pop	{r7}
 8005b5a:	4770      	bx	lr

08005b5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bc80      	pop	{r7}
 8005b6c:	4770      	bx	lr

08005b6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bc80      	pop	{r7}
 8005b7e:	4770      	bx	lr

08005b80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bc80      	pop	{r7}
 8005b90:	4770      	bx	lr
	...

08005b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a2f      	ldr	r2, [pc, #188]	; (8005c64 <TIM_Base_SetConfig+0xd0>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d00b      	beq.n	8005bc4 <TIM_Base_SetConfig+0x30>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb2:	d007      	beq.n	8005bc4 <TIM_Base_SetConfig+0x30>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a2c      	ldr	r2, [pc, #176]	; (8005c68 <TIM_Base_SetConfig+0xd4>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d003      	beq.n	8005bc4 <TIM_Base_SetConfig+0x30>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a2b      	ldr	r2, [pc, #172]	; (8005c6c <TIM_Base_SetConfig+0xd8>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d108      	bne.n	8005bd6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a22      	ldr	r2, [pc, #136]	; (8005c64 <TIM_Base_SetConfig+0xd0>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d00b      	beq.n	8005bf6 <TIM_Base_SetConfig+0x62>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be4:	d007      	beq.n	8005bf6 <TIM_Base_SetConfig+0x62>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a1f      	ldr	r2, [pc, #124]	; (8005c68 <TIM_Base_SetConfig+0xd4>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d003      	beq.n	8005bf6 <TIM_Base_SetConfig+0x62>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a1e      	ldr	r2, [pc, #120]	; (8005c6c <TIM_Base_SetConfig+0xd8>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d108      	bne.n	8005c08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a0d      	ldr	r2, [pc, #52]	; (8005c64 <TIM_Base_SetConfig+0xd0>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d103      	bne.n	8005c3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	691a      	ldr	r2, [r3, #16]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d005      	beq.n	8005c5a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	f023 0201 	bic.w	r2, r3, #1
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	611a      	str	r2, [r3, #16]
  }
}
 8005c5a:	bf00      	nop
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bc80      	pop	{r7}
 8005c62:	4770      	bx	lr
 8005c64:	40012c00 	.word	0x40012c00
 8005c68:	40000400 	.word	0x40000400
 8005c6c:	40000800 	.word	0x40000800

08005c70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b087      	sub	sp, #28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	f023 0201 	bic.w	r2, r3, #1
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f023 0303 	bic.w	r3, r3, #3
 8005ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f023 0302 	bic.w	r3, r3, #2
 8005cb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a1c      	ldr	r2, [pc, #112]	; (8005d38 <TIM_OC1_SetConfig+0xc8>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d10c      	bne.n	8005ce6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f023 0308 	bic.w	r3, r3, #8
 8005cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f023 0304 	bic.w	r3, r3, #4
 8005ce4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a13      	ldr	r2, [pc, #76]	; (8005d38 <TIM_OC1_SetConfig+0xc8>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d111      	bne.n	8005d12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	621a      	str	r2, [r3, #32]
}
 8005d2c:	bf00      	nop
 8005d2e:	371c      	adds	r7, #28
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bc80      	pop	{r7}
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	40012c00 	.word	0x40012c00

08005d3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	f023 0210 	bic.w	r2, r3, #16
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	021b      	lsls	r3, r3, #8
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f023 0320 	bic.w	r3, r3, #32
 8005d86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	011b      	lsls	r3, r3, #4
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a1d      	ldr	r2, [pc, #116]	; (8005e0c <TIM_OC2_SetConfig+0xd0>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d10d      	bne.n	8005db8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	011b      	lsls	r3, r3, #4
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005db6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a14      	ldr	r2, [pc, #80]	; (8005e0c <TIM_OC2_SetConfig+0xd0>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d113      	bne.n	8005de8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	621a      	str	r2, [r3, #32]
}
 8005e02:	bf00      	nop
 8005e04:	371c      	adds	r7, #28
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bc80      	pop	{r7}
 8005e0a:	4770      	bx	lr
 8005e0c:	40012c00 	.word	0x40012c00

08005e10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a1b      	ldr	r3, [r3, #32]
 8005e24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f023 0303 	bic.w	r3, r3, #3
 8005e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	021b      	lsls	r3, r3, #8
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a1d      	ldr	r2, [pc, #116]	; (8005ee0 <TIM_OC3_SetConfig+0xd0>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d10d      	bne.n	8005e8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	021b      	lsls	r3, r3, #8
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a14      	ldr	r2, [pc, #80]	; (8005ee0 <TIM_OC3_SetConfig+0xd0>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d113      	bne.n	8005eba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	011b      	lsls	r3, r3, #4
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	011b      	lsls	r3, r3, #4
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	621a      	str	r2, [r3, #32]
}
 8005ed4:	bf00      	nop
 8005ed6:	371c      	adds	r7, #28
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bc80      	pop	{r7}
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	40012c00 	.word	0x40012c00

08005ee4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	021b      	lsls	r3, r3, #8
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	031b      	lsls	r3, r3, #12
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a0f      	ldr	r2, [pc, #60]	; (8005f7c <TIM_OC4_SetConfig+0x98>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d109      	bne.n	8005f58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	019b      	lsls	r3, r3, #6
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685a      	ldr	r2, [r3, #4]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	621a      	str	r2, [r3, #32]
}
 8005f72:	bf00      	nop
 8005f74:	371c      	adds	r7, #28
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bc80      	pop	{r7}
 8005f7a:	4770      	bx	lr
 8005f7c:	40012c00 	.word	0x40012c00

08005f80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6a1b      	ldr	r3, [r3, #32]
 8005f90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	f023 0201 	bic.w	r2, r3, #1
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005faa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	011b      	lsls	r3, r3, #4
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f023 030a 	bic.w	r3, r3, #10
 8005fbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	621a      	str	r2, [r3, #32]
}
 8005fd2:	bf00      	nop
 8005fd4:	371c      	adds	r7, #28
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bc80      	pop	{r7}
 8005fda:	4770      	bx	lr

08005fdc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b087      	sub	sp, #28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	f023 0210 	bic.w	r2, r3, #16
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	031b      	lsls	r3, r3, #12
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	4313      	orrs	r3, r2
 8006010:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006018:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	011b      	lsls	r3, r3, #4
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	4313      	orrs	r3, r2
 8006022:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	621a      	str	r2, [r3, #32]
}
 8006030:	bf00      	nop
 8006032:	371c      	adds	r7, #28
 8006034:	46bd      	mov	sp, r7
 8006036:	bc80      	pop	{r7}
 8006038:	4770      	bx	lr

0800603a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800603a:	b480      	push	{r7}
 800603c:	b085      	sub	sp, #20
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006050:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	4313      	orrs	r3, r2
 8006058:	f043 0307 	orr.w	r3, r3, #7
 800605c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	609a      	str	r2, [r3, #8]
}
 8006064:	bf00      	nop
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	bc80      	pop	{r7}
 800606c:	4770      	bx	lr

0800606e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800606e:	b480      	push	{r7}
 8006070:	b087      	sub	sp, #28
 8006072:	af00      	add	r7, sp, #0
 8006074:	60f8      	str	r0, [r7, #12]
 8006076:	60b9      	str	r1, [r7, #8]
 8006078:	607a      	str	r2, [r7, #4]
 800607a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006088:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	021a      	lsls	r2, r3, #8
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	431a      	orrs	r2, r3
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	4313      	orrs	r3, r2
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	4313      	orrs	r3, r2
 800609a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	609a      	str	r2, [r3, #8]
}
 80060a2:	bf00      	nop
 80060a4:	371c      	adds	r7, #28
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bc80      	pop	{r7}
 80060aa:	4770      	bx	lr

080060ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	f003 031f 	and.w	r3, r3, #31
 80060be:	2201      	movs	r2, #1
 80060c0:	fa02 f303 	lsl.w	r3, r2, r3
 80060c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6a1a      	ldr	r2, [r3, #32]
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	43db      	mvns	r3, r3
 80060ce:	401a      	ands	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6a1a      	ldr	r2, [r3, #32]
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	f003 031f 	and.w	r3, r3, #31
 80060de:	6879      	ldr	r1, [r7, #4]
 80060e0:	fa01 f303 	lsl.w	r3, r1, r3
 80060e4:	431a      	orrs	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	621a      	str	r2, [r3, #32]
}
 80060ea:	bf00      	nop
 80060ec:	371c      	adds	r7, #28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bc80      	pop	{r7}
 80060f2:	4770      	bx	lr

080060f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006104:	2b01      	cmp	r3, #1
 8006106:	d101      	bne.n	800610c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006108:	2302      	movs	r3, #2
 800610a:	e046      	b.n	800619a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2202      	movs	r2, #2
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006132:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a16      	ldr	r2, [pc, #88]	; (80061a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d00e      	beq.n	800616e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006158:	d009      	beq.n	800616e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a12      	ldr	r2, [pc, #72]	; (80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d004      	beq.n	800616e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a10      	ldr	r2, [pc, #64]	; (80061ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d10c      	bne.n	8006188 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006174:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	4313      	orrs	r3, r2
 800617e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	bc80      	pop	{r7}
 80061a2:	4770      	bx	lr
 80061a4:	40012c00 	.word	0x40012c00
 80061a8:	40000400 	.word	0x40000400
 80061ac:	40000800 	.word	0x40000800

080061b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80061ba:	2300      	movs	r3, #0
 80061bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d101      	bne.n	80061cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80061c8:	2302      	movs	r3, #2
 80061ca:	e03d      	b.n	8006248 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	4313      	orrs	r3, r2
 80061e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4313      	orrs	r3, r2
 800620a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	4313      	orrs	r3, r2
 8006218:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	4313      	orrs	r3, r2
 8006226:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	4313      	orrs	r3, r2
 8006234:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3714      	adds	r7, #20
 800624c:	46bd      	mov	sp, r7
 800624e:	bc80      	pop	{r7}
 8006250:	4770      	bx	lr

08006252 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800625a:	bf00      	nop
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	bc80      	pop	{r7}
 8006262:	4770      	bx	lr

08006264 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	bc80      	pop	{r7}
 8006274:	4770      	bx	lr

08006276 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b082      	sub	sp, #8
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d101      	bne.n	8006288 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e042      	b.n	800630e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b00      	cmp	r3, #0
 8006292:	d106      	bne.n	80062a2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f7fc f933 	bl	8002508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2224      	movs	r2, #36	; 0x24
 80062a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68da      	ldr	r2, [r3, #12]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062b8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 ff82 	bl	80071c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	691a      	ldr	r2, [r3, #16]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062ce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	695a      	ldr	r2, [r3, #20]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062de:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68da      	ldr	r2, [r3, #12]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062ee:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2220      	movs	r2, #32
 80062fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2220      	movs	r2, #32
 8006302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b08a      	sub	sp, #40	; 0x28
 800631a:	af02      	add	r7, sp, #8
 800631c:	60f8      	str	r0, [r7, #12]
 800631e:	60b9      	str	r1, [r7, #8]
 8006320:	603b      	str	r3, [r7, #0]
 8006322:	4613      	mov	r3, r2
 8006324:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006326:	2300      	movs	r3, #0
 8006328:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b20      	cmp	r3, #32
 8006334:	d175      	bne.n	8006422 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d002      	beq.n	8006342 <HAL_UART_Transmit+0x2c>
 800633c:	88fb      	ldrh	r3, [r7, #6]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e06e      	b.n	8006424 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2221      	movs	r2, #33	; 0x21
 8006350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006354:	f7fc fc9c 	bl	8002c90 <HAL_GetTick>
 8006358:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	88fa      	ldrh	r2, [r7, #6]
 800635e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	88fa      	ldrh	r2, [r7, #6]
 8006364:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800636e:	d108      	bne.n	8006382 <HAL_UART_Transmit+0x6c>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d104      	bne.n	8006382 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006378:	2300      	movs	r3, #0
 800637a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	61bb      	str	r3, [r7, #24]
 8006380:	e003      	b.n	800638a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006386:	2300      	movs	r3, #0
 8006388:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800638a:	e02e      	b.n	80063ea <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	2200      	movs	r2, #0
 8006394:	2180      	movs	r1, #128	; 0x80
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f000 fcc0 	bl	8006d1c <UART_WaitOnFlagUntilTimeout>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d005      	beq.n	80063ae <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2220      	movs	r2, #32
 80063a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e03a      	b.n	8006424 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10b      	bne.n	80063cc <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	461a      	mov	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063c2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	3302      	adds	r3, #2
 80063c8:	61bb      	str	r3, [r7, #24]
 80063ca:	e007      	b.n	80063dc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	781a      	ldrb	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	3301      	adds	r3, #1
 80063da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	3b01      	subs	r3, #1
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1cb      	bne.n	800638c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	2200      	movs	r2, #0
 80063fc:	2140      	movs	r1, #64	; 0x40
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f000 fc8c 	bl	8006d1c <UART_WaitOnFlagUntilTimeout>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d005      	beq.n	8006416 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2220      	movs	r2, #32
 800640e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e006      	b.n	8006424 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2220      	movs	r2, #32
 800641a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	e000      	b.n	8006424 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006422:	2302      	movs	r3, #2
  }
}
 8006424:	4618      	mov	r0, r3
 8006426:	3720      	adds	r7, #32
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	4613      	mov	r3, r2
 8006438:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b20      	cmp	r3, #32
 8006444:	d112      	bne.n	800646c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d002      	beq.n	8006452 <HAL_UART_Receive_IT+0x26>
 800644c:	88fb      	ldrh	r3, [r7, #6]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e00b      	b.n	800646e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800645c:	88fb      	ldrh	r3, [r7, #6]
 800645e:	461a      	mov	r2, r3
 8006460:	68b9      	ldr	r1, [r7, #8]
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 fcb3 	bl	8006dce <UART_Start_Receive_IT>
 8006468:	4603      	mov	r3, r0
 800646a:	e000      	b.n	800646e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800646c:	2302      	movs	r3, #2
  }
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
	...

08006478 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b08c      	sub	sp, #48	; 0x30
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	4613      	mov	r3, r2
 8006484:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b20      	cmp	r3, #32
 8006490:	d156      	bne.n	8006540 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d002      	beq.n	800649e <HAL_UART_Transmit_DMA+0x26>
 8006498:	88fb      	ldrh	r3, [r7, #6]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e04f      	b.n	8006542 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	88fa      	ldrh	r2, [r7, #6]
 80064ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	88fa      	ldrh	r2, [r7, #6]
 80064b2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2221      	movs	r2, #33	; 0x21
 80064be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c6:	4a21      	ldr	r2, [pc, #132]	; (800654c <HAL_UART_Transmit_DMA+0xd4>)
 80064c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ce:	4a20      	ldr	r2, [pc, #128]	; (8006550 <HAL_UART_Transmit_DMA+0xd8>)
 80064d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d6:	4a1f      	ldr	r2, [pc, #124]	; (8006554 <HAL_UART_Transmit_DMA+0xdc>)
 80064d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064de:	2200      	movs	r2, #0
 80064e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80064e2:	f107 0308 	add.w	r3, r7, #8
 80064e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80064ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ee:	6819      	ldr	r1, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3304      	adds	r3, #4
 80064f6:	461a      	mov	r2, r3
 80064f8:	88fb      	ldrh	r3, [r7, #6]
 80064fa:	f7fc fd5f 	bl	8002fbc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006506:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3314      	adds	r3, #20
 800650e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	e853 3f00 	ldrex	r3, [r3]
 8006516:	617b      	str	r3, [r7, #20]
   return(result);
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800651e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	3314      	adds	r3, #20
 8006526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006528:	627a      	str	r2, [r7, #36]	; 0x24
 800652a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652c:	6a39      	ldr	r1, [r7, #32]
 800652e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006530:	e841 2300 	strex	r3, r2, [r1]
 8006534:	61fb      	str	r3, [r7, #28]
   return(result);
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1e5      	bne.n	8006508 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800653c:	2300      	movs	r3, #0
 800653e:	e000      	b.n	8006542 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006540:	2302      	movs	r3, #2
  }
}
 8006542:	4618      	mov	r0, r3
 8006544:	3730      	adds	r7, #48	; 0x30
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	08006bd3 	.word	0x08006bd3
 8006550:	08006c6d 	.word	0x08006c6d
 8006554:	08006c89 	.word	0x08006c89

08006558 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b08e      	sub	sp, #56	; 0x38
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	330c      	adds	r3, #12
 8006566:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	e853 3f00 	ldrex	r3, [r3]
 800656e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006576:	637b      	str	r3, [r7, #52]	; 0x34
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	330c      	adds	r3, #12
 800657e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006580:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006582:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006584:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006586:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006588:	e841 2300 	strex	r3, r2, [r1]
 800658c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1e5      	bne.n	8006560 <HAL_UART_AbortTransmit+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d036      	beq.n	8006610 <HAL_UART_AbortTransmit+0xb8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3314      	adds	r3, #20
 80065a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	e853 3f00 	ldrex	r3, [r3]
 80065b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065b8:	633b      	str	r3, [r7, #48]	; 0x30
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3314      	adds	r3, #20
 80065c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065c2:	61ba      	str	r2, [r7, #24]
 80065c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c6:	6979      	ldr	r1, [r7, #20]
 80065c8:	69ba      	ldr	r2, [r7, #24]
 80065ca:	e841 2300 	strex	r3, r2, [r1]
 80065ce:	613b      	str	r3, [r7, #16]
   return(result);
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1e5      	bne.n	80065a2 <HAL_UART_AbortTransmit+0x4a>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d018      	beq.n	8006610 <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e2:	2200      	movs	r2, #0
 80065e4:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fc fd46 	bl	800307c <HAL_DMA_Abort>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00c      	beq.n	8006610 <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fc fef8 	bl	80033f0 <HAL_DMA_GetError>
 8006600:	4603      	mov	r3, r0
 8006602:	2b20      	cmp	r3, #32
 8006604:	d104      	bne.n	8006610 <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2210      	movs	r2, #16
 800660a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e007      	b.n	8006620 <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2220      	movs	r2, #32
 800661a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3738      	adds	r7, #56	; 0x38
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b0ba      	sub	sp, #232	; 0xe8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800664e:	2300      	movs	r3, #0
 8006650:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006654:	2300      	movs	r3, #0
 8006656:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800665a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800665e:	f003 030f 	and.w	r3, r3, #15
 8006662:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006666:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10f      	bne.n	800668e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800666e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006672:	f003 0320 	and.w	r3, r3, #32
 8006676:	2b00      	cmp	r3, #0
 8006678:	d009      	beq.n	800668e <HAL_UART_IRQHandler+0x66>
 800667a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800667e:	f003 0320 	and.w	r3, r3, #32
 8006682:	2b00      	cmp	r3, #0
 8006684:	d003      	beq.n	800668e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 fcde 	bl	8007048 <UART_Receive_IT>
      return;
 800668c:	e25b      	b.n	8006b46 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800668e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 80de 	beq.w	8006854 <HAL_UART_IRQHandler+0x22c>
 8006698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d106      	bne.n	80066b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 80d1 	beq.w	8006854 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b6:	f003 0301 	and.w	r3, r3, #1
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00b      	beq.n	80066d6 <HAL_UART_IRQHandler+0xae>
 80066be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d005      	beq.n	80066d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ce:	f043 0201 	orr.w	r2, r3, #1
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066da:	f003 0304 	and.w	r3, r3, #4
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00b      	beq.n	80066fa <HAL_UART_IRQHandler+0xd2>
 80066e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d005      	beq.n	80066fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f2:	f043 0202 	orr.w	r2, r3, #2
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00b      	beq.n	800671e <HAL_UART_IRQHandler+0xf6>
 8006706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	d005      	beq.n	800671e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006716:	f043 0204 	orr.w	r2, r3, #4
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800671e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006722:	f003 0308 	and.w	r3, r3, #8
 8006726:	2b00      	cmp	r3, #0
 8006728:	d011      	beq.n	800674e <HAL_UART_IRQHandler+0x126>
 800672a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800672e:	f003 0320 	and.w	r3, r3, #32
 8006732:	2b00      	cmp	r3, #0
 8006734:	d105      	bne.n	8006742 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d005      	beq.n	800674e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006746:	f043 0208 	orr.w	r2, r3, #8
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006752:	2b00      	cmp	r3, #0
 8006754:	f000 81f2 	beq.w	8006b3c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800675c:	f003 0320 	and.w	r3, r3, #32
 8006760:	2b00      	cmp	r3, #0
 8006762:	d008      	beq.n	8006776 <HAL_UART_IRQHandler+0x14e>
 8006764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006768:	f003 0320 	and.w	r3, r3, #32
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fc69 	bl	8007048 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	695b      	ldr	r3, [r3, #20]
 800677c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006780:	2b00      	cmp	r3, #0
 8006782:	bf14      	ite	ne
 8006784:	2301      	movne	r3, #1
 8006786:	2300      	moveq	r3, #0
 8006788:	b2db      	uxtb	r3, r3
 800678a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006792:	f003 0308 	and.w	r3, r3, #8
 8006796:	2b00      	cmp	r3, #0
 8006798:	d103      	bne.n	80067a2 <HAL_UART_IRQHandler+0x17a>
 800679a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d04f      	beq.n	8006842 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fb73 	bl	8006e8e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d041      	beq.n	800683a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	3314      	adds	r3, #20
 80067bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067c4:	e853 3f00 	ldrex	r3, [r3]
 80067c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80067cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3314      	adds	r3, #20
 80067de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80067e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80067e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80067ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80067f2:	e841 2300 	strex	r3, r2, [r1]
 80067f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80067fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1d9      	bne.n	80067b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006806:	2b00      	cmp	r3, #0
 8006808:	d013      	beq.n	8006832 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680e:	4a7e      	ldr	r2, [pc, #504]	; (8006a08 <HAL_UART_IRQHandler+0x3e0>)
 8006810:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006816:	4618      	mov	r0, r3
 8006818:	f7fc fc6c 	bl	80030f4 <HAL_DMA_Abort_IT>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d016      	beq.n	8006850 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800682c:	4610      	mov	r0, r2
 800682e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006830:	e00e      	b.n	8006850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f99c 	bl	8006b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006838:	e00a      	b.n	8006850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f998 	bl	8006b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006840:	e006      	b.n	8006850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f994 	bl	8006b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800684e:	e175      	b.n	8006b3c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006850:	bf00      	nop
    return;
 8006852:	e173      	b.n	8006b3c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006858:	2b01      	cmp	r3, #1
 800685a:	f040 814f 	bne.w	8006afc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800685e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006862:	f003 0310 	and.w	r3, r3, #16
 8006866:	2b00      	cmp	r3, #0
 8006868:	f000 8148 	beq.w	8006afc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800686c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006870:	f003 0310 	and.w	r3, r3, #16
 8006874:	2b00      	cmp	r3, #0
 8006876:	f000 8141 	beq.w	8006afc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800687a:	2300      	movs	r3, #0
 800687c:	60bb      	str	r3, [r7, #8]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	60bb      	str	r3, [r7, #8]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	60bb      	str	r3, [r7, #8]
 800688e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 80b6 	beq.w	8006a0c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 8145 	beq.w	8006b40 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068be:	429a      	cmp	r2, r3
 80068c0:	f080 813e 	bcs.w	8006b40 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	2b20      	cmp	r3, #32
 80068d4:	f000 8088 	beq.w	80069e8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	330c      	adds	r3, #12
 80068de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068e6:	e853 3f00 	ldrex	r3, [r3]
 80068ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80068ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	330c      	adds	r3, #12
 8006900:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006904:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006908:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006910:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006914:	e841 2300 	strex	r3, r2, [r1]
 8006918:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800691c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1d9      	bne.n	80068d8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	3314      	adds	r3, #20
 800692a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800692e:	e853 3f00 	ldrex	r3, [r3]
 8006932:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006934:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006936:	f023 0301 	bic.w	r3, r3, #1
 800693a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3314      	adds	r3, #20
 8006944:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006948:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800694c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006950:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006954:	e841 2300 	strex	r3, r2, [r1]
 8006958:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800695a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1e1      	bne.n	8006924 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	3314      	adds	r3, #20
 8006966:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006968:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800696a:	e853 3f00 	ldrex	r3, [r3]
 800696e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006970:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006976:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	3314      	adds	r3, #20
 8006980:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006984:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006986:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006988:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800698a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800698c:	e841 2300 	strex	r3, r2, [r1]
 8006990:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006992:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1e3      	bne.n	8006960 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2220      	movs	r2, #32
 800699c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	330c      	adds	r3, #12
 80069ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069b0:	e853 3f00 	ldrex	r3, [r3]
 80069b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069b8:	f023 0310 	bic.w	r3, r3, #16
 80069bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	330c      	adds	r3, #12
 80069c6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80069ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80069cc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069d2:	e841 2300 	strex	r3, r2, [r1]
 80069d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1e3      	bne.n	80069a6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7fc fb4a 	bl	800307c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2202      	movs	r2, #2
 80069ec:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	4619      	mov	r1, r3
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f8bf 	bl	8006b82 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a04:	e09c      	b.n	8006b40 <HAL_UART_IRQHandler+0x518>
 8006a06:	bf00      	nop
 8006a08:	08006f53 	.word	0x08006f53
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f000 808e 	beq.w	8006b44 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006a28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 8089 	beq.w	8006b44 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	330c      	adds	r3, #12
 8006a38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3c:	e853 3f00 	ldrex	r3, [r3]
 8006a40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	330c      	adds	r3, #12
 8006a52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006a56:	647a      	str	r2, [r7, #68]	; 0x44
 8006a58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a5e:	e841 2300 	strex	r3, r2, [r1]
 8006a62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1e3      	bne.n	8006a32 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	3314      	adds	r3, #20
 8006a70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a74:	e853 3f00 	ldrex	r3, [r3]
 8006a78:	623b      	str	r3, [r7, #32]
   return(result);
 8006a7a:	6a3b      	ldr	r3, [r7, #32]
 8006a7c:	f023 0301 	bic.w	r3, r3, #1
 8006a80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3314      	adds	r3, #20
 8006a8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a8e:	633a      	str	r2, [r7, #48]	; 0x30
 8006a90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a96:	e841 2300 	strex	r3, r2, [r1]
 8006a9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1e3      	bne.n	8006a6a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	330c      	adds	r3, #12
 8006ab6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	e853 3f00 	ldrex	r3, [r3]
 8006abe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f023 0310 	bic.w	r3, r3, #16
 8006ac6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	330c      	adds	r3, #12
 8006ad0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006ad4:	61fa      	str	r2, [r7, #28]
 8006ad6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad8:	69b9      	ldr	r1, [r7, #24]
 8006ada:	69fa      	ldr	r2, [r7, #28]
 8006adc:	e841 2300 	strex	r3, r2, [r1]
 8006ae0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1e3      	bne.n	8006ab0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2202      	movs	r2, #2
 8006aec:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006aee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f844 	bl	8006b82 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006afa:	e023      	b.n	8006b44 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d009      	beq.n	8006b1c <HAL_UART_IRQHandler+0x4f4>
 8006b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d003      	beq.n	8006b1c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 fa30 	bl	8006f7a <UART_Transmit_IT>
    return;
 8006b1a:	e014      	b.n	8006b46 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00e      	beq.n	8006b46 <HAL_UART_IRQHandler+0x51e>
 8006b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d008      	beq.n	8006b46 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 fa6f 	bl	8007018 <UART_EndTransmit_IT>
    return;
 8006b3a:	e004      	b.n	8006b46 <HAL_UART_IRQHandler+0x51e>
    return;
 8006b3c:	bf00      	nop
 8006b3e:	e002      	b.n	8006b46 <HAL_UART_IRQHandler+0x51e>
      return;
 8006b40:	bf00      	nop
 8006b42:	e000      	b.n	8006b46 <HAL_UART_IRQHandler+0x51e>
      return;
 8006b44:	bf00      	nop
  }
}
 8006b46:	37e8      	adds	r7, #232	; 0xe8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bc80      	pop	{r7}
 8006b5c:	4770      	bx	lr

08006b5e <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006b66:	bf00      	nop
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bc80      	pop	{r7}
 8006b6e:	4770      	bx	lr

08006b70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bc80      	pop	{r7}
 8006b80:	4770      	bx	lr

08006b82 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b083      	sub	sp, #12
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b8e:	bf00      	nop
 8006b90:	370c      	adds	r7, #12
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bc80      	pop	{r7}
 8006b96:	4770      	bx	lr

08006b98 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	60fb      	str	r3, [r7, #12]
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	b2da      	uxtb	r2, r3
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	b2db      	uxtb	r3, r3
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3714      	adds	r7, #20
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bc80      	pop	{r7}
 8006bd0:	4770      	bx	lr

08006bd2 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b090      	sub	sp, #64	; 0x40
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0320 	and.w	r3, r3, #32
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d137      	bne.n	8006c5e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	3314      	adds	r3, #20
 8006bfa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	e853 3f00 	ldrex	r3, [r3]
 8006c02:	623b      	str	r3, [r7, #32]
   return(result);
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3314      	adds	r3, #20
 8006c12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c14:	633a      	str	r2, [r7, #48]	; 0x30
 8006c16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c1c:	e841 2300 	strex	r3, r2, [r1]
 8006c20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1e5      	bne.n	8006bf4 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	330c      	adds	r3, #12
 8006c2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	e853 3f00 	ldrex	r3, [r3]
 8006c36:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	330c      	adds	r3, #12
 8006c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c48:	61fa      	str	r2, [r7, #28]
 8006c4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4c:	69b9      	ldr	r1, [r7, #24]
 8006c4e:	69fa      	ldr	r2, [r7, #28]
 8006c50:	e841 2300 	strex	r3, r2, [r1]
 8006c54:	617b      	str	r3, [r7, #20]
   return(result);
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1e5      	bne.n	8006c28 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c5c:	e002      	b.n	8006c64 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006c5e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006c60:	f7ff ff74 	bl	8006b4c <HAL_UART_TxCpltCallback>
}
 8006c64:	bf00      	nop
 8006c66:	3740      	adds	r7, #64	; 0x40
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c78:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f7ff ff6f 	bl	8006b5e <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c80:	bf00      	nop
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006c90:	2300      	movs	r3, #0
 8006c92:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c98:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	695b      	ldr	r3, [r3, #20]
 8006ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	bf14      	ite	ne
 8006ca8:	2301      	movne	r3, #1
 8006caa:	2300      	moveq	r3, #0
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b21      	cmp	r3, #33	; 0x21
 8006cba:	d108      	bne.n	8006cce <UART_DMAError+0x46>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d005      	beq.n	8006cce <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006cc8:	68b8      	ldr	r0, [r7, #8]
 8006cca:	f000 f8b9 	bl	8006e40 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	bf14      	ite	ne
 8006cdc:	2301      	movne	r3, #1
 8006cde:	2300      	moveq	r3, #0
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b22      	cmp	r3, #34	; 0x22
 8006cee:	d108      	bne.n	8006d02 <UART_DMAError+0x7a>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d005      	beq.n	8006d02 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006cfc:	68b8      	ldr	r0, [r7, #8]
 8006cfe:	f000 f8c6 	bl	8006e8e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d06:	f043 0210 	orr.w	r2, r3, #16
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d0e:	68b8      	ldr	r0, [r7, #8]
 8006d10:	f7ff ff2e 	bl	8006b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d14:	bf00      	nop
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	603b      	str	r3, [r7, #0]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d2c:	e03b      	b.n	8006da6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d34:	d037      	beq.n	8006da6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d36:	f7fb ffab 	bl	8002c90 <HAL_GetTick>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	6a3a      	ldr	r2, [r7, #32]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d302      	bcc.n	8006d4c <UART_WaitOnFlagUntilTimeout+0x30>
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e03a      	b.n	8006dc6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	f003 0304 	and.w	r3, r3, #4
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d023      	beq.n	8006da6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	2b80      	cmp	r3, #128	; 0x80
 8006d62:	d020      	beq.n	8006da6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	2b40      	cmp	r3, #64	; 0x40
 8006d68:	d01d      	beq.n	8006da6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0308 	and.w	r3, r3, #8
 8006d74:	2b08      	cmp	r3, #8
 8006d76:	d116      	bne.n	8006da6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006d78:	2300      	movs	r3, #0
 8006d7a:	617b      	str	r3, [r7, #20]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	617b      	str	r3, [r7, #20]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	617b      	str	r3, [r7, #20]
 8006d8c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f000 f87d 	bl	8006e8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2208      	movs	r2, #8
 8006d98:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e00f      	b.n	8006dc6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	4013      	ands	r3, r2
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	bf0c      	ite	eq
 8006db6:	2301      	moveq	r3, #1
 8006db8:	2300      	movne	r3, #0
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	79fb      	ldrb	r3, [r7, #7]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d0b4      	beq.n	8006d2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3718      	adds	r7, #24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b085      	sub	sp, #20
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	60f8      	str	r0, [r7, #12]
 8006dd6:	60b9      	str	r1, [r7, #8]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	88fa      	ldrh	r2, [r7, #6]
 8006de6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	88fa      	ldrh	r2, [r7, #6]
 8006dec:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2222      	movs	r2, #34	; 0x22
 8006df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d007      	beq.n	8006e14 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68da      	ldr	r2, [r3, #12]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e12:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	695a      	ldr	r2, [r3, #20]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f042 0201 	orr.w	r2, r2, #1
 8006e22:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68da      	ldr	r2, [r3, #12]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f042 0220 	orr.w	r2, r2, #32
 8006e32:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3714      	adds	r7, #20
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bc80      	pop	{r7}
 8006e3e:	4770      	bx	lr

08006e40 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b089      	sub	sp, #36	; 0x24
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	330c      	adds	r3, #12
 8006e4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	e853 3f00 	ldrex	r3, [r3]
 8006e56:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006e5e:	61fb      	str	r3, [r7, #28]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	330c      	adds	r3, #12
 8006e66:	69fa      	ldr	r2, [r7, #28]
 8006e68:	61ba      	str	r2, [r7, #24]
 8006e6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6c:	6979      	ldr	r1, [r7, #20]
 8006e6e:	69ba      	ldr	r2, [r7, #24]
 8006e70:	e841 2300 	strex	r3, r2, [r1]
 8006e74:	613b      	str	r3, [r7, #16]
   return(result);
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1e5      	bne.n	8006e48 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8006e84:	bf00      	nop
 8006e86:	3724      	adds	r7, #36	; 0x24
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bc80      	pop	{r7}
 8006e8c:	4770      	bx	lr

08006e8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b095      	sub	sp, #84	; 0x54
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	330c      	adds	r3, #12
 8006e9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea0:	e853 3f00 	ldrex	r3, [r3]
 8006ea4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006eac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	330c      	adds	r3, #12
 8006eb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006eb6:	643a      	str	r2, [r7, #64]	; 0x40
 8006eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ebc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ebe:	e841 2300 	strex	r3, r2, [r1]
 8006ec2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1e5      	bne.n	8006e96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3314      	adds	r3, #20
 8006ed0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed2:	6a3b      	ldr	r3, [r7, #32]
 8006ed4:	e853 3f00 	ldrex	r3, [r3]
 8006ed8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	f023 0301 	bic.w	r3, r3, #1
 8006ee0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	3314      	adds	r3, #20
 8006ee8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006eea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006eec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ef2:	e841 2300 	strex	r3, r2, [r1]
 8006ef6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1e5      	bne.n	8006eca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d119      	bne.n	8006f3a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	330c      	adds	r3, #12
 8006f0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	e853 3f00 	ldrex	r3, [r3]
 8006f14:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	f023 0310 	bic.w	r3, r3, #16
 8006f1c:	647b      	str	r3, [r7, #68]	; 0x44
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	330c      	adds	r3, #12
 8006f24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f26:	61ba      	str	r2, [r7, #24]
 8006f28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2a:	6979      	ldr	r1, [r7, #20]
 8006f2c:	69ba      	ldr	r2, [r7, #24]
 8006f2e:	e841 2300 	strex	r3, r2, [r1]
 8006f32:	613b      	str	r3, [r7, #16]
   return(result);
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1e5      	bne.n	8006f06 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006f48:	bf00      	nop
 8006f4a:	3754      	adds	r7, #84	; 0x54
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bc80      	pop	{r7}
 8006f50:	4770      	bx	lr

08006f52 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b084      	sub	sp, #16
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f7ff fdff 	bl	8006b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f72:	bf00      	nop
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b085      	sub	sp, #20
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b21      	cmp	r3, #33	; 0x21
 8006f8c:	d13e      	bne.n	800700c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f96:	d114      	bne.n	8006fc2 <UART_Transmit_IT+0x48>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d110      	bne.n	8006fc2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a1b      	ldr	r3, [r3, #32]
 8006fa4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	881b      	ldrh	r3, [r3, #0]
 8006faa:	461a      	mov	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fb4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	1c9a      	adds	r2, r3, #2
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	621a      	str	r2, [r3, #32]
 8006fc0:	e008      	b.n	8006fd4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	1c59      	adds	r1, r3, #1
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	6211      	str	r1, [r2, #32]
 8006fcc:	781a      	ldrb	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d10f      	bne.n	8007008 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68da      	ldr	r2, [r3, #12]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ff6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68da      	ldr	r2, [r3, #12]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007006:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007008:	2300      	movs	r3, #0
 800700a:	e000      	b.n	800700e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800700c:	2302      	movs	r3, #2
  }
}
 800700e:	4618      	mov	r0, r3
 8007010:	3714      	adds	r7, #20
 8007012:	46bd      	mov	sp, r7
 8007014:	bc80      	pop	{r7}
 8007016:	4770      	bx	lr

08007018 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68da      	ldr	r2, [r3, #12]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800702e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2220      	movs	r2, #32
 8007034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7ff fd87 	bl	8006b4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b08c      	sub	sp, #48	; 0x30
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007056:	b2db      	uxtb	r3, r3
 8007058:	2b22      	cmp	r3, #34	; 0x22
 800705a:	f040 80ae 	bne.w	80071ba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007066:	d117      	bne.n	8007098 <UART_Receive_IT+0x50>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d113      	bne.n	8007098 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007070:	2300      	movs	r3, #0
 8007072:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007078:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	b29b      	uxth	r3, r3
 8007082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007086:	b29a      	uxth	r2, r3
 8007088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007090:	1c9a      	adds	r2, r3, #2
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	629a      	str	r2, [r3, #40]	; 0x28
 8007096:	e026      	b.n	80070e6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800709e:	2300      	movs	r3, #0
 80070a0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070aa:	d007      	beq.n	80070bc <UART_Receive_IT+0x74>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10a      	bne.n	80070ca <UART_Receive_IT+0x82>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d106      	bne.n	80070ca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	b2da      	uxtb	r2, r3
 80070c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c6:	701a      	strb	r2, [r3, #0]
 80070c8:	e008      	b.n	80070dc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070d6:	b2da      	uxtb	r2, r3
 80070d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070da:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e0:	1c5a      	adds	r2, r3, #1
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	3b01      	subs	r3, #1
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	4619      	mov	r1, r3
 80070f4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d15d      	bne.n	80071b6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68da      	ldr	r2, [r3, #12]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f022 0220 	bic.w	r2, r2, #32
 8007108:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68da      	ldr	r2, [r3, #12]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007118:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	695a      	ldr	r2, [r3, #20]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f022 0201 	bic.w	r2, r2, #1
 8007128:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2220      	movs	r2, #32
 800712e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800713c:	2b01      	cmp	r3, #1
 800713e:	d135      	bne.n	80071ac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	330c      	adds	r3, #12
 800714c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	e853 3f00 	ldrex	r3, [r3]
 8007154:	613b      	str	r3, [r7, #16]
   return(result);
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	f023 0310 	bic.w	r3, r3, #16
 800715c:	627b      	str	r3, [r7, #36]	; 0x24
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	330c      	adds	r3, #12
 8007164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007166:	623a      	str	r2, [r7, #32]
 8007168:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716a:	69f9      	ldr	r1, [r7, #28]
 800716c:	6a3a      	ldr	r2, [r7, #32]
 800716e:	e841 2300 	strex	r3, r2, [r1]
 8007172:	61bb      	str	r3, [r7, #24]
   return(result);
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1e5      	bne.n	8007146 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0310 	and.w	r3, r3, #16
 8007184:	2b10      	cmp	r3, #16
 8007186:	d10a      	bne.n	800719e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007188:	2300      	movs	r3, #0
 800718a:	60fb      	str	r3, [r7, #12]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071a2:	4619      	mov	r1, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f7ff fcec 	bl	8006b82 <HAL_UARTEx_RxEventCallback>
 80071aa:	e002      	b.n	80071b2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7fb f8dd 	bl	800236c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80071b2:	2300      	movs	r3, #0
 80071b4:	e002      	b.n	80071bc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80071b6:	2300      	movs	r3, #0
 80071b8:	e000      	b.n	80071bc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80071ba:	2302      	movs	r3, #2
  }
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3730      	adds	r7, #48	; 0x30
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68da      	ldr	r2, [r3, #12]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	430a      	orrs	r2, r1
 80071e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	689a      	ldr	r2, [r3, #8]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	431a      	orrs	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80071fe:	f023 030c 	bic.w	r3, r3, #12
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	6812      	ldr	r2, [r2, #0]
 8007206:	68b9      	ldr	r1, [r7, #8]
 8007208:	430b      	orrs	r3, r1
 800720a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	699a      	ldr	r2, [r3, #24]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	430a      	orrs	r2, r1
 8007220:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a2c      	ldr	r2, [pc, #176]	; (80072d8 <UART_SetConfig+0x114>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d103      	bne.n	8007234 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800722c:	f7fe f846 	bl	80052bc <HAL_RCC_GetPCLK2Freq>
 8007230:	60f8      	str	r0, [r7, #12]
 8007232:	e002      	b.n	800723a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007234:	f7fe f82e 	bl	8005294 <HAL_RCC_GetPCLK1Freq>
 8007238:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	4613      	mov	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	009a      	lsls	r2, r3, #2
 8007244:	441a      	add	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007250:	4a22      	ldr	r2, [pc, #136]	; (80072dc <UART_SetConfig+0x118>)
 8007252:	fba2 2303 	umull	r2, r3, r2, r3
 8007256:	095b      	lsrs	r3, r3, #5
 8007258:	0119      	lsls	r1, r3, #4
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	4613      	mov	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4413      	add	r3, r2
 8007262:	009a      	lsls	r2, r3, #2
 8007264:	441a      	add	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007270:	4b1a      	ldr	r3, [pc, #104]	; (80072dc <UART_SetConfig+0x118>)
 8007272:	fba3 0302 	umull	r0, r3, r3, r2
 8007276:	095b      	lsrs	r3, r3, #5
 8007278:	2064      	movs	r0, #100	; 0x64
 800727a:	fb00 f303 	mul.w	r3, r0, r3
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	011b      	lsls	r3, r3, #4
 8007282:	3332      	adds	r3, #50	; 0x32
 8007284:	4a15      	ldr	r2, [pc, #84]	; (80072dc <UART_SetConfig+0x118>)
 8007286:	fba2 2303 	umull	r2, r3, r2, r3
 800728a:	095b      	lsrs	r3, r3, #5
 800728c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007290:	4419      	add	r1, r3
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	4613      	mov	r3, r2
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	4413      	add	r3, r2
 800729a:	009a      	lsls	r2, r3, #2
 800729c:	441a      	add	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80072a8:	4b0c      	ldr	r3, [pc, #48]	; (80072dc <UART_SetConfig+0x118>)
 80072aa:	fba3 0302 	umull	r0, r3, r3, r2
 80072ae:	095b      	lsrs	r3, r3, #5
 80072b0:	2064      	movs	r0, #100	; 0x64
 80072b2:	fb00 f303 	mul.w	r3, r0, r3
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	011b      	lsls	r3, r3, #4
 80072ba:	3332      	adds	r3, #50	; 0x32
 80072bc:	4a07      	ldr	r2, [pc, #28]	; (80072dc <UART_SetConfig+0x118>)
 80072be:	fba2 2303 	umull	r2, r3, r2, r3
 80072c2:	095b      	lsrs	r3, r3, #5
 80072c4:	f003 020f 	and.w	r2, r3, #15
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	440a      	add	r2, r1
 80072ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80072d0:	bf00      	nop
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	40013800 	.word	0x40013800
 80072dc:	51eb851f 	.word	0x51eb851f

080072e0 <malloc>:
 80072e0:	4b02      	ldr	r3, [pc, #8]	; (80072ec <malloc+0xc>)
 80072e2:	4601      	mov	r1, r0
 80072e4:	6818      	ldr	r0, [r3, #0]
 80072e6:	f000 b823 	b.w	8007330 <_malloc_r>
 80072ea:	bf00      	nop
 80072ec:	20000090 	.word	0x20000090

080072f0 <sbrk_aligned>:
 80072f0:	b570      	push	{r4, r5, r6, lr}
 80072f2:	4e0e      	ldr	r6, [pc, #56]	; (800732c <sbrk_aligned+0x3c>)
 80072f4:	460c      	mov	r4, r1
 80072f6:	6831      	ldr	r1, [r6, #0]
 80072f8:	4605      	mov	r5, r0
 80072fa:	b911      	cbnz	r1, 8007302 <sbrk_aligned+0x12>
 80072fc:	f000 feb2 	bl	8008064 <_sbrk_r>
 8007300:	6030      	str	r0, [r6, #0]
 8007302:	4621      	mov	r1, r4
 8007304:	4628      	mov	r0, r5
 8007306:	f000 fead 	bl	8008064 <_sbrk_r>
 800730a:	1c43      	adds	r3, r0, #1
 800730c:	d00a      	beq.n	8007324 <sbrk_aligned+0x34>
 800730e:	1cc4      	adds	r4, r0, #3
 8007310:	f024 0403 	bic.w	r4, r4, #3
 8007314:	42a0      	cmp	r0, r4
 8007316:	d007      	beq.n	8007328 <sbrk_aligned+0x38>
 8007318:	1a21      	subs	r1, r4, r0
 800731a:	4628      	mov	r0, r5
 800731c:	f000 fea2 	bl	8008064 <_sbrk_r>
 8007320:	3001      	adds	r0, #1
 8007322:	d101      	bne.n	8007328 <sbrk_aligned+0x38>
 8007324:	f04f 34ff 	mov.w	r4, #4294967295
 8007328:	4620      	mov	r0, r4
 800732a:	bd70      	pop	{r4, r5, r6, pc}
 800732c:	20000ad8 	.word	0x20000ad8

08007330 <_malloc_r>:
 8007330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007334:	1ccd      	adds	r5, r1, #3
 8007336:	f025 0503 	bic.w	r5, r5, #3
 800733a:	3508      	adds	r5, #8
 800733c:	2d0c      	cmp	r5, #12
 800733e:	bf38      	it	cc
 8007340:	250c      	movcc	r5, #12
 8007342:	2d00      	cmp	r5, #0
 8007344:	4607      	mov	r7, r0
 8007346:	db01      	blt.n	800734c <_malloc_r+0x1c>
 8007348:	42a9      	cmp	r1, r5
 800734a:	d905      	bls.n	8007358 <_malloc_r+0x28>
 800734c:	230c      	movs	r3, #12
 800734e:	2600      	movs	r6, #0
 8007350:	603b      	str	r3, [r7, #0]
 8007352:	4630      	mov	r0, r6
 8007354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007358:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800742c <_malloc_r+0xfc>
 800735c:	f000 f868 	bl	8007430 <__malloc_lock>
 8007360:	f8d8 3000 	ldr.w	r3, [r8]
 8007364:	461c      	mov	r4, r3
 8007366:	bb5c      	cbnz	r4, 80073c0 <_malloc_r+0x90>
 8007368:	4629      	mov	r1, r5
 800736a:	4638      	mov	r0, r7
 800736c:	f7ff ffc0 	bl	80072f0 <sbrk_aligned>
 8007370:	1c43      	adds	r3, r0, #1
 8007372:	4604      	mov	r4, r0
 8007374:	d155      	bne.n	8007422 <_malloc_r+0xf2>
 8007376:	f8d8 4000 	ldr.w	r4, [r8]
 800737a:	4626      	mov	r6, r4
 800737c:	2e00      	cmp	r6, #0
 800737e:	d145      	bne.n	800740c <_malloc_r+0xdc>
 8007380:	2c00      	cmp	r4, #0
 8007382:	d048      	beq.n	8007416 <_malloc_r+0xe6>
 8007384:	6823      	ldr	r3, [r4, #0]
 8007386:	4631      	mov	r1, r6
 8007388:	4638      	mov	r0, r7
 800738a:	eb04 0903 	add.w	r9, r4, r3
 800738e:	f000 fe69 	bl	8008064 <_sbrk_r>
 8007392:	4581      	cmp	r9, r0
 8007394:	d13f      	bne.n	8007416 <_malloc_r+0xe6>
 8007396:	6821      	ldr	r1, [r4, #0]
 8007398:	4638      	mov	r0, r7
 800739a:	1a6d      	subs	r5, r5, r1
 800739c:	4629      	mov	r1, r5
 800739e:	f7ff ffa7 	bl	80072f0 <sbrk_aligned>
 80073a2:	3001      	adds	r0, #1
 80073a4:	d037      	beq.n	8007416 <_malloc_r+0xe6>
 80073a6:	6823      	ldr	r3, [r4, #0]
 80073a8:	442b      	add	r3, r5
 80073aa:	6023      	str	r3, [r4, #0]
 80073ac:	f8d8 3000 	ldr.w	r3, [r8]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d038      	beq.n	8007426 <_malloc_r+0xf6>
 80073b4:	685a      	ldr	r2, [r3, #4]
 80073b6:	42a2      	cmp	r2, r4
 80073b8:	d12b      	bne.n	8007412 <_malloc_r+0xe2>
 80073ba:	2200      	movs	r2, #0
 80073bc:	605a      	str	r2, [r3, #4]
 80073be:	e00f      	b.n	80073e0 <_malloc_r+0xb0>
 80073c0:	6822      	ldr	r2, [r4, #0]
 80073c2:	1b52      	subs	r2, r2, r5
 80073c4:	d41f      	bmi.n	8007406 <_malloc_r+0xd6>
 80073c6:	2a0b      	cmp	r2, #11
 80073c8:	d917      	bls.n	80073fa <_malloc_r+0xca>
 80073ca:	1961      	adds	r1, r4, r5
 80073cc:	42a3      	cmp	r3, r4
 80073ce:	6025      	str	r5, [r4, #0]
 80073d0:	bf18      	it	ne
 80073d2:	6059      	strne	r1, [r3, #4]
 80073d4:	6863      	ldr	r3, [r4, #4]
 80073d6:	bf08      	it	eq
 80073d8:	f8c8 1000 	streq.w	r1, [r8]
 80073dc:	5162      	str	r2, [r4, r5]
 80073de:	604b      	str	r3, [r1, #4]
 80073e0:	4638      	mov	r0, r7
 80073e2:	f104 060b 	add.w	r6, r4, #11
 80073e6:	f000 f829 	bl	800743c <__malloc_unlock>
 80073ea:	f026 0607 	bic.w	r6, r6, #7
 80073ee:	1d23      	adds	r3, r4, #4
 80073f0:	1af2      	subs	r2, r6, r3
 80073f2:	d0ae      	beq.n	8007352 <_malloc_r+0x22>
 80073f4:	1b9b      	subs	r3, r3, r6
 80073f6:	50a3      	str	r3, [r4, r2]
 80073f8:	e7ab      	b.n	8007352 <_malloc_r+0x22>
 80073fa:	42a3      	cmp	r3, r4
 80073fc:	6862      	ldr	r2, [r4, #4]
 80073fe:	d1dd      	bne.n	80073bc <_malloc_r+0x8c>
 8007400:	f8c8 2000 	str.w	r2, [r8]
 8007404:	e7ec      	b.n	80073e0 <_malloc_r+0xb0>
 8007406:	4623      	mov	r3, r4
 8007408:	6864      	ldr	r4, [r4, #4]
 800740a:	e7ac      	b.n	8007366 <_malloc_r+0x36>
 800740c:	4634      	mov	r4, r6
 800740e:	6876      	ldr	r6, [r6, #4]
 8007410:	e7b4      	b.n	800737c <_malloc_r+0x4c>
 8007412:	4613      	mov	r3, r2
 8007414:	e7cc      	b.n	80073b0 <_malloc_r+0x80>
 8007416:	230c      	movs	r3, #12
 8007418:	4638      	mov	r0, r7
 800741a:	603b      	str	r3, [r7, #0]
 800741c:	f000 f80e 	bl	800743c <__malloc_unlock>
 8007420:	e797      	b.n	8007352 <_malloc_r+0x22>
 8007422:	6025      	str	r5, [r4, #0]
 8007424:	e7dc      	b.n	80073e0 <_malloc_r+0xb0>
 8007426:	605b      	str	r3, [r3, #4]
 8007428:	deff      	udf	#255	; 0xff
 800742a:	bf00      	nop
 800742c:	20000ad4 	.word	0x20000ad4

08007430 <__malloc_lock>:
 8007430:	4801      	ldr	r0, [pc, #4]	; (8007438 <__malloc_lock+0x8>)
 8007432:	f000 be64 	b.w	80080fe <__retarget_lock_acquire_recursive>
 8007436:	bf00      	nop
 8007438:	20000c1c 	.word	0x20000c1c

0800743c <__malloc_unlock>:
 800743c:	4801      	ldr	r0, [pc, #4]	; (8007444 <__malloc_unlock+0x8>)
 800743e:	f000 be5f 	b.w	8008100 <__retarget_lock_release_recursive>
 8007442:	bf00      	nop
 8007444:	20000c1c 	.word	0x20000c1c

08007448 <__cvt>:
 8007448:	2b00      	cmp	r3, #0
 800744a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800744e:	461f      	mov	r7, r3
 8007450:	bfbb      	ittet	lt
 8007452:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007456:	461f      	movlt	r7, r3
 8007458:	2300      	movge	r3, #0
 800745a:	232d      	movlt	r3, #45	; 0x2d
 800745c:	b088      	sub	sp, #32
 800745e:	4614      	mov	r4, r2
 8007460:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007462:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007464:	7013      	strb	r3, [r2, #0]
 8007466:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007468:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800746c:	f023 0820 	bic.w	r8, r3, #32
 8007470:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007474:	d005      	beq.n	8007482 <__cvt+0x3a>
 8007476:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800747a:	d100      	bne.n	800747e <__cvt+0x36>
 800747c:	3501      	adds	r5, #1
 800747e:	2302      	movs	r3, #2
 8007480:	e000      	b.n	8007484 <__cvt+0x3c>
 8007482:	2303      	movs	r3, #3
 8007484:	aa07      	add	r2, sp, #28
 8007486:	9204      	str	r2, [sp, #16]
 8007488:	aa06      	add	r2, sp, #24
 800748a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800748e:	e9cd 3500 	strd	r3, r5, [sp]
 8007492:	4622      	mov	r2, r4
 8007494:	463b      	mov	r3, r7
 8007496:	f000 fecb 	bl	8008230 <_dtoa_r>
 800749a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800749e:	4606      	mov	r6, r0
 80074a0:	d102      	bne.n	80074a8 <__cvt+0x60>
 80074a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074a4:	07db      	lsls	r3, r3, #31
 80074a6:	d522      	bpl.n	80074ee <__cvt+0xa6>
 80074a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80074ac:	eb06 0905 	add.w	r9, r6, r5
 80074b0:	d110      	bne.n	80074d4 <__cvt+0x8c>
 80074b2:	7833      	ldrb	r3, [r6, #0]
 80074b4:	2b30      	cmp	r3, #48	; 0x30
 80074b6:	d10a      	bne.n	80074ce <__cvt+0x86>
 80074b8:	2200      	movs	r2, #0
 80074ba:	2300      	movs	r3, #0
 80074bc:	4620      	mov	r0, r4
 80074be:	4639      	mov	r1, r7
 80074c0:	f7f9 fa72 	bl	80009a8 <__aeabi_dcmpeq>
 80074c4:	b918      	cbnz	r0, 80074ce <__cvt+0x86>
 80074c6:	f1c5 0501 	rsb	r5, r5, #1
 80074ca:	f8ca 5000 	str.w	r5, [sl]
 80074ce:	f8da 3000 	ldr.w	r3, [sl]
 80074d2:	4499      	add	r9, r3
 80074d4:	2200      	movs	r2, #0
 80074d6:	2300      	movs	r3, #0
 80074d8:	4620      	mov	r0, r4
 80074da:	4639      	mov	r1, r7
 80074dc:	f7f9 fa64 	bl	80009a8 <__aeabi_dcmpeq>
 80074e0:	b108      	cbz	r0, 80074e6 <__cvt+0x9e>
 80074e2:	f8cd 901c 	str.w	r9, [sp, #28]
 80074e6:	2230      	movs	r2, #48	; 0x30
 80074e8:	9b07      	ldr	r3, [sp, #28]
 80074ea:	454b      	cmp	r3, r9
 80074ec:	d307      	bcc.n	80074fe <__cvt+0xb6>
 80074ee:	4630      	mov	r0, r6
 80074f0:	9b07      	ldr	r3, [sp, #28]
 80074f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80074f4:	1b9b      	subs	r3, r3, r6
 80074f6:	6013      	str	r3, [r2, #0]
 80074f8:	b008      	add	sp, #32
 80074fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074fe:	1c59      	adds	r1, r3, #1
 8007500:	9107      	str	r1, [sp, #28]
 8007502:	701a      	strb	r2, [r3, #0]
 8007504:	e7f0      	b.n	80074e8 <__cvt+0xa0>

08007506 <__exponent>:
 8007506:	4603      	mov	r3, r0
 8007508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800750a:	2900      	cmp	r1, #0
 800750c:	f803 2b02 	strb.w	r2, [r3], #2
 8007510:	bfb6      	itet	lt
 8007512:	222d      	movlt	r2, #45	; 0x2d
 8007514:	222b      	movge	r2, #43	; 0x2b
 8007516:	4249      	neglt	r1, r1
 8007518:	2909      	cmp	r1, #9
 800751a:	7042      	strb	r2, [r0, #1]
 800751c:	dd2a      	ble.n	8007574 <__exponent+0x6e>
 800751e:	f10d 0207 	add.w	r2, sp, #7
 8007522:	4617      	mov	r7, r2
 8007524:	260a      	movs	r6, #10
 8007526:	fb91 f5f6 	sdiv	r5, r1, r6
 800752a:	4694      	mov	ip, r2
 800752c:	fb06 1415 	mls	r4, r6, r5, r1
 8007530:	3430      	adds	r4, #48	; 0x30
 8007532:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007536:	460c      	mov	r4, r1
 8007538:	2c63      	cmp	r4, #99	; 0x63
 800753a:	4629      	mov	r1, r5
 800753c:	f102 32ff 	add.w	r2, r2, #4294967295
 8007540:	dcf1      	bgt.n	8007526 <__exponent+0x20>
 8007542:	3130      	adds	r1, #48	; 0x30
 8007544:	f1ac 0402 	sub.w	r4, ip, #2
 8007548:	f802 1c01 	strb.w	r1, [r2, #-1]
 800754c:	4622      	mov	r2, r4
 800754e:	1c41      	adds	r1, r0, #1
 8007550:	42ba      	cmp	r2, r7
 8007552:	d30a      	bcc.n	800756a <__exponent+0x64>
 8007554:	f10d 0209 	add.w	r2, sp, #9
 8007558:	eba2 020c 	sub.w	r2, r2, ip
 800755c:	42bc      	cmp	r4, r7
 800755e:	bf88      	it	hi
 8007560:	2200      	movhi	r2, #0
 8007562:	4413      	add	r3, r2
 8007564:	1a18      	subs	r0, r3, r0
 8007566:	b003      	add	sp, #12
 8007568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800756a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800756e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007572:	e7ed      	b.n	8007550 <__exponent+0x4a>
 8007574:	2330      	movs	r3, #48	; 0x30
 8007576:	3130      	adds	r1, #48	; 0x30
 8007578:	7083      	strb	r3, [r0, #2]
 800757a:	70c1      	strb	r1, [r0, #3]
 800757c:	1d03      	adds	r3, r0, #4
 800757e:	e7f1      	b.n	8007564 <__exponent+0x5e>

08007580 <_printf_float>:
 8007580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007584:	b091      	sub	sp, #68	; 0x44
 8007586:	460c      	mov	r4, r1
 8007588:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800758c:	4616      	mov	r6, r2
 800758e:	461f      	mov	r7, r3
 8007590:	4605      	mov	r5, r0
 8007592:	f000 fd2f 	bl	8007ff4 <_localeconv_r>
 8007596:	6803      	ldr	r3, [r0, #0]
 8007598:	4618      	mov	r0, r3
 800759a:	9309      	str	r3, [sp, #36]	; 0x24
 800759c:	f7f8 fdd8 	bl	8000150 <strlen>
 80075a0:	2300      	movs	r3, #0
 80075a2:	930e      	str	r3, [sp, #56]	; 0x38
 80075a4:	f8d8 3000 	ldr.w	r3, [r8]
 80075a8:	900a      	str	r0, [sp, #40]	; 0x28
 80075aa:	3307      	adds	r3, #7
 80075ac:	f023 0307 	bic.w	r3, r3, #7
 80075b0:	f103 0208 	add.w	r2, r3, #8
 80075b4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80075b8:	f8d4 b000 	ldr.w	fp, [r4]
 80075bc:	f8c8 2000 	str.w	r2, [r8]
 80075c0:	e9d3 a800 	ldrd	sl, r8, [r3]
 80075c4:	4652      	mov	r2, sl
 80075c6:	4643      	mov	r3, r8
 80075c8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80075cc:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80075d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80075d2:	f04f 32ff 	mov.w	r2, #4294967295
 80075d6:	4650      	mov	r0, sl
 80075d8:	4b9c      	ldr	r3, [pc, #624]	; (800784c <_printf_float+0x2cc>)
 80075da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075dc:	f7f9 fa16 	bl	8000a0c <__aeabi_dcmpun>
 80075e0:	bb70      	cbnz	r0, 8007640 <_printf_float+0xc0>
 80075e2:	f04f 32ff 	mov.w	r2, #4294967295
 80075e6:	4650      	mov	r0, sl
 80075e8:	4b98      	ldr	r3, [pc, #608]	; (800784c <_printf_float+0x2cc>)
 80075ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075ec:	f7f9 f9f0 	bl	80009d0 <__aeabi_dcmple>
 80075f0:	bb30      	cbnz	r0, 8007640 <_printf_float+0xc0>
 80075f2:	2200      	movs	r2, #0
 80075f4:	2300      	movs	r3, #0
 80075f6:	4650      	mov	r0, sl
 80075f8:	4641      	mov	r1, r8
 80075fa:	f7f9 f9df 	bl	80009bc <__aeabi_dcmplt>
 80075fe:	b110      	cbz	r0, 8007606 <_printf_float+0x86>
 8007600:	232d      	movs	r3, #45	; 0x2d
 8007602:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007606:	4a92      	ldr	r2, [pc, #584]	; (8007850 <_printf_float+0x2d0>)
 8007608:	4b92      	ldr	r3, [pc, #584]	; (8007854 <_printf_float+0x2d4>)
 800760a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800760e:	bf94      	ite	ls
 8007610:	4690      	movls	r8, r2
 8007612:	4698      	movhi	r8, r3
 8007614:	2303      	movs	r3, #3
 8007616:	f04f 0a00 	mov.w	sl, #0
 800761a:	6123      	str	r3, [r4, #16]
 800761c:	f02b 0304 	bic.w	r3, fp, #4
 8007620:	6023      	str	r3, [r4, #0]
 8007622:	4633      	mov	r3, r6
 8007624:	4621      	mov	r1, r4
 8007626:	4628      	mov	r0, r5
 8007628:	9700      	str	r7, [sp, #0]
 800762a:	aa0f      	add	r2, sp, #60	; 0x3c
 800762c:	f000 f9d6 	bl	80079dc <_printf_common>
 8007630:	3001      	adds	r0, #1
 8007632:	f040 8090 	bne.w	8007756 <_printf_float+0x1d6>
 8007636:	f04f 30ff 	mov.w	r0, #4294967295
 800763a:	b011      	add	sp, #68	; 0x44
 800763c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007640:	4652      	mov	r2, sl
 8007642:	4643      	mov	r3, r8
 8007644:	4650      	mov	r0, sl
 8007646:	4641      	mov	r1, r8
 8007648:	f7f9 f9e0 	bl	8000a0c <__aeabi_dcmpun>
 800764c:	b148      	cbz	r0, 8007662 <_printf_float+0xe2>
 800764e:	f1b8 0f00 	cmp.w	r8, #0
 8007652:	bfb8      	it	lt
 8007654:	232d      	movlt	r3, #45	; 0x2d
 8007656:	4a80      	ldr	r2, [pc, #512]	; (8007858 <_printf_float+0x2d8>)
 8007658:	bfb8      	it	lt
 800765a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800765e:	4b7f      	ldr	r3, [pc, #508]	; (800785c <_printf_float+0x2dc>)
 8007660:	e7d3      	b.n	800760a <_printf_float+0x8a>
 8007662:	6863      	ldr	r3, [r4, #4]
 8007664:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007668:	1c5a      	adds	r2, r3, #1
 800766a:	d142      	bne.n	80076f2 <_printf_float+0x172>
 800766c:	2306      	movs	r3, #6
 800766e:	6063      	str	r3, [r4, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	9206      	str	r2, [sp, #24]
 8007674:	aa0e      	add	r2, sp, #56	; 0x38
 8007676:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800767a:	aa0d      	add	r2, sp, #52	; 0x34
 800767c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007680:	9203      	str	r2, [sp, #12]
 8007682:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007686:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800768a:	6023      	str	r3, [r4, #0]
 800768c:	6863      	ldr	r3, [r4, #4]
 800768e:	4652      	mov	r2, sl
 8007690:	9300      	str	r3, [sp, #0]
 8007692:	4628      	mov	r0, r5
 8007694:	4643      	mov	r3, r8
 8007696:	910b      	str	r1, [sp, #44]	; 0x2c
 8007698:	f7ff fed6 	bl	8007448 <__cvt>
 800769c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800769e:	4680      	mov	r8, r0
 80076a0:	2947      	cmp	r1, #71	; 0x47
 80076a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80076a4:	d108      	bne.n	80076b8 <_printf_float+0x138>
 80076a6:	1cc8      	adds	r0, r1, #3
 80076a8:	db02      	blt.n	80076b0 <_printf_float+0x130>
 80076aa:	6863      	ldr	r3, [r4, #4]
 80076ac:	4299      	cmp	r1, r3
 80076ae:	dd40      	ble.n	8007732 <_printf_float+0x1b2>
 80076b0:	f1a9 0902 	sub.w	r9, r9, #2
 80076b4:	fa5f f989 	uxtb.w	r9, r9
 80076b8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80076bc:	d81f      	bhi.n	80076fe <_printf_float+0x17e>
 80076be:	464a      	mov	r2, r9
 80076c0:	3901      	subs	r1, #1
 80076c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80076c6:	910d      	str	r1, [sp, #52]	; 0x34
 80076c8:	f7ff ff1d 	bl	8007506 <__exponent>
 80076cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076ce:	4682      	mov	sl, r0
 80076d0:	1813      	adds	r3, r2, r0
 80076d2:	2a01      	cmp	r2, #1
 80076d4:	6123      	str	r3, [r4, #16]
 80076d6:	dc02      	bgt.n	80076de <_printf_float+0x15e>
 80076d8:	6822      	ldr	r2, [r4, #0]
 80076da:	07d2      	lsls	r2, r2, #31
 80076dc:	d501      	bpl.n	80076e2 <_printf_float+0x162>
 80076de:	3301      	adds	r3, #1
 80076e0:	6123      	str	r3, [r4, #16]
 80076e2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d09b      	beq.n	8007622 <_printf_float+0xa2>
 80076ea:	232d      	movs	r3, #45	; 0x2d
 80076ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076f0:	e797      	b.n	8007622 <_printf_float+0xa2>
 80076f2:	2947      	cmp	r1, #71	; 0x47
 80076f4:	d1bc      	bne.n	8007670 <_printf_float+0xf0>
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1ba      	bne.n	8007670 <_printf_float+0xf0>
 80076fa:	2301      	movs	r3, #1
 80076fc:	e7b7      	b.n	800766e <_printf_float+0xee>
 80076fe:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007702:	d118      	bne.n	8007736 <_printf_float+0x1b6>
 8007704:	2900      	cmp	r1, #0
 8007706:	6863      	ldr	r3, [r4, #4]
 8007708:	dd0b      	ble.n	8007722 <_printf_float+0x1a2>
 800770a:	6121      	str	r1, [r4, #16]
 800770c:	b913      	cbnz	r3, 8007714 <_printf_float+0x194>
 800770e:	6822      	ldr	r2, [r4, #0]
 8007710:	07d0      	lsls	r0, r2, #31
 8007712:	d502      	bpl.n	800771a <_printf_float+0x19a>
 8007714:	3301      	adds	r3, #1
 8007716:	440b      	add	r3, r1
 8007718:	6123      	str	r3, [r4, #16]
 800771a:	f04f 0a00 	mov.w	sl, #0
 800771e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007720:	e7df      	b.n	80076e2 <_printf_float+0x162>
 8007722:	b913      	cbnz	r3, 800772a <_printf_float+0x1aa>
 8007724:	6822      	ldr	r2, [r4, #0]
 8007726:	07d2      	lsls	r2, r2, #31
 8007728:	d501      	bpl.n	800772e <_printf_float+0x1ae>
 800772a:	3302      	adds	r3, #2
 800772c:	e7f4      	b.n	8007718 <_printf_float+0x198>
 800772e:	2301      	movs	r3, #1
 8007730:	e7f2      	b.n	8007718 <_printf_float+0x198>
 8007732:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007738:	4299      	cmp	r1, r3
 800773a:	db05      	blt.n	8007748 <_printf_float+0x1c8>
 800773c:	6823      	ldr	r3, [r4, #0]
 800773e:	6121      	str	r1, [r4, #16]
 8007740:	07d8      	lsls	r0, r3, #31
 8007742:	d5ea      	bpl.n	800771a <_printf_float+0x19a>
 8007744:	1c4b      	adds	r3, r1, #1
 8007746:	e7e7      	b.n	8007718 <_printf_float+0x198>
 8007748:	2900      	cmp	r1, #0
 800774a:	bfcc      	ite	gt
 800774c:	2201      	movgt	r2, #1
 800774e:	f1c1 0202 	rsble	r2, r1, #2
 8007752:	4413      	add	r3, r2
 8007754:	e7e0      	b.n	8007718 <_printf_float+0x198>
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	055a      	lsls	r2, r3, #21
 800775a:	d407      	bmi.n	800776c <_printf_float+0x1ec>
 800775c:	6923      	ldr	r3, [r4, #16]
 800775e:	4642      	mov	r2, r8
 8007760:	4631      	mov	r1, r6
 8007762:	4628      	mov	r0, r5
 8007764:	47b8      	blx	r7
 8007766:	3001      	adds	r0, #1
 8007768:	d12b      	bne.n	80077c2 <_printf_float+0x242>
 800776a:	e764      	b.n	8007636 <_printf_float+0xb6>
 800776c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007770:	f240 80dd 	bls.w	800792e <_printf_float+0x3ae>
 8007774:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007778:	2200      	movs	r2, #0
 800777a:	2300      	movs	r3, #0
 800777c:	f7f9 f914 	bl	80009a8 <__aeabi_dcmpeq>
 8007780:	2800      	cmp	r0, #0
 8007782:	d033      	beq.n	80077ec <_printf_float+0x26c>
 8007784:	2301      	movs	r3, #1
 8007786:	4631      	mov	r1, r6
 8007788:	4628      	mov	r0, r5
 800778a:	4a35      	ldr	r2, [pc, #212]	; (8007860 <_printf_float+0x2e0>)
 800778c:	47b8      	blx	r7
 800778e:	3001      	adds	r0, #1
 8007790:	f43f af51 	beq.w	8007636 <_printf_float+0xb6>
 8007794:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007798:	429a      	cmp	r2, r3
 800779a:	db02      	blt.n	80077a2 <_printf_float+0x222>
 800779c:	6823      	ldr	r3, [r4, #0]
 800779e:	07d8      	lsls	r0, r3, #31
 80077a0:	d50f      	bpl.n	80077c2 <_printf_float+0x242>
 80077a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077a6:	4631      	mov	r1, r6
 80077a8:	4628      	mov	r0, r5
 80077aa:	47b8      	blx	r7
 80077ac:	3001      	adds	r0, #1
 80077ae:	f43f af42 	beq.w	8007636 <_printf_float+0xb6>
 80077b2:	f04f 0800 	mov.w	r8, #0
 80077b6:	f104 091a 	add.w	r9, r4, #26
 80077ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077bc:	3b01      	subs	r3, #1
 80077be:	4543      	cmp	r3, r8
 80077c0:	dc09      	bgt.n	80077d6 <_printf_float+0x256>
 80077c2:	6823      	ldr	r3, [r4, #0]
 80077c4:	079b      	lsls	r3, r3, #30
 80077c6:	f100 8104 	bmi.w	80079d2 <_printf_float+0x452>
 80077ca:	68e0      	ldr	r0, [r4, #12]
 80077cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077ce:	4298      	cmp	r0, r3
 80077d0:	bfb8      	it	lt
 80077d2:	4618      	movlt	r0, r3
 80077d4:	e731      	b.n	800763a <_printf_float+0xba>
 80077d6:	2301      	movs	r3, #1
 80077d8:	464a      	mov	r2, r9
 80077da:	4631      	mov	r1, r6
 80077dc:	4628      	mov	r0, r5
 80077de:	47b8      	blx	r7
 80077e0:	3001      	adds	r0, #1
 80077e2:	f43f af28 	beq.w	8007636 <_printf_float+0xb6>
 80077e6:	f108 0801 	add.w	r8, r8, #1
 80077ea:	e7e6      	b.n	80077ba <_printf_float+0x23a>
 80077ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	dc38      	bgt.n	8007864 <_printf_float+0x2e4>
 80077f2:	2301      	movs	r3, #1
 80077f4:	4631      	mov	r1, r6
 80077f6:	4628      	mov	r0, r5
 80077f8:	4a19      	ldr	r2, [pc, #100]	; (8007860 <_printf_float+0x2e0>)
 80077fa:	47b8      	blx	r7
 80077fc:	3001      	adds	r0, #1
 80077fe:	f43f af1a 	beq.w	8007636 <_printf_float+0xb6>
 8007802:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007806:	4313      	orrs	r3, r2
 8007808:	d102      	bne.n	8007810 <_printf_float+0x290>
 800780a:	6823      	ldr	r3, [r4, #0]
 800780c:	07d9      	lsls	r1, r3, #31
 800780e:	d5d8      	bpl.n	80077c2 <_printf_float+0x242>
 8007810:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007814:	4631      	mov	r1, r6
 8007816:	4628      	mov	r0, r5
 8007818:	47b8      	blx	r7
 800781a:	3001      	adds	r0, #1
 800781c:	f43f af0b 	beq.w	8007636 <_printf_float+0xb6>
 8007820:	f04f 0900 	mov.w	r9, #0
 8007824:	f104 0a1a 	add.w	sl, r4, #26
 8007828:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800782a:	425b      	negs	r3, r3
 800782c:	454b      	cmp	r3, r9
 800782e:	dc01      	bgt.n	8007834 <_printf_float+0x2b4>
 8007830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007832:	e794      	b.n	800775e <_printf_float+0x1de>
 8007834:	2301      	movs	r3, #1
 8007836:	4652      	mov	r2, sl
 8007838:	4631      	mov	r1, r6
 800783a:	4628      	mov	r0, r5
 800783c:	47b8      	blx	r7
 800783e:	3001      	adds	r0, #1
 8007840:	f43f aef9 	beq.w	8007636 <_printf_float+0xb6>
 8007844:	f109 0901 	add.w	r9, r9, #1
 8007848:	e7ee      	b.n	8007828 <_printf_float+0x2a8>
 800784a:	bf00      	nop
 800784c:	7fefffff 	.word	0x7fefffff
 8007850:	0800a45e 	.word	0x0800a45e
 8007854:	0800a462 	.word	0x0800a462
 8007858:	0800a466 	.word	0x0800a466
 800785c:	0800a46a 	.word	0x0800a46a
 8007860:	0800a46e 	.word	0x0800a46e
 8007864:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007866:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007868:	429a      	cmp	r2, r3
 800786a:	bfa8      	it	ge
 800786c:	461a      	movge	r2, r3
 800786e:	2a00      	cmp	r2, #0
 8007870:	4691      	mov	r9, r2
 8007872:	dc37      	bgt.n	80078e4 <_printf_float+0x364>
 8007874:	f04f 0b00 	mov.w	fp, #0
 8007878:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800787c:	f104 021a 	add.w	r2, r4, #26
 8007880:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007884:	ebaa 0309 	sub.w	r3, sl, r9
 8007888:	455b      	cmp	r3, fp
 800788a:	dc33      	bgt.n	80078f4 <_printf_float+0x374>
 800788c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007890:	429a      	cmp	r2, r3
 8007892:	db3b      	blt.n	800790c <_printf_float+0x38c>
 8007894:	6823      	ldr	r3, [r4, #0]
 8007896:	07da      	lsls	r2, r3, #31
 8007898:	d438      	bmi.n	800790c <_printf_float+0x38c>
 800789a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800789e:	eba2 0903 	sub.w	r9, r2, r3
 80078a2:	eba2 020a 	sub.w	r2, r2, sl
 80078a6:	4591      	cmp	r9, r2
 80078a8:	bfa8      	it	ge
 80078aa:	4691      	movge	r9, r2
 80078ac:	f1b9 0f00 	cmp.w	r9, #0
 80078b0:	dc34      	bgt.n	800791c <_printf_float+0x39c>
 80078b2:	f04f 0800 	mov.w	r8, #0
 80078b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078ba:	f104 0a1a 	add.w	sl, r4, #26
 80078be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80078c2:	1a9b      	subs	r3, r3, r2
 80078c4:	eba3 0309 	sub.w	r3, r3, r9
 80078c8:	4543      	cmp	r3, r8
 80078ca:	f77f af7a 	ble.w	80077c2 <_printf_float+0x242>
 80078ce:	2301      	movs	r3, #1
 80078d0:	4652      	mov	r2, sl
 80078d2:	4631      	mov	r1, r6
 80078d4:	4628      	mov	r0, r5
 80078d6:	47b8      	blx	r7
 80078d8:	3001      	adds	r0, #1
 80078da:	f43f aeac 	beq.w	8007636 <_printf_float+0xb6>
 80078de:	f108 0801 	add.w	r8, r8, #1
 80078e2:	e7ec      	b.n	80078be <_printf_float+0x33e>
 80078e4:	4613      	mov	r3, r2
 80078e6:	4631      	mov	r1, r6
 80078e8:	4642      	mov	r2, r8
 80078ea:	4628      	mov	r0, r5
 80078ec:	47b8      	blx	r7
 80078ee:	3001      	adds	r0, #1
 80078f0:	d1c0      	bne.n	8007874 <_printf_float+0x2f4>
 80078f2:	e6a0      	b.n	8007636 <_printf_float+0xb6>
 80078f4:	2301      	movs	r3, #1
 80078f6:	4631      	mov	r1, r6
 80078f8:	4628      	mov	r0, r5
 80078fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80078fc:	47b8      	blx	r7
 80078fe:	3001      	adds	r0, #1
 8007900:	f43f ae99 	beq.w	8007636 <_printf_float+0xb6>
 8007904:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007906:	f10b 0b01 	add.w	fp, fp, #1
 800790a:	e7b9      	b.n	8007880 <_printf_float+0x300>
 800790c:	4631      	mov	r1, r6
 800790e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007912:	4628      	mov	r0, r5
 8007914:	47b8      	blx	r7
 8007916:	3001      	adds	r0, #1
 8007918:	d1bf      	bne.n	800789a <_printf_float+0x31a>
 800791a:	e68c      	b.n	8007636 <_printf_float+0xb6>
 800791c:	464b      	mov	r3, r9
 800791e:	4631      	mov	r1, r6
 8007920:	4628      	mov	r0, r5
 8007922:	eb08 020a 	add.w	r2, r8, sl
 8007926:	47b8      	blx	r7
 8007928:	3001      	adds	r0, #1
 800792a:	d1c2      	bne.n	80078b2 <_printf_float+0x332>
 800792c:	e683      	b.n	8007636 <_printf_float+0xb6>
 800792e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007930:	2a01      	cmp	r2, #1
 8007932:	dc01      	bgt.n	8007938 <_printf_float+0x3b8>
 8007934:	07db      	lsls	r3, r3, #31
 8007936:	d539      	bpl.n	80079ac <_printf_float+0x42c>
 8007938:	2301      	movs	r3, #1
 800793a:	4642      	mov	r2, r8
 800793c:	4631      	mov	r1, r6
 800793e:	4628      	mov	r0, r5
 8007940:	47b8      	blx	r7
 8007942:	3001      	adds	r0, #1
 8007944:	f43f ae77 	beq.w	8007636 <_printf_float+0xb6>
 8007948:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800794c:	4631      	mov	r1, r6
 800794e:	4628      	mov	r0, r5
 8007950:	47b8      	blx	r7
 8007952:	3001      	adds	r0, #1
 8007954:	f43f ae6f 	beq.w	8007636 <_printf_float+0xb6>
 8007958:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800795c:	2200      	movs	r2, #0
 800795e:	2300      	movs	r3, #0
 8007960:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8007964:	f7f9 f820 	bl	80009a8 <__aeabi_dcmpeq>
 8007968:	b9d8      	cbnz	r0, 80079a2 <_printf_float+0x422>
 800796a:	f109 33ff 	add.w	r3, r9, #4294967295
 800796e:	f108 0201 	add.w	r2, r8, #1
 8007972:	4631      	mov	r1, r6
 8007974:	4628      	mov	r0, r5
 8007976:	47b8      	blx	r7
 8007978:	3001      	adds	r0, #1
 800797a:	d10e      	bne.n	800799a <_printf_float+0x41a>
 800797c:	e65b      	b.n	8007636 <_printf_float+0xb6>
 800797e:	2301      	movs	r3, #1
 8007980:	464a      	mov	r2, r9
 8007982:	4631      	mov	r1, r6
 8007984:	4628      	mov	r0, r5
 8007986:	47b8      	blx	r7
 8007988:	3001      	adds	r0, #1
 800798a:	f43f ae54 	beq.w	8007636 <_printf_float+0xb6>
 800798e:	f108 0801 	add.w	r8, r8, #1
 8007992:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007994:	3b01      	subs	r3, #1
 8007996:	4543      	cmp	r3, r8
 8007998:	dcf1      	bgt.n	800797e <_printf_float+0x3fe>
 800799a:	4653      	mov	r3, sl
 800799c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80079a0:	e6de      	b.n	8007760 <_printf_float+0x1e0>
 80079a2:	f04f 0800 	mov.w	r8, #0
 80079a6:	f104 091a 	add.w	r9, r4, #26
 80079aa:	e7f2      	b.n	8007992 <_printf_float+0x412>
 80079ac:	2301      	movs	r3, #1
 80079ae:	4642      	mov	r2, r8
 80079b0:	e7df      	b.n	8007972 <_printf_float+0x3f2>
 80079b2:	2301      	movs	r3, #1
 80079b4:	464a      	mov	r2, r9
 80079b6:	4631      	mov	r1, r6
 80079b8:	4628      	mov	r0, r5
 80079ba:	47b8      	blx	r7
 80079bc:	3001      	adds	r0, #1
 80079be:	f43f ae3a 	beq.w	8007636 <_printf_float+0xb6>
 80079c2:	f108 0801 	add.w	r8, r8, #1
 80079c6:	68e3      	ldr	r3, [r4, #12]
 80079c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80079ca:	1a5b      	subs	r3, r3, r1
 80079cc:	4543      	cmp	r3, r8
 80079ce:	dcf0      	bgt.n	80079b2 <_printf_float+0x432>
 80079d0:	e6fb      	b.n	80077ca <_printf_float+0x24a>
 80079d2:	f04f 0800 	mov.w	r8, #0
 80079d6:	f104 0919 	add.w	r9, r4, #25
 80079da:	e7f4      	b.n	80079c6 <_printf_float+0x446>

080079dc <_printf_common>:
 80079dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079e0:	4616      	mov	r6, r2
 80079e2:	4699      	mov	r9, r3
 80079e4:	688a      	ldr	r2, [r1, #8]
 80079e6:	690b      	ldr	r3, [r1, #16]
 80079e8:	4607      	mov	r7, r0
 80079ea:	4293      	cmp	r3, r2
 80079ec:	bfb8      	it	lt
 80079ee:	4613      	movlt	r3, r2
 80079f0:	6033      	str	r3, [r6, #0]
 80079f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079f6:	460c      	mov	r4, r1
 80079f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079fc:	b10a      	cbz	r2, 8007a02 <_printf_common+0x26>
 80079fe:	3301      	adds	r3, #1
 8007a00:	6033      	str	r3, [r6, #0]
 8007a02:	6823      	ldr	r3, [r4, #0]
 8007a04:	0699      	lsls	r1, r3, #26
 8007a06:	bf42      	ittt	mi
 8007a08:	6833      	ldrmi	r3, [r6, #0]
 8007a0a:	3302      	addmi	r3, #2
 8007a0c:	6033      	strmi	r3, [r6, #0]
 8007a0e:	6825      	ldr	r5, [r4, #0]
 8007a10:	f015 0506 	ands.w	r5, r5, #6
 8007a14:	d106      	bne.n	8007a24 <_printf_common+0x48>
 8007a16:	f104 0a19 	add.w	sl, r4, #25
 8007a1a:	68e3      	ldr	r3, [r4, #12]
 8007a1c:	6832      	ldr	r2, [r6, #0]
 8007a1e:	1a9b      	subs	r3, r3, r2
 8007a20:	42ab      	cmp	r3, r5
 8007a22:	dc2b      	bgt.n	8007a7c <_printf_common+0xa0>
 8007a24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a28:	1e13      	subs	r3, r2, #0
 8007a2a:	6822      	ldr	r2, [r4, #0]
 8007a2c:	bf18      	it	ne
 8007a2e:	2301      	movne	r3, #1
 8007a30:	0692      	lsls	r2, r2, #26
 8007a32:	d430      	bmi.n	8007a96 <_printf_common+0xba>
 8007a34:	4649      	mov	r1, r9
 8007a36:	4638      	mov	r0, r7
 8007a38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a3c:	47c0      	blx	r8
 8007a3e:	3001      	adds	r0, #1
 8007a40:	d023      	beq.n	8007a8a <_printf_common+0xae>
 8007a42:	6823      	ldr	r3, [r4, #0]
 8007a44:	6922      	ldr	r2, [r4, #16]
 8007a46:	f003 0306 	and.w	r3, r3, #6
 8007a4a:	2b04      	cmp	r3, #4
 8007a4c:	bf14      	ite	ne
 8007a4e:	2500      	movne	r5, #0
 8007a50:	6833      	ldreq	r3, [r6, #0]
 8007a52:	f04f 0600 	mov.w	r6, #0
 8007a56:	bf08      	it	eq
 8007a58:	68e5      	ldreq	r5, [r4, #12]
 8007a5a:	f104 041a 	add.w	r4, r4, #26
 8007a5e:	bf08      	it	eq
 8007a60:	1aed      	subeq	r5, r5, r3
 8007a62:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007a66:	bf08      	it	eq
 8007a68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	bfc4      	itt	gt
 8007a70:	1a9b      	subgt	r3, r3, r2
 8007a72:	18ed      	addgt	r5, r5, r3
 8007a74:	42b5      	cmp	r5, r6
 8007a76:	d11a      	bne.n	8007aae <_printf_common+0xd2>
 8007a78:	2000      	movs	r0, #0
 8007a7a:	e008      	b.n	8007a8e <_printf_common+0xb2>
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	4652      	mov	r2, sl
 8007a80:	4649      	mov	r1, r9
 8007a82:	4638      	mov	r0, r7
 8007a84:	47c0      	blx	r8
 8007a86:	3001      	adds	r0, #1
 8007a88:	d103      	bne.n	8007a92 <_printf_common+0xb6>
 8007a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a92:	3501      	adds	r5, #1
 8007a94:	e7c1      	b.n	8007a1a <_printf_common+0x3e>
 8007a96:	2030      	movs	r0, #48	; 0x30
 8007a98:	18e1      	adds	r1, r4, r3
 8007a9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a9e:	1c5a      	adds	r2, r3, #1
 8007aa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007aa4:	4422      	add	r2, r4
 8007aa6:	3302      	adds	r3, #2
 8007aa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007aac:	e7c2      	b.n	8007a34 <_printf_common+0x58>
 8007aae:	2301      	movs	r3, #1
 8007ab0:	4622      	mov	r2, r4
 8007ab2:	4649      	mov	r1, r9
 8007ab4:	4638      	mov	r0, r7
 8007ab6:	47c0      	blx	r8
 8007ab8:	3001      	adds	r0, #1
 8007aba:	d0e6      	beq.n	8007a8a <_printf_common+0xae>
 8007abc:	3601      	adds	r6, #1
 8007abe:	e7d9      	b.n	8007a74 <_printf_common+0x98>

08007ac0 <_printf_i>:
 8007ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ac4:	7e0f      	ldrb	r7, [r1, #24]
 8007ac6:	4691      	mov	r9, r2
 8007ac8:	2f78      	cmp	r7, #120	; 0x78
 8007aca:	4680      	mov	r8, r0
 8007acc:	460c      	mov	r4, r1
 8007ace:	469a      	mov	sl, r3
 8007ad0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ad2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ad6:	d807      	bhi.n	8007ae8 <_printf_i+0x28>
 8007ad8:	2f62      	cmp	r7, #98	; 0x62
 8007ada:	d80a      	bhi.n	8007af2 <_printf_i+0x32>
 8007adc:	2f00      	cmp	r7, #0
 8007ade:	f000 80d5 	beq.w	8007c8c <_printf_i+0x1cc>
 8007ae2:	2f58      	cmp	r7, #88	; 0x58
 8007ae4:	f000 80c1 	beq.w	8007c6a <_printf_i+0x1aa>
 8007ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007aec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007af0:	e03a      	b.n	8007b68 <_printf_i+0xa8>
 8007af2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007af6:	2b15      	cmp	r3, #21
 8007af8:	d8f6      	bhi.n	8007ae8 <_printf_i+0x28>
 8007afa:	a101      	add	r1, pc, #4	; (adr r1, 8007b00 <_printf_i+0x40>)
 8007afc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b00:	08007b59 	.word	0x08007b59
 8007b04:	08007b6d 	.word	0x08007b6d
 8007b08:	08007ae9 	.word	0x08007ae9
 8007b0c:	08007ae9 	.word	0x08007ae9
 8007b10:	08007ae9 	.word	0x08007ae9
 8007b14:	08007ae9 	.word	0x08007ae9
 8007b18:	08007b6d 	.word	0x08007b6d
 8007b1c:	08007ae9 	.word	0x08007ae9
 8007b20:	08007ae9 	.word	0x08007ae9
 8007b24:	08007ae9 	.word	0x08007ae9
 8007b28:	08007ae9 	.word	0x08007ae9
 8007b2c:	08007c73 	.word	0x08007c73
 8007b30:	08007b99 	.word	0x08007b99
 8007b34:	08007c2d 	.word	0x08007c2d
 8007b38:	08007ae9 	.word	0x08007ae9
 8007b3c:	08007ae9 	.word	0x08007ae9
 8007b40:	08007c95 	.word	0x08007c95
 8007b44:	08007ae9 	.word	0x08007ae9
 8007b48:	08007b99 	.word	0x08007b99
 8007b4c:	08007ae9 	.word	0x08007ae9
 8007b50:	08007ae9 	.word	0x08007ae9
 8007b54:	08007c35 	.word	0x08007c35
 8007b58:	682b      	ldr	r3, [r5, #0]
 8007b5a:	1d1a      	adds	r2, r3, #4
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	602a      	str	r2, [r5, #0]
 8007b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e0a0      	b.n	8007cae <_printf_i+0x1ee>
 8007b6c:	6820      	ldr	r0, [r4, #0]
 8007b6e:	682b      	ldr	r3, [r5, #0]
 8007b70:	0607      	lsls	r7, r0, #24
 8007b72:	f103 0104 	add.w	r1, r3, #4
 8007b76:	6029      	str	r1, [r5, #0]
 8007b78:	d501      	bpl.n	8007b7e <_printf_i+0xbe>
 8007b7a:	681e      	ldr	r6, [r3, #0]
 8007b7c:	e003      	b.n	8007b86 <_printf_i+0xc6>
 8007b7e:	0646      	lsls	r6, r0, #25
 8007b80:	d5fb      	bpl.n	8007b7a <_printf_i+0xba>
 8007b82:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007b86:	2e00      	cmp	r6, #0
 8007b88:	da03      	bge.n	8007b92 <_printf_i+0xd2>
 8007b8a:	232d      	movs	r3, #45	; 0x2d
 8007b8c:	4276      	negs	r6, r6
 8007b8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b92:	230a      	movs	r3, #10
 8007b94:	4859      	ldr	r0, [pc, #356]	; (8007cfc <_printf_i+0x23c>)
 8007b96:	e012      	b.n	8007bbe <_printf_i+0xfe>
 8007b98:	682b      	ldr	r3, [r5, #0]
 8007b9a:	6820      	ldr	r0, [r4, #0]
 8007b9c:	1d19      	adds	r1, r3, #4
 8007b9e:	6029      	str	r1, [r5, #0]
 8007ba0:	0605      	lsls	r5, r0, #24
 8007ba2:	d501      	bpl.n	8007ba8 <_printf_i+0xe8>
 8007ba4:	681e      	ldr	r6, [r3, #0]
 8007ba6:	e002      	b.n	8007bae <_printf_i+0xee>
 8007ba8:	0641      	lsls	r1, r0, #25
 8007baa:	d5fb      	bpl.n	8007ba4 <_printf_i+0xe4>
 8007bac:	881e      	ldrh	r6, [r3, #0]
 8007bae:	2f6f      	cmp	r7, #111	; 0x6f
 8007bb0:	bf0c      	ite	eq
 8007bb2:	2308      	moveq	r3, #8
 8007bb4:	230a      	movne	r3, #10
 8007bb6:	4851      	ldr	r0, [pc, #324]	; (8007cfc <_printf_i+0x23c>)
 8007bb8:	2100      	movs	r1, #0
 8007bba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007bbe:	6865      	ldr	r5, [r4, #4]
 8007bc0:	2d00      	cmp	r5, #0
 8007bc2:	bfa8      	it	ge
 8007bc4:	6821      	ldrge	r1, [r4, #0]
 8007bc6:	60a5      	str	r5, [r4, #8]
 8007bc8:	bfa4      	itt	ge
 8007bca:	f021 0104 	bicge.w	r1, r1, #4
 8007bce:	6021      	strge	r1, [r4, #0]
 8007bd0:	b90e      	cbnz	r6, 8007bd6 <_printf_i+0x116>
 8007bd2:	2d00      	cmp	r5, #0
 8007bd4:	d04b      	beq.n	8007c6e <_printf_i+0x1ae>
 8007bd6:	4615      	mov	r5, r2
 8007bd8:	fbb6 f1f3 	udiv	r1, r6, r3
 8007bdc:	fb03 6711 	mls	r7, r3, r1, r6
 8007be0:	5dc7      	ldrb	r7, [r0, r7]
 8007be2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007be6:	4637      	mov	r7, r6
 8007be8:	42bb      	cmp	r3, r7
 8007bea:	460e      	mov	r6, r1
 8007bec:	d9f4      	bls.n	8007bd8 <_printf_i+0x118>
 8007bee:	2b08      	cmp	r3, #8
 8007bf0:	d10b      	bne.n	8007c0a <_printf_i+0x14a>
 8007bf2:	6823      	ldr	r3, [r4, #0]
 8007bf4:	07de      	lsls	r6, r3, #31
 8007bf6:	d508      	bpl.n	8007c0a <_printf_i+0x14a>
 8007bf8:	6923      	ldr	r3, [r4, #16]
 8007bfa:	6861      	ldr	r1, [r4, #4]
 8007bfc:	4299      	cmp	r1, r3
 8007bfe:	bfde      	ittt	le
 8007c00:	2330      	movle	r3, #48	; 0x30
 8007c02:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c06:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c0a:	1b52      	subs	r2, r2, r5
 8007c0c:	6122      	str	r2, [r4, #16]
 8007c0e:	464b      	mov	r3, r9
 8007c10:	4621      	mov	r1, r4
 8007c12:	4640      	mov	r0, r8
 8007c14:	f8cd a000 	str.w	sl, [sp]
 8007c18:	aa03      	add	r2, sp, #12
 8007c1a:	f7ff fedf 	bl	80079dc <_printf_common>
 8007c1e:	3001      	adds	r0, #1
 8007c20:	d14a      	bne.n	8007cb8 <_printf_i+0x1f8>
 8007c22:	f04f 30ff 	mov.w	r0, #4294967295
 8007c26:	b004      	add	sp, #16
 8007c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c2c:	6823      	ldr	r3, [r4, #0]
 8007c2e:	f043 0320 	orr.w	r3, r3, #32
 8007c32:	6023      	str	r3, [r4, #0]
 8007c34:	2778      	movs	r7, #120	; 0x78
 8007c36:	4832      	ldr	r0, [pc, #200]	; (8007d00 <_printf_i+0x240>)
 8007c38:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c3c:	6823      	ldr	r3, [r4, #0]
 8007c3e:	6829      	ldr	r1, [r5, #0]
 8007c40:	061f      	lsls	r7, r3, #24
 8007c42:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c46:	d402      	bmi.n	8007c4e <_printf_i+0x18e>
 8007c48:	065f      	lsls	r7, r3, #25
 8007c4a:	bf48      	it	mi
 8007c4c:	b2b6      	uxthmi	r6, r6
 8007c4e:	07df      	lsls	r7, r3, #31
 8007c50:	bf48      	it	mi
 8007c52:	f043 0320 	orrmi.w	r3, r3, #32
 8007c56:	6029      	str	r1, [r5, #0]
 8007c58:	bf48      	it	mi
 8007c5a:	6023      	strmi	r3, [r4, #0]
 8007c5c:	b91e      	cbnz	r6, 8007c66 <_printf_i+0x1a6>
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	f023 0320 	bic.w	r3, r3, #32
 8007c64:	6023      	str	r3, [r4, #0]
 8007c66:	2310      	movs	r3, #16
 8007c68:	e7a6      	b.n	8007bb8 <_printf_i+0xf8>
 8007c6a:	4824      	ldr	r0, [pc, #144]	; (8007cfc <_printf_i+0x23c>)
 8007c6c:	e7e4      	b.n	8007c38 <_printf_i+0x178>
 8007c6e:	4615      	mov	r5, r2
 8007c70:	e7bd      	b.n	8007bee <_printf_i+0x12e>
 8007c72:	682b      	ldr	r3, [r5, #0]
 8007c74:	6826      	ldr	r6, [r4, #0]
 8007c76:	1d18      	adds	r0, r3, #4
 8007c78:	6961      	ldr	r1, [r4, #20]
 8007c7a:	6028      	str	r0, [r5, #0]
 8007c7c:	0635      	lsls	r5, r6, #24
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	d501      	bpl.n	8007c86 <_printf_i+0x1c6>
 8007c82:	6019      	str	r1, [r3, #0]
 8007c84:	e002      	b.n	8007c8c <_printf_i+0x1cc>
 8007c86:	0670      	lsls	r0, r6, #25
 8007c88:	d5fb      	bpl.n	8007c82 <_printf_i+0x1c2>
 8007c8a:	8019      	strh	r1, [r3, #0]
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	4615      	mov	r5, r2
 8007c90:	6123      	str	r3, [r4, #16]
 8007c92:	e7bc      	b.n	8007c0e <_printf_i+0x14e>
 8007c94:	682b      	ldr	r3, [r5, #0]
 8007c96:	2100      	movs	r1, #0
 8007c98:	1d1a      	adds	r2, r3, #4
 8007c9a:	602a      	str	r2, [r5, #0]
 8007c9c:	681d      	ldr	r5, [r3, #0]
 8007c9e:	6862      	ldr	r2, [r4, #4]
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	f000 fa2e 	bl	8008102 <memchr>
 8007ca6:	b108      	cbz	r0, 8007cac <_printf_i+0x1ec>
 8007ca8:	1b40      	subs	r0, r0, r5
 8007caa:	6060      	str	r0, [r4, #4]
 8007cac:	6863      	ldr	r3, [r4, #4]
 8007cae:	6123      	str	r3, [r4, #16]
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cb6:	e7aa      	b.n	8007c0e <_printf_i+0x14e>
 8007cb8:	462a      	mov	r2, r5
 8007cba:	4649      	mov	r1, r9
 8007cbc:	4640      	mov	r0, r8
 8007cbe:	6923      	ldr	r3, [r4, #16]
 8007cc0:	47d0      	blx	sl
 8007cc2:	3001      	adds	r0, #1
 8007cc4:	d0ad      	beq.n	8007c22 <_printf_i+0x162>
 8007cc6:	6823      	ldr	r3, [r4, #0]
 8007cc8:	079b      	lsls	r3, r3, #30
 8007cca:	d413      	bmi.n	8007cf4 <_printf_i+0x234>
 8007ccc:	68e0      	ldr	r0, [r4, #12]
 8007cce:	9b03      	ldr	r3, [sp, #12]
 8007cd0:	4298      	cmp	r0, r3
 8007cd2:	bfb8      	it	lt
 8007cd4:	4618      	movlt	r0, r3
 8007cd6:	e7a6      	b.n	8007c26 <_printf_i+0x166>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	4632      	mov	r2, r6
 8007cdc:	4649      	mov	r1, r9
 8007cde:	4640      	mov	r0, r8
 8007ce0:	47d0      	blx	sl
 8007ce2:	3001      	adds	r0, #1
 8007ce4:	d09d      	beq.n	8007c22 <_printf_i+0x162>
 8007ce6:	3501      	adds	r5, #1
 8007ce8:	68e3      	ldr	r3, [r4, #12]
 8007cea:	9903      	ldr	r1, [sp, #12]
 8007cec:	1a5b      	subs	r3, r3, r1
 8007cee:	42ab      	cmp	r3, r5
 8007cf0:	dcf2      	bgt.n	8007cd8 <_printf_i+0x218>
 8007cf2:	e7eb      	b.n	8007ccc <_printf_i+0x20c>
 8007cf4:	2500      	movs	r5, #0
 8007cf6:	f104 0619 	add.w	r6, r4, #25
 8007cfa:	e7f5      	b.n	8007ce8 <_printf_i+0x228>
 8007cfc:	0800a470 	.word	0x0800a470
 8007d00:	0800a481 	.word	0x0800a481

08007d04 <std>:
 8007d04:	2300      	movs	r3, #0
 8007d06:	b510      	push	{r4, lr}
 8007d08:	4604      	mov	r4, r0
 8007d0a:	e9c0 3300 	strd	r3, r3, [r0]
 8007d0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d12:	6083      	str	r3, [r0, #8]
 8007d14:	8181      	strh	r1, [r0, #12]
 8007d16:	6643      	str	r3, [r0, #100]	; 0x64
 8007d18:	81c2      	strh	r2, [r0, #14]
 8007d1a:	6183      	str	r3, [r0, #24]
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	2208      	movs	r2, #8
 8007d20:	305c      	adds	r0, #92	; 0x5c
 8007d22:	f000 f948 	bl	8007fb6 <memset>
 8007d26:	4b0d      	ldr	r3, [pc, #52]	; (8007d5c <std+0x58>)
 8007d28:	6224      	str	r4, [r4, #32]
 8007d2a:	6263      	str	r3, [r4, #36]	; 0x24
 8007d2c:	4b0c      	ldr	r3, [pc, #48]	; (8007d60 <std+0x5c>)
 8007d2e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d30:	4b0c      	ldr	r3, [pc, #48]	; (8007d64 <std+0x60>)
 8007d32:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d34:	4b0c      	ldr	r3, [pc, #48]	; (8007d68 <std+0x64>)
 8007d36:	6323      	str	r3, [r4, #48]	; 0x30
 8007d38:	4b0c      	ldr	r3, [pc, #48]	; (8007d6c <std+0x68>)
 8007d3a:	429c      	cmp	r4, r3
 8007d3c:	d006      	beq.n	8007d4c <std+0x48>
 8007d3e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007d42:	4294      	cmp	r4, r2
 8007d44:	d002      	beq.n	8007d4c <std+0x48>
 8007d46:	33d0      	adds	r3, #208	; 0xd0
 8007d48:	429c      	cmp	r4, r3
 8007d4a:	d105      	bne.n	8007d58 <std+0x54>
 8007d4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d54:	f000 b9d2 	b.w	80080fc <__retarget_lock_init_recursive>
 8007d58:	bd10      	pop	{r4, pc}
 8007d5a:	bf00      	nop
 8007d5c:	08007f31 	.word	0x08007f31
 8007d60:	08007f53 	.word	0x08007f53
 8007d64:	08007f8b 	.word	0x08007f8b
 8007d68:	08007faf 	.word	0x08007faf
 8007d6c:	20000adc 	.word	0x20000adc

08007d70 <stdio_exit_handler>:
 8007d70:	4a02      	ldr	r2, [pc, #8]	; (8007d7c <stdio_exit_handler+0xc>)
 8007d72:	4903      	ldr	r1, [pc, #12]	; (8007d80 <stdio_exit_handler+0x10>)
 8007d74:	4803      	ldr	r0, [pc, #12]	; (8007d84 <stdio_exit_handler+0x14>)
 8007d76:	f000 b869 	b.w	8007e4c <_fwalk_sglue>
 8007d7a:	bf00      	nop
 8007d7c:	20000038 	.word	0x20000038
 8007d80:	0800992d 	.word	0x0800992d
 8007d84:	20000044 	.word	0x20000044

08007d88 <cleanup_stdio>:
 8007d88:	6841      	ldr	r1, [r0, #4]
 8007d8a:	4b0c      	ldr	r3, [pc, #48]	; (8007dbc <cleanup_stdio+0x34>)
 8007d8c:	b510      	push	{r4, lr}
 8007d8e:	4299      	cmp	r1, r3
 8007d90:	4604      	mov	r4, r0
 8007d92:	d001      	beq.n	8007d98 <cleanup_stdio+0x10>
 8007d94:	f001 fdca 	bl	800992c <_fflush_r>
 8007d98:	68a1      	ldr	r1, [r4, #8]
 8007d9a:	4b09      	ldr	r3, [pc, #36]	; (8007dc0 <cleanup_stdio+0x38>)
 8007d9c:	4299      	cmp	r1, r3
 8007d9e:	d002      	beq.n	8007da6 <cleanup_stdio+0x1e>
 8007da0:	4620      	mov	r0, r4
 8007da2:	f001 fdc3 	bl	800992c <_fflush_r>
 8007da6:	68e1      	ldr	r1, [r4, #12]
 8007da8:	4b06      	ldr	r3, [pc, #24]	; (8007dc4 <cleanup_stdio+0x3c>)
 8007daa:	4299      	cmp	r1, r3
 8007dac:	d004      	beq.n	8007db8 <cleanup_stdio+0x30>
 8007dae:	4620      	mov	r0, r4
 8007db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007db4:	f001 bdba 	b.w	800992c <_fflush_r>
 8007db8:	bd10      	pop	{r4, pc}
 8007dba:	bf00      	nop
 8007dbc:	20000adc 	.word	0x20000adc
 8007dc0:	20000b44 	.word	0x20000b44
 8007dc4:	20000bac 	.word	0x20000bac

08007dc8 <global_stdio_init.part.0>:
 8007dc8:	b510      	push	{r4, lr}
 8007dca:	4b0b      	ldr	r3, [pc, #44]	; (8007df8 <global_stdio_init.part.0+0x30>)
 8007dcc:	4c0b      	ldr	r4, [pc, #44]	; (8007dfc <global_stdio_init.part.0+0x34>)
 8007dce:	4a0c      	ldr	r2, [pc, #48]	; (8007e00 <global_stdio_init.part.0+0x38>)
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	2104      	movs	r1, #4
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f7ff ff94 	bl	8007d04 <std>
 8007ddc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007de0:	2201      	movs	r2, #1
 8007de2:	2109      	movs	r1, #9
 8007de4:	f7ff ff8e 	bl	8007d04 <std>
 8007de8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007dec:	2202      	movs	r2, #2
 8007dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007df2:	2112      	movs	r1, #18
 8007df4:	f7ff bf86 	b.w	8007d04 <std>
 8007df8:	20000c14 	.word	0x20000c14
 8007dfc:	20000adc 	.word	0x20000adc
 8007e00:	08007d71 	.word	0x08007d71

08007e04 <__sfp_lock_acquire>:
 8007e04:	4801      	ldr	r0, [pc, #4]	; (8007e0c <__sfp_lock_acquire+0x8>)
 8007e06:	f000 b97a 	b.w	80080fe <__retarget_lock_acquire_recursive>
 8007e0a:	bf00      	nop
 8007e0c:	20000c1d 	.word	0x20000c1d

08007e10 <__sfp_lock_release>:
 8007e10:	4801      	ldr	r0, [pc, #4]	; (8007e18 <__sfp_lock_release+0x8>)
 8007e12:	f000 b975 	b.w	8008100 <__retarget_lock_release_recursive>
 8007e16:	bf00      	nop
 8007e18:	20000c1d 	.word	0x20000c1d

08007e1c <__sinit>:
 8007e1c:	b510      	push	{r4, lr}
 8007e1e:	4604      	mov	r4, r0
 8007e20:	f7ff fff0 	bl	8007e04 <__sfp_lock_acquire>
 8007e24:	6a23      	ldr	r3, [r4, #32]
 8007e26:	b11b      	cbz	r3, 8007e30 <__sinit+0x14>
 8007e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e2c:	f7ff bff0 	b.w	8007e10 <__sfp_lock_release>
 8007e30:	4b04      	ldr	r3, [pc, #16]	; (8007e44 <__sinit+0x28>)
 8007e32:	6223      	str	r3, [r4, #32]
 8007e34:	4b04      	ldr	r3, [pc, #16]	; (8007e48 <__sinit+0x2c>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1f5      	bne.n	8007e28 <__sinit+0xc>
 8007e3c:	f7ff ffc4 	bl	8007dc8 <global_stdio_init.part.0>
 8007e40:	e7f2      	b.n	8007e28 <__sinit+0xc>
 8007e42:	bf00      	nop
 8007e44:	08007d89 	.word	0x08007d89
 8007e48:	20000c14 	.word	0x20000c14

08007e4c <_fwalk_sglue>:
 8007e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e50:	4607      	mov	r7, r0
 8007e52:	4688      	mov	r8, r1
 8007e54:	4614      	mov	r4, r2
 8007e56:	2600      	movs	r6, #0
 8007e58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e5c:	f1b9 0901 	subs.w	r9, r9, #1
 8007e60:	d505      	bpl.n	8007e6e <_fwalk_sglue+0x22>
 8007e62:	6824      	ldr	r4, [r4, #0]
 8007e64:	2c00      	cmp	r4, #0
 8007e66:	d1f7      	bne.n	8007e58 <_fwalk_sglue+0xc>
 8007e68:	4630      	mov	r0, r6
 8007e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e6e:	89ab      	ldrh	r3, [r5, #12]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d907      	bls.n	8007e84 <_fwalk_sglue+0x38>
 8007e74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	d003      	beq.n	8007e84 <_fwalk_sglue+0x38>
 8007e7c:	4629      	mov	r1, r5
 8007e7e:	4638      	mov	r0, r7
 8007e80:	47c0      	blx	r8
 8007e82:	4306      	orrs	r6, r0
 8007e84:	3568      	adds	r5, #104	; 0x68
 8007e86:	e7e9      	b.n	8007e5c <_fwalk_sglue+0x10>

08007e88 <sniprintf>:
 8007e88:	b40c      	push	{r2, r3}
 8007e8a:	b530      	push	{r4, r5, lr}
 8007e8c:	4b17      	ldr	r3, [pc, #92]	; (8007eec <sniprintf+0x64>)
 8007e8e:	1e0c      	subs	r4, r1, #0
 8007e90:	681d      	ldr	r5, [r3, #0]
 8007e92:	b09d      	sub	sp, #116	; 0x74
 8007e94:	da08      	bge.n	8007ea8 <sniprintf+0x20>
 8007e96:	238b      	movs	r3, #139	; 0x8b
 8007e98:	f04f 30ff 	mov.w	r0, #4294967295
 8007e9c:	602b      	str	r3, [r5, #0]
 8007e9e:	b01d      	add	sp, #116	; 0x74
 8007ea0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ea4:	b002      	add	sp, #8
 8007ea6:	4770      	bx	lr
 8007ea8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007eac:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007eb0:	bf0c      	ite	eq
 8007eb2:	4623      	moveq	r3, r4
 8007eb4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007eb8:	9304      	str	r3, [sp, #16]
 8007eba:	9307      	str	r3, [sp, #28]
 8007ebc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007ec0:	9002      	str	r0, [sp, #8]
 8007ec2:	9006      	str	r0, [sp, #24]
 8007ec4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007ec8:	4628      	mov	r0, r5
 8007eca:	ab21      	add	r3, sp, #132	; 0x84
 8007ecc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007ece:	a902      	add	r1, sp, #8
 8007ed0:	9301      	str	r3, [sp, #4]
 8007ed2:	f001 fbab 	bl	800962c <_svfiprintf_r>
 8007ed6:	1c43      	adds	r3, r0, #1
 8007ed8:	bfbc      	itt	lt
 8007eda:	238b      	movlt	r3, #139	; 0x8b
 8007edc:	602b      	strlt	r3, [r5, #0]
 8007ede:	2c00      	cmp	r4, #0
 8007ee0:	d0dd      	beq.n	8007e9e <sniprintf+0x16>
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	9b02      	ldr	r3, [sp, #8]
 8007ee6:	701a      	strb	r2, [r3, #0]
 8007ee8:	e7d9      	b.n	8007e9e <sniprintf+0x16>
 8007eea:	bf00      	nop
 8007eec:	20000090 	.word	0x20000090

08007ef0 <siprintf>:
 8007ef0:	b40e      	push	{r1, r2, r3}
 8007ef2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ef6:	b500      	push	{lr}
 8007ef8:	b09c      	sub	sp, #112	; 0x70
 8007efa:	ab1d      	add	r3, sp, #116	; 0x74
 8007efc:	9002      	str	r0, [sp, #8]
 8007efe:	9006      	str	r0, [sp, #24]
 8007f00:	9107      	str	r1, [sp, #28]
 8007f02:	9104      	str	r1, [sp, #16]
 8007f04:	4808      	ldr	r0, [pc, #32]	; (8007f28 <siprintf+0x38>)
 8007f06:	4909      	ldr	r1, [pc, #36]	; (8007f2c <siprintf+0x3c>)
 8007f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f0c:	9105      	str	r1, [sp, #20]
 8007f0e:	6800      	ldr	r0, [r0, #0]
 8007f10:	a902      	add	r1, sp, #8
 8007f12:	9301      	str	r3, [sp, #4]
 8007f14:	f001 fb8a 	bl	800962c <_svfiprintf_r>
 8007f18:	2200      	movs	r2, #0
 8007f1a:	9b02      	ldr	r3, [sp, #8]
 8007f1c:	701a      	strb	r2, [r3, #0]
 8007f1e:	b01c      	add	sp, #112	; 0x70
 8007f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f24:	b003      	add	sp, #12
 8007f26:	4770      	bx	lr
 8007f28:	20000090 	.word	0x20000090
 8007f2c:	ffff0208 	.word	0xffff0208

08007f30 <__sread>:
 8007f30:	b510      	push	{r4, lr}
 8007f32:	460c      	mov	r4, r1
 8007f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f38:	f000 f882 	bl	8008040 <_read_r>
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	bfab      	itete	ge
 8007f40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f42:	89a3      	ldrhlt	r3, [r4, #12]
 8007f44:	181b      	addge	r3, r3, r0
 8007f46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f4a:	bfac      	ite	ge
 8007f4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f4e:	81a3      	strhlt	r3, [r4, #12]
 8007f50:	bd10      	pop	{r4, pc}

08007f52 <__swrite>:
 8007f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f56:	461f      	mov	r7, r3
 8007f58:	898b      	ldrh	r3, [r1, #12]
 8007f5a:	4605      	mov	r5, r0
 8007f5c:	05db      	lsls	r3, r3, #23
 8007f5e:	460c      	mov	r4, r1
 8007f60:	4616      	mov	r6, r2
 8007f62:	d505      	bpl.n	8007f70 <__swrite+0x1e>
 8007f64:	2302      	movs	r3, #2
 8007f66:	2200      	movs	r2, #0
 8007f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f6c:	f000 f856 	bl	800801c <_lseek_r>
 8007f70:	89a3      	ldrh	r3, [r4, #12]
 8007f72:	4632      	mov	r2, r6
 8007f74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f78:	81a3      	strh	r3, [r4, #12]
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	463b      	mov	r3, r7
 8007f7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f86:	f000 b87d 	b.w	8008084 <_write_r>

08007f8a <__sseek>:
 8007f8a:	b510      	push	{r4, lr}
 8007f8c:	460c      	mov	r4, r1
 8007f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f92:	f000 f843 	bl	800801c <_lseek_r>
 8007f96:	1c43      	adds	r3, r0, #1
 8007f98:	89a3      	ldrh	r3, [r4, #12]
 8007f9a:	bf15      	itete	ne
 8007f9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007fa2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007fa6:	81a3      	strheq	r3, [r4, #12]
 8007fa8:	bf18      	it	ne
 8007faa:	81a3      	strhne	r3, [r4, #12]
 8007fac:	bd10      	pop	{r4, pc}

08007fae <__sclose>:
 8007fae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb2:	f000 b823 	b.w	8007ffc <_close_r>

08007fb6 <memset>:
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	4402      	add	r2, r0
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d100      	bne.n	8007fc0 <memset+0xa>
 8007fbe:	4770      	bx	lr
 8007fc0:	f803 1b01 	strb.w	r1, [r3], #1
 8007fc4:	e7f9      	b.n	8007fba <memset+0x4>

08007fc6 <strstr>:
 8007fc6:	780a      	ldrb	r2, [r1, #0]
 8007fc8:	b570      	push	{r4, r5, r6, lr}
 8007fca:	b96a      	cbnz	r2, 8007fe8 <strstr+0x22>
 8007fcc:	bd70      	pop	{r4, r5, r6, pc}
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d109      	bne.n	8007fe6 <strstr+0x20>
 8007fd2:	460c      	mov	r4, r1
 8007fd4:	4605      	mov	r5, r0
 8007fd6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d0f6      	beq.n	8007fcc <strstr+0x6>
 8007fde:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007fe2:	429e      	cmp	r6, r3
 8007fe4:	d0f7      	beq.n	8007fd6 <strstr+0x10>
 8007fe6:	3001      	adds	r0, #1
 8007fe8:	7803      	ldrb	r3, [r0, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d1ef      	bne.n	8007fce <strstr+0x8>
 8007fee:	4618      	mov	r0, r3
 8007ff0:	e7ec      	b.n	8007fcc <strstr+0x6>
	...

08007ff4 <_localeconv_r>:
 8007ff4:	4800      	ldr	r0, [pc, #0]	; (8007ff8 <_localeconv_r+0x4>)
 8007ff6:	4770      	bx	lr
 8007ff8:	20000184 	.word	0x20000184

08007ffc <_close_r>:
 8007ffc:	b538      	push	{r3, r4, r5, lr}
 8007ffe:	2300      	movs	r3, #0
 8008000:	4d05      	ldr	r5, [pc, #20]	; (8008018 <_close_r+0x1c>)
 8008002:	4604      	mov	r4, r0
 8008004:	4608      	mov	r0, r1
 8008006:	602b      	str	r3, [r5, #0]
 8008008:	f7f9 ffd4 	bl	8001fb4 <_close>
 800800c:	1c43      	adds	r3, r0, #1
 800800e:	d102      	bne.n	8008016 <_close_r+0x1a>
 8008010:	682b      	ldr	r3, [r5, #0]
 8008012:	b103      	cbz	r3, 8008016 <_close_r+0x1a>
 8008014:	6023      	str	r3, [r4, #0]
 8008016:	bd38      	pop	{r3, r4, r5, pc}
 8008018:	20000c18 	.word	0x20000c18

0800801c <_lseek_r>:
 800801c:	b538      	push	{r3, r4, r5, lr}
 800801e:	4604      	mov	r4, r0
 8008020:	4608      	mov	r0, r1
 8008022:	4611      	mov	r1, r2
 8008024:	2200      	movs	r2, #0
 8008026:	4d05      	ldr	r5, [pc, #20]	; (800803c <_lseek_r+0x20>)
 8008028:	602a      	str	r2, [r5, #0]
 800802a:	461a      	mov	r2, r3
 800802c:	f7f9 ffe6 	bl	8001ffc <_lseek>
 8008030:	1c43      	adds	r3, r0, #1
 8008032:	d102      	bne.n	800803a <_lseek_r+0x1e>
 8008034:	682b      	ldr	r3, [r5, #0]
 8008036:	b103      	cbz	r3, 800803a <_lseek_r+0x1e>
 8008038:	6023      	str	r3, [r4, #0]
 800803a:	bd38      	pop	{r3, r4, r5, pc}
 800803c:	20000c18 	.word	0x20000c18

08008040 <_read_r>:
 8008040:	b538      	push	{r3, r4, r5, lr}
 8008042:	4604      	mov	r4, r0
 8008044:	4608      	mov	r0, r1
 8008046:	4611      	mov	r1, r2
 8008048:	2200      	movs	r2, #0
 800804a:	4d05      	ldr	r5, [pc, #20]	; (8008060 <_read_r+0x20>)
 800804c:	602a      	str	r2, [r5, #0]
 800804e:	461a      	mov	r2, r3
 8008050:	f7f9 ff77 	bl	8001f42 <_read>
 8008054:	1c43      	adds	r3, r0, #1
 8008056:	d102      	bne.n	800805e <_read_r+0x1e>
 8008058:	682b      	ldr	r3, [r5, #0]
 800805a:	b103      	cbz	r3, 800805e <_read_r+0x1e>
 800805c:	6023      	str	r3, [r4, #0]
 800805e:	bd38      	pop	{r3, r4, r5, pc}
 8008060:	20000c18 	.word	0x20000c18

08008064 <_sbrk_r>:
 8008064:	b538      	push	{r3, r4, r5, lr}
 8008066:	2300      	movs	r3, #0
 8008068:	4d05      	ldr	r5, [pc, #20]	; (8008080 <_sbrk_r+0x1c>)
 800806a:	4604      	mov	r4, r0
 800806c:	4608      	mov	r0, r1
 800806e:	602b      	str	r3, [r5, #0]
 8008070:	f7f9 ffd0 	bl	8002014 <_sbrk>
 8008074:	1c43      	adds	r3, r0, #1
 8008076:	d102      	bne.n	800807e <_sbrk_r+0x1a>
 8008078:	682b      	ldr	r3, [r5, #0]
 800807a:	b103      	cbz	r3, 800807e <_sbrk_r+0x1a>
 800807c:	6023      	str	r3, [r4, #0]
 800807e:	bd38      	pop	{r3, r4, r5, pc}
 8008080:	20000c18 	.word	0x20000c18

08008084 <_write_r>:
 8008084:	b538      	push	{r3, r4, r5, lr}
 8008086:	4604      	mov	r4, r0
 8008088:	4608      	mov	r0, r1
 800808a:	4611      	mov	r1, r2
 800808c:	2200      	movs	r2, #0
 800808e:	4d05      	ldr	r5, [pc, #20]	; (80080a4 <_write_r+0x20>)
 8008090:	602a      	str	r2, [r5, #0]
 8008092:	461a      	mov	r2, r3
 8008094:	f7f9 ff72 	bl	8001f7c <_write>
 8008098:	1c43      	adds	r3, r0, #1
 800809a:	d102      	bne.n	80080a2 <_write_r+0x1e>
 800809c:	682b      	ldr	r3, [r5, #0]
 800809e:	b103      	cbz	r3, 80080a2 <_write_r+0x1e>
 80080a0:	6023      	str	r3, [r4, #0]
 80080a2:	bd38      	pop	{r3, r4, r5, pc}
 80080a4:	20000c18 	.word	0x20000c18

080080a8 <__errno>:
 80080a8:	4b01      	ldr	r3, [pc, #4]	; (80080b0 <__errno+0x8>)
 80080aa:	6818      	ldr	r0, [r3, #0]
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	20000090 	.word	0x20000090

080080b4 <__libc_init_array>:
 80080b4:	b570      	push	{r4, r5, r6, lr}
 80080b6:	2600      	movs	r6, #0
 80080b8:	4d0c      	ldr	r5, [pc, #48]	; (80080ec <__libc_init_array+0x38>)
 80080ba:	4c0d      	ldr	r4, [pc, #52]	; (80080f0 <__libc_init_array+0x3c>)
 80080bc:	1b64      	subs	r4, r4, r5
 80080be:	10a4      	asrs	r4, r4, #2
 80080c0:	42a6      	cmp	r6, r4
 80080c2:	d109      	bne.n	80080d8 <__libc_init_array+0x24>
 80080c4:	f001 ffc2 	bl	800a04c <_init>
 80080c8:	2600      	movs	r6, #0
 80080ca:	4d0a      	ldr	r5, [pc, #40]	; (80080f4 <__libc_init_array+0x40>)
 80080cc:	4c0a      	ldr	r4, [pc, #40]	; (80080f8 <__libc_init_array+0x44>)
 80080ce:	1b64      	subs	r4, r4, r5
 80080d0:	10a4      	asrs	r4, r4, #2
 80080d2:	42a6      	cmp	r6, r4
 80080d4:	d105      	bne.n	80080e2 <__libc_init_array+0x2e>
 80080d6:	bd70      	pop	{r4, r5, r6, pc}
 80080d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80080dc:	4798      	blx	r3
 80080de:	3601      	adds	r6, #1
 80080e0:	e7ee      	b.n	80080c0 <__libc_init_array+0xc>
 80080e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80080e6:	4798      	blx	r3
 80080e8:	3601      	adds	r6, #1
 80080ea:	e7f2      	b.n	80080d2 <__libc_init_array+0x1e>
 80080ec:	0800a7cc 	.word	0x0800a7cc
 80080f0:	0800a7cc 	.word	0x0800a7cc
 80080f4:	0800a7cc 	.word	0x0800a7cc
 80080f8:	0800a7d0 	.word	0x0800a7d0

080080fc <__retarget_lock_init_recursive>:
 80080fc:	4770      	bx	lr

080080fe <__retarget_lock_acquire_recursive>:
 80080fe:	4770      	bx	lr

08008100 <__retarget_lock_release_recursive>:
 8008100:	4770      	bx	lr

08008102 <memchr>:
 8008102:	4603      	mov	r3, r0
 8008104:	b510      	push	{r4, lr}
 8008106:	b2c9      	uxtb	r1, r1
 8008108:	4402      	add	r2, r0
 800810a:	4293      	cmp	r3, r2
 800810c:	4618      	mov	r0, r3
 800810e:	d101      	bne.n	8008114 <memchr+0x12>
 8008110:	2000      	movs	r0, #0
 8008112:	e003      	b.n	800811c <memchr+0x1a>
 8008114:	7804      	ldrb	r4, [r0, #0]
 8008116:	3301      	adds	r3, #1
 8008118:	428c      	cmp	r4, r1
 800811a:	d1f6      	bne.n	800810a <memchr+0x8>
 800811c:	bd10      	pop	{r4, pc}

0800811e <quorem>:
 800811e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008122:	6903      	ldr	r3, [r0, #16]
 8008124:	690c      	ldr	r4, [r1, #16]
 8008126:	4607      	mov	r7, r0
 8008128:	42a3      	cmp	r3, r4
 800812a:	db7f      	blt.n	800822c <quorem+0x10e>
 800812c:	3c01      	subs	r4, #1
 800812e:	f100 0514 	add.w	r5, r0, #20
 8008132:	f101 0814 	add.w	r8, r1, #20
 8008136:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800813a:	9301      	str	r3, [sp, #4]
 800813c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008140:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008144:	3301      	adds	r3, #1
 8008146:	429a      	cmp	r2, r3
 8008148:	fbb2 f6f3 	udiv	r6, r2, r3
 800814c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008150:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008154:	d331      	bcc.n	80081ba <quorem+0x9c>
 8008156:	f04f 0e00 	mov.w	lr, #0
 800815a:	4640      	mov	r0, r8
 800815c:	46ac      	mov	ip, r5
 800815e:	46f2      	mov	sl, lr
 8008160:	f850 2b04 	ldr.w	r2, [r0], #4
 8008164:	b293      	uxth	r3, r2
 8008166:	fb06 e303 	mla	r3, r6, r3, lr
 800816a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800816e:	0c1a      	lsrs	r2, r3, #16
 8008170:	b29b      	uxth	r3, r3
 8008172:	fb06 220e 	mla	r2, r6, lr, r2
 8008176:	ebaa 0303 	sub.w	r3, sl, r3
 800817a:	f8dc a000 	ldr.w	sl, [ip]
 800817e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008182:	fa1f fa8a 	uxth.w	sl, sl
 8008186:	4453      	add	r3, sl
 8008188:	f8dc a000 	ldr.w	sl, [ip]
 800818c:	b292      	uxth	r2, r2
 800818e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008192:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008196:	b29b      	uxth	r3, r3
 8008198:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800819c:	4581      	cmp	r9, r0
 800819e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80081a2:	f84c 3b04 	str.w	r3, [ip], #4
 80081a6:	d2db      	bcs.n	8008160 <quorem+0x42>
 80081a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80081ac:	b92b      	cbnz	r3, 80081ba <quorem+0x9c>
 80081ae:	9b01      	ldr	r3, [sp, #4]
 80081b0:	3b04      	subs	r3, #4
 80081b2:	429d      	cmp	r5, r3
 80081b4:	461a      	mov	r2, r3
 80081b6:	d32d      	bcc.n	8008214 <quorem+0xf6>
 80081b8:	613c      	str	r4, [r7, #16]
 80081ba:	4638      	mov	r0, r7
 80081bc:	f001 f8de 	bl	800937c <__mcmp>
 80081c0:	2800      	cmp	r0, #0
 80081c2:	db23      	blt.n	800820c <quorem+0xee>
 80081c4:	4629      	mov	r1, r5
 80081c6:	2000      	movs	r0, #0
 80081c8:	3601      	adds	r6, #1
 80081ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80081ce:	f8d1 c000 	ldr.w	ip, [r1]
 80081d2:	b293      	uxth	r3, r2
 80081d4:	1ac3      	subs	r3, r0, r3
 80081d6:	0c12      	lsrs	r2, r2, #16
 80081d8:	fa1f f08c 	uxth.w	r0, ip
 80081dc:	4403      	add	r3, r0
 80081de:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80081e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081ec:	45c1      	cmp	r9, r8
 80081ee:	ea4f 4022 	mov.w	r0, r2, asr #16
 80081f2:	f841 3b04 	str.w	r3, [r1], #4
 80081f6:	d2e8      	bcs.n	80081ca <quorem+0xac>
 80081f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008200:	b922      	cbnz	r2, 800820c <quorem+0xee>
 8008202:	3b04      	subs	r3, #4
 8008204:	429d      	cmp	r5, r3
 8008206:	461a      	mov	r2, r3
 8008208:	d30a      	bcc.n	8008220 <quorem+0x102>
 800820a:	613c      	str	r4, [r7, #16]
 800820c:	4630      	mov	r0, r6
 800820e:	b003      	add	sp, #12
 8008210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008214:	6812      	ldr	r2, [r2, #0]
 8008216:	3b04      	subs	r3, #4
 8008218:	2a00      	cmp	r2, #0
 800821a:	d1cd      	bne.n	80081b8 <quorem+0x9a>
 800821c:	3c01      	subs	r4, #1
 800821e:	e7c8      	b.n	80081b2 <quorem+0x94>
 8008220:	6812      	ldr	r2, [r2, #0]
 8008222:	3b04      	subs	r3, #4
 8008224:	2a00      	cmp	r2, #0
 8008226:	d1f0      	bne.n	800820a <quorem+0xec>
 8008228:	3c01      	subs	r4, #1
 800822a:	e7eb      	b.n	8008204 <quorem+0xe6>
 800822c:	2000      	movs	r0, #0
 800822e:	e7ee      	b.n	800820e <quorem+0xf0>

08008230 <_dtoa_r>:
 8008230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008234:	4616      	mov	r6, r2
 8008236:	461f      	mov	r7, r3
 8008238:	69c4      	ldr	r4, [r0, #28]
 800823a:	b099      	sub	sp, #100	; 0x64
 800823c:	4605      	mov	r5, r0
 800823e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008242:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008246:	b974      	cbnz	r4, 8008266 <_dtoa_r+0x36>
 8008248:	2010      	movs	r0, #16
 800824a:	f7ff f849 	bl	80072e0 <malloc>
 800824e:	4602      	mov	r2, r0
 8008250:	61e8      	str	r0, [r5, #28]
 8008252:	b920      	cbnz	r0, 800825e <_dtoa_r+0x2e>
 8008254:	21ef      	movs	r1, #239	; 0xef
 8008256:	4bac      	ldr	r3, [pc, #688]	; (8008508 <_dtoa_r+0x2d8>)
 8008258:	48ac      	ldr	r0, [pc, #688]	; (800850c <_dtoa_r+0x2dc>)
 800825a:	f001 fbb7 	bl	80099cc <__assert_func>
 800825e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008262:	6004      	str	r4, [r0, #0]
 8008264:	60c4      	str	r4, [r0, #12]
 8008266:	69eb      	ldr	r3, [r5, #28]
 8008268:	6819      	ldr	r1, [r3, #0]
 800826a:	b151      	cbz	r1, 8008282 <_dtoa_r+0x52>
 800826c:	685a      	ldr	r2, [r3, #4]
 800826e:	2301      	movs	r3, #1
 8008270:	4093      	lsls	r3, r2
 8008272:	604a      	str	r2, [r1, #4]
 8008274:	608b      	str	r3, [r1, #8]
 8008276:	4628      	mov	r0, r5
 8008278:	f000 fe46 	bl	8008f08 <_Bfree>
 800827c:	2200      	movs	r2, #0
 800827e:	69eb      	ldr	r3, [r5, #28]
 8008280:	601a      	str	r2, [r3, #0]
 8008282:	1e3b      	subs	r3, r7, #0
 8008284:	bfaf      	iteee	ge
 8008286:	2300      	movge	r3, #0
 8008288:	2201      	movlt	r2, #1
 800828a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800828e:	9305      	strlt	r3, [sp, #20]
 8008290:	bfa8      	it	ge
 8008292:	f8c8 3000 	strge.w	r3, [r8]
 8008296:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800829a:	4b9d      	ldr	r3, [pc, #628]	; (8008510 <_dtoa_r+0x2e0>)
 800829c:	bfb8      	it	lt
 800829e:	f8c8 2000 	strlt.w	r2, [r8]
 80082a2:	ea33 0309 	bics.w	r3, r3, r9
 80082a6:	d119      	bne.n	80082dc <_dtoa_r+0xac>
 80082a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80082ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80082ae:	6013      	str	r3, [r2, #0]
 80082b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80082b4:	4333      	orrs	r3, r6
 80082b6:	f000 8589 	beq.w	8008dcc <_dtoa_r+0xb9c>
 80082ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80082bc:	b953      	cbnz	r3, 80082d4 <_dtoa_r+0xa4>
 80082be:	4b95      	ldr	r3, [pc, #596]	; (8008514 <_dtoa_r+0x2e4>)
 80082c0:	e023      	b.n	800830a <_dtoa_r+0xda>
 80082c2:	4b95      	ldr	r3, [pc, #596]	; (8008518 <_dtoa_r+0x2e8>)
 80082c4:	9303      	str	r3, [sp, #12]
 80082c6:	3308      	adds	r3, #8
 80082c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80082ca:	6013      	str	r3, [r2, #0]
 80082cc:	9803      	ldr	r0, [sp, #12]
 80082ce:	b019      	add	sp, #100	; 0x64
 80082d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d4:	4b8f      	ldr	r3, [pc, #572]	; (8008514 <_dtoa_r+0x2e4>)
 80082d6:	9303      	str	r3, [sp, #12]
 80082d8:	3303      	adds	r3, #3
 80082da:	e7f5      	b.n	80082c8 <_dtoa_r+0x98>
 80082dc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80082e0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80082e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80082e8:	2200      	movs	r2, #0
 80082ea:	2300      	movs	r3, #0
 80082ec:	f7f8 fb5c 	bl	80009a8 <__aeabi_dcmpeq>
 80082f0:	4680      	mov	r8, r0
 80082f2:	b160      	cbz	r0, 800830e <_dtoa_r+0xde>
 80082f4:	2301      	movs	r3, #1
 80082f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80082f8:	6013      	str	r3, [r2, #0]
 80082fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f000 8562 	beq.w	8008dc6 <_dtoa_r+0xb96>
 8008302:	4b86      	ldr	r3, [pc, #536]	; (800851c <_dtoa_r+0x2ec>)
 8008304:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008306:	6013      	str	r3, [r2, #0]
 8008308:	3b01      	subs	r3, #1
 800830a:	9303      	str	r3, [sp, #12]
 800830c:	e7de      	b.n	80082cc <_dtoa_r+0x9c>
 800830e:	ab16      	add	r3, sp, #88	; 0x58
 8008310:	9301      	str	r3, [sp, #4]
 8008312:	ab17      	add	r3, sp, #92	; 0x5c
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	4628      	mov	r0, r5
 8008318:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800831c:	f001 f8d6 	bl	80094cc <__d2b>
 8008320:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008324:	4682      	mov	sl, r0
 8008326:	2c00      	cmp	r4, #0
 8008328:	d07e      	beq.n	8008428 <_dtoa_r+0x1f8>
 800832a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800832e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008330:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008338:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800833c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008340:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008344:	4619      	mov	r1, r3
 8008346:	2200      	movs	r2, #0
 8008348:	4b75      	ldr	r3, [pc, #468]	; (8008520 <_dtoa_r+0x2f0>)
 800834a:	f7f7 ff0d 	bl	8000168 <__aeabi_dsub>
 800834e:	a368      	add	r3, pc, #416	; (adr r3, 80084f0 <_dtoa_r+0x2c0>)
 8008350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008354:	f7f8 f8c0 	bl	80004d8 <__aeabi_dmul>
 8008358:	a367      	add	r3, pc, #412	; (adr r3, 80084f8 <_dtoa_r+0x2c8>)
 800835a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835e:	f7f7 ff05 	bl	800016c <__adddf3>
 8008362:	4606      	mov	r6, r0
 8008364:	4620      	mov	r0, r4
 8008366:	460f      	mov	r7, r1
 8008368:	f7f8 f84c 	bl	8000404 <__aeabi_i2d>
 800836c:	a364      	add	r3, pc, #400	; (adr r3, 8008500 <_dtoa_r+0x2d0>)
 800836e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008372:	f7f8 f8b1 	bl	80004d8 <__aeabi_dmul>
 8008376:	4602      	mov	r2, r0
 8008378:	460b      	mov	r3, r1
 800837a:	4630      	mov	r0, r6
 800837c:	4639      	mov	r1, r7
 800837e:	f7f7 fef5 	bl	800016c <__adddf3>
 8008382:	4606      	mov	r6, r0
 8008384:	460f      	mov	r7, r1
 8008386:	f7f8 fb57 	bl	8000a38 <__aeabi_d2iz>
 800838a:	2200      	movs	r2, #0
 800838c:	4683      	mov	fp, r0
 800838e:	2300      	movs	r3, #0
 8008390:	4630      	mov	r0, r6
 8008392:	4639      	mov	r1, r7
 8008394:	f7f8 fb12 	bl	80009bc <__aeabi_dcmplt>
 8008398:	b148      	cbz	r0, 80083ae <_dtoa_r+0x17e>
 800839a:	4658      	mov	r0, fp
 800839c:	f7f8 f832 	bl	8000404 <__aeabi_i2d>
 80083a0:	4632      	mov	r2, r6
 80083a2:	463b      	mov	r3, r7
 80083a4:	f7f8 fb00 	bl	80009a8 <__aeabi_dcmpeq>
 80083a8:	b908      	cbnz	r0, 80083ae <_dtoa_r+0x17e>
 80083aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80083ae:	f1bb 0f16 	cmp.w	fp, #22
 80083b2:	d857      	bhi.n	8008464 <_dtoa_r+0x234>
 80083b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083b8:	4b5a      	ldr	r3, [pc, #360]	; (8008524 <_dtoa_r+0x2f4>)
 80083ba:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80083be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c2:	f7f8 fafb 	bl	80009bc <__aeabi_dcmplt>
 80083c6:	2800      	cmp	r0, #0
 80083c8:	d04e      	beq.n	8008468 <_dtoa_r+0x238>
 80083ca:	2300      	movs	r3, #0
 80083cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80083d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80083d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80083d4:	1b1b      	subs	r3, r3, r4
 80083d6:	1e5a      	subs	r2, r3, #1
 80083d8:	bf46      	itte	mi
 80083da:	f1c3 0901 	rsbmi	r9, r3, #1
 80083de:	2300      	movmi	r3, #0
 80083e0:	f04f 0900 	movpl.w	r9, #0
 80083e4:	9209      	str	r2, [sp, #36]	; 0x24
 80083e6:	bf48      	it	mi
 80083e8:	9309      	strmi	r3, [sp, #36]	; 0x24
 80083ea:	f1bb 0f00 	cmp.w	fp, #0
 80083ee:	db3d      	blt.n	800846c <_dtoa_r+0x23c>
 80083f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083f2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80083f6:	445b      	add	r3, fp
 80083f8:	9309      	str	r3, [sp, #36]	; 0x24
 80083fa:	2300      	movs	r3, #0
 80083fc:	930a      	str	r3, [sp, #40]	; 0x28
 80083fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008400:	2b09      	cmp	r3, #9
 8008402:	d867      	bhi.n	80084d4 <_dtoa_r+0x2a4>
 8008404:	2b05      	cmp	r3, #5
 8008406:	bfc4      	itt	gt
 8008408:	3b04      	subgt	r3, #4
 800840a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800840c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800840e:	bfc8      	it	gt
 8008410:	2400      	movgt	r4, #0
 8008412:	f1a3 0302 	sub.w	r3, r3, #2
 8008416:	bfd8      	it	le
 8008418:	2401      	movle	r4, #1
 800841a:	2b03      	cmp	r3, #3
 800841c:	f200 8086 	bhi.w	800852c <_dtoa_r+0x2fc>
 8008420:	e8df f003 	tbb	[pc, r3]
 8008424:	5637392c 	.word	0x5637392c
 8008428:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800842c:	441c      	add	r4, r3
 800842e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008432:	2b20      	cmp	r3, #32
 8008434:	bfc1      	itttt	gt
 8008436:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800843a:	fa09 f903 	lslgt.w	r9, r9, r3
 800843e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8008442:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008446:	bfd6      	itet	le
 8008448:	f1c3 0320 	rsble	r3, r3, #32
 800844c:	ea49 0003 	orrgt.w	r0, r9, r3
 8008450:	fa06 f003 	lslle.w	r0, r6, r3
 8008454:	f7f7 ffc6 	bl	80003e4 <__aeabi_ui2d>
 8008458:	2201      	movs	r2, #1
 800845a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800845e:	3c01      	subs	r4, #1
 8008460:	9213      	str	r2, [sp, #76]	; 0x4c
 8008462:	e76f      	b.n	8008344 <_dtoa_r+0x114>
 8008464:	2301      	movs	r3, #1
 8008466:	e7b3      	b.n	80083d0 <_dtoa_r+0x1a0>
 8008468:	900f      	str	r0, [sp, #60]	; 0x3c
 800846a:	e7b2      	b.n	80083d2 <_dtoa_r+0x1a2>
 800846c:	f1cb 0300 	rsb	r3, fp, #0
 8008470:	930a      	str	r3, [sp, #40]	; 0x28
 8008472:	2300      	movs	r3, #0
 8008474:	eba9 090b 	sub.w	r9, r9, fp
 8008478:	930e      	str	r3, [sp, #56]	; 0x38
 800847a:	e7c0      	b.n	80083fe <_dtoa_r+0x1ce>
 800847c:	2300      	movs	r3, #0
 800847e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008480:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008482:	2b00      	cmp	r3, #0
 8008484:	dc55      	bgt.n	8008532 <_dtoa_r+0x302>
 8008486:	2301      	movs	r3, #1
 8008488:	461a      	mov	r2, r3
 800848a:	9306      	str	r3, [sp, #24]
 800848c:	9308      	str	r3, [sp, #32]
 800848e:	9223      	str	r2, [sp, #140]	; 0x8c
 8008490:	e00b      	b.n	80084aa <_dtoa_r+0x27a>
 8008492:	2301      	movs	r3, #1
 8008494:	e7f3      	b.n	800847e <_dtoa_r+0x24e>
 8008496:	2300      	movs	r3, #0
 8008498:	930b      	str	r3, [sp, #44]	; 0x2c
 800849a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800849c:	445b      	add	r3, fp
 800849e:	9306      	str	r3, [sp, #24]
 80084a0:	3301      	adds	r3, #1
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	9308      	str	r3, [sp, #32]
 80084a6:	bfb8      	it	lt
 80084a8:	2301      	movlt	r3, #1
 80084aa:	2100      	movs	r1, #0
 80084ac:	2204      	movs	r2, #4
 80084ae:	69e8      	ldr	r0, [r5, #28]
 80084b0:	f102 0614 	add.w	r6, r2, #20
 80084b4:	429e      	cmp	r6, r3
 80084b6:	d940      	bls.n	800853a <_dtoa_r+0x30a>
 80084b8:	6041      	str	r1, [r0, #4]
 80084ba:	4628      	mov	r0, r5
 80084bc:	f000 fce4 	bl	8008e88 <_Balloc>
 80084c0:	9003      	str	r0, [sp, #12]
 80084c2:	2800      	cmp	r0, #0
 80084c4:	d13c      	bne.n	8008540 <_dtoa_r+0x310>
 80084c6:	4602      	mov	r2, r0
 80084c8:	f240 11af 	movw	r1, #431	; 0x1af
 80084cc:	4b16      	ldr	r3, [pc, #88]	; (8008528 <_dtoa_r+0x2f8>)
 80084ce:	e6c3      	b.n	8008258 <_dtoa_r+0x28>
 80084d0:	2301      	movs	r3, #1
 80084d2:	e7e1      	b.n	8008498 <_dtoa_r+0x268>
 80084d4:	2401      	movs	r4, #1
 80084d6:	2300      	movs	r3, #0
 80084d8:	940b      	str	r4, [sp, #44]	; 0x2c
 80084da:	9322      	str	r3, [sp, #136]	; 0x88
 80084dc:	f04f 33ff 	mov.w	r3, #4294967295
 80084e0:	2200      	movs	r2, #0
 80084e2:	9306      	str	r3, [sp, #24]
 80084e4:	9308      	str	r3, [sp, #32]
 80084e6:	2312      	movs	r3, #18
 80084e8:	e7d1      	b.n	800848e <_dtoa_r+0x25e>
 80084ea:	bf00      	nop
 80084ec:	f3af 8000 	nop.w
 80084f0:	636f4361 	.word	0x636f4361
 80084f4:	3fd287a7 	.word	0x3fd287a7
 80084f8:	8b60c8b3 	.word	0x8b60c8b3
 80084fc:	3fc68a28 	.word	0x3fc68a28
 8008500:	509f79fb 	.word	0x509f79fb
 8008504:	3fd34413 	.word	0x3fd34413
 8008508:	0800a49f 	.word	0x0800a49f
 800850c:	0800a4b6 	.word	0x0800a4b6
 8008510:	7ff00000 	.word	0x7ff00000
 8008514:	0800a49b 	.word	0x0800a49b
 8008518:	0800a492 	.word	0x0800a492
 800851c:	0800a46f 	.word	0x0800a46f
 8008520:	3ff80000 	.word	0x3ff80000
 8008524:	0800a5a0 	.word	0x0800a5a0
 8008528:	0800a50e 	.word	0x0800a50e
 800852c:	2301      	movs	r3, #1
 800852e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008530:	e7d4      	b.n	80084dc <_dtoa_r+0x2ac>
 8008532:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008534:	9306      	str	r3, [sp, #24]
 8008536:	9308      	str	r3, [sp, #32]
 8008538:	e7b7      	b.n	80084aa <_dtoa_r+0x27a>
 800853a:	3101      	adds	r1, #1
 800853c:	0052      	lsls	r2, r2, #1
 800853e:	e7b7      	b.n	80084b0 <_dtoa_r+0x280>
 8008540:	69eb      	ldr	r3, [r5, #28]
 8008542:	9a03      	ldr	r2, [sp, #12]
 8008544:	601a      	str	r2, [r3, #0]
 8008546:	9b08      	ldr	r3, [sp, #32]
 8008548:	2b0e      	cmp	r3, #14
 800854a:	f200 80a8 	bhi.w	800869e <_dtoa_r+0x46e>
 800854e:	2c00      	cmp	r4, #0
 8008550:	f000 80a5 	beq.w	800869e <_dtoa_r+0x46e>
 8008554:	f1bb 0f00 	cmp.w	fp, #0
 8008558:	dd34      	ble.n	80085c4 <_dtoa_r+0x394>
 800855a:	4b9a      	ldr	r3, [pc, #616]	; (80087c4 <_dtoa_r+0x594>)
 800855c:	f00b 020f 	and.w	r2, fp, #15
 8008560:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008564:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008568:	e9d3 3400 	ldrd	r3, r4, [r3]
 800856c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008570:	ea4f 142b 	mov.w	r4, fp, asr #4
 8008574:	d016      	beq.n	80085a4 <_dtoa_r+0x374>
 8008576:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800857a:	4b93      	ldr	r3, [pc, #588]	; (80087c8 <_dtoa_r+0x598>)
 800857c:	2703      	movs	r7, #3
 800857e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008582:	f7f8 f8d3 	bl	800072c <__aeabi_ddiv>
 8008586:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800858a:	f004 040f 	and.w	r4, r4, #15
 800858e:	4e8e      	ldr	r6, [pc, #568]	; (80087c8 <_dtoa_r+0x598>)
 8008590:	b954      	cbnz	r4, 80085a8 <_dtoa_r+0x378>
 8008592:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008596:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800859a:	f7f8 f8c7 	bl	800072c <__aeabi_ddiv>
 800859e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085a2:	e029      	b.n	80085f8 <_dtoa_r+0x3c8>
 80085a4:	2702      	movs	r7, #2
 80085a6:	e7f2      	b.n	800858e <_dtoa_r+0x35e>
 80085a8:	07e1      	lsls	r1, r4, #31
 80085aa:	d508      	bpl.n	80085be <_dtoa_r+0x38e>
 80085ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80085b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80085b4:	f7f7 ff90 	bl	80004d8 <__aeabi_dmul>
 80085b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80085bc:	3701      	adds	r7, #1
 80085be:	1064      	asrs	r4, r4, #1
 80085c0:	3608      	adds	r6, #8
 80085c2:	e7e5      	b.n	8008590 <_dtoa_r+0x360>
 80085c4:	f000 80a5 	beq.w	8008712 <_dtoa_r+0x4e2>
 80085c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80085cc:	f1cb 0400 	rsb	r4, fp, #0
 80085d0:	4b7c      	ldr	r3, [pc, #496]	; (80087c4 <_dtoa_r+0x594>)
 80085d2:	f004 020f 	and.w	r2, r4, #15
 80085d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085de:	f7f7 ff7b 	bl	80004d8 <__aeabi_dmul>
 80085e2:	2702      	movs	r7, #2
 80085e4:	2300      	movs	r3, #0
 80085e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085ea:	4e77      	ldr	r6, [pc, #476]	; (80087c8 <_dtoa_r+0x598>)
 80085ec:	1124      	asrs	r4, r4, #4
 80085ee:	2c00      	cmp	r4, #0
 80085f0:	f040 8084 	bne.w	80086fc <_dtoa_r+0x4cc>
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d1d2      	bne.n	800859e <_dtoa_r+0x36e>
 80085f8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80085fc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008600:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008602:	2b00      	cmp	r3, #0
 8008604:	f000 8087 	beq.w	8008716 <_dtoa_r+0x4e6>
 8008608:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800860c:	2200      	movs	r2, #0
 800860e:	4b6f      	ldr	r3, [pc, #444]	; (80087cc <_dtoa_r+0x59c>)
 8008610:	f7f8 f9d4 	bl	80009bc <__aeabi_dcmplt>
 8008614:	2800      	cmp	r0, #0
 8008616:	d07e      	beq.n	8008716 <_dtoa_r+0x4e6>
 8008618:	9b08      	ldr	r3, [sp, #32]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d07b      	beq.n	8008716 <_dtoa_r+0x4e6>
 800861e:	9b06      	ldr	r3, [sp, #24]
 8008620:	2b00      	cmp	r3, #0
 8008622:	dd38      	ble.n	8008696 <_dtoa_r+0x466>
 8008624:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008628:	2200      	movs	r2, #0
 800862a:	4b69      	ldr	r3, [pc, #420]	; (80087d0 <_dtoa_r+0x5a0>)
 800862c:	f7f7 ff54 	bl	80004d8 <__aeabi_dmul>
 8008630:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008634:	9c06      	ldr	r4, [sp, #24]
 8008636:	f10b 38ff 	add.w	r8, fp, #4294967295
 800863a:	3701      	adds	r7, #1
 800863c:	4638      	mov	r0, r7
 800863e:	f7f7 fee1 	bl	8000404 <__aeabi_i2d>
 8008642:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008646:	f7f7 ff47 	bl	80004d8 <__aeabi_dmul>
 800864a:	2200      	movs	r2, #0
 800864c:	4b61      	ldr	r3, [pc, #388]	; (80087d4 <_dtoa_r+0x5a4>)
 800864e:	f7f7 fd8d 	bl	800016c <__adddf3>
 8008652:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008656:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800865a:	9611      	str	r6, [sp, #68]	; 0x44
 800865c:	2c00      	cmp	r4, #0
 800865e:	d15d      	bne.n	800871c <_dtoa_r+0x4ec>
 8008660:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008664:	2200      	movs	r2, #0
 8008666:	4b5c      	ldr	r3, [pc, #368]	; (80087d8 <_dtoa_r+0x5a8>)
 8008668:	f7f7 fd7e 	bl	8000168 <__aeabi_dsub>
 800866c:	4602      	mov	r2, r0
 800866e:	460b      	mov	r3, r1
 8008670:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008674:	4633      	mov	r3, r6
 8008676:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008678:	f7f8 f9be 	bl	80009f8 <__aeabi_dcmpgt>
 800867c:	2800      	cmp	r0, #0
 800867e:	f040 8295 	bne.w	8008bac <_dtoa_r+0x97c>
 8008682:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008686:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008688:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800868c:	f7f8 f996 	bl	80009bc <__aeabi_dcmplt>
 8008690:	2800      	cmp	r0, #0
 8008692:	f040 8289 	bne.w	8008ba8 <_dtoa_r+0x978>
 8008696:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800869a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800869e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f2c0 8151 	blt.w	8008948 <_dtoa_r+0x718>
 80086a6:	f1bb 0f0e 	cmp.w	fp, #14
 80086aa:	f300 814d 	bgt.w	8008948 <_dtoa_r+0x718>
 80086ae:	4b45      	ldr	r3, [pc, #276]	; (80087c4 <_dtoa_r+0x594>)
 80086b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80086b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086b8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80086bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f280 80da 	bge.w	8008878 <_dtoa_r+0x648>
 80086c4:	9b08      	ldr	r3, [sp, #32]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	f300 80d6 	bgt.w	8008878 <_dtoa_r+0x648>
 80086cc:	f040 826b 	bne.w	8008ba6 <_dtoa_r+0x976>
 80086d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086d4:	2200      	movs	r2, #0
 80086d6:	4b40      	ldr	r3, [pc, #256]	; (80087d8 <_dtoa_r+0x5a8>)
 80086d8:	f7f7 fefe 	bl	80004d8 <__aeabi_dmul>
 80086dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086e0:	f7f8 f980 	bl	80009e4 <__aeabi_dcmpge>
 80086e4:	9c08      	ldr	r4, [sp, #32]
 80086e6:	4626      	mov	r6, r4
 80086e8:	2800      	cmp	r0, #0
 80086ea:	f040 8241 	bne.w	8008b70 <_dtoa_r+0x940>
 80086ee:	2331      	movs	r3, #49	; 0x31
 80086f0:	9f03      	ldr	r7, [sp, #12]
 80086f2:	f10b 0b01 	add.w	fp, fp, #1
 80086f6:	f807 3b01 	strb.w	r3, [r7], #1
 80086fa:	e23d      	b.n	8008b78 <_dtoa_r+0x948>
 80086fc:	07e2      	lsls	r2, r4, #31
 80086fe:	d505      	bpl.n	800870c <_dtoa_r+0x4dc>
 8008700:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008704:	f7f7 fee8 	bl	80004d8 <__aeabi_dmul>
 8008708:	2301      	movs	r3, #1
 800870a:	3701      	adds	r7, #1
 800870c:	1064      	asrs	r4, r4, #1
 800870e:	3608      	adds	r6, #8
 8008710:	e76d      	b.n	80085ee <_dtoa_r+0x3be>
 8008712:	2702      	movs	r7, #2
 8008714:	e770      	b.n	80085f8 <_dtoa_r+0x3c8>
 8008716:	46d8      	mov	r8, fp
 8008718:	9c08      	ldr	r4, [sp, #32]
 800871a:	e78f      	b.n	800863c <_dtoa_r+0x40c>
 800871c:	9903      	ldr	r1, [sp, #12]
 800871e:	4b29      	ldr	r3, [pc, #164]	; (80087c4 <_dtoa_r+0x594>)
 8008720:	4421      	add	r1, r4
 8008722:	9112      	str	r1, [sp, #72]	; 0x48
 8008724:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008726:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800872a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800872e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008732:	2900      	cmp	r1, #0
 8008734:	d054      	beq.n	80087e0 <_dtoa_r+0x5b0>
 8008736:	2000      	movs	r0, #0
 8008738:	4928      	ldr	r1, [pc, #160]	; (80087dc <_dtoa_r+0x5ac>)
 800873a:	f7f7 fff7 	bl	800072c <__aeabi_ddiv>
 800873e:	463b      	mov	r3, r7
 8008740:	4632      	mov	r2, r6
 8008742:	f7f7 fd11 	bl	8000168 <__aeabi_dsub>
 8008746:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800874a:	9f03      	ldr	r7, [sp, #12]
 800874c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008750:	f7f8 f972 	bl	8000a38 <__aeabi_d2iz>
 8008754:	4604      	mov	r4, r0
 8008756:	f7f7 fe55 	bl	8000404 <__aeabi_i2d>
 800875a:	4602      	mov	r2, r0
 800875c:	460b      	mov	r3, r1
 800875e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008762:	f7f7 fd01 	bl	8000168 <__aeabi_dsub>
 8008766:	4602      	mov	r2, r0
 8008768:	460b      	mov	r3, r1
 800876a:	3430      	adds	r4, #48	; 0x30
 800876c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008770:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008774:	f807 4b01 	strb.w	r4, [r7], #1
 8008778:	f7f8 f920 	bl	80009bc <__aeabi_dcmplt>
 800877c:	2800      	cmp	r0, #0
 800877e:	d173      	bne.n	8008868 <_dtoa_r+0x638>
 8008780:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008784:	2000      	movs	r0, #0
 8008786:	4911      	ldr	r1, [pc, #68]	; (80087cc <_dtoa_r+0x59c>)
 8008788:	f7f7 fcee 	bl	8000168 <__aeabi_dsub>
 800878c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008790:	f7f8 f914 	bl	80009bc <__aeabi_dcmplt>
 8008794:	2800      	cmp	r0, #0
 8008796:	f040 80b6 	bne.w	8008906 <_dtoa_r+0x6d6>
 800879a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800879c:	429f      	cmp	r7, r3
 800879e:	f43f af7a 	beq.w	8008696 <_dtoa_r+0x466>
 80087a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80087a6:	2200      	movs	r2, #0
 80087a8:	4b09      	ldr	r3, [pc, #36]	; (80087d0 <_dtoa_r+0x5a0>)
 80087aa:	f7f7 fe95 	bl	80004d8 <__aeabi_dmul>
 80087ae:	2200      	movs	r2, #0
 80087b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80087b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087b8:	4b05      	ldr	r3, [pc, #20]	; (80087d0 <_dtoa_r+0x5a0>)
 80087ba:	f7f7 fe8d 	bl	80004d8 <__aeabi_dmul>
 80087be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087c2:	e7c3      	b.n	800874c <_dtoa_r+0x51c>
 80087c4:	0800a5a0 	.word	0x0800a5a0
 80087c8:	0800a578 	.word	0x0800a578
 80087cc:	3ff00000 	.word	0x3ff00000
 80087d0:	40240000 	.word	0x40240000
 80087d4:	401c0000 	.word	0x401c0000
 80087d8:	40140000 	.word	0x40140000
 80087dc:	3fe00000 	.word	0x3fe00000
 80087e0:	4630      	mov	r0, r6
 80087e2:	4639      	mov	r1, r7
 80087e4:	f7f7 fe78 	bl	80004d8 <__aeabi_dmul>
 80087e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80087ee:	9c03      	ldr	r4, [sp, #12]
 80087f0:	9314      	str	r3, [sp, #80]	; 0x50
 80087f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087f6:	f7f8 f91f 	bl	8000a38 <__aeabi_d2iz>
 80087fa:	9015      	str	r0, [sp, #84]	; 0x54
 80087fc:	f7f7 fe02 	bl	8000404 <__aeabi_i2d>
 8008800:	4602      	mov	r2, r0
 8008802:	460b      	mov	r3, r1
 8008804:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008808:	f7f7 fcae 	bl	8000168 <__aeabi_dsub>
 800880c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800880e:	4606      	mov	r6, r0
 8008810:	3330      	adds	r3, #48	; 0x30
 8008812:	f804 3b01 	strb.w	r3, [r4], #1
 8008816:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008818:	460f      	mov	r7, r1
 800881a:	429c      	cmp	r4, r3
 800881c:	f04f 0200 	mov.w	r2, #0
 8008820:	d124      	bne.n	800886c <_dtoa_r+0x63c>
 8008822:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008826:	4baf      	ldr	r3, [pc, #700]	; (8008ae4 <_dtoa_r+0x8b4>)
 8008828:	f7f7 fca0 	bl	800016c <__adddf3>
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	4630      	mov	r0, r6
 8008832:	4639      	mov	r1, r7
 8008834:	f7f8 f8e0 	bl	80009f8 <__aeabi_dcmpgt>
 8008838:	2800      	cmp	r0, #0
 800883a:	d163      	bne.n	8008904 <_dtoa_r+0x6d4>
 800883c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008840:	2000      	movs	r0, #0
 8008842:	49a8      	ldr	r1, [pc, #672]	; (8008ae4 <_dtoa_r+0x8b4>)
 8008844:	f7f7 fc90 	bl	8000168 <__aeabi_dsub>
 8008848:	4602      	mov	r2, r0
 800884a:	460b      	mov	r3, r1
 800884c:	4630      	mov	r0, r6
 800884e:	4639      	mov	r1, r7
 8008850:	f7f8 f8b4 	bl	80009bc <__aeabi_dcmplt>
 8008854:	2800      	cmp	r0, #0
 8008856:	f43f af1e 	beq.w	8008696 <_dtoa_r+0x466>
 800885a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800885c:	1e7b      	subs	r3, r7, #1
 800885e:	9314      	str	r3, [sp, #80]	; 0x50
 8008860:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008864:	2b30      	cmp	r3, #48	; 0x30
 8008866:	d0f8      	beq.n	800885a <_dtoa_r+0x62a>
 8008868:	46c3      	mov	fp, r8
 800886a:	e03b      	b.n	80088e4 <_dtoa_r+0x6b4>
 800886c:	4b9e      	ldr	r3, [pc, #632]	; (8008ae8 <_dtoa_r+0x8b8>)
 800886e:	f7f7 fe33 	bl	80004d8 <__aeabi_dmul>
 8008872:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008876:	e7bc      	b.n	80087f2 <_dtoa_r+0x5c2>
 8008878:	9f03      	ldr	r7, [sp, #12]
 800887a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800887e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008882:	4640      	mov	r0, r8
 8008884:	4649      	mov	r1, r9
 8008886:	f7f7 ff51 	bl	800072c <__aeabi_ddiv>
 800888a:	f7f8 f8d5 	bl	8000a38 <__aeabi_d2iz>
 800888e:	4604      	mov	r4, r0
 8008890:	f7f7 fdb8 	bl	8000404 <__aeabi_i2d>
 8008894:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008898:	f7f7 fe1e 	bl	80004d8 <__aeabi_dmul>
 800889c:	4602      	mov	r2, r0
 800889e:	460b      	mov	r3, r1
 80088a0:	4640      	mov	r0, r8
 80088a2:	4649      	mov	r1, r9
 80088a4:	f7f7 fc60 	bl	8000168 <__aeabi_dsub>
 80088a8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80088ac:	f807 6b01 	strb.w	r6, [r7], #1
 80088b0:	9e03      	ldr	r6, [sp, #12]
 80088b2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80088b6:	1bbe      	subs	r6, r7, r6
 80088b8:	45b4      	cmp	ip, r6
 80088ba:	4602      	mov	r2, r0
 80088bc:	460b      	mov	r3, r1
 80088be:	d136      	bne.n	800892e <_dtoa_r+0x6fe>
 80088c0:	f7f7 fc54 	bl	800016c <__adddf3>
 80088c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80088c8:	4680      	mov	r8, r0
 80088ca:	4689      	mov	r9, r1
 80088cc:	f7f8 f894 	bl	80009f8 <__aeabi_dcmpgt>
 80088d0:	bb58      	cbnz	r0, 800892a <_dtoa_r+0x6fa>
 80088d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80088d6:	4640      	mov	r0, r8
 80088d8:	4649      	mov	r1, r9
 80088da:	f7f8 f865 	bl	80009a8 <__aeabi_dcmpeq>
 80088de:	b108      	cbz	r0, 80088e4 <_dtoa_r+0x6b4>
 80088e0:	07e3      	lsls	r3, r4, #31
 80088e2:	d422      	bmi.n	800892a <_dtoa_r+0x6fa>
 80088e4:	4651      	mov	r1, sl
 80088e6:	4628      	mov	r0, r5
 80088e8:	f000 fb0e 	bl	8008f08 <_Bfree>
 80088ec:	2300      	movs	r3, #0
 80088ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80088f0:	703b      	strb	r3, [r7, #0]
 80088f2:	f10b 0301 	add.w	r3, fp, #1
 80088f6:	6013      	str	r3, [r2, #0]
 80088f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f43f ace6 	beq.w	80082cc <_dtoa_r+0x9c>
 8008900:	601f      	str	r7, [r3, #0]
 8008902:	e4e3      	b.n	80082cc <_dtoa_r+0x9c>
 8008904:	4627      	mov	r7, r4
 8008906:	463b      	mov	r3, r7
 8008908:	461f      	mov	r7, r3
 800890a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800890e:	2a39      	cmp	r2, #57	; 0x39
 8008910:	d107      	bne.n	8008922 <_dtoa_r+0x6f2>
 8008912:	9a03      	ldr	r2, [sp, #12]
 8008914:	429a      	cmp	r2, r3
 8008916:	d1f7      	bne.n	8008908 <_dtoa_r+0x6d8>
 8008918:	2230      	movs	r2, #48	; 0x30
 800891a:	9903      	ldr	r1, [sp, #12]
 800891c:	f108 0801 	add.w	r8, r8, #1
 8008920:	700a      	strb	r2, [r1, #0]
 8008922:	781a      	ldrb	r2, [r3, #0]
 8008924:	3201      	adds	r2, #1
 8008926:	701a      	strb	r2, [r3, #0]
 8008928:	e79e      	b.n	8008868 <_dtoa_r+0x638>
 800892a:	46d8      	mov	r8, fp
 800892c:	e7eb      	b.n	8008906 <_dtoa_r+0x6d6>
 800892e:	2200      	movs	r2, #0
 8008930:	4b6d      	ldr	r3, [pc, #436]	; (8008ae8 <_dtoa_r+0x8b8>)
 8008932:	f7f7 fdd1 	bl	80004d8 <__aeabi_dmul>
 8008936:	2200      	movs	r2, #0
 8008938:	2300      	movs	r3, #0
 800893a:	4680      	mov	r8, r0
 800893c:	4689      	mov	r9, r1
 800893e:	f7f8 f833 	bl	80009a8 <__aeabi_dcmpeq>
 8008942:	2800      	cmp	r0, #0
 8008944:	d09b      	beq.n	800887e <_dtoa_r+0x64e>
 8008946:	e7cd      	b.n	80088e4 <_dtoa_r+0x6b4>
 8008948:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800894a:	2a00      	cmp	r2, #0
 800894c:	f000 80c4 	beq.w	8008ad8 <_dtoa_r+0x8a8>
 8008950:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008952:	2a01      	cmp	r2, #1
 8008954:	f300 80a8 	bgt.w	8008aa8 <_dtoa_r+0x878>
 8008958:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800895a:	2a00      	cmp	r2, #0
 800895c:	f000 80a0 	beq.w	8008aa0 <_dtoa_r+0x870>
 8008960:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008964:	464f      	mov	r7, r9
 8008966:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008968:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800896a:	2101      	movs	r1, #1
 800896c:	441a      	add	r2, r3
 800896e:	4628      	mov	r0, r5
 8008970:	4499      	add	r9, r3
 8008972:	9209      	str	r2, [sp, #36]	; 0x24
 8008974:	f000 fb7e 	bl	8009074 <__i2b>
 8008978:	4606      	mov	r6, r0
 800897a:	b15f      	cbz	r7, 8008994 <_dtoa_r+0x764>
 800897c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800897e:	2b00      	cmp	r3, #0
 8008980:	dd08      	ble.n	8008994 <_dtoa_r+0x764>
 8008982:	42bb      	cmp	r3, r7
 8008984:	bfa8      	it	ge
 8008986:	463b      	movge	r3, r7
 8008988:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800898a:	eba9 0903 	sub.w	r9, r9, r3
 800898e:	1aff      	subs	r7, r7, r3
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	9309      	str	r3, [sp, #36]	; 0x24
 8008994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008996:	b1f3      	cbz	r3, 80089d6 <_dtoa_r+0x7a6>
 8008998:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800899a:	2b00      	cmp	r3, #0
 800899c:	f000 80a0 	beq.w	8008ae0 <_dtoa_r+0x8b0>
 80089a0:	2c00      	cmp	r4, #0
 80089a2:	dd10      	ble.n	80089c6 <_dtoa_r+0x796>
 80089a4:	4631      	mov	r1, r6
 80089a6:	4622      	mov	r2, r4
 80089a8:	4628      	mov	r0, r5
 80089aa:	f000 fc21 	bl	80091f0 <__pow5mult>
 80089ae:	4652      	mov	r2, sl
 80089b0:	4601      	mov	r1, r0
 80089b2:	4606      	mov	r6, r0
 80089b4:	4628      	mov	r0, r5
 80089b6:	f000 fb73 	bl	80090a0 <__multiply>
 80089ba:	4680      	mov	r8, r0
 80089bc:	4651      	mov	r1, sl
 80089be:	4628      	mov	r0, r5
 80089c0:	f000 faa2 	bl	8008f08 <_Bfree>
 80089c4:	46c2      	mov	sl, r8
 80089c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089c8:	1b1a      	subs	r2, r3, r4
 80089ca:	d004      	beq.n	80089d6 <_dtoa_r+0x7a6>
 80089cc:	4651      	mov	r1, sl
 80089ce:	4628      	mov	r0, r5
 80089d0:	f000 fc0e 	bl	80091f0 <__pow5mult>
 80089d4:	4682      	mov	sl, r0
 80089d6:	2101      	movs	r1, #1
 80089d8:	4628      	mov	r0, r5
 80089da:	f000 fb4b 	bl	8009074 <__i2b>
 80089de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089e0:	4604      	mov	r4, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f340 8082 	ble.w	8008aec <_dtoa_r+0x8bc>
 80089e8:	461a      	mov	r2, r3
 80089ea:	4601      	mov	r1, r0
 80089ec:	4628      	mov	r0, r5
 80089ee:	f000 fbff 	bl	80091f0 <__pow5mult>
 80089f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089f4:	4604      	mov	r4, r0
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	dd7b      	ble.n	8008af2 <_dtoa_r+0x8c2>
 80089fa:	f04f 0800 	mov.w	r8, #0
 80089fe:	6923      	ldr	r3, [r4, #16]
 8008a00:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008a04:	6918      	ldr	r0, [r3, #16]
 8008a06:	f000 fae7 	bl	8008fd8 <__hi0bits>
 8008a0a:	f1c0 0020 	rsb	r0, r0, #32
 8008a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a10:	4418      	add	r0, r3
 8008a12:	f010 001f 	ands.w	r0, r0, #31
 8008a16:	f000 8092 	beq.w	8008b3e <_dtoa_r+0x90e>
 8008a1a:	f1c0 0320 	rsb	r3, r0, #32
 8008a1e:	2b04      	cmp	r3, #4
 8008a20:	f340 8085 	ble.w	8008b2e <_dtoa_r+0x8fe>
 8008a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a26:	f1c0 001c 	rsb	r0, r0, #28
 8008a2a:	4403      	add	r3, r0
 8008a2c:	4481      	add	r9, r0
 8008a2e:	4407      	add	r7, r0
 8008a30:	9309      	str	r3, [sp, #36]	; 0x24
 8008a32:	f1b9 0f00 	cmp.w	r9, #0
 8008a36:	dd05      	ble.n	8008a44 <_dtoa_r+0x814>
 8008a38:	4651      	mov	r1, sl
 8008a3a:	464a      	mov	r2, r9
 8008a3c:	4628      	mov	r0, r5
 8008a3e:	f000 fc31 	bl	80092a4 <__lshift>
 8008a42:	4682      	mov	sl, r0
 8008a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	dd05      	ble.n	8008a56 <_dtoa_r+0x826>
 8008a4a:	4621      	mov	r1, r4
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	4628      	mov	r0, r5
 8008a50:	f000 fc28 	bl	80092a4 <__lshift>
 8008a54:	4604      	mov	r4, r0
 8008a56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d072      	beq.n	8008b42 <_dtoa_r+0x912>
 8008a5c:	4621      	mov	r1, r4
 8008a5e:	4650      	mov	r0, sl
 8008a60:	f000 fc8c 	bl	800937c <__mcmp>
 8008a64:	2800      	cmp	r0, #0
 8008a66:	da6c      	bge.n	8008b42 <_dtoa_r+0x912>
 8008a68:	2300      	movs	r3, #0
 8008a6a:	4651      	mov	r1, sl
 8008a6c:	220a      	movs	r2, #10
 8008a6e:	4628      	mov	r0, r5
 8008a70:	f000 fa6c 	bl	8008f4c <__multadd>
 8008a74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a76:	4682      	mov	sl, r0
 8008a78:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f000 81ac 	beq.w	8008dda <_dtoa_r+0xbaa>
 8008a82:	2300      	movs	r3, #0
 8008a84:	4631      	mov	r1, r6
 8008a86:	220a      	movs	r2, #10
 8008a88:	4628      	mov	r0, r5
 8008a8a:	f000 fa5f 	bl	8008f4c <__multadd>
 8008a8e:	9b06      	ldr	r3, [sp, #24]
 8008a90:	4606      	mov	r6, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	f300 8093 	bgt.w	8008bbe <_dtoa_r+0x98e>
 8008a98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	dc59      	bgt.n	8008b52 <_dtoa_r+0x922>
 8008a9e:	e08e      	b.n	8008bbe <_dtoa_r+0x98e>
 8008aa0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008aa2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008aa6:	e75d      	b.n	8008964 <_dtoa_r+0x734>
 8008aa8:	9b08      	ldr	r3, [sp, #32]
 8008aaa:	1e5c      	subs	r4, r3, #1
 8008aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aae:	42a3      	cmp	r3, r4
 8008ab0:	bfbf      	itttt	lt
 8008ab2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008ab4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8008ab6:	1ae3      	sublt	r3, r4, r3
 8008ab8:	18d2      	addlt	r2, r2, r3
 8008aba:	bfa8      	it	ge
 8008abc:	1b1c      	subge	r4, r3, r4
 8008abe:	9b08      	ldr	r3, [sp, #32]
 8008ac0:	bfbe      	ittt	lt
 8008ac2:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008ac4:	920e      	strlt	r2, [sp, #56]	; 0x38
 8008ac6:	2400      	movlt	r4, #0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	bfb5      	itete	lt
 8008acc:	eba9 0703 	sublt.w	r7, r9, r3
 8008ad0:	464f      	movge	r7, r9
 8008ad2:	2300      	movlt	r3, #0
 8008ad4:	9b08      	ldrge	r3, [sp, #32]
 8008ad6:	e747      	b.n	8008968 <_dtoa_r+0x738>
 8008ad8:	464f      	mov	r7, r9
 8008ada:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008adc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008ade:	e74c      	b.n	800897a <_dtoa_r+0x74a>
 8008ae0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ae2:	e773      	b.n	80089cc <_dtoa_r+0x79c>
 8008ae4:	3fe00000 	.word	0x3fe00000
 8008ae8:	40240000 	.word	0x40240000
 8008aec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	dc18      	bgt.n	8008b24 <_dtoa_r+0x8f4>
 8008af2:	9b04      	ldr	r3, [sp, #16]
 8008af4:	b9b3      	cbnz	r3, 8008b24 <_dtoa_r+0x8f4>
 8008af6:	9b05      	ldr	r3, [sp, #20]
 8008af8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008afc:	b993      	cbnz	r3, 8008b24 <_dtoa_r+0x8f4>
 8008afe:	9b05      	ldr	r3, [sp, #20]
 8008b00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b04:	0d1b      	lsrs	r3, r3, #20
 8008b06:	051b      	lsls	r3, r3, #20
 8008b08:	b17b      	cbz	r3, 8008b2a <_dtoa_r+0x8fa>
 8008b0a:	f04f 0801 	mov.w	r8, #1
 8008b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b10:	f109 0901 	add.w	r9, r9, #1
 8008b14:	3301      	adds	r3, #1
 8008b16:	9309      	str	r3, [sp, #36]	; 0x24
 8008b18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	f47f af6f 	bne.w	80089fe <_dtoa_r+0x7ce>
 8008b20:	2001      	movs	r0, #1
 8008b22:	e774      	b.n	8008a0e <_dtoa_r+0x7de>
 8008b24:	f04f 0800 	mov.w	r8, #0
 8008b28:	e7f6      	b.n	8008b18 <_dtoa_r+0x8e8>
 8008b2a:	4698      	mov	r8, r3
 8008b2c:	e7f4      	b.n	8008b18 <_dtoa_r+0x8e8>
 8008b2e:	d080      	beq.n	8008a32 <_dtoa_r+0x802>
 8008b30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b32:	331c      	adds	r3, #28
 8008b34:	441a      	add	r2, r3
 8008b36:	4499      	add	r9, r3
 8008b38:	441f      	add	r7, r3
 8008b3a:	9209      	str	r2, [sp, #36]	; 0x24
 8008b3c:	e779      	b.n	8008a32 <_dtoa_r+0x802>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	e7f6      	b.n	8008b30 <_dtoa_r+0x900>
 8008b42:	9b08      	ldr	r3, [sp, #32]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	dc34      	bgt.n	8008bb2 <_dtoa_r+0x982>
 8008b48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	dd31      	ble.n	8008bb2 <_dtoa_r+0x982>
 8008b4e:	9b08      	ldr	r3, [sp, #32]
 8008b50:	9306      	str	r3, [sp, #24]
 8008b52:	9b06      	ldr	r3, [sp, #24]
 8008b54:	b963      	cbnz	r3, 8008b70 <_dtoa_r+0x940>
 8008b56:	4621      	mov	r1, r4
 8008b58:	2205      	movs	r2, #5
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	f000 f9f6 	bl	8008f4c <__multadd>
 8008b60:	4601      	mov	r1, r0
 8008b62:	4604      	mov	r4, r0
 8008b64:	4650      	mov	r0, sl
 8008b66:	f000 fc09 	bl	800937c <__mcmp>
 8008b6a:	2800      	cmp	r0, #0
 8008b6c:	f73f adbf 	bgt.w	80086ee <_dtoa_r+0x4be>
 8008b70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008b72:	9f03      	ldr	r7, [sp, #12]
 8008b74:	ea6f 0b03 	mvn.w	fp, r3
 8008b78:	f04f 0800 	mov.w	r8, #0
 8008b7c:	4621      	mov	r1, r4
 8008b7e:	4628      	mov	r0, r5
 8008b80:	f000 f9c2 	bl	8008f08 <_Bfree>
 8008b84:	2e00      	cmp	r6, #0
 8008b86:	f43f aead 	beq.w	80088e4 <_dtoa_r+0x6b4>
 8008b8a:	f1b8 0f00 	cmp.w	r8, #0
 8008b8e:	d005      	beq.n	8008b9c <_dtoa_r+0x96c>
 8008b90:	45b0      	cmp	r8, r6
 8008b92:	d003      	beq.n	8008b9c <_dtoa_r+0x96c>
 8008b94:	4641      	mov	r1, r8
 8008b96:	4628      	mov	r0, r5
 8008b98:	f000 f9b6 	bl	8008f08 <_Bfree>
 8008b9c:	4631      	mov	r1, r6
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	f000 f9b2 	bl	8008f08 <_Bfree>
 8008ba4:	e69e      	b.n	80088e4 <_dtoa_r+0x6b4>
 8008ba6:	2400      	movs	r4, #0
 8008ba8:	4626      	mov	r6, r4
 8008baa:	e7e1      	b.n	8008b70 <_dtoa_r+0x940>
 8008bac:	46c3      	mov	fp, r8
 8008bae:	4626      	mov	r6, r4
 8008bb0:	e59d      	b.n	80086ee <_dtoa_r+0x4be>
 8008bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	f000 80c8 	beq.w	8008d4a <_dtoa_r+0xb1a>
 8008bba:	9b08      	ldr	r3, [sp, #32]
 8008bbc:	9306      	str	r3, [sp, #24]
 8008bbe:	2f00      	cmp	r7, #0
 8008bc0:	dd05      	ble.n	8008bce <_dtoa_r+0x99e>
 8008bc2:	4631      	mov	r1, r6
 8008bc4:	463a      	mov	r2, r7
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	f000 fb6c 	bl	80092a4 <__lshift>
 8008bcc:	4606      	mov	r6, r0
 8008bce:	f1b8 0f00 	cmp.w	r8, #0
 8008bd2:	d05b      	beq.n	8008c8c <_dtoa_r+0xa5c>
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	6871      	ldr	r1, [r6, #4]
 8008bd8:	f000 f956 	bl	8008e88 <_Balloc>
 8008bdc:	4607      	mov	r7, r0
 8008bde:	b928      	cbnz	r0, 8008bec <_dtoa_r+0x9bc>
 8008be0:	4602      	mov	r2, r0
 8008be2:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008be6:	4b81      	ldr	r3, [pc, #516]	; (8008dec <_dtoa_r+0xbbc>)
 8008be8:	f7ff bb36 	b.w	8008258 <_dtoa_r+0x28>
 8008bec:	6932      	ldr	r2, [r6, #16]
 8008bee:	f106 010c 	add.w	r1, r6, #12
 8008bf2:	3202      	adds	r2, #2
 8008bf4:	0092      	lsls	r2, r2, #2
 8008bf6:	300c      	adds	r0, #12
 8008bf8:	f000 feda 	bl	80099b0 <memcpy>
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	4639      	mov	r1, r7
 8008c00:	4628      	mov	r0, r5
 8008c02:	f000 fb4f 	bl	80092a4 <__lshift>
 8008c06:	46b0      	mov	r8, r6
 8008c08:	4606      	mov	r6, r0
 8008c0a:	9b03      	ldr	r3, [sp, #12]
 8008c0c:	9a03      	ldr	r2, [sp, #12]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	9308      	str	r3, [sp, #32]
 8008c12:	9b06      	ldr	r3, [sp, #24]
 8008c14:	4413      	add	r3, r2
 8008c16:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c18:	9b04      	ldr	r3, [sp, #16]
 8008c1a:	f003 0301 	and.w	r3, r3, #1
 8008c1e:	930a      	str	r3, [sp, #40]	; 0x28
 8008c20:	9b08      	ldr	r3, [sp, #32]
 8008c22:	4621      	mov	r1, r4
 8008c24:	3b01      	subs	r3, #1
 8008c26:	4650      	mov	r0, sl
 8008c28:	9304      	str	r3, [sp, #16]
 8008c2a:	f7ff fa78 	bl	800811e <quorem>
 8008c2e:	4641      	mov	r1, r8
 8008c30:	9006      	str	r0, [sp, #24]
 8008c32:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008c36:	4650      	mov	r0, sl
 8008c38:	f000 fba0 	bl	800937c <__mcmp>
 8008c3c:	4632      	mov	r2, r6
 8008c3e:	9009      	str	r0, [sp, #36]	; 0x24
 8008c40:	4621      	mov	r1, r4
 8008c42:	4628      	mov	r0, r5
 8008c44:	f000 fbb6 	bl	80093b4 <__mdiff>
 8008c48:	68c2      	ldr	r2, [r0, #12]
 8008c4a:	4607      	mov	r7, r0
 8008c4c:	bb02      	cbnz	r2, 8008c90 <_dtoa_r+0xa60>
 8008c4e:	4601      	mov	r1, r0
 8008c50:	4650      	mov	r0, sl
 8008c52:	f000 fb93 	bl	800937c <__mcmp>
 8008c56:	4602      	mov	r2, r0
 8008c58:	4639      	mov	r1, r7
 8008c5a:	4628      	mov	r0, r5
 8008c5c:	920c      	str	r2, [sp, #48]	; 0x30
 8008c5e:	f000 f953 	bl	8008f08 <_Bfree>
 8008c62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c66:	9f08      	ldr	r7, [sp, #32]
 8008c68:	ea43 0102 	orr.w	r1, r3, r2
 8008c6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c6e:	4319      	orrs	r1, r3
 8008c70:	d110      	bne.n	8008c94 <_dtoa_r+0xa64>
 8008c72:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008c76:	d029      	beq.n	8008ccc <_dtoa_r+0xa9c>
 8008c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	dd02      	ble.n	8008c84 <_dtoa_r+0xa54>
 8008c7e:	9b06      	ldr	r3, [sp, #24]
 8008c80:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008c84:	9b04      	ldr	r3, [sp, #16]
 8008c86:	f883 9000 	strb.w	r9, [r3]
 8008c8a:	e777      	b.n	8008b7c <_dtoa_r+0x94c>
 8008c8c:	4630      	mov	r0, r6
 8008c8e:	e7ba      	b.n	8008c06 <_dtoa_r+0x9d6>
 8008c90:	2201      	movs	r2, #1
 8008c92:	e7e1      	b.n	8008c58 <_dtoa_r+0xa28>
 8008c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	db04      	blt.n	8008ca4 <_dtoa_r+0xa74>
 8008c9a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008c9c:	430b      	orrs	r3, r1
 8008c9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008ca0:	430b      	orrs	r3, r1
 8008ca2:	d120      	bne.n	8008ce6 <_dtoa_r+0xab6>
 8008ca4:	2a00      	cmp	r2, #0
 8008ca6:	dded      	ble.n	8008c84 <_dtoa_r+0xa54>
 8008ca8:	4651      	mov	r1, sl
 8008caa:	2201      	movs	r2, #1
 8008cac:	4628      	mov	r0, r5
 8008cae:	f000 faf9 	bl	80092a4 <__lshift>
 8008cb2:	4621      	mov	r1, r4
 8008cb4:	4682      	mov	sl, r0
 8008cb6:	f000 fb61 	bl	800937c <__mcmp>
 8008cba:	2800      	cmp	r0, #0
 8008cbc:	dc03      	bgt.n	8008cc6 <_dtoa_r+0xa96>
 8008cbe:	d1e1      	bne.n	8008c84 <_dtoa_r+0xa54>
 8008cc0:	f019 0f01 	tst.w	r9, #1
 8008cc4:	d0de      	beq.n	8008c84 <_dtoa_r+0xa54>
 8008cc6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008cca:	d1d8      	bne.n	8008c7e <_dtoa_r+0xa4e>
 8008ccc:	2339      	movs	r3, #57	; 0x39
 8008cce:	9a04      	ldr	r2, [sp, #16]
 8008cd0:	7013      	strb	r3, [r2, #0]
 8008cd2:	463b      	mov	r3, r7
 8008cd4:	461f      	mov	r7, r3
 8008cd6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	2a39      	cmp	r2, #57	; 0x39
 8008cde:	d06b      	beq.n	8008db8 <_dtoa_r+0xb88>
 8008ce0:	3201      	adds	r2, #1
 8008ce2:	701a      	strb	r2, [r3, #0]
 8008ce4:	e74a      	b.n	8008b7c <_dtoa_r+0x94c>
 8008ce6:	2a00      	cmp	r2, #0
 8008ce8:	dd07      	ble.n	8008cfa <_dtoa_r+0xaca>
 8008cea:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008cee:	d0ed      	beq.n	8008ccc <_dtoa_r+0xa9c>
 8008cf0:	9a04      	ldr	r2, [sp, #16]
 8008cf2:	f109 0301 	add.w	r3, r9, #1
 8008cf6:	7013      	strb	r3, [r2, #0]
 8008cf8:	e740      	b.n	8008b7c <_dtoa_r+0x94c>
 8008cfa:	9b08      	ldr	r3, [sp, #32]
 8008cfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008cfe:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d042      	beq.n	8008d8c <_dtoa_r+0xb5c>
 8008d06:	4651      	mov	r1, sl
 8008d08:	2300      	movs	r3, #0
 8008d0a:	220a      	movs	r2, #10
 8008d0c:	4628      	mov	r0, r5
 8008d0e:	f000 f91d 	bl	8008f4c <__multadd>
 8008d12:	45b0      	cmp	r8, r6
 8008d14:	4682      	mov	sl, r0
 8008d16:	f04f 0300 	mov.w	r3, #0
 8008d1a:	f04f 020a 	mov.w	r2, #10
 8008d1e:	4641      	mov	r1, r8
 8008d20:	4628      	mov	r0, r5
 8008d22:	d107      	bne.n	8008d34 <_dtoa_r+0xb04>
 8008d24:	f000 f912 	bl	8008f4c <__multadd>
 8008d28:	4680      	mov	r8, r0
 8008d2a:	4606      	mov	r6, r0
 8008d2c:	9b08      	ldr	r3, [sp, #32]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	9308      	str	r3, [sp, #32]
 8008d32:	e775      	b.n	8008c20 <_dtoa_r+0x9f0>
 8008d34:	f000 f90a 	bl	8008f4c <__multadd>
 8008d38:	4631      	mov	r1, r6
 8008d3a:	4680      	mov	r8, r0
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	220a      	movs	r2, #10
 8008d40:	4628      	mov	r0, r5
 8008d42:	f000 f903 	bl	8008f4c <__multadd>
 8008d46:	4606      	mov	r6, r0
 8008d48:	e7f0      	b.n	8008d2c <_dtoa_r+0xafc>
 8008d4a:	9b08      	ldr	r3, [sp, #32]
 8008d4c:	9306      	str	r3, [sp, #24]
 8008d4e:	9f03      	ldr	r7, [sp, #12]
 8008d50:	4621      	mov	r1, r4
 8008d52:	4650      	mov	r0, sl
 8008d54:	f7ff f9e3 	bl	800811e <quorem>
 8008d58:	9b03      	ldr	r3, [sp, #12]
 8008d5a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008d5e:	f807 9b01 	strb.w	r9, [r7], #1
 8008d62:	1afa      	subs	r2, r7, r3
 8008d64:	9b06      	ldr	r3, [sp, #24]
 8008d66:	4293      	cmp	r3, r2
 8008d68:	dd07      	ble.n	8008d7a <_dtoa_r+0xb4a>
 8008d6a:	4651      	mov	r1, sl
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	220a      	movs	r2, #10
 8008d70:	4628      	mov	r0, r5
 8008d72:	f000 f8eb 	bl	8008f4c <__multadd>
 8008d76:	4682      	mov	sl, r0
 8008d78:	e7ea      	b.n	8008d50 <_dtoa_r+0xb20>
 8008d7a:	9b06      	ldr	r3, [sp, #24]
 8008d7c:	f04f 0800 	mov.w	r8, #0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	bfcc      	ite	gt
 8008d84:	461f      	movgt	r7, r3
 8008d86:	2701      	movle	r7, #1
 8008d88:	9b03      	ldr	r3, [sp, #12]
 8008d8a:	441f      	add	r7, r3
 8008d8c:	4651      	mov	r1, sl
 8008d8e:	2201      	movs	r2, #1
 8008d90:	4628      	mov	r0, r5
 8008d92:	f000 fa87 	bl	80092a4 <__lshift>
 8008d96:	4621      	mov	r1, r4
 8008d98:	4682      	mov	sl, r0
 8008d9a:	f000 faef 	bl	800937c <__mcmp>
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	dc97      	bgt.n	8008cd2 <_dtoa_r+0xaa2>
 8008da2:	d102      	bne.n	8008daa <_dtoa_r+0xb7a>
 8008da4:	f019 0f01 	tst.w	r9, #1
 8008da8:	d193      	bne.n	8008cd2 <_dtoa_r+0xaa2>
 8008daa:	463b      	mov	r3, r7
 8008dac:	461f      	mov	r7, r3
 8008dae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008db2:	2a30      	cmp	r2, #48	; 0x30
 8008db4:	d0fa      	beq.n	8008dac <_dtoa_r+0xb7c>
 8008db6:	e6e1      	b.n	8008b7c <_dtoa_r+0x94c>
 8008db8:	9a03      	ldr	r2, [sp, #12]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d18a      	bne.n	8008cd4 <_dtoa_r+0xaa4>
 8008dbe:	2331      	movs	r3, #49	; 0x31
 8008dc0:	f10b 0b01 	add.w	fp, fp, #1
 8008dc4:	e797      	b.n	8008cf6 <_dtoa_r+0xac6>
 8008dc6:	4b0a      	ldr	r3, [pc, #40]	; (8008df0 <_dtoa_r+0xbc0>)
 8008dc8:	f7ff ba9f 	b.w	800830a <_dtoa_r+0xda>
 8008dcc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	f47f aa77 	bne.w	80082c2 <_dtoa_r+0x92>
 8008dd4:	4b07      	ldr	r3, [pc, #28]	; (8008df4 <_dtoa_r+0xbc4>)
 8008dd6:	f7ff ba98 	b.w	800830a <_dtoa_r+0xda>
 8008dda:	9b06      	ldr	r3, [sp, #24]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	dcb6      	bgt.n	8008d4e <_dtoa_r+0xb1e>
 8008de0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	f73f aeb5 	bgt.w	8008b52 <_dtoa_r+0x922>
 8008de8:	e7b1      	b.n	8008d4e <_dtoa_r+0xb1e>
 8008dea:	bf00      	nop
 8008dec:	0800a50e 	.word	0x0800a50e
 8008df0:	0800a46e 	.word	0x0800a46e
 8008df4:	0800a492 	.word	0x0800a492

08008df8 <_free_r>:
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	4605      	mov	r5, r0
 8008dfc:	2900      	cmp	r1, #0
 8008dfe:	d040      	beq.n	8008e82 <_free_r+0x8a>
 8008e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e04:	1f0c      	subs	r4, r1, #4
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	bfb8      	it	lt
 8008e0a:	18e4      	addlt	r4, r4, r3
 8008e0c:	f7fe fb10 	bl	8007430 <__malloc_lock>
 8008e10:	4a1c      	ldr	r2, [pc, #112]	; (8008e84 <_free_r+0x8c>)
 8008e12:	6813      	ldr	r3, [r2, #0]
 8008e14:	b933      	cbnz	r3, 8008e24 <_free_r+0x2c>
 8008e16:	6063      	str	r3, [r4, #4]
 8008e18:	6014      	str	r4, [r2, #0]
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e20:	f7fe bb0c 	b.w	800743c <__malloc_unlock>
 8008e24:	42a3      	cmp	r3, r4
 8008e26:	d908      	bls.n	8008e3a <_free_r+0x42>
 8008e28:	6820      	ldr	r0, [r4, #0]
 8008e2a:	1821      	adds	r1, r4, r0
 8008e2c:	428b      	cmp	r3, r1
 8008e2e:	bf01      	itttt	eq
 8008e30:	6819      	ldreq	r1, [r3, #0]
 8008e32:	685b      	ldreq	r3, [r3, #4]
 8008e34:	1809      	addeq	r1, r1, r0
 8008e36:	6021      	streq	r1, [r4, #0]
 8008e38:	e7ed      	b.n	8008e16 <_free_r+0x1e>
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	b10b      	cbz	r3, 8008e44 <_free_r+0x4c>
 8008e40:	42a3      	cmp	r3, r4
 8008e42:	d9fa      	bls.n	8008e3a <_free_r+0x42>
 8008e44:	6811      	ldr	r1, [r2, #0]
 8008e46:	1850      	adds	r0, r2, r1
 8008e48:	42a0      	cmp	r0, r4
 8008e4a:	d10b      	bne.n	8008e64 <_free_r+0x6c>
 8008e4c:	6820      	ldr	r0, [r4, #0]
 8008e4e:	4401      	add	r1, r0
 8008e50:	1850      	adds	r0, r2, r1
 8008e52:	4283      	cmp	r3, r0
 8008e54:	6011      	str	r1, [r2, #0]
 8008e56:	d1e0      	bne.n	8008e1a <_free_r+0x22>
 8008e58:	6818      	ldr	r0, [r3, #0]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	4408      	add	r0, r1
 8008e5e:	6010      	str	r0, [r2, #0]
 8008e60:	6053      	str	r3, [r2, #4]
 8008e62:	e7da      	b.n	8008e1a <_free_r+0x22>
 8008e64:	d902      	bls.n	8008e6c <_free_r+0x74>
 8008e66:	230c      	movs	r3, #12
 8008e68:	602b      	str	r3, [r5, #0]
 8008e6a:	e7d6      	b.n	8008e1a <_free_r+0x22>
 8008e6c:	6820      	ldr	r0, [r4, #0]
 8008e6e:	1821      	adds	r1, r4, r0
 8008e70:	428b      	cmp	r3, r1
 8008e72:	bf01      	itttt	eq
 8008e74:	6819      	ldreq	r1, [r3, #0]
 8008e76:	685b      	ldreq	r3, [r3, #4]
 8008e78:	1809      	addeq	r1, r1, r0
 8008e7a:	6021      	streq	r1, [r4, #0]
 8008e7c:	6063      	str	r3, [r4, #4]
 8008e7e:	6054      	str	r4, [r2, #4]
 8008e80:	e7cb      	b.n	8008e1a <_free_r+0x22>
 8008e82:	bd38      	pop	{r3, r4, r5, pc}
 8008e84:	20000ad4 	.word	0x20000ad4

08008e88 <_Balloc>:
 8008e88:	b570      	push	{r4, r5, r6, lr}
 8008e8a:	69c6      	ldr	r6, [r0, #28]
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	460d      	mov	r5, r1
 8008e90:	b976      	cbnz	r6, 8008eb0 <_Balloc+0x28>
 8008e92:	2010      	movs	r0, #16
 8008e94:	f7fe fa24 	bl	80072e0 <malloc>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	61e0      	str	r0, [r4, #28]
 8008e9c:	b920      	cbnz	r0, 8008ea8 <_Balloc+0x20>
 8008e9e:	216b      	movs	r1, #107	; 0x6b
 8008ea0:	4b17      	ldr	r3, [pc, #92]	; (8008f00 <_Balloc+0x78>)
 8008ea2:	4818      	ldr	r0, [pc, #96]	; (8008f04 <_Balloc+0x7c>)
 8008ea4:	f000 fd92 	bl	80099cc <__assert_func>
 8008ea8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008eac:	6006      	str	r6, [r0, #0]
 8008eae:	60c6      	str	r6, [r0, #12]
 8008eb0:	69e6      	ldr	r6, [r4, #28]
 8008eb2:	68f3      	ldr	r3, [r6, #12]
 8008eb4:	b183      	cbz	r3, 8008ed8 <_Balloc+0x50>
 8008eb6:	69e3      	ldr	r3, [r4, #28]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ebe:	b9b8      	cbnz	r0, 8008ef0 <_Balloc+0x68>
 8008ec0:	2101      	movs	r1, #1
 8008ec2:	fa01 f605 	lsl.w	r6, r1, r5
 8008ec6:	1d72      	adds	r2, r6, #5
 8008ec8:	4620      	mov	r0, r4
 8008eca:	0092      	lsls	r2, r2, #2
 8008ecc:	f000 fd9c 	bl	8009a08 <_calloc_r>
 8008ed0:	b160      	cbz	r0, 8008eec <_Balloc+0x64>
 8008ed2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ed6:	e00e      	b.n	8008ef6 <_Balloc+0x6e>
 8008ed8:	2221      	movs	r2, #33	; 0x21
 8008eda:	2104      	movs	r1, #4
 8008edc:	4620      	mov	r0, r4
 8008ede:	f000 fd93 	bl	8009a08 <_calloc_r>
 8008ee2:	69e3      	ldr	r3, [r4, #28]
 8008ee4:	60f0      	str	r0, [r6, #12]
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d1e4      	bne.n	8008eb6 <_Balloc+0x2e>
 8008eec:	2000      	movs	r0, #0
 8008eee:	bd70      	pop	{r4, r5, r6, pc}
 8008ef0:	6802      	ldr	r2, [r0, #0]
 8008ef2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008efc:	e7f7      	b.n	8008eee <_Balloc+0x66>
 8008efe:	bf00      	nop
 8008f00:	0800a49f 	.word	0x0800a49f
 8008f04:	0800a51f 	.word	0x0800a51f

08008f08 <_Bfree>:
 8008f08:	b570      	push	{r4, r5, r6, lr}
 8008f0a:	69c6      	ldr	r6, [r0, #28]
 8008f0c:	4605      	mov	r5, r0
 8008f0e:	460c      	mov	r4, r1
 8008f10:	b976      	cbnz	r6, 8008f30 <_Bfree+0x28>
 8008f12:	2010      	movs	r0, #16
 8008f14:	f7fe f9e4 	bl	80072e0 <malloc>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	61e8      	str	r0, [r5, #28]
 8008f1c:	b920      	cbnz	r0, 8008f28 <_Bfree+0x20>
 8008f1e:	218f      	movs	r1, #143	; 0x8f
 8008f20:	4b08      	ldr	r3, [pc, #32]	; (8008f44 <_Bfree+0x3c>)
 8008f22:	4809      	ldr	r0, [pc, #36]	; (8008f48 <_Bfree+0x40>)
 8008f24:	f000 fd52 	bl	80099cc <__assert_func>
 8008f28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f2c:	6006      	str	r6, [r0, #0]
 8008f2e:	60c6      	str	r6, [r0, #12]
 8008f30:	b13c      	cbz	r4, 8008f42 <_Bfree+0x3a>
 8008f32:	69eb      	ldr	r3, [r5, #28]
 8008f34:	6862      	ldr	r2, [r4, #4]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f3c:	6021      	str	r1, [r4, #0]
 8008f3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f42:	bd70      	pop	{r4, r5, r6, pc}
 8008f44:	0800a49f 	.word	0x0800a49f
 8008f48:	0800a51f 	.word	0x0800a51f

08008f4c <__multadd>:
 8008f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f50:	4607      	mov	r7, r0
 8008f52:	460c      	mov	r4, r1
 8008f54:	461e      	mov	r6, r3
 8008f56:	2000      	movs	r0, #0
 8008f58:	690d      	ldr	r5, [r1, #16]
 8008f5a:	f101 0c14 	add.w	ip, r1, #20
 8008f5e:	f8dc 3000 	ldr.w	r3, [ip]
 8008f62:	3001      	adds	r0, #1
 8008f64:	b299      	uxth	r1, r3
 8008f66:	fb02 6101 	mla	r1, r2, r1, r6
 8008f6a:	0c1e      	lsrs	r6, r3, #16
 8008f6c:	0c0b      	lsrs	r3, r1, #16
 8008f6e:	fb02 3306 	mla	r3, r2, r6, r3
 8008f72:	b289      	uxth	r1, r1
 8008f74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f78:	4285      	cmp	r5, r0
 8008f7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f7e:	f84c 1b04 	str.w	r1, [ip], #4
 8008f82:	dcec      	bgt.n	8008f5e <__multadd+0x12>
 8008f84:	b30e      	cbz	r6, 8008fca <__multadd+0x7e>
 8008f86:	68a3      	ldr	r3, [r4, #8]
 8008f88:	42ab      	cmp	r3, r5
 8008f8a:	dc19      	bgt.n	8008fc0 <__multadd+0x74>
 8008f8c:	6861      	ldr	r1, [r4, #4]
 8008f8e:	4638      	mov	r0, r7
 8008f90:	3101      	adds	r1, #1
 8008f92:	f7ff ff79 	bl	8008e88 <_Balloc>
 8008f96:	4680      	mov	r8, r0
 8008f98:	b928      	cbnz	r0, 8008fa6 <__multadd+0x5a>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	21ba      	movs	r1, #186	; 0xba
 8008f9e:	4b0c      	ldr	r3, [pc, #48]	; (8008fd0 <__multadd+0x84>)
 8008fa0:	480c      	ldr	r0, [pc, #48]	; (8008fd4 <__multadd+0x88>)
 8008fa2:	f000 fd13 	bl	80099cc <__assert_func>
 8008fa6:	6922      	ldr	r2, [r4, #16]
 8008fa8:	f104 010c 	add.w	r1, r4, #12
 8008fac:	3202      	adds	r2, #2
 8008fae:	0092      	lsls	r2, r2, #2
 8008fb0:	300c      	adds	r0, #12
 8008fb2:	f000 fcfd 	bl	80099b0 <memcpy>
 8008fb6:	4621      	mov	r1, r4
 8008fb8:	4638      	mov	r0, r7
 8008fba:	f7ff ffa5 	bl	8008f08 <_Bfree>
 8008fbe:	4644      	mov	r4, r8
 8008fc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008fc4:	3501      	adds	r5, #1
 8008fc6:	615e      	str	r6, [r3, #20]
 8008fc8:	6125      	str	r5, [r4, #16]
 8008fca:	4620      	mov	r0, r4
 8008fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fd0:	0800a50e 	.word	0x0800a50e
 8008fd4:	0800a51f 	.word	0x0800a51f

08008fd8 <__hi0bits>:
 8008fd8:	0c02      	lsrs	r2, r0, #16
 8008fda:	0412      	lsls	r2, r2, #16
 8008fdc:	4603      	mov	r3, r0
 8008fde:	b9ca      	cbnz	r2, 8009014 <__hi0bits+0x3c>
 8008fe0:	0403      	lsls	r3, r0, #16
 8008fe2:	2010      	movs	r0, #16
 8008fe4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008fe8:	bf04      	itt	eq
 8008fea:	021b      	lsleq	r3, r3, #8
 8008fec:	3008      	addeq	r0, #8
 8008fee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008ff2:	bf04      	itt	eq
 8008ff4:	011b      	lsleq	r3, r3, #4
 8008ff6:	3004      	addeq	r0, #4
 8008ff8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008ffc:	bf04      	itt	eq
 8008ffe:	009b      	lsleq	r3, r3, #2
 8009000:	3002      	addeq	r0, #2
 8009002:	2b00      	cmp	r3, #0
 8009004:	db05      	blt.n	8009012 <__hi0bits+0x3a>
 8009006:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800900a:	f100 0001 	add.w	r0, r0, #1
 800900e:	bf08      	it	eq
 8009010:	2020      	moveq	r0, #32
 8009012:	4770      	bx	lr
 8009014:	2000      	movs	r0, #0
 8009016:	e7e5      	b.n	8008fe4 <__hi0bits+0xc>

08009018 <__lo0bits>:
 8009018:	6803      	ldr	r3, [r0, #0]
 800901a:	4602      	mov	r2, r0
 800901c:	f013 0007 	ands.w	r0, r3, #7
 8009020:	d00b      	beq.n	800903a <__lo0bits+0x22>
 8009022:	07d9      	lsls	r1, r3, #31
 8009024:	d421      	bmi.n	800906a <__lo0bits+0x52>
 8009026:	0798      	lsls	r0, r3, #30
 8009028:	bf49      	itett	mi
 800902a:	085b      	lsrmi	r3, r3, #1
 800902c:	089b      	lsrpl	r3, r3, #2
 800902e:	2001      	movmi	r0, #1
 8009030:	6013      	strmi	r3, [r2, #0]
 8009032:	bf5c      	itt	pl
 8009034:	2002      	movpl	r0, #2
 8009036:	6013      	strpl	r3, [r2, #0]
 8009038:	4770      	bx	lr
 800903a:	b299      	uxth	r1, r3
 800903c:	b909      	cbnz	r1, 8009042 <__lo0bits+0x2a>
 800903e:	2010      	movs	r0, #16
 8009040:	0c1b      	lsrs	r3, r3, #16
 8009042:	b2d9      	uxtb	r1, r3
 8009044:	b909      	cbnz	r1, 800904a <__lo0bits+0x32>
 8009046:	3008      	adds	r0, #8
 8009048:	0a1b      	lsrs	r3, r3, #8
 800904a:	0719      	lsls	r1, r3, #28
 800904c:	bf04      	itt	eq
 800904e:	091b      	lsreq	r3, r3, #4
 8009050:	3004      	addeq	r0, #4
 8009052:	0799      	lsls	r1, r3, #30
 8009054:	bf04      	itt	eq
 8009056:	089b      	lsreq	r3, r3, #2
 8009058:	3002      	addeq	r0, #2
 800905a:	07d9      	lsls	r1, r3, #31
 800905c:	d403      	bmi.n	8009066 <__lo0bits+0x4e>
 800905e:	085b      	lsrs	r3, r3, #1
 8009060:	f100 0001 	add.w	r0, r0, #1
 8009064:	d003      	beq.n	800906e <__lo0bits+0x56>
 8009066:	6013      	str	r3, [r2, #0]
 8009068:	4770      	bx	lr
 800906a:	2000      	movs	r0, #0
 800906c:	4770      	bx	lr
 800906e:	2020      	movs	r0, #32
 8009070:	4770      	bx	lr
	...

08009074 <__i2b>:
 8009074:	b510      	push	{r4, lr}
 8009076:	460c      	mov	r4, r1
 8009078:	2101      	movs	r1, #1
 800907a:	f7ff ff05 	bl	8008e88 <_Balloc>
 800907e:	4602      	mov	r2, r0
 8009080:	b928      	cbnz	r0, 800908e <__i2b+0x1a>
 8009082:	f240 1145 	movw	r1, #325	; 0x145
 8009086:	4b04      	ldr	r3, [pc, #16]	; (8009098 <__i2b+0x24>)
 8009088:	4804      	ldr	r0, [pc, #16]	; (800909c <__i2b+0x28>)
 800908a:	f000 fc9f 	bl	80099cc <__assert_func>
 800908e:	2301      	movs	r3, #1
 8009090:	6144      	str	r4, [r0, #20]
 8009092:	6103      	str	r3, [r0, #16]
 8009094:	bd10      	pop	{r4, pc}
 8009096:	bf00      	nop
 8009098:	0800a50e 	.word	0x0800a50e
 800909c:	0800a51f 	.word	0x0800a51f

080090a0 <__multiply>:
 80090a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a4:	4691      	mov	r9, r2
 80090a6:	690a      	ldr	r2, [r1, #16]
 80090a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80090ac:	460c      	mov	r4, r1
 80090ae:	429a      	cmp	r2, r3
 80090b0:	bfbe      	ittt	lt
 80090b2:	460b      	movlt	r3, r1
 80090b4:	464c      	movlt	r4, r9
 80090b6:	4699      	movlt	r9, r3
 80090b8:	6927      	ldr	r7, [r4, #16]
 80090ba:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80090be:	68a3      	ldr	r3, [r4, #8]
 80090c0:	6861      	ldr	r1, [r4, #4]
 80090c2:	eb07 060a 	add.w	r6, r7, sl
 80090c6:	42b3      	cmp	r3, r6
 80090c8:	b085      	sub	sp, #20
 80090ca:	bfb8      	it	lt
 80090cc:	3101      	addlt	r1, #1
 80090ce:	f7ff fedb 	bl	8008e88 <_Balloc>
 80090d2:	b930      	cbnz	r0, 80090e2 <__multiply+0x42>
 80090d4:	4602      	mov	r2, r0
 80090d6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80090da:	4b43      	ldr	r3, [pc, #268]	; (80091e8 <__multiply+0x148>)
 80090dc:	4843      	ldr	r0, [pc, #268]	; (80091ec <__multiply+0x14c>)
 80090de:	f000 fc75 	bl	80099cc <__assert_func>
 80090e2:	f100 0514 	add.w	r5, r0, #20
 80090e6:	462b      	mov	r3, r5
 80090e8:	2200      	movs	r2, #0
 80090ea:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80090ee:	4543      	cmp	r3, r8
 80090f0:	d321      	bcc.n	8009136 <__multiply+0x96>
 80090f2:	f104 0314 	add.w	r3, r4, #20
 80090f6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80090fa:	f109 0314 	add.w	r3, r9, #20
 80090fe:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009102:	9202      	str	r2, [sp, #8]
 8009104:	1b3a      	subs	r2, r7, r4
 8009106:	3a15      	subs	r2, #21
 8009108:	f022 0203 	bic.w	r2, r2, #3
 800910c:	3204      	adds	r2, #4
 800910e:	f104 0115 	add.w	r1, r4, #21
 8009112:	428f      	cmp	r7, r1
 8009114:	bf38      	it	cc
 8009116:	2204      	movcc	r2, #4
 8009118:	9201      	str	r2, [sp, #4]
 800911a:	9a02      	ldr	r2, [sp, #8]
 800911c:	9303      	str	r3, [sp, #12]
 800911e:	429a      	cmp	r2, r3
 8009120:	d80c      	bhi.n	800913c <__multiply+0x9c>
 8009122:	2e00      	cmp	r6, #0
 8009124:	dd03      	ble.n	800912e <__multiply+0x8e>
 8009126:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800912a:	2b00      	cmp	r3, #0
 800912c:	d05a      	beq.n	80091e4 <__multiply+0x144>
 800912e:	6106      	str	r6, [r0, #16]
 8009130:	b005      	add	sp, #20
 8009132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009136:	f843 2b04 	str.w	r2, [r3], #4
 800913a:	e7d8      	b.n	80090ee <__multiply+0x4e>
 800913c:	f8b3 a000 	ldrh.w	sl, [r3]
 8009140:	f1ba 0f00 	cmp.w	sl, #0
 8009144:	d023      	beq.n	800918e <__multiply+0xee>
 8009146:	46a9      	mov	r9, r5
 8009148:	f04f 0c00 	mov.w	ip, #0
 800914c:	f104 0e14 	add.w	lr, r4, #20
 8009150:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009154:	f8d9 1000 	ldr.w	r1, [r9]
 8009158:	fa1f fb82 	uxth.w	fp, r2
 800915c:	b289      	uxth	r1, r1
 800915e:	fb0a 110b 	mla	r1, sl, fp, r1
 8009162:	4461      	add	r1, ip
 8009164:	f8d9 c000 	ldr.w	ip, [r9]
 8009168:	0c12      	lsrs	r2, r2, #16
 800916a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800916e:	fb0a c202 	mla	r2, sl, r2, ip
 8009172:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009176:	b289      	uxth	r1, r1
 8009178:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800917c:	4577      	cmp	r7, lr
 800917e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009182:	f849 1b04 	str.w	r1, [r9], #4
 8009186:	d8e3      	bhi.n	8009150 <__multiply+0xb0>
 8009188:	9a01      	ldr	r2, [sp, #4]
 800918a:	f845 c002 	str.w	ip, [r5, r2]
 800918e:	9a03      	ldr	r2, [sp, #12]
 8009190:	3304      	adds	r3, #4
 8009192:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009196:	f1b9 0f00 	cmp.w	r9, #0
 800919a:	d021      	beq.n	80091e0 <__multiply+0x140>
 800919c:	46ae      	mov	lr, r5
 800919e:	f04f 0a00 	mov.w	sl, #0
 80091a2:	6829      	ldr	r1, [r5, #0]
 80091a4:	f104 0c14 	add.w	ip, r4, #20
 80091a8:	f8bc b000 	ldrh.w	fp, [ip]
 80091ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80091b0:	b289      	uxth	r1, r1
 80091b2:	fb09 220b 	mla	r2, r9, fp, r2
 80091b6:	4452      	add	r2, sl
 80091b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80091bc:	f84e 1b04 	str.w	r1, [lr], #4
 80091c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80091c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80091c8:	f8be 1000 	ldrh.w	r1, [lr]
 80091cc:	4567      	cmp	r7, ip
 80091ce:	fb09 110a 	mla	r1, r9, sl, r1
 80091d2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80091d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80091da:	d8e5      	bhi.n	80091a8 <__multiply+0x108>
 80091dc:	9a01      	ldr	r2, [sp, #4]
 80091de:	50a9      	str	r1, [r5, r2]
 80091e0:	3504      	adds	r5, #4
 80091e2:	e79a      	b.n	800911a <__multiply+0x7a>
 80091e4:	3e01      	subs	r6, #1
 80091e6:	e79c      	b.n	8009122 <__multiply+0x82>
 80091e8:	0800a50e 	.word	0x0800a50e
 80091ec:	0800a51f 	.word	0x0800a51f

080091f0 <__pow5mult>:
 80091f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091f4:	4615      	mov	r5, r2
 80091f6:	f012 0203 	ands.w	r2, r2, #3
 80091fa:	4606      	mov	r6, r0
 80091fc:	460f      	mov	r7, r1
 80091fe:	d007      	beq.n	8009210 <__pow5mult+0x20>
 8009200:	4c25      	ldr	r4, [pc, #148]	; (8009298 <__pow5mult+0xa8>)
 8009202:	3a01      	subs	r2, #1
 8009204:	2300      	movs	r3, #0
 8009206:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800920a:	f7ff fe9f 	bl	8008f4c <__multadd>
 800920e:	4607      	mov	r7, r0
 8009210:	10ad      	asrs	r5, r5, #2
 8009212:	d03d      	beq.n	8009290 <__pow5mult+0xa0>
 8009214:	69f4      	ldr	r4, [r6, #28]
 8009216:	b97c      	cbnz	r4, 8009238 <__pow5mult+0x48>
 8009218:	2010      	movs	r0, #16
 800921a:	f7fe f861 	bl	80072e0 <malloc>
 800921e:	4602      	mov	r2, r0
 8009220:	61f0      	str	r0, [r6, #28]
 8009222:	b928      	cbnz	r0, 8009230 <__pow5mult+0x40>
 8009224:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009228:	4b1c      	ldr	r3, [pc, #112]	; (800929c <__pow5mult+0xac>)
 800922a:	481d      	ldr	r0, [pc, #116]	; (80092a0 <__pow5mult+0xb0>)
 800922c:	f000 fbce 	bl	80099cc <__assert_func>
 8009230:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009234:	6004      	str	r4, [r0, #0]
 8009236:	60c4      	str	r4, [r0, #12]
 8009238:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800923c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009240:	b94c      	cbnz	r4, 8009256 <__pow5mult+0x66>
 8009242:	f240 2171 	movw	r1, #625	; 0x271
 8009246:	4630      	mov	r0, r6
 8009248:	f7ff ff14 	bl	8009074 <__i2b>
 800924c:	2300      	movs	r3, #0
 800924e:	4604      	mov	r4, r0
 8009250:	f8c8 0008 	str.w	r0, [r8, #8]
 8009254:	6003      	str	r3, [r0, #0]
 8009256:	f04f 0900 	mov.w	r9, #0
 800925a:	07eb      	lsls	r3, r5, #31
 800925c:	d50a      	bpl.n	8009274 <__pow5mult+0x84>
 800925e:	4639      	mov	r1, r7
 8009260:	4622      	mov	r2, r4
 8009262:	4630      	mov	r0, r6
 8009264:	f7ff ff1c 	bl	80090a0 <__multiply>
 8009268:	4680      	mov	r8, r0
 800926a:	4639      	mov	r1, r7
 800926c:	4630      	mov	r0, r6
 800926e:	f7ff fe4b 	bl	8008f08 <_Bfree>
 8009272:	4647      	mov	r7, r8
 8009274:	106d      	asrs	r5, r5, #1
 8009276:	d00b      	beq.n	8009290 <__pow5mult+0xa0>
 8009278:	6820      	ldr	r0, [r4, #0]
 800927a:	b938      	cbnz	r0, 800928c <__pow5mult+0x9c>
 800927c:	4622      	mov	r2, r4
 800927e:	4621      	mov	r1, r4
 8009280:	4630      	mov	r0, r6
 8009282:	f7ff ff0d 	bl	80090a0 <__multiply>
 8009286:	6020      	str	r0, [r4, #0]
 8009288:	f8c0 9000 	str.w	r9, [r0]
 800928c:	4604      	mov	r4, r0
 800928e:	e7e4      	b.n	800925a <__pow5mult+0x6a>
 8009290:	4638      	mov	r0, r7
 8009292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009296:	bf00      	nop
 8009298:	0800a668 	.word	0x0800a668
 800929c:	0800a49f 	.word	0x0800a49f
 80092a0:	0800a51f 	.word	0x0800a51f

080092a4 <__lshift>:
 80092a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092a8:	460c      	mov	r4, r1
 80092aa:	4607      	mov	r7, r0
 80092ac:	4691      	mov	r9, r2
 80092ae:	6923      	ldr	r3, [r4, #16]
 80092b0:	6849      	ldr	r1, [r1, #4]
 80092b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80092b6:	68a3      	ldr	r3, [r4, #8]
 80092b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80092bc:	f108 0601 	add.w	r6, r8, #1
 80092c0:	42b3      	cmp	r3, r6
 80092c2:	db0b      	blt.n	80092dc <__lshift+0x38>
 80092c4:	4638      	mov	r0, r7
 80092c6:	f7ff fddf 	bl	8008e88 <_Balloc>
 80092ca:	4605      	mov	r5, r0
 80092cc:	b948      	cbnz	r0, 80092e2 <__lshift+0x3e>
 80092ce:	4602      	mov	r2, r0
 80092d0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80092d4:	4b27      	ldr	r3, [pc, #156]	; (8009374 <__lshift+0xd0>)
 80092d6:	4828      	ldr	r0, [pc, #160]	; (8009378 <__lshift+0xd4>)
 80092d8:	f000 fb78 	bl	80099cc <__assert_func>
 80092dc:	3101      	adds	r1, #1
 80092de:	005b      	lsls	r3, r3, #1
 80092e0:	e7ee      	b.n	80092c0 <__lshift+0x1c>
 80092e2:	2300      	movs	r3, #0
 80092e4:	f100 0114 	add.w	r1, r0, #20
 80092e8:	f100 0210 	add.w	r2, r0, #16
 80092ec:	4618      	mov	r0, r3
 80092ee:	4553      	cmp	r3, sl
 80092f0:	db33      	blt.n	800935a <__lshift+0xb6>
 80092f2:	6920      	ldr	r0, [r4, #16]
 80092f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80092f8:	f104 0314 	add.w	r3, r4, #20
 80092fc:	f019 091f 	ands.w	r9, r9, #31
 8009300:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009304:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009308:	d02b      	beq.n	8009362 <__lshift+0xbe>
 800930a:	468a      	mov	sl, r1
 800930c:	2200      	movs	r2, #0
 800930e:	f1c9 0e20 	rsb	lr, r9, #32
 8009312:	6818      	ldr	r0, [r3, #0]
 8009314:	fa00 f009 	lsl.w	r0, r0, r9
 8009318:	4310      	orrs	r0, r2
 800931a:	f84a 0b04 	str.w	r0, [sl], #4
 800931e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009322:	459c      	cmp	ip, r3
 8009324:	fa22 f20e 	lsr.w	r2, r2, lr
 8009328:	d8f3      	bhi.n	8009312 <__lshift+0x6e>
 800932a:	ebac 0304 	sub.w	r3, ip, r4
 800932e:	3b15      	subs	r3, #21
 8009330:	f023 0303 	bic.w	r3, r3, #3
 8009334:	3304      	adds	r3, #4
 8009336:	f104 0015 	add.w	r0, r4, #21
 800933a:	4584      	cmp	ip, r0
 800933c:	bf38      	it	cc
 800933e:	2304      	movcc	r3, #4
 8009340:	50ca      	str	r2, [r1, r3]
 8009342:	b10a      	cbz	r2, 8009348 <__lshift+0xa4>
 8009344:	f108 0602 	add.w	r6, r8, #2
 8009348:	3e01      	subs	r6, #1
 800934a:	4638      	mov	r0, r7
 800934c:	4621      	mov	r1, r4
 800934e:	612e      	str	r6, [r5, #16]
 8009350:	f7ff fdda 	bl	8008f08 <_Bfree>
 8009354:	4628      	mov	r0, r5
 8009356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800935a:	f842 0f04 	str.w	r0, [r2, #4]!
 800935e:	3301      	adds	r3, #1
 8009360:	e7c5      	b.n	80092ee <__lshift+0x4a>
 8009362:	3904      	subs	r1, #4
 8009364:	f853 2b04 	ldr.w	r2, [r3], #4
 8009368:	459c      	cmp	ip, r3
 800936a:	f841 2f04 	str.w	r2, [r1, #4]!
 800936e:	d8f9      	bhi.n	8009364 <__lshift+0xc0>
 8009370:	e7ea      	b.n	8009348 <__lshift+0xa4>
 8009372:	bf00      	nop
 8009374:	0800a50e 	.word	0x0800a50e
 8009378:	0800a51f 	.word	0x0800a51f

0800937c <__mcmp>:
 800937c:	4603      	mov	r3, r0
 800937e:	690a      	ldr	r2, [r1, #16]
 8009380:	6900      	ldr	r0, [r0, #16]
 8009382:	b530      	push	{r4, r5, lr}
 8009384:	1a80      	subs	r0, r0, r2
 8009386:	d10d      	bne.n	80093a4 <__mcmp+0x28>
 8009388:	3314      	adds	r3, #20
 800938a:	3114      	adds	r1, #20
 800938c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009390:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009394:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009398:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800939c:	4295      	cmp	r5, r2
 800939e:	d002      	beq.n	80093a6 <__mcmp+0x2a>
 80093a0:	d304      	bcc.n	80093ac <__mcmp+0x30>
 80093a2:	2001      	movs	r0, #1
 80093a4:	bd30      	pop	{r4, r5, pc}
 80093a6:	42a3      	cmp	r3, r4
 80093a8:	d3f4      	bcc.n	8009394 <__mcmp+0x18>
 80093aa:	e7fb      	b.n	80093a4 <__mcmp+0x28>
 80093ac:	f04f 30ff 	mov.w	r0, #4294967295
 80093b0:	e7f8      	b.n	80093a4 <__mcmp+0x28>
	...

080093b4 <__mdiff>:
 80093b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b8:	460d      	mov	r5, r1
 80093ba:	4607      	mov	r7, r0
 80093bc:	4611      	mov	r1, r2
 80093be:	4628      	mov	r0, r5
 80093c0:	4614      	mov	r4, r2
 80093c2:	f7ff ffdb 	bl	800937c <__mcmp>
 80093c6:	1e06      	subs	r6, r0, #0
 80093c8:	d111      	bne.n	80093ee <__mdiff+0x3a>
 80093ca:	4631      	mov	r1, r6
 80093cc:	4638      	mov	r0, r7
 80093ce:	f7ff fd5b 	bl	8008e88 <_Balloc>
 80093d2:	4602      	mov	r2, r0
 80093d4:	b928      	cbnz	r0, 80093e2 <__mdiff+0x2e>
 80093d6:	f240 2137 	movw	r1, #567	; 0x237
 80093da:	4b3a      	ldr	r3, [pc, #232]	; (80094c4 <__mdiff+0x110>)
 80093dc:	483a      	ldr	r0, [pc, #232]	; (80094c8 <__mdiff+0x114>)
 80093de:	f000 faf5 	bl	80099cc <__assert_func>
 80093e2:	2301      	movs	r3, #1
 80093e4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80093e8:	4610      	mov	r0, r2
 80093ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ee:	bfa4      	itt	ge
 80093f0:	4623      	movge	r3, r4
 80093f2:	462c      	movge	r4, r5
 80093f4:	4638      	mov	r0, r7
 80093f6:	6861      	ldr	r1, [r4, #4]
 80093f8:	bfa6      	itte	ge
 80093fa:	461d      	movge	r5, r3
 80093fc:	2600      	movge	r6, #0
 80093fe:	2601      	movlt	r6, #1
 8009400:	f7ff fd42 	bl	8008e88 <_Balloc>
 8009404:	4602      	mov	r2, r0
 8009406:	b918      	cbnz	r0, 8009410 <__mdiff+0x5c>
 8009408:	f240 2145 	movw	r1, #581	; 0x245
 800940c:	4b2d      	ldr	r3, [pc, #180]	; (80094c4 <__mdiff+0x110>)
 800940e:	e7e5      	b.n	80093dc <__mdiff+0x28>
 8009410:	f102 0814 	add.w	r8, r2, #20
 8009414:	46c2      	mov	sl, r8
 8009416:	f04f 0c00 	mov.w	ip, #0
 800941a:	6927      	ldr	r7, [r4, #16]
 800941c:	60c6      	str	r6, [r0, #12]
 800941e:	692e      	ldr	r6, [r5, #16]
 8009420:	f104 0014 	add.w	r0, r4, #20
 8009424:	f105 0914 	add.w	r9, r5, #20
 8009428:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800942c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009430:	3410      	adds	r4, #16
 8009432:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009436:	f859 3b04 	ldr.w	r3, [r9], #4
 800943a:	fa1f f18b 	uxth.w	r1, fp
 800943e:	4461      	add	r1, ip
 8009440:	fa1f fc83 	uxth.w	ip, r3
 8009444:	0c1b      	lsrs	r3, r3, #16
 8009446:	eba1 010c 	sub.w	r1, r1, ip
 800944a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800944e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009452:	b289      	uxth	r1, r1
 8009454:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009458:	454e      	cmp	r6, r9
 800945a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800945e:	f84a 1b04 	str.w	r1, [sl], #4
 8009462:	d8e6      	bhi.n	8009432 <__mdiff+0x7e>
 8009464:	1b73      	subs	r3, r6, r5
 8009466:	3b15      	subs	r3, #21
 8009468:	f023 0303 	bic.w	r3, r3, #3
 800946c:	3515      	adds	r5, #21
 800946e:	3304      	adds	r3, #4
 8009470:	42ae      	cmp	r6, r5
 8009472:	bf38      	it	cc
 8009474:	2304      	movcc	r3, #4
 8009476:	4418      	add	r0, r3
 8009478:	4443      	add	r3, r8
 800947a:	461e      	mov	r6, r3
 800947c:	4605      	mov	r5, r0
 800947e:	4575      	cmp	r5, lr
 8009480:	d30e      	bcc.n	80094a0 <__mdiff+0xec>
 8009482:	f10e 0103 	add.w	r1, lr, #3
 8009486:	1a09      	subs	r1, r1, r0
 8009488:	f021 0103 	bic.w	r1, r1, #3
 800948c:	3803      	subs	r0, #3
 800948e:	4586      	cmp	lr, r0
 8009490:	bf38      	it	cc
 8009492:	2100      	movcc	r1, #0
 8009494:	440b      	add	r3, r1
 8009496:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800949a:	b189      	cbz	r1, 80094c0 <__mdiff+0x10c>
 800949c:	6117      	str	r7, [r2, #16]
 800949e:	e7a3      	b.n	80093e8 <__mdiff+0x34>
 80094a0:	f855 8b04 	ldr.w	r8, [r5], #4
 80094a4:	fa1f f188 	uxth.w	r1, r8
 80094a8:	4461      	add	r1, ip
 80094aa:	140c      	asrs	r4, r1, #16
 80094ac:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80094b0:	b289      	uxth	r1, r1
 80094b2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80094b6:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80094ba:	f846 1b04 	str.w	r1, [r6], #4
 80094be:	e7de      	b.n	800947e <__mdiff+0xca>
 80094c0:	3f01      	subs	r7, #1
 80094c2:	e7e8      	b.n	8009496 <__mdiff+0xe2>
 80094c4:	0800a50e 	.word	0x0800a50e
 80094c8:	0800a51f 	.word	0x0800a51f

080094cc <__d2b>:
 80094cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094ce:	2101      	movs	r1, #1
 80094d0:	4617      	mov	r7, r2
 80094d2:	461c      	mov	r4, r3
 80094d4:	9e08      	ldr	r6, [sp, #32]
 80094d6:	f7ff fcd7 	bl	8008e88 <_Balloc>
 80094da:	4605      	mov	r5, r0
 80094dc:	b930      	cbnz	r0, 80094ec <__d2b+0x20>
 80094de:	4602      	mov	r2, r0
 80094e0:	f240 310f 	movw	r1, #783	; 0x30f
 80094e4:	4b22      	ldr	r3, [pc, #136]	; (8009570 <__d2b+0xa4>)
 80094e6:	4823      	ldr	r0, [pc, #140]	; (8009574 <__d2b+0xa8>)
 80094e8:	f000 fa70 	bl	80099cc <__assert_func>
 80094ec:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80094f0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80094f4:	bb24      	cbnz	r4, 8009540 <__d2b+0x74>
 80094f6:	2f00      	cmp	r7, #0
 80094f8:	9301      	str	r3, [sp, #4]
 80094fa:	d026      	beq.n	800954a <__d2b+0x7e>
 80094fc:	4668      	mov	r0, sp
 80094fe:	9700      	str	r7, [sp, #0]
 8009500:	f7ff fd8a 	bl	8009018 <__lo0bits>
 8009504:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009508:	b1e8      	cbz	r0, 8009546 <__d2b+0x7a>
 800950a:	f1c0 0320 	rsb	r3, r0, #32
 800950e:	fa02 f303 	lsl.w	r3, r2, r3
 8009512:	430b      	orrs	r3, r1
 8009514:	40c2      	lsrs	r2, r0
 8009516:	616b      	str	r3, [r5, #20]
 8009518:	9201      	str	r2, [sp, #4]
 800951a:	9b01      	ldr	r3, [sp, #4]
 800951c:	2b00      	cmp	r3, #0
 800951e:	bf14      	ite	ne
 8009520:	2102      	movne	r1, #2
 8009522:	2101      	moveq	r1, #1
 8009524:	61ab      	str	r3, [r5, #24]
 8009526:	6129      	str	r1, [r5, #16]
 8009528:	b1bc      	cbz	r4, 800955a <__d2b+0x8e>
 800952a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800952e:	4404      	add	r4, r0
 8009530:	6034      	str	r4, [r6, #0]
 8009532:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009538:	6018      	str	r0, [r3, #0]
 800953a:	4628      	mov	r0, r5
 800953c:	b003      	add	sp, #12
 800953e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009540:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009544:	e7d7      	b.n	80094f6 <__d2b+0x2a>
 8009546:	6169      	str	r1, [r5, #20]
 8009548:	e7e7      	b.n	800951a <__d2b+0x4e>
 800954a:	a801      	add	r0, sp, #4
 800954c:	f7ff fd64 	bl	8009018 <__lo0bits>
 8009550:	9b01      	ldr	r3, [sp, #4]
 8009552:	2101      	movs	r1, #1
 8009554:	616b      	str	r3, [r5, #20]
 8009556:	3020      	adds	r0, #32
 8009558:	e7e5      	b.n	8009526 <__d2b+0x5a>
 800955a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800955e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8009562:	6030      	str	r0, [r6, #0]
 8009564:	6918      	ldr	r0, [r3, #16]
 8009566:	f7ff fd37 	bl	8008fd8 <__hi0bits>
 800956a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800956e:	e7e2      	b.n	8009536 <__d2b+0x6a>
 8009570:	0800a50e 	.word	0x0800a50e
 8009574:	0800a51f 	.word	0x0800a51f

08009578 <__ssputs_r>:
 8009578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800957c:	461f      	mov	r7, r3
 800957e:	688e      	ldr	r6, [r1, #8]
 8009580:	4682      	mov	sl, r0
 8009582:	42be      	cmp	r6, r7
 8009584:	460c      	mov	r4, r1
 8009586:	4690      	mov	r8, r2
 8009588:	680b      	ldr	r3, [r1, #0]
 800958a:	d82c      	bhi.n	80095e6 <__ssputs_r+0x6e>
 800958c:	898a      	ldrh	r2, [r1, #12]
 800958e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009592:	d026      	beq.n	80095e2 <__ssputs_r+0x6a>
 8009594:	6965      	ldr	r5, [r4, #20]
 8009596:	6909      	ldr	r1, [r1, #16]
 8009598:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800959c:	eba3 0901 	sub.w	r9, r3, r1
 80095a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095a4:	1c7b      	adds	r3, r7, #1
 80095a6:	444b      	add	r3, r9
 80095a8:	106d      	asrs	r5, r5, #1
 80095aa:	429d      	cmp	r5, r3
 80095ac:	bf38      	it	cc
 80095ae:	461d      	movcc	r5, r3
 80095b0:	0553      	lsls	r3, r2, #21
 80095b2:	d527      	bpl.n	8009604 <__ssputs_r+0x8c>
 80095b4:	4629      	mov	r1, r5
 80095b6:	f7fd febb 	bl	8007330 <_malloc_r>
 80095ba:	4606      	mov	r6, r0
 80095bc:	b360      	cbz	r0, 8009618 <__ssputs_r+0xa0>
 80095be:	464a      	mov	r2, r9
 80095c0:	6921      	ldr	r1, [r4, #16]
 80095c2:	f000 f9f5 	bl	80099b0 <memcpy>
 80095c6:	89a3      	ldrh	r3, [r4, #12]
 80095c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80095cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095d0:	81a3      	strh	r3, [r4, #12]
 80095d2:	6126      	str	r6, [r4, #16]
 80095d4:	444e      	add	r6, r9
 80095d6:	6026      	str	r6, [r4, #0]
 80095d8:	463e      	mov	r6, r7
 80095da:	6165      	str	r5, [r4, #20]
 80095dc:	eba5 0509 	sub.w	r5, r5, r9
 80095e0:	60a5      	str	r5, [r4, #8]
 80095e2:	42be      	cmp	r6, r7
 80095e4:	d900      	bls.n	80095e8 <__ssputs_r+0x70>
 80095e6:	463e      	mov	r6, r7
 80095e8:	4632      	mov	r2, r6
 80095ea:	4641      	mov	r1, r8
 80095ec:	6820      	ldr	r0, [r4, #0]
 80095ee:	f000 f9c5 	bl	800997c <memmove>
 80095f2:	2000      	movs	r0, #0
 80095f4:	68a3      	ldr	r3, [r4, #8]
 80095f6:	1b9b      	subs	r3, r3, r6
 80095f8:	60a3      	str	r3, [r4, #8]
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	4433      	add	r3, r6
 80095fe:	6023      	str	r3, [r4, #0]
 8009600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009604:	462a      	mov	r2, r5
 8009606:	f000 fa25 	bl	8009a54 <_realloc_r>
 800960a:	4606      	mov	r6, r0
 800960c:	2800      	cmp	r0, #0
 800960e:	d1e0      	bne.n	80095d2 <__ssputs_r+0x5a>
 8009610:	4650      	mov	r0, sl
 8009612:	6921      	ldr	r1, [r4, #16]
 8009614:	f7ff fbf0 	bl	8008df8 <_free_r>
 8009618:	230c      	movs	r3, #12
 800961a:	f8ca 3000 	str.w	r3, [sl]
 800961e:	89a3      	ldrh	r3, [r4, #12]
 8009620:	f04f 30ff 	mov.w	r0, #4294967295
 8009624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009628:	81a3      	strh	r3, [r4, #12]
 800962a:	e7e9      	b.n	8009600 <__ssputs_r+0x88>

0800962c <_svfiprintf_r>:
 800962c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009630:	4698      	mov	r8, r3
 8009632:	898b      	ldrh	r3, [r1, #12]
 8009634:	4607      	mov	r7, r0
 8009636:	061b      	lsls	r3, r3, #24
 8009638:	460d      	mov	r5, r1
 800963a:	4614      	mov	r4, r2
 800963c:	b09d      	sub	sp, #116	; 0x74
 800963e:	d50e      	bpl.n	800965e <_svfiprintf_r+0x32>
 8009640:	690b      	ldr	r3, [r1, #16]
 8009642:	b963      	cbnz	r3, 800965e <_svfiprintf_r+0x32>
 8009644:	2140      	movs	r1, #64	; 0x40
 8009646:	f7fd fe73 	bl	8007330 <_malloc_r>
 800964a:	6028      	str	r0, [r5, #0]
 800964c:	6128      	str	r0, [r5, #16]
 800964e:	b920      	cbnz	r0, 800965a <_svfiprintf_r+0x2e>
 8009650:	230c      	movs	r3, #12
 8009652:	603b      	str	r3, [r7, #0]
 8009654:	f04f 30ff 	mov.w	r0, #4294967295
 8009658:	e0d0      	b.n	80097fc <_svfiprintf_r+0x1d0>
 800965a:	2340      	movs	r3, #64	; 0x40
 800965c:	616b      	str	r3, [r5, #20]
 800965e:	2300      	movs	r3, #0
 8009660:	9309      	str	r3, [sp, #36]	; 0x24
 8009662:	2320      	movs	r3, #32
 8009664:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009668:	2330      	movs	r3, #48	; 0x30
 800966a:	f04f 0901 	mov.w	r9, #1
 800966e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009672:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009814 <_svfiprintf_r+0x1e8>
 8009676:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800967a:	4623      	mov	r3, r4
 800967c:	469a      	mov	sl, r3
 800967e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009682:	b10a      	cbz	r2, 8009688 <_svfiprintf_r+0x5c>
 8009684:	2a25      	cmp	r2, #37	; 0x25
 8009686:	d1f9      	bne.n	800967c <_svfiprintf_r+0x50>
 8009688:	ebba 0b04 	subs.w	fp, sl, r4
 800968c:	d00b      	beq.n	80096a6 <_svfiprintf_r+0x7a>
 800968e:	465b      	mov	r3, fp
 8009690:	4622      	mov	r2, r4
 8009692:	4629      	mov	r1, r5
 8009694:	4638      	mov	r0, r7
 8009696:	f7ff ff6f 	bl	8009578 <__ssputs_r>
 800969a:	3001      	adds	r0, #1
 800969c:	f000 80a9 	beq.w	80097f2 <_svfiprintf_r+0x1c6>
 80096a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096a2:	445a      	add	r2, fp
 80096a4:	9209      	str	r2, [sp, #36]	; 0x24
 80096a6:	f89a 3000 	ldrb.w	r3, [sl]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f000 80a1 	beq.w	80097f2 <_svfiprintf_r+0x1c6>
 80096b0:	2300      	movs	r3, #0
 80096b2:	f04f 32ff 	mov.w	r2, #4294967295
 80096b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096ba:	f10a 0a01 	add.w	sl, sl, #1
 80096be:	9304      	str	r3, [sp, #16]
 80096c0:	9307      	str	r3, [sp, #28]
 80096c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096c6:	931a      	str	r3, [sp, #104]	; 0x68
 80096c8:	4654      	mov	r4, sl
 80096ca:	2205      	movs	r2, #5
 80096cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096d0:	4850      	ldr	r0, [pc, #320]	; (8009814 <_svfiprintf_r+0x1e8>)
 80096d2:	f7fe fd16 	bl	8008102 <memchr>
 80096d6:	9a04      	ldr	r2, [sp, #16]
 80096d8:	b9d8      	cbnz	r0, 8009712 <_svfiprintf_r+0xe6>
 80096da:	06d0      	lsls	r0, r2, #27
 80096dc:	bf44      	itt	mi
 80096de:	2320      	movmi	r3, #32
 80096e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096e4:	0711      	lsls	r1, r2, #28
 80096e6:	bf44      	itt	mi
 80096e8:	232b      	movmi	r3, #43	; 0x2b
 80096ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096ee:	f89a 3000 	ldrb.w	r3, [sl]
 80096f2:	2b2a      	cmp	r3, #42	; 0x2a
 80096f4:	d015      	beq.n	8009722 <_svfiprintf_r+0xf6>
 80096f6:	4654      	mov	r4, sl
 80096f8:	2000      	movs	r0, #0
 80096fa:	f04f 0c0a 	mov.w	ip, #10
 80096fe:	9a07      	ldr	r2, [sp, #28]
 8009700:	4621      	mov	r1, r4
 8009702:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009706:	3b30      	subs	r3, #48	; 0x30
 8009708:	2b09      	cmp	r3, #9
 800970a:	d94d      	bls.n	80097a8 <_svfiprintf_r+0x17c>
 800970c:	b1b0      	cbz	r0, 800973c <_svfiprintf_r+0x110>
 800970e:	9207      	str	r2, [sp, #28]
 8009710:	e014      	b.n	800973c <_svfiprintf_r+0x110>
 8009712:	eba0 0308 	sub.w	r3, r0, r8
 8009716:	fa09 f303 	lsl.w	r3, r9, r3
 800971a:	4313      	orrs	r3, r2
 800971c:	46a2      	mov	sl, r4
 800971e:	9304      	str	r3, [sp, #16]
 8009720:	e7d2      	b.n	80096c8 <_svfiprintf_r+0x9c>
 8009722:	9b03      	ldr	r3, [sp, #12]
 8009724:	1d19      	adds	r1, r3, #4
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	9103      	str	r1, [sp, #12]
 800972a:	2b00      	cmp	r3, #0
 800972c:	bfbb      	ittet	lt
 800972e:	425b      	neglt	r3, r3
 8009730:	f042 0202 	orrlt.w	r2, r2, #2
 8009734:	9307      	strge	r3, [sp, #28]
 8009736:	9307      	strlt	r3, [sp, #28]
 8009738:	bfb8      	it	lt
 800973a:	9204      	strlt	r2, [sp, #16]
 800973c:	7823      	ldrb	r3, [r4, #0]
 800973e:	2b2e      	cmp	r3, #46	; 0x2e
 8009740:	d10c      	bne.n	800975c <_svfiprintf_r+0x130>
 8009742:	7863      	ldrb	r3, [r4, #1]
 8009744:	2b2a      	cmp	r3, #42	; 0x2a
 8009746:	d134      	bne.n	80097b2 <_svfiprintf_r+0x186>
 8009748:	9b03      	ldr	r3, [sp, #12]
 800974a:	3402      	adds	r4, #2
 800974c:	1d1a      	adds	r2, r3, #4
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	9203      	str	r2, [sp, #12]
 8009752:	2b00      	cmp	r3, #0
 8009754:	bfb8      	it	lt
 8009756:	f04f 33ff 	movlt.w	r3, #4294967295
 800975a:	9305      	str	r3, [sp, #20]
 800975c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009818 <_svfiprintf_r+0x1ec>
 8009760:	2203      	movs	r2, #3
 8009762:	4650      	mov	r0, sl
 8009764:	7821      	ldrb	r1, [r4, #0]
 8009766:	f7fe fccc 	bl	8008102 <memchr>
 800976a:	b138      	cbz	r0, 800977c <_svfiprintf_r+0x150>
 800976c:	2240      	movs	r2, #64	; 0x40
 800976e:	9b04      	ldr	r3, [sp, #16]
 8009770:	eba0 000a 	sub.w	r0, r0, sl
 8009774:	4082      	lsls	r2, r0
 8009776:	4313      	orrs	r3, r2
 8009778:	3401      	adds	r4, #1
 800977a:	9304      	str	r3, [sp, #16]
 800977c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009780:	2206      	movs	r2, #6
 8009782:	4826      	ldr	r0, [pc, #152]	; (800981c <_svfiprintf_r+0x1f0>)
 8009784:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009788:	f7fe fcbb 	bl	8008102 <memchr>
 800978c:	2800      	cmp	r0, #0
 800978e:	d038      	beq.n	8009802 <_svfiprintf_r+0x1d6>
 8009790:	4b23      	ldr	r3, [pc, #140]	; (8009820 <_svfiprintf_r+0x1f4>)
 8009792:	bb1b      	cbnz	r3, 80097dc <_svfiprintf_r+0x1b0>
 8009794:	9b03      	ldr	r3, [sp, #12]
 8009796:	3307      	adds	r3, #7
 8009798:	f023 0307 	bic.w	r3, r3, #7
 800979c:	3308      	adds	r3, #8
 800979e:	9303      	str	r3, [sp, #12]
 80097a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097a2:	4433      	add	r3, r6
 80097a4:	9309      	str	r3, [sp, #36]	; 0x24
 80097a6:	e768      	b.n	800967a <_svfiprintf_r+0x4e>
 80097a8:	460c      	mov	r4, r1
 80097aa:	2001      	movs	r0, #1
 80097ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80097b0:	e7a6      	b.n	8009700 <_svfiprintf_r+0xd4>
 80097b2:	2300      	movs	r3, #0
 80097b4:	f04f 0c0a 	mov.w	ip, #10
 80097b8:	4619      	mov	r1, r3
 80097ba:	3401      	adds	r4, #1
 80097bc:	9305      	str	r3, [sp, #20]
 80097be:	4620      	mov	r0, r4
 80097c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097c4:	3a30      	subs	r2, #48	; 0x30
 80097c6:	2a09      	cmp	r2, #9
 80097c8:	d903      	bls.n	80097d2 <_svfiprintf_r+0x1a6>
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d0c6      	beq.n	800975c <_svfiprintf_r+0x130>
 80097ce:	9105      	str	r1, [sp, #20]
 80097d0:	e7c4      	b.n	800975c <_svfiprintf_r+0x130>
 80097d2:	4604      	mov	r4, r0
 80097d4:	2301      	movs	r3, #1
 80097d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80097da:	e7f0      	b.n	80097be <_svfiprintf_r+0x192>
 80097dc:	ab03      	add	r3, sp, #12
 80097de:	9300      	str	r3, [sp, #0]
 80097e0:	462a      	mov	r2, r5
 80097e2:	4638      	mov	r0, r7
 80097e4:	4b0f      	ldr	r3, [pc, #60]	; (8009824 <_svfiprintf_r+0x1f8>)
 80097e6:	a904      	add	r1, sp, #16
 80097e8:	f7fd feca 	bl	8007580 <_printf_float>
 80097ec:	1c42      	adds	r2, r0, #1
 80097ee:	4606      	mov	r6, r0
 80097f0:	d1d6      	bne.n	80097a0 <_svfiprintf_r+0x174>
 80097f2:	89ab      	ldrh	r3, [r5, #12]
 80097f4:	065b      	lsls	r3, r3, #25
 80097f6:	f53f af2d 	bmi.w	8009654 <_svfiprintf_r+0x28>
 80097fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097fc:	b01d      	add	sp, #116	; 0x74
 80097fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009802:	ab03      	add	r3, sp, #12
 8009804:	9300      	str	r3, [sp, #0]
 8009806:	462a      	mov	r2, r5
 8009808:	4638      	mov	r0, r7
 800980a:	4b06      	ldr	r3, [pc, #24]	; (8009824 <_svfiprintf_r+0x1f8>)
 800980c:	a904      	add	r1, sp, #16
 800980e:	f7fe f957 	bl	8007ac0 <_printf_i>
 8009812:	e7eb      	b.n	80097ec <_svfiprintf_r+0x1c0>
 8009814:	0800a674 	.word	0x0800a674
 8009818:	0800a67a 	.word	0x0800a67a
 800981c:	0800a67e 	.word	0x0800a67e
 8009820:	08007581 	.word	0x08007581
 8009824:	08009579 	.word	0x08009579

08009828 <__sflush_r>:
 8009828:	898a      	ldrh	r2, [r1, #12]
 800982a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800982c:	4605      	mov	r5, r0
 800982e:	0710      	lsls	r0, r2, #28
 8009830:	460c      	mov	r4, r1
 8009832:	d457      	bmi.n	80098e4 <__sflush_r+0xbc>
 8009834:	684b      	ldr	r3, [r1, #4]
 8009836:	2b00      	cmp	r3, #0
 8009838:	dc04      	bgt.n	8009844 <__sflush_r+0x1c>
 800983a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800983c:	2b00      	cmp	r3, #0
 800983e:	dc01      	bgt.n	8009844 <__sflush_r+0x1c>
 8009840:	2000      	movs	r0, #0
 8009842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009844:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009846:	2e00      	cmp	r6, #0
 8009848:	d0fa      	beq.n	8009840 <__sflush_r+0x18>
 800984a:	2300      	movs	r3, #0
 800984c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009850:	682f      	ldr	r7, [r5, #0]
 8009852:	6a21      	ldr	r1, [r4, #32]
 8009854:	602b      	str	r3, [r5, #0]
 8009856:	d032      	beq.n	80098be <__sflush_r+0x96>
 8009858:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800985a:	89a3      	ldrh	r3, [r4, #12]
 800985c:	075a      	lsls	r2, r3, #29
 800985e:	d505      	bpl.n	800986c <__sflush_r+0x44>
 8009860:	6863      	ldr	r3, [r4, #4]
 8009862:	1ac0      	subs	r0, r0, r3
 8009864:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009866:	b10b      	cbz	r3, 800986c <__sflush_r+0x44>
 8009868:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800986a:	1ac0      	subs	r0, r0, r3
 800986c:	2300      	movs	r3, #0
 800986e:	4602      	mov	r2, r0
 8009870:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009872:	4628      	mov	r0, r5
 8009874:	6a21      	ldr	r1, [r4, #32]
 8009876:	47b0      	blx	r6
 8009878:	1c43      	adds	r3, r0, #1
 800987a:	89a3      	ldrh	r3, [r4, #12]
 800987c:	d106      	bne.n	800988c <__sflush_r+0x64>
 800987e:	6829      	ldr	r1, [r5, #0]
 8009880:	291d      	cmp	r1, #29
 8009882:	d82b      	bhi.n	80098dc <__sflush_r+0xb4>
 8009884:	4a28      	ldr	r2, [pc, #160]	; (8009928 <__sflush_r+0x100>)
 8009886:	410a      	asrs	r2, r1
 8009888:	07d6      	lsls	r6, r2, #31
 800988a:	d427      	bmi.n	80098dc <__sflush_r+0xb4>
 800988c:	2200      	movs	r2, #0
 800988e:	6062      	str	r2, [r4, #4]
 8009890:	6922      	ldr	r2, [r4, #16]
 8009892:	04d9      	lsls	r1, r3, #19
 8009894:	6022      	str	r2, [r4, #0]
 8009896:	d504      	bpl.n	80098a2 <__sflush_r+0x7a>
 8009898:	1c42      	adds	r2, r0, #1
 800989a:	d101      	bne.n	80098a0 <__sflush_r+0x78>
 800989c:	682b      	ldr	r3, [r5, #0]
 800989e:	b903      	cbnz	r3, 80098a2 <__sflush_r+0x7a>
 80098a0:	6560      	str	r0, [r4, #84]	; 0x54
 80098a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098a4:	602f      	str	r7, [r5, #0]
 80098a6:	2900      	cmp	r1, #0
 80098a8:	d0ca      	beq.n	8009840 <__sflush_r+0x18>
 80098aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098ae:	4299      	cmp	r1, r3
 80098b0:	d002      	beq.n	80098b8 <__sflush_r+0x90>
 80098b2:	4628      	mov	r0, r5
 80098b4:	f7ff faa0 	bl	8008df8 <_free_r>
 80098b8:	2000      	movs	r0, #0
 80098ba:	6360      	str	r0, [r4, #52]	; 0x34
 80098bc:	e7c1      	b.n	8009842 <__sflush_r+0x1a>
 80098be:	2301      	movs	r3, #1
 80098c0:	4628      	mov	r0, r5
 80098c2:	47b0      	blx	r6
 80098c4:	1c41      	adds	r1, r0, #1
 80098c6:	d1c8      	bne.n	800985a <__sflush_r+0x32>
 80098c8:	682b      	ldr	r3, [r5, #0]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d0c5      	beq.n	800985a <__sflush_r+0x32>
 80098ce:	2b1d      	cmp	r3, #29
 80098d0:	d001      	beq.n	80098d6 <__sflush_r+0xae>
 80098d2:	2b16      	cmp	r3, #22
 80098d4:	d101      	bne.n	80098da <__sflush_r+0xb2>
 80098d6:	602f      	str	r7, [r5, #0]
 80098d8:	e7b2      	b.n	8009840 <__sflush_r+0x18>
 80098da:	89a3      	ldrh	r3, [r4, #12]
 80098dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098e0:	81a3      	strh	r3, [r4, #12]
 80098e2:	e7ae      	b.n	8009842 <__sflush_r+0x1a>
 80098e4:	690f      	ldr	r7, [r1, #16]
 80098e6:	2f00      	cmp	r7, #0
 80098e8:	d0aa      	beq.n	8009840 <__sflush_r+0x18>
 80098ea:	0793      	lsls	r3, r2, #30
 80098ec:	bf18      	it	ne
 80098ee:	2300      	movne	r3, #0
 80098f0:	680e      	ldr	r6, [r1, #0]
 80098f2:	bf08      	it	eq
 80098f4:	694b      	ldreq	r3, [r1, #20]
 80098f6:	1bf6      	subs	r6, r6, r7
 80098f8:	600f      	str	r7, [r1, #0]
 80098fa:	608b      	str	r3, [r1, #8]
 80098fc:	2e00      	cmp	r6, #0
 80098fe:	dd9f      	ble.n	8009840 <__sflush_r+0x18>
 8009900:	4633      	mov	r3, r6
 8009902:	463a      	mov	r2, r7
 8009904:	4628      	mov	r0, r5
 8009906:	6a21      	ldr	r1, [r4, #32]
 8009908:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800990c:	47e0      	blx	ip
 800990e:	2800      	cmp	r0, #0
 8009910:	dc06      	bgt.n	8009920 <__sflush_r+0xf8>
 8009912:	89a3      	ldrh	r3, [r4, #12]
 8009914:	f04f 30ff 	mov.w	r0, #4294967295
 8009918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800991c:	81a3      	strh	r3, [r4, #12]
 800991e:	e790      	b.n	8009842 <__sflush_r+0x1a>
 8009920:	4407      	add	r7, r0
 8009922:	1a36      	subs	r6, r6, r0
 8009924:	e7ea      	b.n	80098fc <__sflush_r+0xd4>
 8009926:	bf00      	nop
 8009928:	dfbffffe 	.word	0xdfbffffe

0800992c <_fflush_r>:
 800992c:	b538      	push	{r3, r4, r5, lr}
 800992e:	690b      	ldr	r3, [r1, #16]
 8009930:	4605      	mov	r5, r0
 8009932:	460c      	mov	r4, r1
 8009934:	b913      	cbnz	r3, 800993c <_fflush_r+0x10>
 8009936:	2500      	movs	r5, #0
 8009938:	4628      	mov	r0, r5
 800993a:	bd38      	pop	{r3, r4, r5, pc}
 800993c:	b118      	cbz	r0, 8009946 <_fflush_r+0x1a>
 800993e:	6a03      	ldr	r3, [r0, #32]
 8009940:	b90b      	cbnz	r3, 8009946 <_fflush_r+0x1a>
 8009942:	f7fe fa6b 	bl	8007e1c <__sinit>
 8009946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d0f3      	beq.n	8009936 <_fflush_r+0xa>
 800994e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009950:	07d0      	lsls	r0, r2, #31
 8009952:	d404      	bmi.n	800995e <_fflush_r+0x32>
 8009954:	0599      	lsls	r1, r3, #22
 8009956:	d402      	bmi.n	800995e <_fflush_r+0x32>
 8009958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800995a:	f7fe fbd0 	bl	80080fe <__retarget_lock_acquire_recursive>
 800995e:	4628      	mov	r0, r5
 8009960:	4621      	mov	r1, r4
 8009962:	f7ff ff61 	bl	8009828 <__sflush_r>
 8009966:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009968:	4605      	mov	r5, r0
 800996a:	07da      	lsls	r2, r3, #31
 800996c:	d4e4      	bmi.n	8009938 <_fflush_r+0xc>
 800996e:	89a3      	ldrh	r3, [r4, #12]
 8009970:	059b      	lsls	r3, r3, #22
 8009972:	d4e1      	bmi.n	8009938 <_fflush_r+0xc>
 8009974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009976:	f7fe fbc3 	bl	8008100 <__retarget_lock_release_recursive>
 800997a:	e7dd      	b.n	8009938 <_fflush_r+0xc>

0800997c <memmove>:
 800997c:	4288      	cmp	r0, r1
 800997e:	b510      	push	{r4, lr}
 8009980:	eb01 0402 	add.w	r4, r1, r2
 8009984:	d902      	bls.n	800998c <memmove+0x10>
 8009986:	4284      	cmp	r4, r0
 8009988:	4623      	mov	r3, r4
 800998a:	d807      	bhi.n	800999c <memmove+0x20>
 800998c:	1e43      	subs	r3, r0, #1
 800998e:	42a1      	cmp	r1, r4
 8009990:	d008      	beq.n	80099a4 <memmove+0x28>
 8009992:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009996:	f803 2f01 	strb.w	r2, [r3, #1]!
 800999a:	e7f8      	b.n	800998e <memmove+0x12>
 800999c:	4601      	mov	r1, r0
 800999e:	4402      	add	r2, r0
 80099a0:	428a      	cmp	r2, r1
 80099a2:	d100      	bne.n	80099a6 <memmove+0x2a>
 80099a4:	bd10      	pop	{r4, pc}
 80099a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099ae:	e7f7      	b.n	80099a0 <memmove+0x24>

080099b0 <memcpy>:
 80099b0:	440a      	add	r2, r1
 80099b2:	4291      	cmp	r1, r2
 80099b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80099b8:	d100      	bne.n	80099bc <memcpy+0xc>
 80099ba:	4770      	bx	lr
 80099bc:	b510      	push	{r4, lr}
 80099be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099c2:	4291      	cmp	r1, r2
 80099c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099c8:	d1f9      	bne.n	80099be <memcpy+0xe>
 80099ca:	bd10      	pop	{r4, pc}

080099cc <__assert_func>:
 80099cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099ce:	4614      	mov	r4, r2
 80099d0:	461a      	mov	r2, r3
 80099d2:	4b09      	ldr	r3, [pc, #36]	; (80099f8 <__assert_func+0x2c>)
 80099d4:	4605      	mov	r5, r0
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68d8      	ldr	r0, [r3, #12]
 80099da:	b14c      	cbz	r4, 80099f0 <__assert_func+0x24>
 80099dc:	4b07      	ldr	r3, [pc, #28]	; (80099fc <__assert_func+0x30>)
 80099de:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80099e2:	9100      	str	r1, [sp, #0]
 80099e4:	462b      	mov	r3, r5
 80099e6:	4906      	ldr	r1, [pc, #24]	; (8009a00 <__assert_func+0x34>)
 80099e8:	f000 f870 	bl	8009acc <fiprintf>
 80099ec:	f000 f880 	bl	8009af0 <abort>
 80099f0:	4b04      	ldr	r3, [pc, #16]	; (8009a04 <__assert_func+0x38>)
 80099f2:	461c      	mov	r4, r3
 80099f4:	e7f3      	b.n	80099de <__assert_func+0x12>
 80099f6:	bf00      	nop
 80099f8:	20000090 	.word	0x20000090
 80099fc:	0800a68f 	.word	0x0800a68f
 8009a00:	0800a69c 	.word	0x0800a69c
 8009a04:	0800a6ca 	.word	0x0800a6ca

08009a08 <_calloc_r>:
 8009a08:	b570      	push	{r4, r5, r6, lr}
 8009a0a:	fba1 5402 	umull	r5, r4, r1, r2
 8009a0e:	b934      	cbnz	r4, 8009a1e <_calloc_r+0x16>
 8009a10:	4629      	mov	r1, r5
 8009a12:	f7fd fc8d 	bl	8007330 <_malloc_r>
 8009a16:	4606      	mov	r6, r0
 8009a18:	b928      	cbnz	r0, 8009a26 <_calloc_r+0x1e>
 8009a1a:	4630      	mov	r0, r6
 8009a1c:	bd70      	pop	{r4, r5, r6, pc}
 8009a1e:	220c      	movs	r2, #12
 8009a20:	2600      	movs	r6, #0
 8009a22:	6002      	str	r2, [r0, #0]
 8009a24:	e7f9      	b.n	8009a1a <_calloc_r+0x12>
 8009a26:	462a      	mov	r2, r5
 8009a28:	4621      	mov	r1, r4
 8009a2a:	f7fe fac4 	bl	8007fb6 <memset>
 8009a2e:	e7f4      	b.n	8009a1a <_calloc_r+0x12>

08009a30 <__ascii_mbtowc>:
 8009a30:	b082      	sub	sp, #8
 8009a32:	b901      	cbnz	r1, 8009a36 <__ascii_mbtowc+0x6>
 8009a34:	a901      	add	r1, sp, #4
 8009a36:	b142      	cbz	r2, 8009a4a <__ascii_mbtowc+0x1a>
 8009a38:	b14b      	cbz	r3, 8009a4e <__ascii_mbtowc+0x1e>
 8009a3a:	7813      	ldrb	r3, [r2, #0]
 8009a3c:	600b      	str	r3, [r1, #0]
 8009a3e:	7812      	ldrb	r2, [r2, #0]
 8009a40:	1e10      	subs	r0, r2, #0
 8009a42:	bf18      	it	ne
 8009a44:	2001      	movne	r0, #1
 8009a46:	b002      	add	sp, #8
 8009a48:	4770      	bx	lr
 8009a4a:	4610      	mov	r0, r2
 8009a4c:	e7fb      	b.n	8009a46 <__ascii_mbtowc+0x16>
 8009a4e:	f06f 0001 	mvn.w	r0, #1
 8009a52:	e7f8      	b.n	8009a46 <__ascii_mbtowc+0x16>

08009a54 <_realloc_r>:
 8009a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a58:	4680      	mov	r8, r0
 8009a5a:	4614      	mov	r4, r2
 8009a5c:	460e      	mov	r6, r1
 8009a5e:	b921      	cbnz	r1, 8009a6a <_realloc_r+0x16>
 8009a60:	4611      	mov	r1, r2
 8009a62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a66:	f7fd bc63 	b.w	8007330 <_malloc_r>
 8009a6a:	b92a      	cbnz	r2, 8009a78 <_realloc_r+0x24>
 8009a6c:	f7ff f9c4 	bl	8008df8 <_free_r>
 8009a70:	4625      	mov	r5, r4
 8009a72:	4628      	mov	r0, r5
 8009a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a78:	f000 f841 	bl	8009afe <_malloc_usable_size_r>
 8009a7c:	4284      	cmp	r4, r0
 8009a7e:	4607      	mov	r7, r0
 8009a80:	d802      	bhi.n	8009a88 <_realloc_r+0x34>
 8009a82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a86:	d812      	bhi.n	8009aae <_realloc_r+0x5a>
 8009a88:	4621      	mov	r1, r4
 8009a8a:	4640      	mov	r0, r8
 8009a8c:	f7fd fc50 	bl	8007330 <_malloc_r>
 8009a90:	4605      	mov	r5, r0
 8009a92:	2800      	cmp	r0, #0
 8009a94:	d0ed      	beq.n	8009a72 <_realloc_r+0x1e>
 8009a96:	42bc      	cmp	r4, r7
 8009a98:	4622      	mov	r2, r4
 8009a9a:	4631      	mov	r1, r6
 8009a9c:	bf28      	it	cs
 8009a9e:	463a      	movcs	r2, r7
 8009aa0:	f7ff ff86 	bl	80099b0 <memcpy>
 8009aa4:	4631      	mov	r1, r6
 8009aa6:	4640      	mov	r0, r8
 8009aa8:	f7ff f9a6 	bl	8008df8 <_free_r>
 8009aac:	e7e1      	b.n	8009a72 <_realloc_r+0x1e>
 8009aae:	4635      	mov	r5, r6
 8009ab0:	e7df      	b.n	8009a72 <_realloc_r+0x1e>

08009ab2 <__ascii_wctomb>:
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	4608      	mov	r0, r1
 8009ab6:	b141      	cbz	r1, 8009aca <__ascii_wctomb+0x18>
 8009ab8:	2aff      	cmp	r2, #255	; 0xff
 8009aba:	d904      	bls.n	8009ac6 <__ascii_wctomb+0x14>
 8009abc:	228a      	movs	r2, #138	; 0x8a
 8009abe:	f04f 30ff 	mov.w	r0, #4294967295
 8009ac2:	601a      	str	r2, [r3, #0]
 8009ac4:	4770      	bx	lr
 8009ac6:	2001      	movs	r0, #1
 8009ac8:	700a      	strb	r2, [r1, #0]
 8009aca:	4770      	bx	lr

08009acc <fiprintf>:
 8009acc:	b40e      	push	{r1, r2, r3}
 8009ace:	b503      	push	{r0, r1, lr}
 8009ad0:	4601      	mov	r1, r0
 8009ad2:	ab03      	add	r3, sp, #12
 8009ad4:	4805      	ldr	r0, [pc, #20]	; (8009aec <fiprintf+0x20>)
 8009ad6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ada:	6800      	ldr	r0, [r0, #0]
 8009adc:	9301      	str	r3, [sp, #4]
 8009ade:	f000 f83d 	bl	8009b5c <_vfiprintf_r>
 8009ae2:	b002      	add	sp, #8
 8009ae4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ae8:	b003      	add	sp, #12
 8009aea:	4770      	bx	lr
 8009aec:	20000090 	.word	0x20000090

08009af0 <abort>:
 8009af0:	2006      	movs	r0, #6
 8009af2:	b508      	push	{r3, lr}
 8009af4:	f000 fa0a 	bl	8009f0c <raise>
 8009af8:	2001      	movs	r0, #1
 8009afa:	f7f8 fa18 	bl	8001f2e <_exit>

08009afe <_malloc_usable_size_r>:
 8009afe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b02:	1f18      	subs	r0, r3, #4
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	bfbc      	itt	lt
 8009b08:	580b      	ldrlt	r3, [r1, r0]
 8009b0a:	18c0      	addlt	r0, r0, r3
 8009b0c:	4770      	bx	lr

08009b0e <__sfputc_r>:
 8009b0e:	6893      	ldr	r3, [r2, #8]
 8009b10:	b410      	push	{r4}
 8009b12:	3b01      	subs	r3, #1
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	6093      	str	r3, [r2, #8]
 8009b18:	da07      	bge.n	8009b2a <__sfputc_r+0x1c>
 8009b1a:	6994      	ldr	r4, [r2, #24]
 8009b1c:	42a3      	cmp	r3, r4
 8009b1e:	db01      	blt.n	8009b24 <__sfputc_r+0x16>
 8009b20:	290a      	cmp	r1, #10
 8009b22:	d102      	bne.n	8009b2a <__sfputc_r+0x1c>
 8009b24:	bc10      	pop	{r4}
 8009b26:	f000 b933 	b.w	8009d90 <__swbuf_r>
 8009b2a:	6813      	ldr	r3, [r2, #0]
 8009b2c:	1c58      	adds	r0, r3, #1
 8009b2e:	6010      	str	r0, [r2, #0]
 8009b30:	7019      	strb	r1, [r3, #0]
 8009b32:	4608      	mov	r0, r1
 8009b34:	bc10      	pop	{r4}
 8009b36:	4770      	bx	lr

08009b38 <__sfputs_r>:
 8009b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b3a:	4606      	mov	r6, r0
 8009b3c:	460f      	mov	r7, r1
 8009b3e:	4614      	mov	r4, r2
 8009b40:	18d5      	adds	r5, r2, r3
 8009b42:	42ac      	cmp	r4, r5
 8009b44:	d101      	bne.n	8009b4a <__sfputs_r+0x12>
 8009b46:	2000      	movs	r0, #0
 8009b48:	e007      	b.n	8009b5a <__sfputs_r+0x22>
 8009b4a:	463a      	mov	r2, r7
 8009b4c:	4630      	mov	r0, r6
 8009b4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b52:	f7ff ffdc 	bl	8009b0e <__sfputc_r>
 8009b56:	1c43      	adds	r3, r0, #1
 8009b58:	d1f3      	bne.n	8009b42 <__sfputs_r+0xa>
 8009b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009b5c <_vfiprintf_r>:
 8009b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b60:	460d      	mov	r5, r1
 8009b62:	4614      	mov	r4, r2
 8009b64:	4698      	mov	r8, r3
 8009b66:	4606      	mov	r6, r0
 8009b68:	b09d      	sub	sp, #116	; 0x74
 8009b6a:	b118      	cbz	r0, 8009b74 <_vfiprintf_r+0x18>
 8009b6c:	6a03      	ldr	r3, [r0, #32]
 8009b6e:	b90b      	cbnz	r3, 8009b74 <_vfiprintf_r+0x18>
 8009b70:	f7fe f954 	bl	8007e1c <__sinit>
 8009b74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b76:	07d9      	lsls	r1, r3, #31
 8009b78:	d405      	bmi.n	8009b86 <_vfiprintf_r+0x2a>
 8009b7a:	89ab      	ldrh	r3, [r5, #12]
 8009b7c:	059a      	lsls	r2, r3, #22
 8009b7e:	d402      	bmi.n	8009b86 <_vfiprintf_r+0x2a>
 8009b80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b82:	f7fe fabc 	bl	80080fe <__retarget_lock_acquire_recursive>
 8009b86:	89ab      	ldrh	r3, [r5, #12]
 8009b88:	071b      	lsls	r3, r3, #28
 8009b8a:	d501      	bpl.n	8009b90 <_vfiprintf_r+0x34>
 8009b8c:	692b      	ldr	r3, [r5, #16]
 8009b8e:	b99b      	cbnz	r3, 8009bb8 <_vfiprintf_r+0x5c>
 8009b90:	4629      	mov	r1, r5
 8009b92:	4630      	mov	r0, r6
 8009b94:	f000 f93a 	bl	8009e0c <__swsetup_r>
 8009b98:	b170      	cbz	r0, 8009bb8 <_vfiprintf_r+0x5c>
 8009b9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b9c:	07dc      	lsls	r4, r3, #31
 8009b9e:	d504      	bpl.n	8009baa <_vfiprintf_r+0x4e>
 8009ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba4:	b01d      	add	sp, #116	; 0x74
 8009ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009baa:	89ab      	ldrh	r3, [r5, #12]
 8009bac:	0598      	lsls	r0, r3, #22
 8009bae:	d4f7      	bmi.n	8009ba0 <_vfiprintf_r+0x44>
 8009bb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bb2:	f7fe faa5 	bl	8008100 <__retarget_lock_release_recursive>
 8009bb6:	e7f3      	b.n	8009ba0 <_vfiprintf_r+0x44>
 8009bb8:	2300      	movs	r3, #0
 8009bba:	9309      	str	r3, [sp, #36]	; 0x24
 8009bbc:	2320      	movs	r3, #32
 8009bbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009bc2:	2330      	movs	r3, #48	; 0x30
 8009bc4:	f04f 0901 	mov.w	r9, #1
 8009bc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bcc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009d7c <_vfiprintf_r+0x220>
 8009bd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bd4:	4623      	mov	r3, r4
 8009bd6:	469a      	mov	sl, r3
 8009bd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bdc:	b10a      	cbz	r2, 8009be2 <_vfiprintf_r+0x86>
 8009bde:	2a25      	cmp	r2, #37	; 0x25
 8009be0:	d1f9      	bne.n	8009bd6 <_vfiprintf_r+0x7a>
 8009be2:	ebba 0b04 	subs.w	fp, sl, r4
 8009be6:	d00b      	beq.n	8009c00 <_vfiprintf_r+0xa4>
 8009be8:	465b      	mov	r3, fp
 8009bea:	4622      	mov	r2, r4
 8009bec:	4629      	mov	r1, r5
 8009bee:	4630      	mov	r0, r6
 8009bf0:	f7ff ffa2 	bl	8009b38 <__sfputs_r>
 8009bf4:	3001      	adds	r0, #1
 8009bf6:	f000 80a9 	beq.w	8009d4c <_vfiprintf_r+0x1f0>
 8009bfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bfc:	445a      	add	r2, fp
 8009bfe:	9209      	str	r2, [sp, #36]	; 0x24
 8009c00:	f89a 3000 	ldrb.w	r3, [sl]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	f000 80a1 	beq.w	8009d4c <_vfiprintf_r+0x1f0>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c14:	f10a 0a01 	add.w	sl, sl, #1
 8009c18:	9304      	str	r3, [sp, #16]
 8009c1a:	9307      	str	r3, [sp, #28]
 8009c1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c20:	931a      	str	r3, [sp, #104]	; 0x68
 8009c22:	4654      	mov	r4, sl
 8009c24:	2205      	movs	r2, #5
 8009c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c2a:	4854      	ldr	r0, [pc, #336]	; (8009d7c <_vfiprintf_r+0x220>)
 8009c2c:	f7fe fa69 	bl	8008102 <memchr>
 8009c30:	9a04      	ldr	r2, [sp, #16]
 8009c32:	b9d8      	cbnz	r0, 8009c6c <_vfiprintf_r+0x110>
 8009c34:	06d1      	lsls	r1, r2, #27
 8009c36:	bf44      	itt	mi
 8009c38:	2320      	movmi	r3, #32
 8009c3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c3e:	0713      	lsls	r3, r2, #28
 8009c40:	bf44      	itt	mi
 8009c42:	232b      	movmi	r3, #43	; 0x2b
 8009c44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c48:	f89a 3000 	ldrb.w	r3, [sl]
 8009c4c:	2b2a      	cmp	r3, #42	; 0x2a
 8009c4e:	d015      	beq.n	8009c7c <_vfiprintf_r+0x120>
 8009c50:	4654      	mov	r4, sl
 8009c52:	2000      	movs	r0, #0
 8009c54:	f04f 0c0a 	mov.w	ip, #10
 8009c58:	9a07      	ldr	r2, [sp, #28]
 8009c5a:	4621      	mov	r1, r4
 8009c5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c60:	3b30      	subs	r3, #48	; 0x30
 8009c62:	2b09      	cmp	r3, #9
 8009c64:	d94d      	bls.n	8009d02 <_vfiprintf_r+0x1a6>
 8009c66:	b1b0      	cbz	r0, 8009c96 <_vfiprintf_r+0x13a>
 8009c68:	9207      	str	r2, [sp, #28]
 8009c6a:	e014      	b.n	8009c96 <_vfiprintf_r+0x13a>
 8009c6c:	eba0 0308 	sub.w	r3, r0, r8
 8009c70:	fa09 f303 	lsl.w	r3, r9, r3
 8009c74:	4313      	orrs	r3, r2
 8009c76:	46a2      	mov	sl, r4
 8009c78:	9304      	str	r3, [sp, #16]
 8009c7a:	e7d2      	b.n	8009c22 <_vfiprintf_r+0xc6>
 8009c7c:	9b03      	ldr	r3, [sp, #12]
 8009c7e:	1d19      	adds	r1, r3, #4
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	9103      	str	r1, [sp, #12]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	bfbb      	ittet	lt
 8009c88:	425b      	neglt	r3, r3
 8009c8a:	f042 0202 	orrlt.w	r2, r2, #2
 8009c8e:	9307      	strge	r3, [sp, #28]
 8009c90:	9307      	strlt	r3, [sp, #28]
 8009c92:	bfb8      	it	lt
 8009c94:	9204      	strlt	r2, [sp, #16]
 8009c96:	7823      	ldrb	r3, [r4, #0]
 8009c98:	2b2e      	cmp	r3, #46	; 0x2e
 8009c9a:	d10c      	bne.n	8009cb6 <_vfiprintf_r+0x15a>
 8009c9c:	7863      	ldrb	r3, [r4, #1]
 8009c9e:	2b2a      	cmp	r3, #42	; 0x2a
 8009ca0:	d134      	bne.n	8009d0c <_vfiprintf_r+0x1b0>
 8009ca2:	9b03      	ldr	r3, [sp, #12]
 8009ca4:	3402      	adds	r4, #2
 8009ca6:	1d1a      	adds	r2, r3, #4
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	9203      	str	r2, [sp, #12]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	bfb8      	it	lt
 8009cb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009cb4:	9305      	str	r3, [sp, #20]
 8009cb6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009d80 <_vfiprintf_r+0x224>
 8009cba:	2203      	movs	r2, #3
 8009cbc:	4650      	mov	r0, sl
 8009cbe:	7821      	ldrb	r1, [r4, #0]
 8009cc0:	f7fe fa1f 	bl	8008102 <memchr>
 8009cc4:	b138      	cbz	r0, 8009cd6 <_vfiprintf_r+0x17a>
 8009cc6:	2240      	movs	r2, #64	; 0x40
 8009cc8:	9b04      	ldr	r3, [sp, #16]
 8009cca:	eba0 000a 	sub.w	r0, r0, sl
 8009cce:	4082      	lsls	r2, r0
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	3401      	adds	r4, #1
 8009cd4:	9304      	str	r3, [sp, #16]
 8009cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cda:	2206      	movs	r2, #6
 8009cdc:	4829      	ldr	r0, [pc, #164]	; (8009d84 <_vfiprintf_r+0x228>)
 8009cde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ce2:	f7fe fa0e 	bl	8008102 <memchr>
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	d03f      	beq.n	8009d6a <_vfiprintf_r+0x20e>
 8009cea:	4b27      	ldr	r3, [pc, #156]	; (8009d88 <_vfiprintf_r+0x22c>)
 8009cec:	bb1b      	cbnz	r3, 8009d36 <_vfiprintf_r+0x1da>
 8009cee:	9b03      	ldr	r3, [sp, #12]
 8009cf0:	3307      	adds	r3, #7
 8009cf2:	f023 0307 	bic.w	r3, r3, #7
 8009cf6:	3308      	adds	r3, #8
 8009cf8:	9303      	str	r3, [sp, #12]
 8009cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cfc:	443b      	add	r3, r7
 8009cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8009d00:	e768      	b.n	8009bd4 <_vfiprintf_r+0x78>
 8009d02:	460c      	mov	r4, r1
 8009d04:	2001      	movs	r0, #1
 8009d06:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d0a:	e7a6      	b.n	8009c5a <_vfiprintf_r+0xfe>
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	f04f 0c0a 	mov.w	ip, #10
 8009d12:	4619      	mov	r1, r3
 8009d14:	3401      	adds	r4, #1
 8009d16:	9305      	str	r3, [sp, #20]
 8009d18:	4620      	mov	r0, r4
 8009d1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d1e:	3a30      	subs	r2, #48	; 0x30
 8009d20:	2a09      	cmp	r2, #9
 8009d22:	d903      	bls.n	8009d2c <_vfiprintf_r+0x1d0>
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d0c6      	beq.n	8009cb6 <_vfiprintf_r+0x15a>
 8009d28:	9105      	str	r1, [sp, #20]
 8009d2a:	e7c4      	b.n	8009cb6 <_vfiprintf_r+0x15a>
 8009d2c:	4604      	mov	r4, r0
 8009d2e:	2301      	movs	r3, #1
 8009d30:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d34:	e7f0      	b.n	8009d18 <_vfiprintf_r+0x1bc>
 8009d36:	ab03      	add	r3, sp, #12
 8009d38:	9300      	str	r3, [sp, #0]
 8009d3a:	462a      	mov	r2, r5
 8009d3c:	4630      	mov	r0, r6
 8009d3e:	4b13      	ldr	r3, [pc, #76]	; (8009d8c <_vfiprintf_r+0x230>)
 8009d40:	a904      	add	r1, sp, #16
 8009d42:	f7fd fc1d 	bl	8007580 <_printf_float>
 8009d46:	4607      	mov	r7, r0
 8009d48:	1c78      	adds	r0, r7, #1
 8009d4a:	d1d6      	bne.n	8009cfa <_vfiprintf_r+0x19e>
 8009d4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d4e:	07d9      	lsls	r1, r3, #31
 8009d50:	d405      	bmi.n	8009d5e <_vfiprintf_r+0x202>
 8009d52:	89ab      	ldrh	r3, [r5, #12]
 8009d54:	059a      	lsls	r2, r3, #22
 8009d56:	d402      	bmi.n	8009d5e <_vfiprintf_r+0x202>
 8009d58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d5a:	f7fe f9d1 	bl	8008100 <__retarget_lock_release_recursive>
 8009d5e:	89ab      	ldrh	r3, [r5, #12]
 8009d60:	065b      	lsls	r3, r3, #25
 8009d62:	f53f af1d 	bmi.w	8009ba0 <_vfiprintf_r+0x44>
 8009d66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d68:	e71c      	b.n	8009ba4 <_vfiprintf_r+0x48>
 8009d6a:	ab03      	add	r3, sp, #12
 8009d6c:	9300      	str	r3, [sp, #0]
 8009d6e:	462a      	mov	r2, r5
 8009d70:	4630      	mov	r0, r6
 8009d72:	4b06      	ldr	r3, [pc, #24]	; (8009d8c <_vfiprintf_r+0x230>)
 8009d74:	a904      	add	r1, sp, #16
 8009d76:	f7fd fea3 	bl	8007ac0 <_printf_i>
 8009d7a:	e7e4      	b.n	8009d46 <_vfiprintf_r+0x1ea>
 8009d7c:	0800a674 	.word	0x0800a674
 8009d80:	0800a67a 	.word	0x0800a67a
 8009d84:	0800a67e 	.word	0x0800a67e
 8009d88:	08007581 	.word	0x08007581
 8009d8c:	08009b39 	.word	0x08009b39

08009d90 <__swbuf_r>:
 8009d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d92:	460e      	mov	r6, r1
 8009d94:	4614      	mov	r4, r2
 8009d96:	4605      	mov	r5, r0
 8009d98:	b118      	cbz	r0, 8009da2 <__swbuf_r+0x12>
 8009d9a:	6a03      	ldr	r3, [r0, #32]
 8009d9c:	b90b      	cbnz	r3, 8009da2 <__swbuf_r+0x12>
 8009d9e:	f7fe f83d 	bl	8007e1c <__sinit>
 8009da2:	69a3      	ldr	r3, [r4, #24]
 8009da4:	60a3      	str	r3, [r4, #8]
 8009da6:	89a3      	ldrh	r3, [r4, #12]
 8009da8:	071a      	lsls	r2, r3, #28
 8009daa:	d525      	bpl.n	8009df8 <__swbuf_r+0x68>
 8009dac:	6923      	ldr	r3, [r4, #16]
 8009dae:	b31b      	cbz	r3, 8009df8 <__swbuf_r+0x68>
 8009db0:	6823      	ldr	r3, [r4, #0]
 8009db2:	6922      	ldr	r2, [r4, #16]
 8009db4:	b2f6      	uxtb	r6, r6
 8009db6:	1a98      	subs	r0, r3, r2
 8009db8:	6963      	ldr	r3, [r4, #20]
 8009dba:	4637      	mov	r7, r6
 8009dbc:	4283      	cmp	r3, r0
 8009dbe:	dc04      	bgt.n	8009dca <__swbuf_r+0x3a>
 8009dc0:	4621      	mov	r1, r4
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	f7ff fdb2 	bl	800992c <_fflush_r>
 8009dc8:	b9e0      	cbnz	r0, 8009e04 <__swbuf_r+0x74>
 8009dca:	68a3      	ldr	r3, [r4, #8]
 8009dcc:	3b01      	subs	r3, #1
 8009dce:	60a3      	str	r3, [r4, #8]
 8009dd0:	6823      	ldr	r3, [r4, #0]
 8009dd2:	1c5a      	adds	r2, r3, #1
 8009dd4:	6022      	str	r2, [r4, #0]
 8009dd6:	701e      	strb	r6, [r3, #0]
 8009dd8:	6962      	ldr	r2, [r4, #20]
 8009dda:	1c43      	adds	r3, r0, #1
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d004      	beq.n	8009dea <__swbuf_r+0x5a>
 8009de0:	89a3      	ldrh	r3, [r4, #12]
 8009de2:	07db      	lsls	r3, r3, #31
 8009de4:	d506      	bpl.n	8009df4 <__swbuf_r+0x64>
 8009de6:	2e0a      	cmp	r6, #10
 8009de8:	d104      	bne.n	8009df4 <__swbuf_r+0x64>
 8009dea:	4621      	mov	r1, r4
 8009dec:	4628      	mov	r0, r5
 8009dee:	f7ff fd9d 	bl	800992c <_fflush_r>
 8009df2:	b938      	cbnz	r0, 8009e04 <__swbuf_r+0x74>
 8009df4:	4638      	mov	r0, r7
 8009df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009df8:	4621      	mov	r1, r4
 8009dfa:	4628      	mov	r0, r5
 8009dfc:	f000 f806 	bl	8009e0c <__swsetup_r>
 8009e00:	2800      	cmp	r0, #0
 8009e02:	d0d5      	beq.n	8009db0 <__swbuf_r+0x20>
 8009e04:	f04f 37ff 	mov.w	r7, #4294967295
 8009e08:	e7f4      	b.n	8009df4 <__swbuf_r+0x64>
	...

08009e0c <__swsetup_r>:
 8009e0c:	b538      	push	{r3, r4, r5, lr}
 8009e0e:	4b2a      	ldr	r3, [pc, #168]	; (8009eb8 <__swsetup_r+0xac>)
 8009e10:	4605      	mov	r5, r0
 8009e12:	6818      	ldr	r0, [r3, #0]
 8009e14:	460c      	mov	r4, r1
 8009e16:	b118      	cbz	r0, 8009e20 <__swsetup_r+0x14>
 8009e18:	6a03      	ldr	r3, [r0, #32]
 8009e1a:	b90b      	cbnz	r3, 8009e20 <__swsetup_r+0x14>
 8009e1c:	f7fd fffe 	bl	8007e1c <__sinit>
 8009e20:	89a3      	ldrh	r3, [r4, #12]
 8009e22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e26:	0718      	lsls	r0, r3, #28
 8009e28:	d422      	bmi.n	8009e70 <__swsetup_r+0x64>
 8009e2a:	06d9      	lsls	r1, r3, #27
 8009e2c:	d407      	bmi.n	8009e3e <__swsetup_r+0x32>
 8009e2e:	2309      	movs	r3, #9
 8009e30:	602b      	str	r3, [r5, #0]
 8009e32:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009e36:	f04f 30ff 	mov.w	r0, #4294967295
 8009e3a:	81a3      	strh	r3, [r4, #12]
 8009e3c:	e034      	b.n	8009ea8 <__swsetup_r+0x9c>
 8009e3e:	0758      	lsls	r0, r3, #29
 8009e40:	d512      	bpl.n	8009e68 <__swsetup_r+0x5c>
 8009e42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e44:	b141      	cbz	r1, 8009e58 <__swsetup_r+0x4c>
 8009e46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e4a:	4299      	cmp	r1, r3
 8009e4c:	d002      	beq.n	8009e54 <__swsetup_r+0x48>
 8009e4e:	4628      	mov	r0, r5
 8009e50:	f7fe ffd2 	bl	8008df8 <_free_r>
 8009e54:	2300      	movs	r3, #0
 8009e56:	6363      	str	r3, [r4, #52]	; 0x34
 8009e58:	89a3      	ldrh	r3, [r4, #12]
 8009e5a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e5e:	81a3      	strh	r3, [r4, #12]
 8009e60:	2300      	movs	r3, #0
 8009e62:	6063      	str	r3, [r4, #4]
 8009e64:	6923      	ldr	r3, [r4, #16]
 8009e66:	6023      	str	r3, [r4, #0]
 8009e68:	89a3      	ldrh	r3, [r4, #12]
 8009e6a:	f043 0308 	orr.w	r3, r3, #8
 8009e6e:	81a3      	strh	r3, [r4, #12]
 8009e70:	6923      	ldr	r3, [r4, #16]
 8009e72:	b94b      	cbnz	r3, 8009e88 <__swsetup_r+0x7c>
 8009e74:	89a3      	ldrh	r3, [r4, #12]
 8009e76:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e7e:	d003      	beq.n	8009e88 <__swsetup_r+0x7c>
 8009e80:	4621      	mov	r1, r4
 8009e82:	4628      	mov	r0, r5
 8009e84:	f000 f883 	bl	8009f8e <__smakebuf_r>
 8009e88:	89a0      	ldrh	r0, [r4, #12]
 8009e8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e8e:	f010 0301 	ands.w	r3, r0, #1
 8009e92:	d00a      	beq.n	8009eaa <__swsetup_r+0x9e>
 8009e94:	2300      	movs	r3, #0
 8009e96:	60a3      	str	r3, [r4, #8]
 8009e98:	6963      	ldr	r3, [r4, #20]
 8009e9a:	425b      	negs	r3, r3
 8009e9c:	61a3      	str	r3, [r4, #24]
 8009e9e:	6923      	ldr	r3, [r4, #16]
 8009ea0:	b943      	cbnz	r3, 8009eb4 <__swsetup_r+0xa8>
 8009ea2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ea6:	d1c4      	bne.n	8009e32 <__swsetup_r+0x26>
 8009ea8:	bd38      	pop	{r3, r4, r5, pc}
 8009eaa:	0781      	lsls	r1, r0, #30
 8009eac:	bf58      	it	pl
 8009eae:	6963      	ldrpl	r3, [r4, #20]
 8009eb0:	60a3      	str	r3, [r4, #8]
 8009eb2:	e7f4      	b.n	8009e9e <__swsetup_r+0x92>
 8009eb4:	2000      	movs	r0, #0
 8009eb6:	e7f7      	b.n	8009ea8 <__swsetup_r+0x9c>
 8009eb8:	20000090 	.word	0x20000090

08009ebc <_raise_r>:
 8009ebc:	291f      	cmp	r1, #31
 8009ebe:	b538      	push	{r3, r4, r5, lr}
 8009ec0:	4604      	mov	r4, r0
 8009ec2:	460d      	mov	r5, r1
 8009ec4:	d904      	bls.n	8009ed0 <_raise_r+0x14>
 8009ec6:	2316      	movs	r3, #22
 8009ec8:	6003      	str	r3, [r0, #0]
 8009eca:	f04f 30ff 	mov.w	r0, #4294967295
 8009ece:	bd38      	pop	{r3, r4, r5, pc}
 8009ed0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009ed2:	b112      	cbz	r2, 8009eda <_raise_r+0x1e>
 8009ed4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ed8:	b94b      	cbnz	r3, 8009eee <_raise_r+0x32>
 8009eda:	4620      	mov	r0, r4
 8009edc:	f000 f830 	bl	8009f40 <_getpid_r>
 8009ee0:	462a      	mov	r2, r5
 8009ee2:	4601      	mov	r1, r0
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009eea:	f000 b817 	b.w	8009f1c <_kill_r>
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d00a      	beq.n	8009f08 <_raise_r+0x4c>
 8009ef2:	1c59      	adds	r1, r3, #1
 8009ef4:	d103      	bne.n	8009efe <_raise_r+0x42>
 8009ef6:	2316      	movs	r3, #22
 8009ef8:	6003      	str	r3, [r0, #0]
 8009efa:	2001      	movs	r0, #1
 8009efc:	e7e7      	b.n	8009ece <_raise_r+0x12>
 8009efe:	2400      	movs	r4, #0
 8009f00:	4628      	mov	r0, r5
 8009f02:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f06:	4798      	blx	r3
 8009f08:	2000      	movs	r0, #0
 8009f0a:	e7e0      	b.n	8009ece <_raise_r+0x12>

08009f0c <raise>:
 8009f0c:	4b02      	ldr	r3, [pc, #8]	; (8009f18 <raise+0xc>)
 8009f0e:	4601      	mov	r1, r0
 8009f10:	6818      	ldr	r0, [r3, #0]
 8009f12:	f7ff bfd3 	b.w	8009ebc <_raise_r>
 8009f16:	bf00      	nop
 8009f18:	20000090 	.word	0x20000090

08009f1c <_kill_r>:
 8009f1c:	b538      	push	{r3, r4, r5, lr}
 8009f1e:	2300      	movs	r3, #0
 8009f20:	4d06      	ldr	r5, [pc, #24]	; (8009f3c <_kill_r+0x20>)
 8009f22:	4604      	mov	r4, r0
 8009f24:	4608      	mov	r0, r1
 8009f26:	4611      	mov	r1, r2
 8009f28:	602b      	str	r3, [r5, #0]
 8009f2a:	f7f7 fff0 	bl	8001f0e <_kill>
 8009f2e:	1c43      	adds	r3, r0, #1
 8009f30:	d102      	bne.n	8009f38 <_kill_r+0x1c>
 8009f32:	682b      	ldr	r3, [r5, #0]
 8009f34:	b103      	cbz	r3, 8009f38 <_kill_r+0x1c>
 8009f36:	6023      	str	r3, [r4, #0]
 8009f38:	bd38      	pop	{r3, r4, r5, pc}
 8009f3a:	bf00      	nop
 8009f3c:	20000c18 	.word	0x20000c18

08009f40 <_getpid_r>:
 8009f40:	f7f7 bfde 	b.w	8001f00 <_getpid>

08009f44 <__swhatbuf_r>:
 8009f44:	b570      	push	{r4, r5, r6, lr}
 8009f46:	460c      	mov	r4, r1
 8009f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f4c:	4615      	mov	r5, r2
 8009f4e:	2900      	cmp	r1, #0
 8009f50:	461e      	mov	r6, r3
 8009f52:	b096      	sub	sp, #88	; 0x58
 8009f54:	da0c      	bge.n	8009f70 <__swhatbuf_r+0x2c>
 8009f56:	89a3      	ldrh	r3, [r4, #12]
 8009f58:	2100      	movs	r1, #0
 8009f5a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009f5e:	bf0c      	ite	eq
 8009f60:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009f64:	2340      	movne	r3, #64	; 0x40
 8009f66:	2000      	movs	r0, #0
 8009f68:	6031      	str	r1, [r6, #0]
 8009f6a:	602b      	str	r3, [r5, #0]
 8009f6c:	b016      	add	sp, #88	; 0x58
 8009f6e:	bd70      	pop	{r4, r5, r6, pc}
 8009f70:	466a      	mov	r2, sp
 8009f72:	f000 f849 	bl	800a008 <_fstat_r>
 8009f76:	2800      	cmp	r0, #0
 8009f78:	dbed      	blt.n	8009f56 <__swhatbuf_r+0x12>
 8009f7a:	9901      	ldr	r1, [sp, #4]
 8009f7c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009f80:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009f84:	4259      	negs	r1, r3
 8009f86:	4159      	adcs	r1, r3
 8009f88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f8c:	e7eb      	b.n	8009f66 <__swhatbuf_r+0x22>

08009f8e <__smakebuf_r>:
 8009f8e:	898b      	ldrh	r3, [r1, #12]
 8009f90:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f92:	079d      	lsls	r5, r3, #30
 8009f94:	4606      	mov	r6, r0
 8009f96:	460c      	mov	r4, r1
 8009f98:	d507      	bpl.n	8009faa <__smakebuf_r+0x1c>
 8009f9a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f9e:	6023      	str	r3, [r4, #0]
 8009fa0:	6123      	str	r3, [r4, #16]
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	6163      	str	r3, [r4, #20]
 8009fa6:	b002      	add	sp, #8
 8009fa8:	bd70      	pop	{r4, r5, r6, pc}
 8009faa:	466a      	mov	r2, sp
 8009fac:	ab01      	add	r3, sp, #4
 8009fae:	f7ff ffc9 	bl	8009f44 <__swhatbuf_r>
 8009fb2:	9900      	ldr	r1, [sp, #0]
 8009fb4:	4605      	mov	r5, r0
 8009fb6:	4630      	mov	r0, r6
 8009fb8:	f7fd f9ba 	bl	8007330 <_malloc_r>
 8009fbc:	b948      	cbnz	r0, 8009fd2 <__smakebuf_r+0x44>
 8009fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fc2:	059a      	lsls	r2, r3, #22
 8009fc4:	d4ef      	bmi.n	8009fa6 <__smakebuf_r+0x18>
 8009fc6:	f023 0303 	bic.w	r3, r3, #3
 8009fca:	f043 0302 	orr.w	r3, r3, #2
 8009fce:	81a3      	strh	r3, [r4, #12]
 8009fd0:	e7e3      	b.n	8009f9a <__smakebuf_r+0xc>
 8009fd2:	89a3      	ldrh	r3, [r4, #12]
 8009fd4:	6020      	str	r0, [r4, #0]
 8009fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fda:	81a3      	strh	r3, [r4, #12]
 8009fdc:	9b00      	ldr	r3, [sp, #0]
 8009fde:	6120      	str	r0, [r4, #16]
 8009fe0:	6163      	str	r3, [r4, #20]
 8009fe2:	9b01      	ldr	r3, [sp, #4]
 8009fe4:	b15b      	cbz	r3, 8009ffe <__smakebuf_r+0x70>
 8009fe6:	4630      	mov	r0, r6
 8009fe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fec:	f000 f81e 	bl	800a02c <_isatty_r>
 8009ff0:	b128      	cbz	r0, 8009ffe <__smakebuf_r+0x70>
 8009ff2:	89a3      	ldrh	r3, [r4, #12]
 8009ff4:	f023 0303 	bic.w	r3, r3, #3
 8009ff8:	f043 0301 	orr.w	r3, r3, #1
 8009ffc:	81a3      	strh	r3, [r4, #12]
 8009ffe:	89a3      	ldrh	r3, [r4, #12]
 800a000:	431d      	orrs	r5, r3
 800a002:	81a5      	strh	r5, [r4, #12]
 800a004:	e7cf      	b.n	8009fa6 <__smakebuf_r+0x18>
	...

0800a008 <_fstat_r>:
 800a008:	b538      	push	{r3, r4, r5, lr}
 800a00a:	2300      	movs	r3, #0
 800a00c:	4d06      	ldr	r5, [pc, #24]	; (800a028 <_fstat_r+0x20>)
 800a00e:	4604      	mov	r4, r0
 800a010:	4608      	mov	r0, r1
 800a012:	4611      	mov	r1, r2
 800a014:	602b      	str	r3, [r5, #0]
 800a016:	f7f7 ffd8 	bl	8001fca <_fstat>
 800a01a:	1c43      	adds	r3, r0, #1
 800a01c:	d102      	bne.n	800a024 <_fstat_r+0x1c>
 800a01e:	682b      	ldr	r3, [r5, #0]
 800a020:	b103      	cbz	r3, 800a024 <_fstat_r+0x1c>
 800a022:	6023      	str	r3, [r4, #0]
 800a024:	bd38      	pop	{r3, r4, r5, pc}
 800a026:	bf00      	nop
 800a028:	20000c18 	.word	0x20000c18

0800a02c <_isatty_r>:
 800a02c:	b538      	push	{r3, r4, r5, lr}
 800a02e:	2300      	movs	r3, #0
 800a030:	4d05      	ldr	r5, [pc, #20]	; (800a048 <_isatty_r+0x1c>)
 800a032:	4604      	mov	r4, r0
 800a034:	4608      	mov	r0, r1
 800a036:	602b      	str	r3, [r5, #0]
 800a038:	f7f7 ffd6 	bl	8001fe8 <_isatty>
 800a03c:	1c43      	adds	r3, r0, #1
 800a03e:	d102      	bne.n	800a046 <_isatty_r+0x1a>
 800a040:	682b      	ldr	r3, [r5, #0]
 800a042:	b103      	cbz	r3, 800a046 <_isatty_r+0x1a>
 800a044:	6023      	str	r3, [r4, #0]
 800a046:	bd38      	pop	{r3, r4, r5, pc}
 800a048:	20000c18 	.word	0x20000c18

0800a04c <_init>:
 800a04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a04e:	bf00      	nop
 800a050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a052:	bc08      	pop	{r3}
 800a054:	469e      	mov	lr, r3
 800a056:	4770      	bx	lr

0800a058 <_fini>:
 800a058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05a:	bf00      	nop
 800a05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a05e:	bc08      	pop	{r3}
 800a060:	469e      	mov	lr, r3
 800a062:	4770      	bx	lr
