
STMF103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c65c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000714  0800c770  0800c770  0001c770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce84  0800ce84  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  0800ce84  0800ce84  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ce84  0800ce84  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce84  0800ce84  0001ce84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce88  0800ce88  0001ce88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800ce8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b24  20000204  0800d090  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d28  0800d090  00020d28  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002022d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016b81  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000409c  00000000  00000000  00036df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001548  00000000  00000000  0003ae90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001063  00000000  00000000  0003c3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bd1a  00000000  00000000  0003d43b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cdac  00000000  00000000  00059155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009026e  00000000  00000000  00075f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000067a8  00000000  00000000  00106170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003b  00000000  00000000  0010c918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000204 	.word	0x20000204
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c754 	.word	0x0800c754

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000208 	.word	0x20000208
 800014c:	0800c754 	.word	0x0800c754

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <ATC_Init>:
static const char* esp_error = "ERROR\r\n";
static const char* esp_busy = "busy p...\r\n";



void ATC_Init(ATC_Handletypedef* hAtc, UART_HandleTypeDef* hUart){
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
	hAtc->RxIdx = 0;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	hAtc->hUart = hUart;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	601a      	str	r2, [r3, #0]
	hAtc->Size = BUFFER_SIZE;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800108e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	memset(hAtc->pRxbuff, 0, BUFFER_SIZE);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3304      	adds	r3, #4
 8001096:	f44f 7200 	mov.w	r2, #512	; 0x200
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f009 fb0e 	bl	800a6be <memset>

	// init DMA UART
	HAL_UART_Receive_IT(hAtc->hUart, &hAtc->pReadBuff, 1);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6818      	ldr	r0, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80010ac:	2201      	movs	r2, #1
 80010ae:	4619      	mov	r1, r3
 80010b0:	f007 fd40 	bl	8008b34 <HAL_UART_Receive_IT>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <ATC_TxRaw>:

bool ATC_TxRaw(ATC_Handletypedef* hAtc, const uint8_t* pData, uint16_t len){
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	4613      	mov	r3, r2
 80010c8:	80fb      	strh	r3, [r7, #6]
	bool answer = false;
 80010ca:	2300      	movs	r3, #0
 80010cc:	75fb      	strb	r3, [r7, #23]
	do
	{
		if (HAL_UART_Transmit_DMA(hAtc->hUart, pData, len) != HAL_OK)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	88fa      	ldrh	r2, [r7, #6]
 80010d4:	68b9      	ldr	r1, [r7, #8]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f007 fd52 	bl	8008b80 <HAL_UART_Transmit_DMA>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d102      	bne.n	80010e8 <ATC_TxRaw+0x2c>
		{
			break;
		}
		answer = true;
 80010e2:	2301      	movs	r3, #1
 80010e4:	75fb      	strb	r3, [r7, #23]
 80010e6:	e000      	b.n	80010ea <ATC_TxRaw+0x2e>
			break;
 80010e8:	bf00      	nop

	} while (0);

	return answer;
 80010ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <ATC_TxBusy>:

bool ATC_TxBusy(ATC_Handletypedef* hAtc){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX))
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f008 f8cd 	bl	80092a0 <HAL_UART_GetState>
 8001106:	4603      	mov	r3, r0
 8001108:	2b21      	cmp	r3, #33	; 0x21
 800110a:	d007      	beq.n	800111c <ATC_TxBusy+0x28>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f008 f8c5 	bl	80092a0 <HAL_UART_GetState>
 8001116:	4603      	mov	r3, r0
 8001118:	2b23      	cmp	r3, #35	; 0x23
 800111a:	d101      	bne.n	8001120 <ATC_TxBusy+0x2c>
		return true;
 800111c:	2301      	movs	r3, #1
 800111e:	e000      	b.n	8001122 <ATC_TxBusy+0x2e>
	else
		return false;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <ATC_TxWait>:

bool ATC_TxWait(ATC_Handletypedef* hAtc, uint32_t TIMEOUT){
 800112a:	b580      	push	{r7, lr}
 800112c:	b084      	sub	sp, #16
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	6039      	str	r1, [r7, #0]
	bool answer = false;
 8001134:	2300      	movs	r3, #0
 8001136:	73fb      	strb	r3, [r7, #15]
	uint32_t start_time = HAL_GetTick();
 8001138:	f003 fc64 	bl	8004a04 <HAL_GetTick>
 800113c:	60b8      	str	r0, [r7, #8]
	while (1)
	{
		HAL_Delay(1);
 800113e:	2001      	movs	r0, #1
 8001140:	f003 fc6a 	bl	8004a18 <HAL_Delay>
		if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_READY))
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f008 f8a9 	bl	80092a0 <HAL_UART_GetState>
 800114e:	4603      	mov	r3, r0
 8001150:	2b22      	cmp	r3, #34	; 0x22
 8001152:	d007      	beq.n	8001164 <ATC_TxWait+0x3a>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f008 f8a1 	bl	80092a0 <HAL_UART_GetState>
 800115e:	4603      	mov	r3, r0
 8001160:	2b20      	cmp	r3, #32
 8001162:	d102      	bne.n	800116a <ATC_TxWait+0x40>
		{
			answer = true;
 8001164:	2301      	movs	r3, #1
 8001166:	73fb      	strb	r3, [r7, #15]
			break;
 8001168:	e01c      	b.n	80011a4 <ATC_TxWait+0x7a>
		}
		if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_ERROR) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_TIMEOUT))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f008 f896 	bl	80092a0 <HAL_UART_GetState>
 8001174:	4603      	mov	r3, r0
 8001176:	2be0      	cmp	r3, #224	; 0xe0
 8001178:	d014      	beq.n	80011a4 <ATC_TxWait+0x7a>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f008 f88e 	bl	80092a0 <HAL_UART_GetState>
 8001184:	4603      	mov	r3, r0
 8001186:	2ba0      	cmp	r3, #160	; 0xa0
 8001188:	d00c      	beq.n	80011a4 <ATC_TxWait+0x7a>
		{
			  break;
		}
		if (HAL_GetTick() - start_time >= TIMEOUT)
 800118a:	f003 fc3b 	bl	8004a04 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	429a      	cmp	r2, r3
 8001198:	d8d1      	bhi.n	800113e <ATC_TxWait+0x14>
		{
		  HAL_UART_AbortTransmit(hAtc->hUart);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f007 fd5e 	bl	8008c60 <HAL_UART_AbortTransmit>
		  break;
		}
	}

	return answer;
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <ATC_RxFlush>:

void ATC_RxFlush(ATC_Handletypedef* hAtc){
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
	memset(hAtc->pRxbuff, 0, BUFFER_SIZE);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3304      	adds	r3, #4
 80011ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f009 fa7c 	bl	800a6be <memset>
	hAtc->RxIdx = 0;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <ATC_CheckError>:

void ATC_CheckError(ATC_Handletypedef* hAtc){
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
	return; //for dummy
 80011de:	bf00      	nop
}
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr

080011e8 <ATC_Send>:

int ATC_SendReceive(ATC_Handletypedef* hAtc, const char* pCmd, uint32_t TxTimeout, uint32_t RxTimeout){
	return 0; // for dummy
}

bool ATC_Send(ATC_Handletypedef* hAtc, const char* pCmd, uint32_t TxTimeout){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
	bool answer = false;
 80011f4:	2300      	movs	r3, #0
 80011f6:	75fb      	strb	r3, [r7, #23]
	do{
		if (ATC_TxBusy(hAtc) == true)
 80011f8:	68f8      	ldr	r0, [r7, #12]
 80011fa:	f7ff ff7b 	bl	80010f4 <ATC_TxBusy>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d122      	bne.n	800124a <ATC_Send+0x62>
		{
		  break;
		}
		ATC_CheckError(hAtc);
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f7ff ffe6 	bl	80011d6 <ATC_CheckError>
		ATC_RxFlush(hAtc);
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	f7ff ffcf 	bl	80011ae <ATC_RxFlush>
		if (ATC_TxRaw(hAtc, (const uint8_t*)pCmd, strlen((char*)pCmd)) == false)
 8001210:	68b8      	ldr	r0, [r7, #8]
 8001212:	f7fe ff9d 	bl	8000150 <strlen>
 8001216:	4603      	mov	r3, r0
 8001218:	b29b      	uxth	r3, r3
 800121a:	461a      	mov	r2, r3
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f7ff ff4c 	bl	80010bc <ATC_TxRaw>
 8001224:	4603      	mov	r3, r0
 8001226:	f083 0301 	eor.w	r3, r3, #1
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	d10e      	bne.n	800124e <ATC_Send+0x66>
		{
		  break;
		}
		if (ATC_TxWait(hAtc, TxTimeout) == false)
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f7ff ff79 	bl	800112a <ATC_TxWait>
 8001238:	4603      	mov	r3, r0
 800123a:	f083 0301 	eor.w	r3, r3, #1
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	d106      	bne.n	8001252 <ATC_Send+0x6a>
		{
		  break;
		}

		answer = true;
 8001244:	2301      	movs	r3, #1
 8001246:	75fb      	strb	r3, [r7, #23]
 8001248:	e004      	b.n	8001254 <ATC_Send+0x6c>
		  break;
 800124a:	bf00      	nop
 800124c:	e002      	b.n	8001254 <ATC_Send+0x6c>
		  break;
 800124e:	bf00      	nop
 8001250:	e000      	b.n	8001254 <ATC_Send+0x6c>
		  break;
 8001252:	bf00      	nop
	}
	while(0);

	return answer;
 8001254:	7dfb      	ldrb	r3, [r7, #23]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <ATC_Receive>:

bool ATC_Receive(ATC_Handletypedef* hAtc, const char* expectedResponse, uint32_t RxTimeout){
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
	bool answer = false;
 800126c:	2300      	movs	r3, #0
 800126e:	75fb      	strb	r3, [r7, #23]

	uint32_t start_time = HAL_GetTick();
 8001270:	f003 fbc8 	bl	8004a04 <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]
	while (HAL_GetTick() - start_time < RxTimeout) {
 8001276:	e024      	b.n	80012c2 <ATC_Receive+0x62>
	   if(strstr((char*)hAtc->pRxbuff, expectedResponse) != NULL) {
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	3304      	adds	r3, #4
 800127c:	68b9      	ldr	r1, [r7, #8]
 800127e:	4618      	mov	r0, r3
 8001280:	f009 fa25 	bl	800a6ce <strstr>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d002      	beq.n	8001290 <ATC_Receive+0x30>
		   answer = true;
 800128a:	2301      	movs	r3, #1
 800128c:	75fb      	strb	r3, [r7, #23]
		   break;
 800128e:	e022      	b.n	80012d6 <ATC_Receive+0x76>
	   }
	   if(strstr((char*)hAtc->pRxbuff, esp_ok) != NULL) {
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	3304      	adds	r3, #4
 8001294:	4a19      	ldr	r2, [pc, #100]	; (80012fc <ATC_Receive+0x9c>)
 8001296:	6812      	ldr	r2, [r2, #0]
 8001298:	4611      	mov	r1, r2
 800129a:	4618      	mov	r0, r3
 800129c:	f009 fa17 	bl	800a6ce <strstr>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d002      	beq.n	80012ac <ATC_Receive+0x4c>
		   answer = true;
 80012a6:	2301      	movs	r3, #1
 80012a8:	75fb      	strb	r3, [r7, #23]
		   break;
 80012aa:	e014      	b.n	80012d6 <ATC_Receive+0x76>
	   }
	   if(strstr((char*)hAtc->pRxbuff, esp_error) != NULL) {
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	3304      	adds	r3, #4
 80012b0:	4a13      	ldr	r2, [pc, #76]	; (8001300 <ATC_Receive+0xa0>)
 80012b2:	6812      	ldr	r2, [r2, #0]
 80012b4:	4611      	mov	r1, r2
 80012b6:	4618      	mov	r0, r3
 80012b8:	f009 fa09 	bl	800a6ce <strstr>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d108      	bne.n	80012d4 <ATC_Receive+0x74>
	while (HAL_GetTick() - start_time < RxTimeout) {
 80012c2:	f003 fb9f 	bl	8004a04 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d8d2      	bhi.n	8001278 <ATC_Receive+0x18>
 80012d2:	e000      	b.n	80012d6 <ATC_Receive+0x76>
		   break;
 80012d4:	bf00      	nop
	   }
//	   if(strstr((char*)hAtc->pRxbuff, esp_busy) != NULL) {
//		   break;
//	   }
	}
	HAL_UART_Transmit(&huart3, (uint8_t*)hAtc->pRxbuff, hAtc->RxIdx + 1, 1000);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1d19      	adds	r1, r3, #4
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	3301      	adds	r3, #1
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	4806      	ldr	r0, [pc, #24]	; (8001304 <ATC_Receive+0xa4>)
 80012ec:	f007 fb97 	bl	8008a1e <HAL_UART_Transmit>

	return answer;
 80012f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000000 	.word	0x20000000
 8001300:	20000004 	.word	0x20000004
 8001304:	20000acc 	.word	0x20000acc

08001308 <init_button>:
static GPIO_PinState debounceButton2[NO_OF_BUTTON];
static GPIO_PinState debounceButton3[NO_OF_BUTTON];
static uint8_t flagforButtonPressed1s[NO_OF_BUTTON];
static uint8_t counterforButtonPressed1s[NO_OF_BUTTON];

void init_button(void){
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTON; i++){
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	e011      	b.n	8001338 <init_button+0x30>
		debounceButton1[i] = GPIO_PIN_SET;
 8001314:	4a0d      	ldr	r2, [pc, #52]	; (800134c <init_button+0x44>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	2201      	movs	r2, #1
 800131c:	701a      	strb	r2, [r3, #0]
		debounceButton2[i] = GPIO_PIN_SET;
 800131e:	4a0c      	ldr	r2, [pc, #48]	; (8001350 <init_button+0x48>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4413      	add	r3, r2
 8001324:	2201      	movs	r2, #1
 8001326:	701a      	strb	r2, [r3, #0]
		debounceButton3[i] = GPIO_PIN_SET;
 8001328:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <init_button+0x4c>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	2201      	movs	r2, #1
 8001330:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_BUTTON; i++){
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3301      	adds	r3, #1
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b02      	cmp	r3, #2
 800133c:	ddea      	ble.n	8001314 <init_button+0xc>
	}
}
 800133e:	bf00      	nop
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000224 	.word	0x20000224
 8001350:	20000228 	.word	0x20000228
 8001354:	2000022c 	.word	0x2000022c

08001358 <button_reading>:

void button_reading(void){
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(task1_GPIO_Port, task1_Pin);
 800135e:	2101      	movs	r1, #1
 8001360:	4831      	ldr	r0, [pc, #196]	; (8001428 <button_reading+0xd0>)
 8001362:	f004 f8ea 	bl	800553a <HAL_GPIO_TogglePin>
	for(int i = 0; i < NO_OF_BUTTON; i++){
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	e054      	b.n	8001416 <button_reading+0xbe>
		debounceButton3[i] = debounceButton2[i];
 800136c:	4a2f      	ldr	r2, [pc, #188]	; (800142c <button_reading+0xd4>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	7819      	ldrb	r1, [r3, #0]
 8001374:	4a2e      	ldr	r2, [pc, #184]	; (8001430 <button_reading+0xd8>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	460a      	mov	r2, r1
 800137c:	701a      	strb	r2, [r3, #0]
		debounceButton2[i] = debounceButton1[i];
 800137e:	4a2d      	ldr	r2, [pc, #180]	; (8001434 <button_reading+0xdc>)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4413      	add	r3, r2
 8001384:	7819      	ldrb	r1, [r3, #0]
 8001386:	4a29      	ldr	r2, [pc, #164]	; (800142c <button_reading+0xd4>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4413      	add	r3, r2
 800138c:	460a      	mov	r2, r1
 800138e:	701a      	strb	r2, [r3, #0]
		updateButtonState(i);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	4618      	mov	r0, r3
 8001396:	f000 f855 	bl	8001444 <updateButtonState>

		if(debounceButton3[i] == debounceButton1[i]){
 800139a:	4a25      	ldr	r2, [pc, #148]	; (8001430 <button_reading+0xd8>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4413      	add	r3, r2
 80013a0:	781a      	ldrb	r2, [r3, #0]
 80013a2:	4924      	ldr	r1, [pc, #144]	; (8001434 <button_reading+0xdc>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	440b      	add	r3, r1
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d130      	bne.n	8001410 <button_reading+0xb8>
			buttonBuffer[i] = debounceButton1[i];
 80013ae:	4a21      	ldr	r2, [pc, #132]	; (8001434 <button_reading+0xdc>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4413      	add	r3, r2
 80013b4:	7819      	ldrb	r1, [r3, #0]
 80013b6:	4a20      	ldr	r2, [pc, #128]	; (8001438 <button_reading+0xe0>)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4413      	add	r3, r2
 80013bc:	460a      	mov	r2, r1
 80013be:	701a      	strb	r2, [r3, #0]
			if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 80013c0:	4a1d      	ldr	r2, [pc, #116]	; (8001438 <button_reading+0xe0>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d117      	bne.n	80013fc <button_reading+0xa4>
				if(counterforButtonPressed1s[i] < DURATION_FOR_AUTO_INCREASING){
 80013cc:	4a1b      	ldr	r2, [pc, #108]	; (800143c <button_reading+0xe4>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b63      	cmp	r3, #99	; 0x63
 80013d6:	d80b      	bhi.n	80013f0 <button_reading+0x98>
					counterforButtonPressed1s[i]++;
 80013d8:	4a18      	ldr	r2, [pc, #96]	; (800143c <button_reading+0xe4>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	3301      	adds	r3, #1
 80013e2:	b2d9      	uxtb	r1, r3
 80013e4:	4a15      	ldr	r2, [pc, #84]	; (800143c <button_reading+0xe4>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	460a      	mov	r2, r1
 80013ec:	701a      	strb	r2, [r3, #0]
 80013ee:	e00f      	b.n	8001410 <button_reading+0xb8>
				}
				else{
					flagforButtonPressed1s[i] = 1;
 80013f0:	4a13      	ldr	r2, [pc, #76]	; (8001440 <button_reading+0xe8>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	2201      	movs	r2, #1
 80013f8:	701a      	strb	r2, [r3, #0]
 80013fa:	e009      	b.n	8001410 <button_reading+0xb8>
				}
			}
			else{
				flagforButtonPressed1s[i] = 0;
 80013fc:	4a10      	ldr	r2, [pc, #64]	; (8001440 <button_reading+0xe8>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
				counterforButtonPressed1s[i] = 0;
 8001406:	4a0d      	ldr	r2, [pc, #52]	; (800143c <button_reading+0xe4>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4413      	add	r3, r2
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_BUTTON; i++){
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3301      	adds	r3, #1
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b02      	cmp	r3, #2
 800141a:	dda7      	ble.n	800136c <button_reading+0x14>
			}
		}
	}
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40010c00 	.word	0x40010c00
 800142c:	20000228 	.word	0x20000228
 8001430:	2000022c 	.word	0x2000022c
 8001434:	20000224 	.word	0x20000224
 8001438:	20000220 	.word	0x20000220
 800143c:	20000234 	.word	0x20000234
 8001440:	20000230 	.word	0x20000230

08001444 <updateButtonState>:

void updateButtonState(uint8_t idx){
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
	switch(idx){
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	2b02      	cmp	r3, #2
 8001452:	d01c      	beq.n	800148e <updateButtonState+0x4a>
 8001454:	2b02      	cmp	r3, #2
 8001456:	dc25      	bgt.n	80014a4 <updateButtonState+0x60>
 8001458:	2b00      	cmp	r3, #0
 800145a:	d002      	beq.n	8001462 <updateButtonState+0x1e>
 800145c:	2b01      	cmp	r3, #1
 800145e:	d00b      	beq.n	8001478 <updateButtonState+0x34>
	case 2:{
		debounceButton1[idx] = HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin);
		break;
	}
	default:{
		break;
 8001460:	e020      	b.n	80014a4 <updateButtonState+0x60>
		debounceButton1[idx] = HAL_GPIO_ReadPin(BTN0_GPIO_Port, BTN0_Pin);
 8001462:	79fc      	ldrb	r4, [r7, #7]
 8001464:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001468:	4811      	ldr	r0, [pc, #68]	; (80014b0 <updateButtonState+0x6c>)
 800146a:	f004 f837 	bl	80054dc <HAL_GPIO_ReadPin>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <updateButtonState+0x70>)
 8001474:	551a      	strb	r2, [r3, r4]
		break;
 8001476:	e016      	b.n	80014a6 <updateButtonState+0x62>
		debounceButton1[idx] = HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin);
 8001478:	79fc      	ldrb	r4, [r7, #7]
 800147a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800147e:	480c      	ldr	r0, [pc, #48]	; (80014b0 <updateButtonState+0x6c>)
 8001480:	f004 f82c 	bl	80054dc <HAL_GPIO_ReadPin>
 8001484:	4603      	mov	r3, r0
 8001486:	461a      	mov	r2, r3
 8001488:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <updateButtonState+0x70>)
 800148a:	551a      	strb	r2, [r3, r4]
		break;
 800148c:	e00b      	b.n	80014a6 <updateButtonState+0x62>
		debounceButton1[idx] = HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin);
 800148e:	79fc      	ldrb	r4, [r7, #7]
 8001490:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001494:	4806      	ldr	r0, [pc, #24]	; (80014b0 <updateButtonState+0x6c>)
 8001496:	f004 f821 	bl	80054dc <HAL_GPIO_ReadPin>
 800149a:	4603      	mov	r3, r0
 800149c:	461a      	mov	r2, r3
 800149e:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <updateButtonState+0x70>)
 80014a0:	551a      	strb	r2, [r3, r4]
		break;
 80014a2:	e000      	b.n	80014a6 <updateButtonState+0x62>
		break;
 80014a4:	bf00      	nop
	}
	}
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd90      	pop	{r4, r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40010c00 	.word	0x40010c00
 80014b4:	20000224 	.word	0x20000224

080014b8 <is_button_press>:

unsigned char is_button_press(uint8_t idx){
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
	if(idx > NO_OF_BUTTON) return 0;
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	d901      	bls.n	80014cc <is_button_press+0x14>
 80014c8:	2300      	movs	r3, #0
 80014ca:	e007      	b.n	80014dc <is_button_press+0x24>
	return (buttonBuffer[idx] == BUTTON_IS_PRESSED);
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	4a06      	ldr	r2, [pc, #24]	; (80014e8 <is_button_press+0x30>)
 80014d0:	5cd3      	ldrb	r3, [r2, r3]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	bf0c      	ite	eq
 80014d6:	2301      	moveq	r3, #1
 80014d8:	2300      	movne	r3, #0
 80014da:	b2db      	uxtb	r3, r3
}
 80014dc:	4618      	mov	r0, r3
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000220 	.word	0x20000220

080014ec <is_button_press1s>:

unsigned char is_button_press1s(uint8_t idx){
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
	if(idx > NO_OF_BUTTON) return 0;
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	2b03      	cmp	r3, #3
 80014fa:	d901      	bls.n	8001500 <is_button_press1s+0x14>
 80014fc:	2300      	movs	r3, #0
 80014fe:	e007      	b.n	8001510 <is_button_press1s+0x24>
	return (flagforButtonPressed1s[idx] == 1);
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	4a06      	ldr	r2, [pc, #24]	; (800151c <is_button_press1s+0x30>)
 8001504:	5cd3      	ldrb	r3, [r2, r3]
 8001506:	2b01      	cmp	r3, #1
 8001508:	bf0c      	ite	eq
 800150a:	2301      	moveq	r3, #1
 800150c:	2300      	movne	r3, #0
 800150e:	b2db      	uxtb	r3, r3
}
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000230 	.word	0x20000230

08001520 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <MX_DMA_Init+0x48>)
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	4a0f      	ldr	r2, [pc, #60]	; (8001568 <MX_DMA_Init+0x48>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6153      	str	r3, [r2, #20]
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <MX_DMA_Init+0x48>)
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	200c      	movs	r0, #12
 8001544:	f003 fb63 	bl	8004c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001548:	200c      	movs	r0, #12
 800154a:	f003 fb7c 	bl	8004c46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	2100      	movs	r1, #0
 8001552:	200e      	movs	r0, #14
 8001554:	f003 fb5b 	bl	8004c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001558:	200e      	movs	r0, #14
 800155a:	f003 fb74 	bl	8004c46 <HAL_NVIC_EnableIRQ>

}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40021000 	.word	0x40021000

0800156c <InitESP>:
ESP_HandleTypeDef hEsp;

// UART timeout (ms)
#define UART_TIMEOUT 1000

void InitESP(void){
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	ATC_Init(&hEsp.hAtc, &huart1);
 8001570:	4902      	ldr	r1, [pc, #8]	; (800157c <InitESP+0x10>)
 8001572:	4803      	ldr	r0, [pc, #12]	; (8001580 <InitESP+0x14>)
 8001574:	f7ff fd7c 	bl	8001070 <ATC_Init>
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000a3c 	.word	0x20000a3c
 8001580:	20000238 	.word	0x20000238

08001584 <ESP_Init>:


// ESP
bool ESP_Init(ESP_HandleTypeDef* hEsp){
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	bool answer = false;
 800158c:	2300      	movs	r3, #0
 800158e:	73fb      	strb	r3, [r7, #15]
	do{
		if(!ATC_Send(&hEsp->hAtc, "AT\r\n", 100)){
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2264      	movs	r2, #100	; 0x64
 8001594:	4910      	ldr	r1, [pc, #64]	; (80015d8 <ESP_Init+0x54>)
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fe26 	bl	80011e8 <ATC_Send>
 800159c:	4603      	mov	r3, r0
 800159e:	f083 0301 	eor.w	r3, r3, #1
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d10f      	bne.n	80015c8 <ESP_Init+0x44>

			break;
		}
		if(!ATC_Receive(&hEsp->hAtc, esp_ok, 100)){
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a0c      	ldr	r2, [pc, #48]	; (80015dc <ESP_Init+0x58>)
 80015ac:	6811      	ldr	r1, [r2, #0]
 80015ae:	2264      	movs	r2, #100	; 0x64
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fe55 	bl	8001260 <ATC_Receive>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f083 0301 	eor.w	r3, r3, #1
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d104      	bne.n	80015cc <ESP_Init+0x48>

			break;
		}

		answer = true;
 80015c2:	2301      	movs	r3, #1
 80015c4:	73fb      	strb	r3, [r7, #15]
 80015c6:	e002      	b.n	80015ce <ESP_Init+0x4a>
			break;
 80015c8:	bf00      	nop
 80015ca:	e000      	b.n	80015ce <ESP_Init+0x4a>
			break;
 80015cc:	bf00      	nop
	}
	while(0);

	// debug log if needed

	return answer;
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	0800c794 	.word	0x0800c794
 80015dc:	20000008 	.word	0x20000008

080015e0 <ESP_Restart>:

bool ESP_Restart(ESP_HandleTypeDef* hEsp){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	bool answer = false;
 80015e8:	2300      	movs	r3, #0
 80015ea:	73fb      	strb	r3, [r7, #15]
	do{
		if(!ATC_Send(&hEsp->hAtc, "AT+RST\r\n", 100)){
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2264      	movs	r2, #100	; 0x64
 80015f0:	4910      	ldr	r1, [pc, #64]	; (8001634 <ESP_Restart+0x54>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fdf8 	bl	80011e8 <ATC_Send>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f083 0301 	eor.w	r3, r3, #1
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10f      	bne.n	8001624 <ESP_Restart+0x44>
			break;
		}
		if(!ATC_Receive(&hEsp->hAtc, esp_ok, 100)){
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a0c      	ldr	r2, [pc, #48]	; (8001638 <ESP_Restart+0x58>)
 8001608:	6811      	ldr	r1, [r2, #0]
 800160a:	2264      	movs	r2, #100	; 0x64
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fe27 	bl	8001260 <ATC_Receive>
 8001612:	4603      	mov	r3, r0
 8001614:	f083 0301 	eor.w	r3, r3, #1
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d104      	bne.n	8001628 <ESP_Restart+0x48>
			break;
		}
		answer = true;
 800161e:	2301      	movs	r3, #1
 8001620:	73fb      	strb	r3, [r7, #15]
 8001622:	e002      	b.n	800162a <ESP_Restart+0x4a>
			break;
 8001624:	bf00      	nop
 8001626:	e000      	b.n	800162a <ESP_Restart+0x4a>
			break;
 8001628:	bf00      	nop
	}
	while(0);

	// debug log if needed

	return answer;
 800162a:	7bfb      	ldrb	r3, [r7, #15]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	0800c79c 	.word	0x0800c79c
 8001638:	20000008 	.word	0x20000008

0800163c <ESP_WifiInit>:
	} while (0);

	return answer;
}

bool ESP_WifiInit(ESP_HandleTypeDef* hEsp){
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	bool answer = false;
 8001644:	2300      	movs	r3, #0
 8001646:	73fb      	strb	r3, [r7, #15]
	do{
		if(!ATC_Send(&hEsp->hAtc, "AT+CWINIT=1\r\n", 100)){
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2264      	movs	r2, #100	; 0x64
 800164c:	4910      	ldr	r1, [pc, #64]	; (8001690 <ESP_WifiInit+0x54>)
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fdca 	bl	80011e8 <ATC_Send>
 8001654:	4603      	mov	r3, r0
 8001656:	f083 0301 	eor.w	r3, r3, #1
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	d10f      	bne.n	8001680 <ESP_WifiInit+0x44>
			break;
		}
		if(!ATC_Receive(&hEsp->hAtc, esp_ok, 100)){
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a0c      	ldr	r2, [pc, #48]	; (8001694 <ESP_WifiInit+0x58>)
 8001664:	6811      	ldr	r1, [r2, #0]
 8001666:	2264      	movs	r2, #100	; 0x64
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fdf9 	bl	8001260 <ATC_Receive>
 800166e:	4603      	mov	r3, r0
 8001670:	f083 0301 	eor.w	r3, r3, #1
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d104      	bne.n	8001684 <ESP_WifiInit+0x48>
			break;
		}
		answer = true;
 800167a:	2301      	movs	r3, #1
 800167c:	73fb      	strb	r3, [r7, #15]
 800167e:	e002      	b.n	8001686 <ESP_WifiInit+0x4a>
			break;
 8001680:	bf00      	nop
 8001682:	e000      	b.n	8001686 <ESP_WifiInit+0x4a>
			break;
 8001684:	bf00      	nop
	}
	while(0);


	return answer;
 8001686:	7bfb      	ldrb	r3, [r7, #15]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	0800c7dc 	.word	0x0800c7dc
 8001694:	20000008 	.word	0x20000008

08001698 <ESP_WifiStationConnect>:
	while(0);

	return answer;
}

bool ESP_WifiStationConnect(ESP_HandleTypeDef* hEsp, const char* pSSID, const char* pPass, const char* pMac, uint16_t Timeout){
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b0c7      	sub	sp, #284	; 0x11c
 800169c:	af00      	add	r7, sp, #0
 800169e:	f507 748c 	add.w	r4, r7, #280	; 0x118
 80016a2:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 80016a6:	6020      	str	r0, [r4, #0]
 80016a8:	f507 708c 	add.w	r0, r7, #280	; 0x118
 80016ac:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
 80016b0:	6001      	str	r1, [r0, #0]
 80016b2:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80016b6:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 80016ba:	600a      	str	r2, [r1, #0]
 80016bc:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80016c0:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80016c4:	6013      	str	r3, [r2, #0]
	bool answer = false;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	char str_at[256];
	memset(str_at, 0, sizeof(str_at));
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f008 fff1 	bl	800a6be <memset>
	do
	{
		sprintf(str_at, "AT+CWJAP=\"%s\",\"%s\"", pSSID, pPass);
 80016dc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80016e0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80016e4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80016e8:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80016ec:	f107 0014 	add.w	r0, r7, #20
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	4921      	ldr	r1, [pc, #132]	; (800177c <ESP_WifiStationConnect+0xe4>)
 80016f6:	f008 ff7f 	bl	800a5f8 <siprintf>
//			strcat(str_at, "\",");
//			strcat(str_at, ",,,,");
////			sprintf(str_timeout, "%d", Timeout);
//			strcat(str_at, "10000");
//		}
		strcat(str_at, "\r\n");
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	4618      	mov	r0, r3
 8001700:	f7fe fd26 	bl	8000150 <strlen>
 8001704:	4603      	mov	r3, r0
 8001706:	461a      	mov	r2, r3
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4413      	add	r3, r2
 800170e:	4a1c      	ldr	r2, [pc, #112]	; (8001780 <ESP_WifiStationConnect+0xe8>)
 8001710:	8811      	ldrh	r1, [r2, #0]
 8001712:	7892      	ldrb	r2, [r2, #2]
 8001714:	8019      	strh	r1, [r3, #0]
 8001716:	709a      	strb	r2, [r3, #2]
		if(!ATC_Send(&hEsp->hAtc, str_at, 1000)){
 8001718:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800171c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f107 0114 	add.w	r1, r7, #20
 8001726:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fd5c 	bl	80011e8 <ATC_Send>
 8001730:	4603      	mov	r3, r0
 8001732:	f083 0301 	eor.w	r3, r3, #1
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	d115      	bne.n	8001768 <ESP_WifiStationConnect+0xd0>
			break;
		}
		if(!ATC_Receive(&hEsp->hAtc, esp_ok, 1000)){
 800173c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001740:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a0f      	ldr	r2, [pc, #60]	; (8001784 <ESP_WifiStationConnect+0xec>)
 8001748:	6811      	ldr	r1, [r2, #0]
 800174a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fd86 	bl	8001260 <ATC_Receive>
 8001754:	4603      	mov	r3, r0
 8001756:	f083 0301 	eor.w	r3, r3, #1
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	d105      	bne.n	800176c <ESP_WifiStationConnect+0xd4>
			break;
		}
		answer = true;
 8001760:	2301      	movs	r3, #1
 8001762:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8001766:	e002      	b.n	800176e <ESP_WifiStationConnect+0xd6>
			break;
 8001768:	bf00      	nop
 800176a:	e000      	b.n	800176e <ESP_WifiStationConnect+0xd6>
			break;
 800176c:	bf00      	nop
	} while (0);

	return answer;
 800176e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
}
 8001772:	4618      	mov	r0, r3
 8001774:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8001778:	46bd      	mov	sp, r7
 800177a:	bd90      	pop	{r4, r7, pc}
 800177c:	0800c7fc 	.word	0x0800c7fc
 8001780:	0800c810 	.word	0x0800c810
 8001784:	20000008 	.word	0x20000008

08001788 <ESP_WifiMode>:
	while(0);

	return answer;
}

bool ESP_WifiMode(ESP_HandleTypeDef* hEsp, ESP_WifiModeTypeDef WifiMode, bool StationAutoConnect){
 8001788:	b580      	push	{r7, lr}
 800178a:	b0c4      	sub	sp, #272	; 0x110
 800178c:	af00      	add	r7, sp, #0
 800178e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001792:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001796:	6018      	str	r0, [r3, #0]
 8001798:	4608      	mov	r0, r1
 800179a:	4611      	mov	r1, r2
 800179c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80017a0:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 80017a4:	4602      	mov	r2, r0
 80017a6:	701a      	strb	r2, [r3, #0]
 80017a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80017ac:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 80017b0:	460a      	mov	r2, r1
 80017b2:	701a      	strb	r2, [r3, #0]
	bool answer = false;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	char str_at[256];
	memset(str_at, 0, sizeof(str_at));
 80017ba:	f107 030c 	add.w	r3, r7, #12
 80017be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017c2:	2100      	movs	r1, #0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f008 ff7a 	bl	800a6be <memset>
	do
	{
		sprintf(str_at, "AT+CWMODE=%d,%d\r\n", WifiMode, StationAutoConnect);
 80017ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80017ce:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 80017d2:	781a      	ldrb	r2, [r3, #0]
 80017d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80017d8:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	f107 000c 	add.w	r0, r7, #12
 80017e2:	4919      	ldr	r1, [pc, #100]	; (8001848 <ESP_WifiMode+0xc0>)
 80017e4:	f008 ff08 	bl	800a5f8 <siprintf>
		if (!ATC_Send(&hEsp->hAtc, str_at, 100))
 80017e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80017ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f107 010c 	add.w	r1, r7, #12
 80017f6:	2264      	movs	r2, #100	; 0x64
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fcf5 	bl	80011e8 <ATC_Send>
 80017fe:	4603      	mov	r3, r0
 8001800:	f083 0301 	eor.w	r3, r3, #1
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d114      	bne.n	8001834 <ESP_WifiMode+0xac>
		{
		  break;
		}
		if (!ATC_Receive(&hEsp->hAtc, esp_ok, 100))
 800180a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800180e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0d      	ldr	r2, [pc, #52]	; (800184c <ESP_WifiMode+0xc4>)
 8001816:	6811      	ldr	r1, [r2, #0]
 8001818:	2264      	movs	r2, #100	; 0x64
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fd20 	bl	8001260 <ATC_Receive>
 8001820:	4603      	mov	r3, r0
 8001822:	f083 0301 	eor.w	r3, r3, #1
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d105      	bne.n	8001838 <ESP_WifiMode+0xb0>
		{
		  break;
		}
		answer = true;
 800182c:	2301      	movs	r3, #1
 800182e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001832:	e002      	b.n	800183a <ESP_WifiMode+0xb2>
		  break;
 8001834:	bf00      	nop
 8001836:	e000      	b.n	800183a <ESP_WifiMode+0xb2>
		  break;
 8001838:	bf00      	nop

	} while (0);

	return answer;
 800183a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
}
 800183e:	4618      	mov	r0, r3
 8001840:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	0800c820 	.word	0x0800c820
 800184c:	20000008 	.word	0x20000008

08001850 <ESP_MQTTConfig>:

	return answer;
}

// MQTT
bool ESP_MQTTConfig(ESP_HandleTypeDef* hEsp, const char* Username, const char* Key){
 8001850:	b580      	push	{r7, lr}
 8001852:	b0c8      	sub	sp, #288	; 0x120
 8001854:	af02      	add	r7, sp, #8
 8001856:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800185a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800185e:	6018      	str	r0, [r3, #0]
 8001860:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001864:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001868:	6019      	str	r1, [r3, #0]
 800186a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800186e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001872:	601a      	str	r2, [r3, #0]
	bool answer = false;
 8001874:	2300      	movs	r3, #0
 8001876:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	char cmd[256];
	snprintf(cmd, sizeof(cmd), "AT+MQTTUSERCFG=0,1,\"\",\"%s\",\"%s\",0,0,\"\"\r\n", Username, Key);
 800187a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800187e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001882:	f107 0014 	add.w	r0, r7, #20
 8001886:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800188a:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	9200      	str	r2, [sp, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a1b      	ldr	r2, [pc, #108]	; (8001904 <ESP_MQTTConfig+0xb4>)
 8001896:	f44f 7180 	mov.w	r1, #256	; 0x100
 800189a:	f008 fe79 	bl	800a590 <sniprintf>
	do
	{
		if (!ATC_Send(&hEsp->hAtc, cmd, 1000))
 800189e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80018a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f107 0114 	add.w	r1, r7, #20
 80018ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fc99 	bl	80011e8 <ATC_Send>
 80018b6:	4603      	mov	r3, r0
 80018b8:	f083 0301 	eor.w	r3, r3, #1
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d115      	bne.n	80018ee <ESP_MQTTConfig+0x9e>
		{
		  break;
		}
		if (!ATC_Receive(&hEsp->hAtc, esp_ok, 1000))
 80018c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80018c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0e      	ldr	r2, [pc, #56]	; (8001908 <ESP_MQTTConfig+0xb8>)
 80018ce:	6811      	ldr	r1, [r2, #0]
 80018d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fcc3 	bl	8001260 <ATC_Receive>
 80018da:	4603      	mov	r3, r0
 80018dc:	f083 0301 	eor.w	r3, r3, #1
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d105      	bne.n	80018f2 <ESP_MQTTConfig+0xa2>
		{
		  break;
		}


		answer = true;
 80018e6:	2301      	movs	r3, #1
 80018e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80018ec:	e002      	b.n	80018f4 <ESP_MQTTConfig+0xa4>
		  break;
 80018ee:	bf00      	nop
 80018f0:	e000      	b.n	80018f4 <ESP_MQTTConfig+0xa4>
		  break;
 80018f2:	bf00      	nop

	} while (0);

	return answer;
 80018f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	0800c840 	.word	0x0800c840
 8001908:	20000008 	.word	0x20000008

0800190c <ESP_MQTTConnect>:

bool ESP_MQTTConnect(ESP_HandleTypeDef* hEsp, const char* Server, uint16_t Port){
 800190c:	b580      	push	{r7, lr}
 800190e:	b0c8      	sub	sp, #288	; 0x120
 8001910:	af02      	add	r7, sp, #8
 8001912:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001916:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800191a:	6018      	str	r0, [r3, #0]
 800191c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001920:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001924:	6019      	str	r1, [r3, #0]
 8001926:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800192a:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 800192e:	801a      	strh	r2, [r3, #0]
	bool answer = false;
 8001930:	2300      	movs	r3, #0
 8001932:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	char cmd[256];
	snprintf(cmd, sizeof(cmd), "AT+MQTTCONN=0,\"%s\",%d,0\r\n", Server, Port);
 8001936:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800193a:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 800193e:	881a      	ldrh	r2, [r3, #0]
 8001940:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001944:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001948:	f107 0014 	add.w	r0, r7, #20
 800194c:	9200      	str	r2, [sp, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a1b      	ldr	r2, [pc, #108]	; (80019c0 <ESP_MQTTConnect+0xb4>)
 8001952:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001956:	f008 fe1b 	bl	800a590 <sniprintf>
	do
	{
		if (!ATC_Send(&hEsp->hAtc, cmd, 1000))
 800195a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800195e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f107 0114 	add.w	r1, r7, #20
 8001968:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fc3b 	bl	80011e8 <ATC_Send>
 8001972:	4603      	mov	r3, r0
 8001974:	f083 0301 	eor.w	r3, r3, #1
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d115      	bne.n	80019aa <ESP_MQTTConnect+0x9e>
		{
		  break;
		}
		if (!ATC_Receive(&hEsp->hAtc, esp_ok, 1000))
 800197e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001982:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0e      	ldr	r2, [pc, #56]	; (80019c4 <ESP_MQTTConnect+0xb8>)
 800198a:	6811      	ldr	r1, [r2, #0]
 800198c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff fc65 	bl	8001260 <ATC_Receive>
 8001996:	4603      	mov	r3, r0
 8001998:	f083 0301 	eor.w	r3, r3, #1
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d105      	bne.n	80019ae <ESP_MQTTConnect+0xa2>
		{
		  break;
		}
		answer = true;
 80019a2:	2301      	movs	r3, #1
 80019a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80019a8:	e002      	b.n	80019b0 <ESP_MQTTConnect+0xa4>
		  break;
 80019aa:	bf00      	nop
 80019ac:	e000      	b.n	80019b0 <ESP_MQTTConnect+0xa4>
		  break;
 80019ae:	bf00      	nop

	} while (0);

	return answer;
 80019b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	0800c86c 	.word	0x0800c86c
 80019c4:	20000008 	.word	0x20000008

080019c8 <ESP_MQTTPublish>:

bool ESP_MQTTPublish(ESP_HandleTypeDef* hEsp, const char* Topic, const char* Message){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b0c8      	sub	sp, #288	; 0x120
 80019cc:	af02      	add	r7, sp, #8
 80019ce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80019d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80019d6:	6018      	str	r0, [r3, #0]
 80019d8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80019dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80019e0:	6019      	str	r1, [r3, #0]
 80019e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80019e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80019ea:	601a      	str	r2, [r3, #0]
	bool answer = false;
 80019ec:	2300      	movs	r3, #0
 80019ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	char cmd[256];
	snprintf(cmd, sizeof(cmd), "AT+MQTTPUB=0,\"%s\",\"%s\",0,0\r\n", Topic, Message);
 80019f2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80019f6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80019fa:	f107 0014 	add.w	r0, r7, #20
 80019fe:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001a02:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	9200      	str	r2, [sp, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a1a      	ldr	r2, [pc, #104]	; (8001a78 <ESP_MQTTPublish+0xb0>)
 8001a0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a12:	f008 fdbd 	bl	800a590 <sniprintf>
	do{
		if (!ATC_Send(&hEsp->hAtc, cmd, 100))
 8001a16:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001a1a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f107 0114 	add.w	r1, r7, #20
 8001a24:	2264      	movs	r2, #100	; 0x64
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fbde 	bl	80011e8 <ATC_Send>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f083 0301 	eor.w	r3, r3, #1
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d114      	bne.n	8001a62 <ESP_MQTTPublish+0x9a>
		{
		  break;
		}
		if (!ATC_Receive(&hEsp->hAtc, esp_ok, 100))
 8001a38:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001a3c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a0e      	ldr	r2, [pc, #56]	; (8001a7c <ESP_MQTTPublish+0xb4>)
 8001a44:	6811      	ldr	r1, [r2, #0]
 8001a46:	2264      	movs	r2, #100	; 0x64
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fc09 	bl	8001260 <ATC_Receive>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	f083 0301 	eor.w	r3, r3, #1
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d105      	bne.n	8001a66 <ESP_MQTTPublish+0x9e>
		{
		  break;
		}
		answer = true;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8001a60:	e002      	b.n	8001a68 <ESP_MQTTPublish+0xa0>
		  break;
 8001a62:	bf00      	nop
 8001a64:	e000      	b.n	8001a68 <ESP_MQTTPublish+0xa0>
		  break;
 8001a66:	bf00      	nop
	}
	while(0);
	return answer;
 8001a68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	0800c888 	.word	0x0800c888
 8001a7c:	20000008 	.word	0x20000008

08001a80 <ESP_Callback>:

	return answer;
}


void ESP_Callback(UART_HandleTypeDef* huart){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	if(hEsp.hAtc.hUart == huart){
 8001a88:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <ESP_Callback+0x40>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d112      	bne.n	8001ab8 <ESP_Callback+0x38>
		hEsp.hAtc.pRxbuff[hEsp.hAtc.RxIdx++] = hEsp.hAtc.pReadBuff;
 8001a92:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <ESP_Callback+0x40>)
 8001a94:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001a98:	1c5a      	adds	r2, r3, #1
 8001a9a:	4909      	ldr	r1, [pc, #36]	; (8001ac0 <ESP_Callback+0x40>)
 8001a9c:	f8c1 2208 	str.w	r2, [r1, #520]	; 0x208
 8001aa0:	4a07      	ldr	r2, [pc, #28]	; (8001ac0 <ESP_Callback+0x40>)
 8001aa2:	f892 1204 	ldrb.w	r1, [r2, #516]	; 0x204
 8001aa6:	4a06      	ldr	r2, [pc, #24]	; (8001ac0 <ESP_Callback+0x40>)
 8001aa8:	4413      	add	r3, r2
 8001aaa:	460a      	mov	r2, r1
 8001aac:	711a      	strb	r2, [r3, #4]
		if(hEsp.hAtc.pReadBuff > (BUFFER_SIZE - 1)) hEsp.hAtc.pReadBuff = 0;
		HAL_UART_Receive_IT(huart, &hEsp.hAtc.pReadBuff, 1);
 8001aae:	2201      	movs	r2, #1
 8001ab0:	4904      	ldr	r1, [pc, #16]	; (8001ac4 <ESP_Callback+0x44>)
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f007 f83e 	bl	8008b34 <HAL_UART_Receive_IT>
	}
}
 8001ab8:	bf00      	nop
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000238 	.word	0x20000238
 8001ac4:	2000043c 	.word	0x2000043c

08001ac8 <init_System>:
static unsigned char tempState1 = 0;
static unsigned char tempState2 = 0;
static unsigned char tempState3 = 0;
static WeatherStation_t mobj;

void init_System(void){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
	InitPhysics();
 8001acc:	f000 fcac 	bl	8002428 <InitPhysics>
	mobj.activate_state = IDLE;
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <init_System+0x24>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]
	mobj.activate_substate.settingState = INIT;
 8001ad6:	4b05      	ldr	r3, [pc, #20]	; (8001aec <init_System+0x24>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	705a      	strb	r2, [r3, #1]
	mobj.activate_substate.uartState = INIT_UART;
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <init_System+0x24>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	709a      	strb	r2, [r3, #2]
	mobj.activate_substate.unitState = INIT_UNIT;
 8001ae2:	4b02      	ldr	r3, [pc, #8]	; (8001aec <init_System+0x24>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	70da      	strb	r2, [r3, #3]

}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000450 	.word	0x20000450

08001af0 <fsm_readSensor>:

void fsm_readSensor(void){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	flagReceivedData = 1;
 8001af4:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <fsm_readSensor+0x30>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	701a      	strb	r2, [r3, #0]
	// read pressure data
	SendRequestDHT20();
 8001afa:	f000 fcc7 	bl	800248c <SendRequestDHT20>
	SCH_Add_Task(ReadDHT20, 0, 10);
 8001afe:	220a      	movs	r2, #10
 8001b00:	2100      	movs	r1, #0
 8001b02:	4808      	ldr	r0, [pc, #32]	; (8001b24 <fsm_readSensor+0x34>)
 8001b04:	f001 fa4c 	bl	8002fa0 <SCH_Add_Task>
	ReadPressure();
 8001b08:	f000 ff96 	bl	8002a38 <ReadPressure>

	// read light intensity data
	SendRequestForLTdata();
 8001b0c:	f000 ff9e 	bl	8002a4c <SendRequestForLTdata>
	SCH_Add_Task(ReadLightIntensity, 0, 18);
 8001b10:	2212      	movs	r2, #18
 8001b12:	2100      	movs	r1, #0
 8001b14:	4804      	ldr	r0, [pc, #16]	; (8001b28 <fsm_readSensor+0x38>)
 8001b16:	f001 fa43 	bl	8002fa0 <SCH_Add_Task>

}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2000044a 	.word	0x2000044a
 8001b24:	080024a1 	.word	0x080024a1
 8001b28:	08002a61 	.word	0x08002a61

08001b2c <settingUart_handler>:

void settingUart_handler(void){
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
	switch(mobj.activate_substate.uartState){
 8001b30:	4b33      	ldr	r3, [pc, #204]	; (8001c00 <settingUart_handler+0xd4>)
 8001b32:	789b      	ldrb	r3, [r3, #2]
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	d860      	bhi.n	8001bfa <settingUart_handler+0xce>
 8001b38:	a201      	add	r2, pc, #4	; (adr r2, 8001b40 <settingUart_handler+0x14>)
 8001b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b3e:	bf00      	nop
 8001b40:	08001b55 	.word	0x08001b55
 8001b44:	08001b5d 	.word	0x08001b5d
 8001b48:	08001b6f 	.word	0x08001b6f
 8001b4c:	08001ba9 	.word	0x08001ba9
 8001b50:	08001bbb 	.word	0x08001bbb
	case INIT_UART:{
		mobj.activate_substate.uartState = ACTIVATE_ENTRY;
 8001b54:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <settingUart_handler+0xd4>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	709a      	strb	r2, [r3, #2]
		break;
 8001b5a:	e04e      	b.n	8001bfa <settingUart_handler+0xce>
	}
	case ACTIVATE_ENTRY:{
		LCD_Clear();
 8001b5c:	f000 fd78 	bl	8002650 <LCD_Clear>
		LCD_displaySettingUart(0);
 8001b60:	2000      	movs	r0, #0
 8001b62:	f000 fe4b 	bl	80027fc <LCD_displaySettingUart>
		mobj.activate_substate.uartState = ACTIVATE;
 8001b66:	4b26      	ldr	r3, [pc, #152]	; (8001c00 <settingUart_handler+0xd4>)
 8001b68:	2202      	movs	r2, #2
 8001b6a:	709a      	strb	r2, [r3, #2]
		break;
 8001b6c:	e045      	b.n	8001bfa <settingUart_handler+0xce>
	}
	case ACTIVATE:{
		flagUpdateData = 1;
 8001b6e:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <settingUart_handler+0xd8>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	701a      	strb	r2, [r3, #0]
		if(is_button_press(0)){
 8001b74:	2000      	movs	r0, #0
 8001b76:	f7ff fc9f 	bl	80014b8 <is_button_press>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <settingUart_handler+0x5a>
			tempState1 = 1;
 8001b80:	4b21      	ldr	r3, [pc, #132]	; (8001c08 <settingUart_handler+0xdc>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
		}
		if(tempState1 && !is_button_press(0)){
 8001b86:	4b20      	ldr	r3, [pc, #128]	; (8001c08 <settingUart_handler+0xdc>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d032      	beq.n	8001bf4 <settingUart_handler+0xc8>
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f7ff fc92 	bl	80014b8 <is_button_press>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d12c      	bne.n	8001bf4 <settingUart_handler+0xc8>
			tempState1 = 0;
 8001b9a:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <settingUart_handler+0xdc>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
			mobj.activate_substate.uartState = INACTIVATE_ENTRY;
 8001ba0:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <settingUart_handler+0xd4>)
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	709a      	strb	r2, [r3, #2]
		}
		break;
 8001ba6:	e025      	b.n	8001bf4 <settingUart_handler+0xc8>
	}
	case INACTIVATE_ENTRY:{
		LCD_Clear();
 8001ba8:	f000 fd52 	bl	8002650 <LCD_Clear>
		LCD_displaySettingUart(1);
 8001bac:	2001      	movs	r0, #1
 8001bae:	f000 fe25 	bl	80027fc <LCD_displaySettingUart>
		mobj.activate_substate.uartState = INACTIVATE;
 8001bb2:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <settingUart_handler+0xd4>)
 8001bb4:	2204      	movs	r2, #4
 8001bb6:	709a      	strb	r2, [r3, #2]
		break;
 8001bb8:	e01f      	b.n	8001bfa <settingUart_handler+0xce>
	}
	case INACTIVATE:{
		flagUpdateData = 0;
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <settingUart_handler+0xd8>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]
		if(is_button_press(0)){
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f7ff fc79 	bl	80014b8 <is_button_press>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d002      	beq.n	8001bd2 <settingUart_handler+0xa6>
			tempState1 = 1;
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <settingUart_handler+0xdc>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	701a      	strb	r2, [r3, #0]
		}
		if(tempState1 && !is_button_press(0)){
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <settingUart_handler+0xdc>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00e      	beq.n	8001bf8 <settingUart_handler+0xcc>
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f7ff fc6c 	bl	80014b8 <is_button_press>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d108      	bne.n	8001bf8 <settingUart_handler+0xcc>
			tempState1 = 0;
 8001be6:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <settingUart_handler+0xdc>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]
			mobj.activate_substate.uartState = ACTIVATE_ENTRY;
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <settingUart_handler+0xd4>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	709a      	strb	r2, [r3, #2]
		}
		break;
 8001bf2:	e001      	b.n	8001bf8 <settingUart_handler+0xcc>
		break;
 8001bf4:	bf00      	nop
 8001bf6:	e000      	b.n	8001bfa <settingUart_handler+0xce>
		break;
 8001bf8:	bf00      	nop
	}
	}
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000450 	.word	0x20000450
 8001c04:	20000564 	.word	0x20000564
 8001c08:	2000044b 	.word	0x2000044b

08001c0c <settingUnit_handler>:

void settingUnit_handler(void){
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
	switch(mobj.activate_substate.unitState){
 8001c10:	4b5e      	ldr	r3, [pc, #376]	; (8001d8c <settingUnit_handler+0x180>)
 8001c12:	78db      	ldrb	r3, [r3, #3]
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d06b      	beq.n	8001cf0 <settingUnit_handler+0xe4>
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	f300 80b4 	bgt.w	8001d86 <settingUnit_handler+0x17a>
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <settingUnit_handler+0x1c>
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d010      	beq.n	8001c48 <settingUnit_handler+0x3c>
			mobj.activate_substate.unitState = INIT_UNIT;
		}
		break;
	}
	}
}
 8001c26:	e0ae      	b.n	8001d86 <settingUnit_handler+0x17a>
		SetCursor(0, 0);
 8001c28:	2100      	movs	r1, #0
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	f000 fe8a 	bl	8002944 <SetCursor>
		LCD_putChar('>');
 8001c30:	203e      	movs	r0, #62	; 0x3e
 8001c32:	f000 fe77 	bl	8002924 <LCD_putChar>
		LCD_displaySettingTemp(unitDisplay_temperature);
 8001c36:	4b56      	ldr	r3, [pc, #344]	; (8001d90 <settingUnit_handler+0x184>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 fe1e 	bl	800287c <LCD_displaySettingTemp>
		mobj.activate_substate.unitState = SETTING_TEMP;
 8001c40:	4b52      	ldr	r3, [pc, #328]	; (8001d8c <settingUnit_handler+0x180>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	70da      	strb	r2, [r3, #3]
		break;
 8001c46:	e09e      	b.n	8001d86 <settingUnit_handler+0x17a>
		if(is_button_press(0)){
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f7ff fc35 	bl	80014b8 <is_button_press>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <settingUnit_handler+0x4e>
			tempState1 = 1;
 8001c54:	4b4f      	ldr	r3, [pc, #316]	; (8001d94 <settingUnit_handler+0x188>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	701a      	strb	r2, [r3, #0]
		if(tempState1 && !is_button_press(0)){
 8001c5a:	4b4e      	ldr	r3, [pc, #312]	; (8001d94 <settingUnit_handler+0x188>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d019      	beq.n	8001c96 <settingUnit_handler+0x8a>
 8001c62:	2000      	movs	r0, #0
 8001c64:	f7ff fc28 	bl	80014b8 <is_button_press>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d113      	bne.n	8001c96 <settingUnit_handler+0x8a>
			tempState1 = 0;
 8001c6e:	4b49      	ldr	r3, [pc, #292]	; (8001d94 <settingUnit_handler+0x188>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
			unitDisplay_temperature = (unitDisplay_temperature + 1) % 2;
 8001c74:	4b46      	ldr	r3, [pc, #280]	; (8001d90 <settingUnit_handler+0x184>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	bfb8      	it	lt
 8001c82:	425b      	neglt	r3, r3
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4b42      	ldr	r3, [pc, #264]	; (8001d90 <settingUnit_handler+0x184>)
 8001c88:	701a      	strb	r2, [r3, #0]
			LCD_displaySettingTemp(unitDisplay_temperature);
 8001c8a:	4b41      	ldr	r3, [pc, #260]	; (8001d90 <settingUnit_handler+0x184>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 fdf4 	bl	800287c <LCD_displaySettingTemp>
			break;
 8001c94:	e077      	b.n	8001d86 <settingUnit_handler+0x17a>
		if(is_button_press(1)){
 8001c96:	2001      	movs	r0, #1
 8001c98:	f7ff fc0e 	bl	80014b8 <is_button_press>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <settingUnit_handler+0x9c>
			tempState2 = 1;
 8001ca2:	4b3d      	ldr	r3, [pc, #244]	; (8001d98 <settingUnit_handler+0x18c>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	701a      	strb	r2, [r3, #0]
		if(tempState2 && !is_button_press(1)){
 8001ca8:	4b3b      	ldr	r3, [pc, #236]	; (8001d98 <settingUnit_handler+0x18c>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d067      	beq.n	8001d80 <settingUnit_handler+0x174>
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	f7ff fc01 	bl	80014b8 <is_button_press>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d161      	bne.n	8001d80 <settingUnit_handler+0x174>
			tempState2 = 0;
 8001cbc:	4b36      	ldr	r3, [pc, #216]	; (8001d98 <settingUnit_handler+0x18c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
			SetCursor(0, 0);
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	f000 fe3d 	bl	8002944 <SetCursor>
			LCD_putChar(' ');
 8001cca:	2020      	movs	r0, #32
 8001ccc:	f000 fe2a 	bl	8002924 <LCD_putChar>
			SetCursor(0, 1);
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f000 fe36 	bl	8002944 <SetCursor>
			LCD_putChar('>');
 8001cd8:	203e      	movs	r0, #62	; 0x3e
 8001cda:	f000 fe23 	bl	8002924 <LCD_putChar>
			LCD_displaySettingPress(unitDisplay_pressure);
 8001cde:	4b2f      	ldr	r3, [pc, #188]	; (8001d9c <settingUnit_handler+0x190>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 fdf4 	bl	80028d0 <LCD_displaySettingPress>
			mobj.activate_substate.unitState = SETTING_PRESS;
 8001ce8:	4b28      	ldr	r3, [pc, #160]	; (8001d8c <settingUnit_handler+0x180>)
 8001cea:	2202      	movs	r2, #2
 8001cec:	70da      	strb	r2, [r3, #3]
		break;
 8001cee:	e047      	b.n	8001d80 <settingUnit_handler+0x174>
		if(is_button_press(0)){
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f7ff fbe1 	bl	80014b8 <is_button_press>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d002      	beq.n	8001d02 <settingUnit_handler+0xf6>
			tempState1 = 1;
 8001cfc:	4b25      	ldr	r3, [pc, #148]	; (8001d94 <settingUnit_handler+0x188>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	701a      	strb	r2, [r3, #0]
		if(tempState1 && !is_button_press(0)){
 8001d02:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <settingUnit_handler+0x188>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d019      	beq.n	8001d3e <settingUnit_handler+0x132>
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	f7ff fbd4 	bl	80014b8 <is_button_press>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d113      	bne.n	8001d3e <settingUnit_handler+0x132>
			tempState1 = 0;
 8001d16:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <settingUnit_handler+0x188>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
			unitDisplay_pressure = (unitDisplay_pressure + 1) % 2;
 8001d1c:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <settingUnit_handler+0x190>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	3301      	adds	r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	bfb8      	it	lt
 8001d2a:	425b      	neglt	r3, r3
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <settingUnit_handler+0x190>)
 8001d30:	701a      	strb	r2, [r3, #0]
			LCD_displaySettingPress(unitDisplay_pressure);
 8001d32:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <settingUnit_handler+0x190>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 fdca 	bl	80028d0 <LCD_displaySettingPress>
			break;
 8001d3c:	e023      	b.n	8001d86 <settingUnit_handler+0x17a>
		if(is_button_press(1)){
 8001d3e:	2001      	movs	r0, #1
 8001d40:	f7ff fbba 	bl	80014b8 <is_button_press>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <settingUnit_handler+0x144>
			tempState2 = 1;
 8001d4a:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <settingUnit_handler+0x18c>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	701a      	strb	r2, [r3, #0]
		if(tempState2 && !is_button_press(1)){
 8001d50:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <settingUnit_handler+0x18c>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d015      	beq.n	8001d84 <settingUnit_handler+0x178>
 8001d58:	2001      	movs	r0, #1
 8001d5a:	f7ff fbad 	bl	80014b8 <is_button_press>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10f      	bne.n	8001d84 <settingUnit_handler+0x178>
			tempState2 = 0;
 8001d64:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <settingUnit_handler+0x18c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	701a      	strb	r2, [r3, #0]
			SetCursor(0, 1);
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f000 fde9 	bl	8002944 <SetCursor>
			LCD_putChar(' ');
 8001d72:	2020      	movs	r0, #32
 8001d74:	f000 fdd6 	bl	8002924 <LCD_putChar>
			mobj.activate_substate.unitState = INIT_UNIT;
 8001d78:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <settingUnit_handler+0x180>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	70da      	strb	r2, [r3, #3]
		break;
 8001d7e:	e001      	b.n	8001d84 <settingUnit_handler+0x178>
		break;
 8001d80:	bf00      	nop
 8001d82:	e000      	b.n	8001d86 <settingUnit_handler+0x17a>
		break;
 8001d84:	bf00      	nop
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000450 	.word	0x20000450
 8001d90:	20000448 	.word	0x20000448
 8001d94:	2000044b 	.word	0x2000044b
 8001d98:	2000044c 	.word	0x2000044c
 8001d9c:	20000449 	.word	0x20000449

08001da0 <settingMode_handler>:

void settingMode_handler(void){
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
	switch(mobj.activate_substate.settingState){
 8001da4:	4b68      	ldr	r3, [pc, #416]	; (8001f48 <settingMode_handler+0x1a8>)
 8001da6:	785b      	ldrb	r3, [r3, #1]
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	f200 80ca 	bhi.w	8001f42 <settingMode_handler+0x1a2>
 8001dae:	a201      	add	r2, pc, #4	; (adr r2, 8001db4 <settingMode_handler+0x14>)
 8001db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db4:	08001dc9 	.word	0x08001dc9
 8001db8:	08001df1 	.word	0x08001df1
 8001dbc:	08001ea3 	.word	0x08001ea3
 8001dc0:	08001f19 	.word	0x08001f19
 8001dc4:	08001e8b 	.word	0x08001e8b
	case INIT:{
		LCD_displaySettingMode();
 8001dc8:	f000 fce6 	bl	8002798 <LCD_displaySettingMode>
		SetCursor(9, 0);
 8001dcc:	2100      	movs	r1, #0
 8001dce:	2009      	movs	r0, #9
 8001dd0:	f000 fdb8 	bl	8002944 <SetCursor>
		LCD_putChar('>');
 8001dd4:	203e      	movs	r0, #62	; 0x3e
 8001dd6:	f000 fda5 	bl	8002924 <LCD_putChar>
		SetCursor(9, 1);
 8001dda:	2101      	movs	r1, #1
 8001ddc:	2009      	movs	r0, #9
 8001dde:	f000 fdb1 	bl	8002944 <SetCursor>
		LCD_putChar(' ');
 8001de2:	2020      	movs	r0, #32
 8001de4:	f000 fd9e 	bl	8002924 <LCD_putChar>
		mobj.activate_substate.settingState = SETTING_UART;
 8001de8:	4b57      	ldr	r3, [pc, #348]	; (8001f48 <settingMode_handler+0x1a8>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	705a      	strb	r2, [r3, #1]
		break;
 8001dee:	e0a8      	b.n	8001f42 <settingMode_handler+0x1a2>
	}
	case SETTING_UART:{
		if(is_button_press(0)){
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7ff fb61 	bl	80014b8 <is_button_press>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d002      	beq.n	8001e02 <settingMode_handler+0x62>
			tempState1 = 1;
 8001dfc:	4b53      	ldr	r3, [pc, #332]	; (8001f4c <settingMode_handler+0x1ac>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	701a      	strb	r2, [r3, #0]
		}
		if(tempState1 && !is_button_press(0)){
 8001e02:	4b52      	ldr	r3, [pc, #328]	; (8001f4c <settingMode_handler+0x1ac>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d017      	beq.n	8001e3a <settingMode_handler+0x9a>
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f7ff fb54 	bl	80014b8 <is_button_press>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d111      	bne.n	8001e3a <settingMode_handler+0x9a>
			tempState1 = 0;
 8001e16:	4b4d      	ldr	r3, [pc, #308]	; (8001f4c <settingMode_handler+0x1ac>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]
			if(mobj.activate_substate.uartState == ACTIVATE){
 8001e1c:	4b4a      	ldr	r3, [pc, #296]	; (8001f48 <settingMode_handler+0x1a8>)
 8001e1e:	789b      	ldrb	r3, [r3, #2]
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d103      	bne.n	8001e2c <settingMode_handler+0x8c>
				mobj.activate_substate.uartState = ACTIVATE_ENTRY;
 8001e24:	4b48      	ldr	r3, [pc, #288]	; (8001f48 <settingMode_handler+0x1a8>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	709a      	strb	r2, [r3, #2]
 8001e2a:	e002      	b.n	8001e32 <settingMode_handler+0x92>
			}
			else{
				mobj.activate_substate.uartState = INACTIVATE_ENTRY;
 8001e2c:	4b46      	ldr	r3, [pc, #280]	; (8001f48 <settingMode_handler+0x1a8>)
 8001e2e:	2203      	movs	r2, #3
 8001e30:	709a      	strb	r2, [r3, #2]
			}
			mobj.activate_substate.settingState = UART_PROCESS;
 8001e32:	4b45      	ldr	r3, [pc, #276]	; (8001f48 <settingMode_handler+0x1a8>)
 8001e34:	2204      	movs	r2, #4
 8001e36:	705a      	strb	r2, [r3, #1]
			break;
 8001e38:	e083      	b.n	8001f42 <settingMode_handler+0x1a2>
		}


		if(is_button_press(1)){
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	f7ff fb3c 	bl	80014b8 <is_button_press>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d002      	beq.n	8001e4c <settingMode_handler+0xac>
			tempState2 = 1;
 8001e46:	4b42      	ldr	r3, [pc, #264]	; (8001f50 <settingMode_handler+0x1b0>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
		}
		if(tempState2 && !is_button_press(1)){
 8001e4c:	4b40      	ldr	r3, [pc, #256]	; (8001f50 <settingMode_handler+0x1b0>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d06f      	beq.n	8001f34 <settingMode_handler+0x194>
 8001e54:	2001      	movs	r0, #1
 8001e56:	f7ff fb2f 	bl	80014b8 <is_button_press>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d169      	bne.n	8001f34 <settingMode_handler+0x194>
			tempState2 = 0;
 8001e60:	4b3b      	ldr	r3, [pc, #236]	; (8001f50 <settingMode_handler+0x1b0>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]
			SetCursor(9, 1);
 8001e66:	2101      	movs	r1, #1
 8001e68:	2009      	movs	r0, #9
 8001e6a:	f000 fd6b 	bl	8002944 <SetCursor>
			LCD_putChar('>');
 8001e6e:	203e      	movs	r0, #62	; 0x3e
 8001e70:	f000 fd58 	bl	8002924 <LCD_putChar>
			SetCursor(9, 0);
 8001e74:	2100      	movs	r1, #0
 8001e76:	2009      	movs	r0, #9
 8001e78:	f000 fd64 	bl	8002944 <SetCursor>
			LCD_putChar(' ');
 8001e7c:	2020      	movs	r0, #32
 8001e7e:	f000 fd51 	bl	8002924 <LCD_putChar>
			mobj.activate_substate.settingState = SETTING_UNIT;
 8001e82:	4b31      	ldr	r3, [pc, #196]	; (8001f48 <settingMode_handler+0x1a8>)
 8001e84:	2202      	movs	r2, #2
 8001e86:	705a      	strb	r2, [r3, #1]
		}
		break;
 8001e88:	e054      	b.n	8001f34 <settingMode_handler+0x194>
	}
	case UART_PROCESS:{
		settingUart_handler();
 8001e8a:	f7ff fe4f 	bl	8001b2c <settingUart_handler>
		if(is_button_press1s(2)){
 8001e8e:	2002      	movs	r0, #2
 8001e90:	f7ff fb2c 	bl	80014ec <is_button_press1s>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d04e      	beq.n	8001f38 <settingMode_handler+0x198>
			mobj.activate_substate.settingState = INIT;
 8001e9a:	4b2b      	ldr	r3, [pc, #172]	; (8001f48 <settingMode_handler+0x1a8>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	705a      	strb	r2, [r3, #1]
		}
		break;
 8001ea0:	e04a      	b.n	8001f38 <settingMode_handler+0x198>
	}
	case SETTING_UNIT:{
		if(is_button_press(1)){
 8001ea2:	2001      	movs	r0, #1
 8001ea4:	f7ff fb08 	bl	80014b8 <is_button_press>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d002      	beq.n	8001eb4 <settingMode_handler+0x114>
			tempState2 = 1;
 8001eae:	4b28      	ldr	r3, [pc, #160]	; (8001f50 <settingMode_handler+0x1b0>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
		}
		if(tempState2 && !is_button_press(1)){
 8001eb4:	4b26      	ldr	r3, [pc, #152]	; (8001f50 <settingMode_handler+0x1b0>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00c      	beq.n	8001ed6 <settingMode_handler+0x136>
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	f7ff fafb 	bl	80014b8 <is_button_press>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d106      	bne.n	8001ed6 <settingMode_handler+0x136>
			tempState2 = 0;
 8001ec8:	4b21      	ldr	r3, [pc, #132]	; (8001f50 <settingMode_handler+0x1b0>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
			mobj.activate_substate.settingState = INIT;
 8001ece:	4b1e      	ldr	r3, [pc, #120]	; (8001f48 <settingMode_handler+0x1a8>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	705a      	strb	r2, [r3, #1]
			break;
 8001ed4:	e035      	b.n	8001f42 <settingMode_handler+0x1a2>
		}

		if(is_button_press(0)){
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f7ff faee 	bl	80014b8 <is_button_press>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <settingMode_handler+0x148>
			tempState1 = 1;
 8001ee2:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <settingMode_handler+0x1ac>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	701a      	strb	r2, [r3, #0]
		}
		if(tempState1 && !is_button_press(0)){
 8001ee8:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <settingMode_handler+0x1ac>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d025      	beq.n	8001f3c <settingMode_handler+0x19c>
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f7ff fae1 	bl	80014b8 <is_button_press>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d11f      	bne.n	8001f3c <settingMode_handler+0x19c>
			tempState1 = 0;
 8001efc:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <settingMode_handler+0x1ac>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]
			LCD_Clear();
 8001f02:	f000 fba5 	bl	8002650 <LCD_Clear>
			LCD_displaySettingUnit();
 8001f06:	f000 fc9d 	bl	8002844 <LCD_displaySettingUnit>
			mobj.activate_substate.unitState = INIT_UNIT;
 8001f0a:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <settingMode_handler+0x1a8>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	70da      	strb	r2, [r3, #3]
			mobj.activate_substate.settingState = UNIT_PROCESS;
 8001f10:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <settingMode_handler+0x1a8>)
 8001f12:	2203      	movs	r2, #3
 8001f14:	705a      	strb	r2, [r3, #1]
		}
		break;
 8001f16:	e011      	b.n	8001f3c <settingMode_handler+0x19c>
	}
	case UNIT_PROCESS:{
		settingUnit_handler();
 8001f18:	f7ff fe78 	bl	8001c0c <settingUnit_handler>

		if(is_button_press1s(2)){
 8001f1c:	2002      	movs	r0, #2
 8001f1e:	f7ff fae5 	bl	80014ec <is_button_press1s>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00b      	beq.n	8001f40 <settingMode_handler+0x1a0>
			LCD_Clear();
 8001f28:	f000 fb92 	bl	8002650 <LCD_Clear>
			mobj.activate_substate.settingState = INIT;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <settingMode_handler+0x1a8>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	705a      	strb	r2, [r3, #1]
		}
		break;
 8001f32:	e005      	b.n	8001f40 <settingMode_handler+0x1a0>
		break;
 8001f34:	bf00      	nop
 8001f36:	e004      	b.n	8001f42 <settingMode_handler+0x1a2>
		break;
 8001f38:	bf00      	nop
 8001f3a:	e002      	b.n	8001f42 <settingMode_handler+0x1a2>
		break;
 8001f3c:	bf00      	nop
 8001f3e:	e000      	b.n	8001f42 <settingMode_handler+0x1a2>
		break;
 8001f40:	bf00      	nop
	}
	}
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000450 	.word	0x20000450
 8001f4c:	2000044b 	.word	0x2000044b
 8001f50:	2000044c 	.word	0x2000044c

08001f54 <WeatherStation>:

void WeatherStation(void){
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
	switch(mobj.activate_state){
 8001f58:	4b64      	ldr	r3, [pc, #400]	; (80020ec <WeatherStation+0x198>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	f200 80c3 	bhi.w	80020e8 <WeatherStation+0x194>
 8001f62:	a201      	add	r2, pc, #4	; (adr r2, 8001f68 <WeatherStation+0x14>)
 8001f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f68:	08001f7d 	.word	0x08001f7d
 8001f6c:	08001f89 	.word	0x08001f89
 8001f70:	0800200f 	.word	0x0800200f
 8001f74:	08002069 	.word	0x08002069
 8001f78:	080020b9 	.word	0x080020b9
	case IDLE:{
		LCD_DisplayPage1();
 8001f7c:	f000 fac2 	bl	8002504 <LCD_DisplayPage1>
		mobj.activate_state = HOME;
 8001f80:	4b5a      	ldr	r3, [pc, #360]	; (80020ec <WeatherStation+0x198>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	701a      	strb	r2, [r3, #0]
		break;
 8001f86:	e0af      	b.n	80020e8 <WeatherStation+0x194>
	}
	case HOME:{
		if(is_button_press(0)){
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f7ff fa95 	bl	80014b8 <is_button_press>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d002      	beq.n	8001f9a <WeatherStation+0x46>
			tempState1 = 1;
 8001f94:	4b56      	ldr	r3, [pc, #344]	; (80020f0 <WeatherStation+0x19c>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
		}
		if(tempState1 && !is_button_press(0)){
 8001f9a:	4b55      	ldr	r3, [pc, #340]	; (80020f0 <WeatherStation+0x19c>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d014      	beq.n	8001fcc <WeatherStation+0x78>
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f7ff fa88 	bl	80014b8 <is_button_press>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10e      	bne.n	8001fcc <WeatherStation+0x78>
			tempState1 = 0;
 8001fae:	4b50      	ldr	r3, [pc, #320]	; (80020f0 <WeatherStation+0x19c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
			LCD_Clear();
 8001fb4:	f000 fb4c 	bl	8002650 <LCD_Clear>
			mobj.activate_state = SETTING;
 8001fb8:	4b4c      	ldr	r3, [pc, #304]	; (80020ec <WeatherStation+0x198>)
 8001fba:	2204      	movs	r2, #4
 8001fbc:	701a      	strb	r2, [r3, #0]
			mobj.activate_substate.settingState = INIT;
 8001fbe:	4b4b      	ldr	r3, [pc, #300]	; (80020ec <WeatherStation+0x198>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	705a      	strb	r2, [r3, #1]
			mobj.activate_substate.unitState = INIT_UNIT;
 8001fc4:	4b49      	ldr	r3, [pc, #292]	; (80020ec <WeatherStation+0x198>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	70da      	strb	r2, [r3, #3]
			break;
 8001fca:	e08d      	b.n	80020e8 <WeatherStation+0x194>
		}

		if(is_button_press(1)){
 8001fcc:	2001      	movs	r0, #1
 8001fce:	f7ff fa73 	bl	80014b8 <is_button_press>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d002      	beq.n	8001fde <WeatherStation+0x8a>
			tempState2 = 1;
 8001fd8:	4b46      	ldr	r3, [pc, #280]	; (80020f4 <WeatherStation+0x1a0>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	701a      	strb	r2, [r3, #0]
		}
		if(tempState2 && !is_button_press(1)){
 8001fde:	4b45      	ldr	r3, [pc, #276]	; (80020f4 <WeatherStation+0x1a0>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d079      	beq.n	80020da <WeatherStation+0x186>
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	f7ff fa66 	bl	80014b8 <is_button_press>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d173      	bne.n	80020da <WeatherStation+0x186>
			tempState2 = 0;
 8001ff2:	4b40      	ldr	r3, [pc, #256]	; (80020f4 <WeatherStation+0x1a0>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]
			LCD_Clear();
 8001ff8:	f000 fb2a 	bl	8002650 <LCD_Clear>
			LCD_DisplayPage2(unitDisplay_temperature);
 8001ffc:	4b3e      	ldr	r3, [pc, #248]	; (80020f8 <WeatherStation+0x1a4>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f000 faad 	bl	8002560 <LCD_DisplayPage2>
			mobj.activate_state = PAGE1;
 8002006:	4b39      	ldr	r3, [pc, #228]	; (80020ec <WeatherStation+0x198>)
 8002008:	2202      	movs	r2, #2
 800200a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800200c:	e065      	b.n	80020da <WeatherStation+0x186>
	}
	case PAGE1:{
		if(flagReceivedData){
 800200e:	4b3b      	ldr	r3, [pc, #236]	; (80020fc <WeatherStation+0x1a8>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d007      	beq.n	8002026 <WeatherStation+0xd2>
			LCD_DisplayPage2(unitDisplay_temperature);
 8002016:	4b38      	ldr	r3, [pc, #224]	; (80020f8 <WeatherStation+0x1a4>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f000 faa0 	bl	8002560 <LCD_DisplayPage2>
			flagReceivedData = 0;
 8002020:	4b36      	ldr	r3, [pc, #216]	; (80020fc <WeatherStation+0x1a8>)
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
		}


		if(is_button_press(1)){
 8002026:	2001      	movs	r0, #1
 8002028:	f7ff fa46 	bl	80014b8 <is_button_press>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d002      	beq.n	8002038 <WeatherStation+0xe4>
			tempState2 = 1;
 8002032:	4b30      	ldr	r3, [pc, #192]	; (80020f4 <WeatherStation+0x1a0>)
 8002034:	2201      	movs	r2, #1
 8002036:	701a      	strb	r2, [r3, #0]
		}
		if(tempState2 && !is_button_press(1)){
 8002038:	4b2e      	ldr	r3, [pc, #184]	; (80020f4 <WeatherStation+0x1a0>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d04e      	beq.n	80020de <WeatherStation+0x18a>
 8002040:	2001      	movs	r0, #1
 8002042:	f7ff fa39 	bl	80014b8 <is_button_press>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d148      	bne.n	80020de <WeatherStation+0x18a>
			tempState2 = 0;
 800204c:	4b29      	ldr	r3, [pc, #164]	; (80020f4 <WeatherStation+0x1a0>)
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
			LCD_Clear();
 8002052:	f000 fafd 	bl	8002650 <LCD_Clear>
			LCD_DisplayPage3(unitDisplay_pressure);
 8002056:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <WeatherStation+0x1ac>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f000 fb02 	bl	8002664 <LCD_DisplayPage3>
			mobj.activate_state = PAGE2;
 8002060:	4b22      	ldr	r3, [pc, #136]	; (80020ec <WeatherStation+0x198>)
 8002062:	2203      	movs	r2, #3
 8002064:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002066:	e03a      	b.n	80020de <WeatherStation+0x18a>
	}
	case PAGE2:{

		if(flagReceivedData){
 8002068:	4b24      	ldr	r3, [pc, #144]	; (80020fc <WeatherStation+0x1a8>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d007      	beq.n	8002080 <WeatherStation+0x12c>
			LCD_DisplayPage3(unitDisplay_pressure);
 8002070:	4b23      	ldr	r3, [pc, #140]	; (8002100 <WeatherStation+0x1ac>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f000 faf5 	bl	8002664 <LCD_DisplayPage3>
			flagReceivedData = 0;
 800207a:	4b20      	ldr	r3, [pc, #128]	; (80020fc <WeatherStation+0x1a8>)
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
		}

		if(is_button_press(1)){
 8002080:	2001      	movs	r0, #1
 8002082:	f7ff fa19 	bl	80014b8 <is_button_press>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d002      	beq.n	8002092 <WeatherStation+0x13e>
			tempState2 = 1;
 800208c:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <WeatherStation+0x1a0>)
 800208e:	2201      	movs	r2, #1
 8002090:	701a      	strb	r2, [r3, #0]
		}
		if(tempState2 && !is_button_press(1)){
 8002092:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <WeatherStation+0x1a0>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d023      	beq.n	80020e2 <WeatherStation+0x18e>
 800209a:	2001      	movs	r0, #1
 800209c:	f7ff fa0c 	bl	80014b8 <is_button_press>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d11d      	bne.n	80020e2 <WeatherStation+0x18e>
			tempState2 = 0;
 80020a6:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <WeatherStation+0x1a0>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]
			LCD_Clear();
 80020ac:	f000 fad0 	bl	8002650 <LCD_Clear>
			mobj.activate_state = IDLE;
 80020b0:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <WeatherStation+0x198>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80020b6:	e014      	b.n	80020e2 <WeatherStation+0x18e>
	}
	case SETTING:{
		settingMode_handler();
 80020b8:	f7ff fe72 	bl	8001da0 <settingMode_handler>

		if(is_button_press1s(2)){
 80020bc:	2002      	movs	r0, #2
 80020be:	f7ff fa15 	bl	80014ec <is_button_press1s>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00e      	beq.n	80020e6 <WeatherStation+0x192>
			LCD_Clear();
 80020c8:	f000 fac2 	bl	8002650 <LCD_Clear>
			mobj.activate_substate.settingState = INIT;
 80020cc:	4b07      	ldr	r3, [pc, #28]	; (80020ec <WeatherStation+0x198>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	705a      	strb	r2, [r3, #1]
			mobj.activate_state = IDLE;
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <WeatherStation+0x198>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
		}
		break;
 80020d8:	e005      	b.n	80020e6 <WeatherStation+0x192>
		break;
 80020da:	bf00      	nop
 80020dc:	e004      	b.n	80020e8 <WeatherStation+0x194>
		break;
 80020de:	bf00      	nop
 80020e0:	e002      	b.n	80020e8 <WeatherStation+0x194>
		break;
 80020e2:	bf00      	nop
 80020e4:	e000      	b.n	80020e8 <WeatherStation+0x194>
		break;
 80020e6:	bf00      	nop
	}
	}
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000450 	.word	0x20000450
 80020f0:	2000044b 	.word	0x2000044b
 80020f4:	2000044c 	.word	0x2000044c
 80020f8:	20000448 	.word	0x20000448
 80020fc:	2000044a 	.word	0x2000044a
 8002100:	20000449 	.word	0x20000449

08002104 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210a:	f107 0310 	add.w	r3, r7, #16
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	605a      	str	r2, [r3, #4]
 8002114:	609a      	str	r2, [r3, #8]
 8002116:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002118:	4b37      	ldr	r3, [pc, #220]	; (80021f8 <MX_GPIO_Init+0xf4>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	4a36      	ldr	r2, [pc, #216]	; (80021f8 <MX_GPIO_Init+0xf4>)
 800211e:	f043 0310 	orr.w	r3, r3, #16
 8002122:	6193      	str	r3, [r2, #24]
 8002124:	4b34      	ldr	r3, [pc, #208]	; (80021f8 <MX_GPIO_Init+0xf4>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f003 0310 	and.w	r3, r3, #16
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002130:	4b31      	ldr	r3, [pc, #196]	; (80021f8 <MX_GPIO_Init+0xf4>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	4a30      	ldr	r2, [pc, #192]	; (80021f8 <MX_GPIO_Init+0xf4>)
 8002136:	f043 0304 	orr.w	r3, r3, #4
 800213a:	6193      	str	r3, [r2, #24]
 800213c:	4b2e      	ldr	r3, [pc, #184]	; (80021f8 <MX_GPIO_Init+0xf4>)
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002148:	4b2b      	ldr	r3, [pc, #172]	; (80021f8 <MX_GPIO_Init+0xf4>)
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	4a2a      	ldr	r2, [pc, #168]	; (80021f8 <MX_GPIO_Init+0xf4>)
 800214e:	f043 0308 	orr.w	r3, r3, #8
 8002152:	6193      	str	r3, [r2, #24]
 8002154:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <MX_GPIO_Init+0xf4>)
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	607b      	str	r3, [r7, #4]
 800215e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Debug_Led_GPIO_Port, Debug_Led_Pin, GPIO_PIN_RESET);
 8002160:	2200      	movs	r2, #0
 8002162:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002166:	4825      	ldr	r0, [pc, #148]	; (80021fc <MX_GPIO_Init+0xf8>)
 8002168:	f003 f9cf 	bl	800550a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 800216c:	2200      	movs	r2, #0
 800216e:	21e0      	movs	r1, #224	; 0xe0
 8002170:	4823      	ldr	r0, [pc, #140]	; (8002200 <MX_GPIO_Init+0xfc>)
 8002172:	f003 f9ca 	bl	800550a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, task1_Pin|task2_Pin, GPIO_PIN_RESET);
 8002176:	2200      	movs	r2, #0
 8002178:	2103      	movs	r1, #3
 800217a:	4822      	ldr	r0, [pc, #136]	; (8002204 <MX_GPIO_Init+0x100>)
 800217c:	f003 f9c5 	bl	800550a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Debug_Led_Pin;
 8002180:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002184:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002186:	2301      	movs	r3, #1
 8002188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218e:	2302      	movs	r3, #2
 8002190:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Debug_Led_GPIO_Port, &GPIO_InitStruct);
 8002192:	f107 0310 	add.w	r3, r7, #16
 8002196:	4619      	mov	r1, r3
 8002198:	4818      	ldr	r0, [pc, #96]	; (80021fc <MX_GPIO_Init+0xf8>)
 800219a:	f003 f81b 	bl	80051d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin;
 800219e:	23e0      	movs	r3, #224	; 0xe0
 80021a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a2:	2301      	movs	r3, #1
 80021a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021aa:	2302      	movs	r3, #2
 80021ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ae:	f107 0310 	add.w	r3, r7, #16
 80021b2:	4619      	mov	r1, r3
 80021b4:	4812      	ldr	r0, [pc, #72]	; (8002200 <MX_GPIO_Init+0xfc>)
 80021b6:	f003 f80d 	bl	80051d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = task1_Pin|task2_Pin;
 80021ba:	2303      	movs	r3, #3
 80021bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021be:	2301      	movs	r3, #1
 80021c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c6:	2302      	movs	r3, #2
 80021c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ca:	f107 0310 	add.w	r3, r7, #16
 80021ce:	4619      	mov	r1, r3
 80021d0:	480c      	ldr	r0, [pc, #48]	; (8002204 <MX_GPIO_Init+0x100>)
 80021d2:	f002 ffff 	bl	80051d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|BTN2_Pin;
 80021d6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80021da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021e0:	2301      	movs	r3, #1
 80021e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e4:	f107 0310 	add.w	r3, r7, #16
 80021e8:	4619      	mov	r1, r3
 80021ea:	4806      	ldr	r0, [pc, #24]	; (8002204 <MX_GPIO_Init+0x100>)
 80021ec:	f002 fff2 	bl	80051d4 <HAL_GPIO_Init>

}
 80021f0:	bf00      	nop
 80021f2:	3720      	adds	r7, #32
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40011000 	.word	0x40011000
 8002200:	40010800 	.word	0x40010800
 8002204:	40010c00 	.word	0x40010c00

08002208 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800220c:	4b12      	ldr	r3, [pc, #72]	; (8002258 <MX_I2C1_Init+0x50>)
 800220e:	4a13      	ldr	r2, [pc, #76]	; (800225c <MX_I2C1_Init+0x54>)
 8002210:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002212:	4b11      	ldr	r3, [pc, #68]	; (8002258 <MX_I2C1_Init+0x50>)
 8002214:	4a12      	ldr	r2, [pc, #72]	; (8002260 <MX_I2C1_Init+0x58>)
 8002216:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002218:	4b0f      	ldr	r3, [pc, #60]	; (8002258 <MX_I2C1_Init+0x50>)
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800221e:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <MX_I2C1_Init+0x50>)
 8002220:	2200      	movs	r2, #0
 8002222:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002224:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <MX_I2C1_Init+0x50>)
 8002226:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800222a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800222c:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <MX_I2C1_Init+0x50>)
 800222e:	2200      	movs	r2, #0
 8002230:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <MX_I2C1_Init+0x50>)
 8002234:	2200      	movs	r2, #0
 8002236:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002238:	4b07      	ldr	r3, [pc, #28]	; (8002258 <MX_I2C1_Init+0x50>)
 800223a:	2200      	movs	r2, #0
 800223c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <MX_I2C1_Init+0x50>)
 8002240:	2200      	movs	r2, #0
 8002242:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002244:	4804      	ldr	r0, [pc, #16]	; (8002258 <MX_I2C1_Init+0x50>)
 8002246:	f003 f991 	bl	800556c <HAL_I2C_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002250:	f000 f8e5 	bl	800241e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20000454 	.word	0x20000454
 800225c:	40005400 	.word	0x40005400
 8002260:	000186a0 	.word	0x000186a0

08002264 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08a      	sub	sp, #40	; 0x28
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226c:	f107 0314 	add.w	r3, r7, #20
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a1d      	ldr	r2, [pc, #116]	; (80022f4 <HAL_I2C_MspInit+0x90>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d132      	bne.n	80022ea <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002284:	4b1c      	ldr	r3, [pc, #112]	; (80022f8 <HAL_I2C_MspInit+0x94>)
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	4a1b      	ldr	r2, [pc, #108]	; (80022f8 <HAL_I2C_MspInit+0x94>)
 800228a:	f043 0308 	orr.w	r3, r3, #8
 800228e:	6193      	str	r3, [r2, #24]
 8002290:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <HAL_I2C_MspInit+0x94>)
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800229c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022a2:	2312      	movs	r3, #18
 80022a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022a6:	2303      	movs	r3, #3
 80022a8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	4619      	mov	r1, r3
 80022b0:	4812      	ldr	r0, [pc, #72]	; (80022fc <HAL_I2C_MspInit+0x98>)
 80022b2:	f002 ff8f 	bl	80051d4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80022b6:	4b12      	ldr	r3, [pc, #72]	; (8002300 <HAL_I2C_MspInit+0x9c>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	f043 0302 	orr.w	r3, r3, #2
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
 80022cc:	4a0c      	ldr	r2, [pc, #48]	; (8002300 <HAL_I2C_MspInit+0x9c>)
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022d2:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <HAL_I2C_MspInit+0x94>)
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	4a08      	ldr	r2, [pc, #32]	; (80022f8 <HAL_I2C_MspInit+0x94>)
 80022d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022dc:	61d3      	str	r3, [r2, #28]
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_I2C_MspInit+0x94>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80022ea:	bf00      	nop
 80022ec:	3728      	adds	r7, #40	; 0x28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40005400 	.word	0x40005400
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40010c00 	.word	0x40010c00
 8002300:	40010000 	.word	0x40010000

08002304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002308:	f002 fb24 	bl	8004954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800230c:	f000 f84c 	bl	80023a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002310:	f7ff fef8 	bl	8002104 <MX_GPIO_Init>
  MX_DMA_Init();
 8002314:	f7ff f904 	bl	8001520 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002318:	f001 fb32 	bl	8003980 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800231c:	f001 fa28 	bl	8003770 <MX_TIM2_Init>
  MX_I2C1_Init();
 8002320:	f7ff ff72 	bl	8002208 <MX_I2C1_Init>
  MX_TIM1_Init();
 8002324:	f001 f96c 	bl	8003600 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8002328:	f001 fb7e 	bl	8003a28 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 800232c:	f001 fb52 	bl	80039d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  init_System();
 8002330:	f7ff fbca 	bl	8001ac8 <init_System>
  Connect_AdafruitServer();
 8002334:	f000 fbe0 	bl	8002af8 <Connect_AdafruitServer>
  SCH_Init();
 8002338:	f000 fe18 	bl	8002f6c <SCH_Init>
  SCH_Add_Task(button_reading, 1, 0);
 800233c:	2200      	movs	r2, #0
 800233e:	2101      	movs	r1, #1
 8002340:	4812      	ldr	r0, [pc, #72]	; (800238c <main+0x88>)
 8002342:	f000 fe2d 	bl	8002fa0 <SCH_Add_Task>
  SCH_Add_Task(WeatherStation, 1, 0);
 8002346:	2200      	movs	r2, #0
 8002348:	2101      	movs	r1, #1
 800234a:	4811      	ldr	r0, [pc, #68]	; (8002390 <main+0x8c>)
 800234c:	f000 fe28 	bl	8002fa0 <SCH_Add_Task>
  SCH_Add_Task(fsm_readSensor, 100, 0);
 8002350:	2200      	movs	r2, #0
 8002352:	2164      	movs	r1, #100	; 0x64
 8002354:	480f      	ldr	r0, [pc, #60]	; (8002394 <main+0x90>)
 8002356:	f000 fe23 	bl	8002fa0 <SCH_Add_Task>
  SCH_Add_Task(Check_ServerConnect_Task, 500, 0);
 800235a:	2200      	movs	r2, #0
 800235c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002360:	480d      	ldr	r0, [pc, #52]	; (8002398 <main+0x94>)
 8002362:	f000 fe1d 	bl	8002fa0 <SCH_Add_Task>
  SCH_Add_Task(Uart_SendData, 300, 0);
 8002366:	2200      	movs	r2, #0
 8002368:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800236c:	480b      	ldr	r0, [pc, #44]	; (800239c <main+0x98>)
 800236e:	f000 fe17 	bl	8002fa0 <SCH_Add_Task>
  SCH_Add_Task(Publish_Task, 2000, 10);
 8002372:	220a      	movs	r2, #10
 8002374:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002378:	4809      	ldr	r0, [pc, #36]	; (80023a0 <main+0x9c>)
 800237a:	f000 fe11 	bl	8002fa0 <SCH_Add_Task>
  HAL_TIM_Base_Start_IT(&htim2);
 800237e:	4809      	ldr	r0, [pc, #36]	; (80023a4 <main+0xa0>)
 8002380:	f005 fba2 	bl	8007ac8 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch_Task();
 8002384:	f000 ffb0 	bl	80032e8 <SCH_Dispatch_Task>
 8002388:	e7fc      	b.n	8002384 <main+0x80>
 800238a:	bf00      	nop
 800238c:	08001359 	.word	0x08001359
 8002390:	08001f55 	.word	0x08001f55
 8002394:	08001af1 	.word	0x08001af1
 8002398:	08002eb1 	.word	0x08002eb1
 800239c:	08002a75 	.word	0x08002a75
 80023a0:	08002e25 	.word	0x08002e25
 80023a4:	200005ec 	.word	0x200005ec

080023a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b090      	sub	sp, #64	; 0x40
 80023ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ae:	f107 0318 	add.w	r3, r7, #24
 80023b2:	2228      	movs	r2, #40	; 0x28
 80023b4:	2100      	movs	r1, #0
 80023b6:	4618      	mov	r0, r3
 80023b8:	f008 f981 	bl	800a6be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023bc:	1d3b      	adds	r3, r7, #4
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	605a      	str	r2, [r3, #4]
 80023c4:	609a      	str	r2, [r3, #8]
 80023c6:	60da      	str	r2, [r3, #12]
 80023c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023ca:	2302      	movs	r3, #2
 80023cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023ce:	2301      	movs	r3, #1
 80023d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023d2:	2310      	movs	r3, #16
 80023d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023d6:	2300      	movs	r3, #0
 80023d8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023da:	f107 0318 	add.w	r3, r7, #24
 80023de:	4618      	mov	r0, r3
 80023e0:	f004 ff12 	bl	8007208 <HAL_RCC_OscConfig>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <SystemClock_Config+0x46>
  {
    Error_Handler();
 80023ea:	f000 f818 	bl	800241e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023ee:	230f      	movs	r3, #15
 80023f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80023f2:	2300      	movs	r3, #0
 80023f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002402:	1d3b      	adds	r3, r7, #4
 8002404:	2100      	movs	r1, #0
 8002406:	4618      	mov	r0, r3
 8002408:	f005 f980 	bl	800770c <HAL_RCC_ClockConfig>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002412:	f000 f804 	bl	800241e <Error_Handler>
  }
}
 8002416:	bf00      	nop
 8002418:	3740      	adds	r7, #64	; 0x40
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002422:	b672      	cpsid	i
}
 8002424:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002426:	e7fe      	b.n	8002426 <Error_Handler+0x8>

08002428 <InitPhysics>:

static unsigned char flagConnect =  false;
static unsigned char flagConfig =  false;
static unsigned char flagConnectWifi =  false;

void InitPhysics(){
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af02      	add	r7, sp, #8
	led_t.tim = &htim1;
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <InitPhysics+0x48>)
 8002430:	4a10      	ldr	r2, [pc, #64]	; (8002474 <InitPhysics+0x4c>)
 8002432:	605a      	str	r2, [r3, #4]
	CLCD_I2C_Init(&LCD_t, &hi2c1, 0x4e, 20, 4);
 8002434:	2304      	movs	r3, #4
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	2314      	movs	r3, #20
 800243a:	224e      	movs	r2, #78	; 0x4e
 800243c:	490e      	ldr	r1, [pc, #56]	; (8002478 <InitPhysics+0x50>)
 800243e:	480f      	ldr	r0, [pc, #60]	; (800247c <InitPhysics+0x54>)
 8002440:	f002 f82e 	bl	80044a0 <CLCD_I2C_Init>
	InitESP();
 8002444:	f7ff f892 	bl	800156c <InitESP>
	init_ledRGB(&htim1);
 8002448:	480a      	ldr	r0, [pc, #40]	; (8002474 <InitPhysics+0x4c>)
 800244a:	f002 fa27 	bl	800489c <init_ledRGB>
	init_button();
 800244e:	f7fe ff5b 	bl	8001308 <init_button>
	BMP180_Init(&hi2c1, &BMP180_t);
 8002452:	490b      	ldr	r1, [pc, #44]	; (8002480 <InitPhysics+0x58>)
 8002454:	4808      	ldr	r0, [pc, #32]	; (8002478 <InitPhysics+0x50>)
 8002456:	f001 fd07 	bl	8003e68 <BMP180_Init>
	BH1750_Init(&hi2c1, &BH1750_t);
 800245a:	490a      	ldr	r1, [pc, #40]	; (8002484 <InitPhysics+0x5c>)
 800245c:	4806      	ldr	r0, [pc, #24]	; (8002478 <InitPhysics+0x50>)
 800245e:	f001 fc64 	bl	8003d2a <BH1750_Init>
	DHT20_Init(&hi2c1, &DHT20_t);
 8002462:	4909      	ldr	r1, [pc, #36]	; (8002488 <InitPhysics+0x60>)
 8002464:	4804      	ldr	r0, [pc, #16]	; (8002478 <InitPhysics+0x50>)
 8002466:	f002 f902 	bl	800466e <DHT20_Init>
}
 800246a:	bf00      	nop
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000534 	.word	0x20000534
 8002474:	200005a4 	.word	0x200005a4
 8002478:	20000454 	.word	0x20000454
 800247c:	20000528 	.word	0x20000528
 8002480:	2000053c 	.word	0x2000053c
 8002484:	2000054c 	.word	0x2000054c
 8002488:	20000558 	.word	0x20000558

0800248c <SendRequestDHT20>:

void SendRequestDHT20(void){
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
	DHT20_SendRequest(&DHT20_t, 0x71);
 8002490:	2171      	movs	r1, #113	; 0x71
 8002492:	4802      	ldr	r0, [pc, #8]	; (800249c <SendRequestDHT20+0x10>)
 8002494:	f002 f93b 	bl	800470e <DHT20_SendRequest>
}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000558 	.word	0x20000558

080024a0 <ReadDHT20>:

void ReadDHT20(void){
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
	DHT20_ReadData(&DHT20_t);
 80024a4:	4802      	ldr	r0, [pc, #8]	; (80024b0 <ReadDHT20+0x10>)
 80024a6:	f002 f975 	bl	8004794 <DHT20_ReadData>
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000558 	.word	0x20000558

080024b4 <turnOnGreen>:

void turnOffLED(void){
	set_codeRGB(led_t.tim, 0x000000);
}

void turnOnGreen(void){
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
	set_codeRGB(led_t.tim, 0x00FF00);
 80024b8:	4b04      	ldr	r3, [pc, #16]	; (80024cc <turnOnGreen+0x18>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80024c0:	4618      	mov	r0, r3
 80024c2:	f002 fa0f 	bl	80048e4 <set_codeRGB>
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000534 	.word	0x20000534

080024d0 <turnOnBlue>:

void turnOnBlue(void){
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
	set_codeRGB(led_t.tim, 0x0000FF);
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <turnOnBlue+0x14>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	21ff      	movs	r1, #255	; 0xff
 80024da:	4618      	mov	r0, r3
 80024dc:	f002 fa02 	bl	80048e4 <set_codeRGB>
}
 80024e0:	bf00      	nop
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000534 	.word	0x20000534

080024e8 <turnOnRed>:

void turnOnRed(void){
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
	set_codeRGB(led_t.tim, 0xFF0000);
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <turnOnRed+0x18>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 80024f4:	4618      	mov	r0, r3
 80024f6:	f002 f9f5 	bl	80048e4 <set_codeRGB>
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000534 	.word	0x20000534

08002504 <LCD_DisplayPage1>:
	CLCD_I2C_WriteString(&LCD_t, "1.TimeOut");
	CLCD_I2C_SetCursor(&LCD_t, 0, 1);
	CLCD_I2C_WriteString(&LCD_t, "2.Send Data");
}

void LCD_DisplayPage1(){
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
	if(flagConnectWifi){
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <LCD_DisplayPage1+0x4c>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <LCD_DisplayPage1+0x1e>
		CLCD_I2C_SetCursor(&LCD_t, 0, 0);
 8002510:	2200      	movs	r2, #0
 8002512:	2100      	movs	r1, #0
 8002514:	480f      	ldr	r0, [pc, #60]	; (8002554 <LCD_DisplayPage1+0x50>)
 8002516:	f002 f833 	bl	8004580 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteChar(&LCD_t, 'v');
 800251a:	2176      	movs	r1, #118	; 0x76
 800251c:	480d      	ldr	r0, [pc, #52]	; (8002554 <LCD_DisplayPage1+0x50>)
 800251e:	f002 f872 	bl	8004606 <CLCD_I2C_WriteChar>
	}
	HAL_Delay(1);
 8002522:	2001      	movs	r0, #1
 8002524:	f002 fa78 	bl	8004a18 <HAL_Delay>
	CLCD_I2C_SetCursor(&LCD_t, 4, 0);
 8002528:	2200      	movs	r2, #0
 800252a:	2104      	movs	r1, #4
 800252c:	4809      	ldr	r0, [pc, #36]	; (8002554 <LCD_DisplayPage1+0x50>)
 800252e:	f002 f827 	bl	8004580 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD_t, "WEATHER");
 8002532:	4909      	ldr	r1, [pc, #36]	; (8002558 <LCD_DisplayPage1+0x54>)
 8002534:	4807      	ldr	r0, [pc, #28]	; (8002554 <LCD_DisplayPage1+0x50>)
 8002536:	f002 f876 	bl	8004626 <CLCD_I2C_WriteString>
	CLCD_I2C_SetCursor(&LCD_t, 4, 1);
 800253a:	2201      	movs	r2, #1
 800253c:	2104      	movs	r1, #4
 800253e:	4805      	ldr	r0, [pc, #20]	; (8002554 <LCD_DisplayPage1+0x50>)
 8002540:	f002 f81e 	bl	8004580 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD_t, "STATION");
 8002544:	4905      	ldr	r1, [pc, #20]	; (800255c <LCD_DisplayPage1+0x58>)
 8002546:	4803      	ldr	r0, [pc, #12]	; (8002554 <LCD_DisplayPage1+0x50>)
 8002548:	f002 f86d 	bl	8004626 <CLCD_I2C_WriteString>
}
 800254c:	bf00      	nop
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20000598 	.word	0x20000598
 8002554:	20000528 	.word	0x20000528
 8002558:	0800c934 	.word	0x0800c934
 800255c:	0800c93c 	.word	0x0800c93c

08002560 <LCD_DisplayPage2>:

void LCD_DisplayPage2(char idx){
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	71fb      	strb	r3, [r7, #7]
	LCD_Clear();
 800256a:	f000 f871 	bl	8002650 <LCD_Clear>
	HAL_Delay(1);
 800256e:	2001      	movs	r0, #1
 8002570:	f002 fa52 	bl	8004a18 <HAL_Delay>
	char buff[16];
	float tempF = (DHT20_t.Temperature * 1.8) + 32;
 8002574:	4b30      	ldr	r3, [pc, #192]	; (8002638 <LCD_DisplayPage2+0xd8>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	4618      	mov	r0, r3
 800257a:	f7fd ff55 	bl	8000428 <__aeabi_f2d>
 800257e:	a32c      	add	r3, pc, #176	; (adr r3, 8002630 <LCD_DisplayPage2+0xd0>)
 8002580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002584:	f7fd ffa8 	bl	80004d8 <__aeabi_dmul>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4610      	mov	r0, r2
 800258e:	4619      	mov	r1, r3
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	4b29      	ldr	r3, [pc, #164]	; (800263c <LCD_DisplayPage2+0xdc>)
 8002596:	f7fd fde9 	bl	800016c <__adddf3>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4610      	mov	r0, r2
 80025a0:	4619      	mov	r1, r3
 80025a2:	f7fe fa91 	bl	8000ac8 <__aeabi_d2f>
 80025a6:	4603      	mov	r3, r0
 80025a8:	61fb      	str	r3, [r7, #28]

	if(idx){
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00a      	beq.n	80025c6 <LCD_DisplayPage2+0x66>
		sprintf(buff, "Temp :%0.1fF", tempF);
 80025b0:	69f8      	ldr	r0, [r7, #28]
 80025b2:	f7fd ff39 	bl	8000428 <__aeabi_f2d>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	f107 000c 	add.w	r0, r7, #12
 80025be:	4920      	ldr	r1, [pc, #128]	; (8002640 <LCD_DisplayPage2+0xe0>)
 80025c0:	f008 f81a 	bl	800a5f8 <siprintf>
 80025c4:	e00b      	b.n	80025de <LCD_DisplayPage2+0x7e>
	}
	else{
		sprintf(buff, "Temp :%0.1fC", DHT20_t.Temperature);
 80025c6:	4b1c      	ldr	r3, [pc, #112]	; (8002638 <LCD_DisplayPage2+0xd8>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fd ff2c 	bl	8000428 <__aeabi_f2d>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	f107 000c 	add.w	r0, r7, #12
 80025d8:	491a      	ldr	r1, [pc, #104]	; (8002644 <LCD_DisplayPage2+0xe4>)
 80025da:	f008 f80d 	bl	800a5f8 <siprintf>
	}
	CLCD_I2C_SetCursor(&LCD_t, 0, 0);
 80025de:	2200      	movs	r2, #0
 80025e0:	2100      	movs	r1, #0
 80025e2:	4819      	ldr	r0, [pc, #100]	; (8002648 <LCD_DisplayPage2+0xe8>)
 80025e4:	f001 ffcc 	bl	8004580 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD_t, buff);
 80025e8:	f107 030c 	add.w	r3, r7, #12
 80025ec:	4619      	mov	r1, r3
 80025ee:	4816      	ldr	r0, [pc, #88]	; (8002648 <LCD_DisplayPage2+0xe8>)
 80025f0:	f002 f819 	bl	8004626 <CLCD_I2C_WriteString>

	sprintf(buff, "Humid:%0.1f%%", DHT20_t.Humidity);
 80025f4:	4b10      	ldr	r3, [pc, #64]	; (8002638 <LCD_DisplayPage2+0xd8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fd ff15 	bl	8000428 <__aeabi_f2d>
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	f107 000c 	add.w	r0, r7, #12
 8002606:	4911      	ldr	r1, [pc, #68]	; (800264c <LCD_DisplayPage2+0xec>)
 8002608:	f007 fff6 	bl	800a5f8 <siprintf>
	CLCD_I2C_SetCursor(&LCD_t, 0, 1);
 800260c:	2201      	movs	r2, #1
 800260e:	2100      	movs	r1, #0
 8002610:	480d      	ldr	r0, [pc, #52]	; (8002648 <LCD_DisplayPage2+0xe8>)
 8002612:	f001 ffb5 	bl	8004580 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD_t, buff);
 8002616:	f107 030c 	add.w	r3, r7, #12
 800261a:	4619      	mov	r1, r3
 800261c:	480a      	ldr	r0, [pc, #40]	; (8002648 <LCD_DisplayPage2+0xe8>)
 800261e:	f002 f802 	bl	8004626 <CLCD_I2C_WriteString>
}
 8002622:	bf00      	nop
 8002624:	3720      	adds	r7, #32
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	f3af 8000 	nop.w
 8002630:	cccccccd 	.word	0xcccccccd
 8002634:	3ffccccc 	.word	0x3ffccccc
 8002638:	20000558 	.word	0x20000558
 800263c:	40400000 	.word	0x40400000
 8002640:	0800c944 	.word	0x0800c944
 8002644:	0800c954 	.word	0x0800c954
 8002648:	20000528 	.word	0x20000528
 800264c:	0800c964 	.word	0x0800c964

08002650 <LCD_Clear>:

void LCD_Clear(void){
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
	CLCD_I2C_Clear(&LCD_t);
 8002654:	4802      	ldr	r0, [pc, #8]	; (8002660 <LCD_Clear+0x10>)
 8002656:	f001 fffd 	bl	8004654 <CLCD_I2C_Clear>
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000528 	.word	0x20000528

08002664 <LCD_DisplayPage3>:

void LCD_DisplayPage3(char idx){
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	71fb      	strb	r3, [r7, #7]
	LCD_Clear();
 800266e:	f7ff ffef 	bl	8002650 <LCD_Clear>
	char buff[16];
	HAL_Delay(1);
 8002672:	2001      	movs	r0, #1
 8002674:	f002 f9d0 	bl	8004a18 <HAL_Delay>
	if(idx){
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00c      	beq.n	8002698 <LCD_DisplayPage3+0x34>
		sprintf(buff, "Airpr :%0.1fAtm", BMP180_t.PressureATM);
 800267e:	4b1e      	ldr	r3, [pc, #120]	; (80026f8 <LCD_DisplayPage3+0x94>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	4618      	mov	r0, r3
 8002684:	f7fd fed0 	bl	8000428 <__aeabi_f2d>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	f107 0008 	add.w	r0, r7, #8
 8002690:	491a      	ldr	r1, [pc, #104]	; (80026fc <LCD_DisplayPage3+0x98>)
 8002692:	f007 ffb1 	bl	800a5f8 <siprintf>
 8002696:	e00b      	b.n	80026b0 <LCD_DisplayPage3+0x4c>
	}
	else{
		sprintf(buff, "Airpr:%0.1fhPa", BMP180_t.Pressure);
 8002698:	4b17      	ldr	r3, [pc, #92]	; (80026f8 <LCD_DisplayPage3+0x94>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	4618      	mov	r0, r3
 800269e:	f7fd fec3 	bl	8000428 <__aeabi_f2d>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	f107 0008 	add.w	r0, r7, #8
 80026aa:	4915      	ldr	r1, [pc, #84]	; (8002700 <LCD_DisplayPage3+0x9c>)
 80026ac:	f007 ffa4 	bl	800a5f8 <siprintf>
	}
	CLCD_I2C_SetCursor(&LCD_t, 0, 0);
 80026b0:	2200      	movs	r2, #0
 80026b2:	2100      	movs	r1, #0
 80026b4:	4813      	ldr	r0, [pc, #76]	; (8002704 <LCD_DisplayPage3+0xa0>)
 80026b6:	f001 ff63 	bl	8004580 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD_t, buff);
 80026ba:	f107 0308 	add.w	r3, r7, #8
 80026be:	4619      	mov	r1, r3
 80026c0:	4810      	ldr	r0, [pc, #64]	; (8002704 <LCD_DisplayPage3+0xa0>)
 80026c2:	f001 ffb0 	bl	8004626 <CLCD_I2C_WriteString>

	sprintf(buff, "LightIts:%dLux", BH1750_t.Value);
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <LCD_DisplayPage3+0xa4>)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	461a      	mov	r2, r3
 80026cc:	f107 0308 	add.w	r3, r7, #8
 80026d0:	490e      	ldr	r1, [pc, #56]	; (800270c <LCD_DisplayPage3+0xa8>)
 80026d2:	4618      	mov	r0, r3
 80026d4:	f007 ff90 	bl	800a5f8 <siprintf>
	CLCD_I2C_SetCursor(&LCD_t, 0, 1);
 80026d8:	2201      	movs	r2, #1
 80026da:	2100      	movs	r1, #0
 80026dc:	4809      	ldr	r0, [pc, #36]	; (8002704 <LCD_DisplayPage3+0xa0>)
 80026de:	f001 ff4f 	bl	8004580 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD_t, buff);
 80026e2:	f107 0308 	add.w	r3, r7, #8
 80026e6:	4619      	mov	r1, r3
 80026e8:	4806      	ldr	r0, [pc, #24]	; (8002704 <LCD_DisplayPage3+0xa0>)
 80026ea:	f001 ff9c 	bl	8004626 <CLCD_I2C_WriteString>
}
 80026ee:	bf00      	nop
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	2000053c 	.word	0x2000053c
 80026fc:	0800c974 	.word	0x0800c974
 8002700:	0800c984 	.word	0x0800c984
 8002704:	20000528 	.word	0x20000528
 8002708:	2000054c 	.word	0x2000054c
 800270c:	0800c994 	.word	0x0800c994

08002710 <LCD_DisplayConnectEsp>:

void LCD_DisplayConnectEsp(uint8_t state){
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	71fb      	strb	r3, [r7, #7]
	switch (state) {
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d002      	beq.n	8002726 <LCD_DisplayConnectEsp+0x16>
 8002720:	2b01      	cmp	r3, #1
 8002722:	d016      	beq.n	8002752 <LCD_DisplayConnectEsp+0x42>
			CLCD_I2C_SetCursor(&LCD_t, 0, 1);
			CLCD_I2C_WriteString(&LCD_t, "Connected");

			break;
	}
}
 8002724:	e02b      	b.n	800277e <LCD_DisplayConnectEsp+0x6e>
			CLCD_I2C_Clear(&LCD_t);
 8002726:	4818      	ldr	r0, [pc, #96]	; (8002788 <LCD_DisplayConnectEsp+0x78>)
 8002728:	f001 ff94 	bl	8004654 <CLCD_I2C_Clear>
			CLCD_I2C_SetCursor(&LCD_t, 0, 0);
 800272c:	2200      	movs	r2, #0
 800272e:	2100      	movs	r1, #0
 8002730:	4815      	ldr	r0, [pc, #84]	; (8002788 <LCD_DisplayConnectEsp+0x78>)
 8002732:	f001 ff25 	bl	8004580 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(&LCD_t, " Esp");
 8002736:	4915      	ldr	r1, [pc, #84]	; (800278c <LCD_DisplayConnectEsp+0x7c>)
 8002738:	4813      	ldr	r0, [pc, #76]	; (8002788 <LCD_DisplayConnectEsp+0x78>)
 800273a:	f001 ff74 	bl	8004626 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(&LCD_t, 0, 1);
 800273e:	2201      	movs	r2, #1
 8002740:	2100      	movs	r1, #0
 8002742:	4811      	ldr	r0, [pc, #68]	; (8002788 <LCD_DisplayConnectEsp+0x78>)
 8002744:	f001 ff1c 	bl	8004580 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(&LCD_t, "Connecting...");
 8002748:	4911      	ldr	r1, [pc, #68]	; (8002790 <LCD_DisplayConnectEsp+0x80>)
 800274a:	480f      	ldr	r0, [pc, #60]	; (8002788 <LCD_DisplayConnectEsp+0x78>)
 800274c:	f001 ff6b 	bl	8004626 <CLCD_I2C_WriteString>
			break;
 8002750:	e015      	b.n	800277e <LCD_DisplayConnectEsp+0x6e>
			CLCD_I2C_Clear(&LCD_t);
 8002752:	480d      	ldr	r0, [pc, #52]	; (8002788 <LCD_DisplayConnectEsp+0x78>)
 8002754:	f001 ff7e 	bl	8004654 <CLCD_I2C_Clear>
			CLCD_I2C_SetCursor(&LCD_t, 0, 0);
 8002758:	2200      	movs	r2, #0
 800275a:	2100      	movs	r1, #0
 800275c:	480a      	ldr	r0, [pc, #40]	; (8002788 <LCD_DisplayConnectEsp+0x78>)
 800275e:	f001 ff0f 	bl	8004580 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(&LCD_t, " Esp");
 8002762:	490a      	ldr	r1, [pc, #40]	; (800278c <LCD_DisplayConnectEsp+0x7c>)
 8002764:	4808      	ldr	r0, [pc, #32]	; (8002788 <LCD_DisplayConnectEsp+0x78>)
 8002766:	f001 ff5e 	bl	8004626 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(&LCD_t, 0, 1);
 800276a:	2201      	movs	r2, #1
 800276c:	2100      	movs	r1, #0
 800276e:	4806      	ldr	r0, [pc, #24]	; (8002788 <LCD_DisplayConnectEsp+0x78>)
 8002770:	f001 ff06 	bl	8004580 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(&LCD_t, "Connected");
 8002774:	4907      	ldr	r1, [pc, #28]	; (8002794 <LCD_DisplayConnectEsp+0x84>)
 8002776:	4804      	ldr	r0, [pc, #16]	; (8002788 <LCD_DisplayConnectEsp+0x78>)
 8002778:	f001 ff55 	bl	8004626 <CLCD_I2C_WriteString>
			break;
 800277c:	bf00      	nop
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000528 	.word	0x20000528
 800278c:	0800c9a4 	.word	0x0800c9a4
 8002790:	0800c9ac 	.word	0x0800c9ac
 8002794:	0800c9bc 	.word	0x0800c9bc

08002798 <LCD_displaySettingMode>:

void LCD_displaySettingMode(void){
 8002798:	b5b0      	push	{r4, r5, r7, lr}
 800279a:	b08a      	sub	sp, #40	; 0x28
 800279c:	af00      	add	r7, sp, #0
	char buff1[] = "SETTING|  1.UART";
 800279e:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <LCD_displaySettingMode+0x58>)
 80027a0:	f107 0414 	add.w	r4, r7, #20
 80027a4:	461d      	mov	r5, r3
 80027a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027aa:	682b      	ldr	r3, [r5, #0]
 80027ac:	7023      	strb	r3, [r4, #0]
	char buff2[] = "MODE   |  2.UNIT";
 80027ae:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <LCD_displaySettingMode+0x5c>)
 80027b0:	463c      	mov	r4, r7
 80027b2:	461d      	mov	r5, r3
 80027b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027b8:	682b      	ldr	r3, [r5, #0]
 80027ba:	7023      	strb	r3, [r4, #0]
	CLCD_I2C_SetCursor(&LCD_t, 0, 0);
 80027bc:	2200      	movs	r2, #0
 80027be:	2100      	movs	r1, #0
 80027c0:	480d      	ldr	r0, [pc, #52]	; (80027f8 <LCD_displaySettingMode+0x60>)
 80027c2:	f001 fedd 	bl	8004580 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD_t, buff1);
 80027c6:	f107 0314 	add.w	r3, r7, #20
 80027ca:	4619      	mov	r1, r3
 80027cc:	480a      	ldr	r0, [pc, #40]	; (80027f8 <LCD_displaySettingMode+0x60>)
 80027ce:	f001 ff2a 	bl	8004626 <CLCD_I2C_WriteString>
	CLCD_I2C_SetCursor(&LCD_t, 0, 1);
 80027d2:	2201      	movs	r2, #1
 80027d4:	2100      	movs	r1, #0
 80027d6:	4808      	ldr	r0, [pc, #32]	; (80027f8 <LCD_displaySettingMode+0x60>)
 80027d8:	f001 fed2 	bl	8004580 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD_t, buff2);
 80027dc:	463b      	mov	r3, r7
 80027de:	4619      	mov	r1, r3
 80027e0:	4805      	ldr	r0, [pc, #20]	; (80027f8 <LCD_displaySettingMode+0x60>)
 80027e2:	f001 ff20 	bl	8004626 <CLCD_I2C_WriteString>
}
 80027e6:	bf00      	nop
 80027e8:	3728      	adds	r7, #40	; 0x28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bdb0      	pop	{r4, r5, r7, pc}
 80027ee:	bf00      	nop
 80027f0:	0800c9c8 	.word	0x0800c9c8
 80027f4:	0800c9dc 	.word	0x0800c9dc
 80027f8:	20000528 	.word	0x20000528

080027fc <LCD_displaySettingUart>:


void LCD_displaySettingUart(char idx){
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	71fb      	strb	r3, [r7, #7]
	CLCD_I2C_SetCursor(&LCD_t, 0, 0);
 8002806:	2200      	movs	r2, #0
 8002808:	2100      	movs	r1, #0
 800280a:	480b      	ldr	r0, [pc, #44]	; (8002838 <LCD_displaySettingUart+0x3c>)
 800280c:	f001 feb8 	bl	8004580 <CLCD_I2C_SetCursor>
	switch(idx){
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d002      	beq.n	800281c <LCD_displaySettingUart+0x20>
 8002816:	2b01      	cmp	r3, #1
 8002818:	d005      	beq.n	8002826 <LCD_displaySettingUart+0x2a>
	case 1:{
		CLCD_I2C_WriteString(&LCD_t, " SEND DATA: OFF");
		break;
	}
	}
}
 800281a:	e009      	b.n	8002830 <LCD_displaySettingUart+0x34>
		CLCD_I2C_WriteString(&LCD_t, " SEND DATA: ON ");
 800281c:	4907      	ldr	r1, [pc, #28]	; (800283c <LCD_displaySettingUart+0x40>)
 800281e:	4806      	ldr	r0, [pc, #24]	; (8002838 <LCD_displaySettingUart+0x3c>)
 8002820:	f001 ff01 	bl	8004626 <CLCD_I2C_WriteString>
		break;
 8002824:	e004      	b.n	8002830 <LCD_displaySettingUart+0x34>
		CLCD_I2C_WriteString(&LCD_t, " SEND DATA: OFF");
 8002826:	4906      	ldr	r1, [pc, #24]	; (8002840 <LCD_displaySettingUart+0x44>)
 8002828:	4803      	ldr	r0, [pc, #12]	; (8002838 <LCD_displaySettingUart+0x3c>)
 800282a:	f001 fefc 	bl	8004626 <CLCD_I2C_WriteString>
		break;
 800282e:	bf00      	nop
}
 8002830:	bf00      	nop
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20000528 	.word	0x20000528
 800283c:	0800c9f0 	.word	0x0800c9f0
 8002840:	0800ca00 	.word	0x0800ca00

08002844 <LCD_displaySettingUnit>:

void LCD_displaySettingUnit(void){
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
	CLCD_I2C_SetCursor(&LCD_t, 0, 0);
 8002848:	2200      	movs	r2, #0
 800284a:	2100      	movs	r1, #0
 800284c:	4808      	ldr	r0, [pc, #32]	; (8002870 <LCD_displaySettingUnit+0x2c>)
 800284e:	f001 fe97 	bl	8004580 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD_t, "  Temperature:");
 8002852:	4908      	ldr	r1, [pc, #32]	; (8002874 <LCD_displaySettingUnit+0x30>)
 8002854:	4806      	ldr	r0, [pc, #24]	; (8002870 <LCD_displaySettingUnit+0x2c>)
 8002856:	f001 fee6 	bl	8004626 <CLCD_I2C_WriteString>
	CLCD_I2C_SetCursor(&LCD_t, 0, 1);
 800285a:	2201      	movs	r2, #1
 800285c:	2100      	movs	r1, #0
 800285e:	4804      	ldr	r0, [pc, #16]	; (8002870 <LCD_displaySettingUnit+0x2c>)
 8002860:	f001 fe8e 	bl	8004580 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD_t, " AirPressure:");
 8002864:	4904      	ldr	r1, [pc, #16]	; (8002878 <LCD_displaySettingUnit+0x34>)
 8002866:	4802      	ldr	r0, [pc, #8]	; (8002870 <LCD_displaySettingUnit+0x2c>)
 8002868:	f001 fedd 	bl	8004626 <CLCD_I2C_WriteString>
}
 800286c:	bf00      	nop
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20000528 	.word	0x20000528
 8002874:	0800ca10 	.word	0x0800ca10
 8002878:	0800ca20 	.word	0x0800ca20

0800287c <LCD_displaySettingTemp>:

void LCD_displaySettingTemp(uint8_t idx){
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	71fb      	strb	r3, [r7, #7]
	switch(idx){
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <LCD_displaySettingTemp+0x16>
 800288c:	2b01      	cmp	r3, #1
 800288e:	d00a      	beq.n	80028a6 <LCD_displaySettingTemp+0x2a>
		CLCD_I2C_SetCursor(&LCD_t, 14, 0);
		CLCD_I2C_WriteString(&LCD_t, "F");
		break;
	}
	}
}
 8002890:	e013      	b.n	80028ba <LCD_displaySettingTemp+0x3e>
		CLCD_I2C_SetCursor(&LCD_t, 14, 0);
 8002892:	2200      	movs	r2, #0
 8002894:	210e      	movs	r1, #14
 8002896:	480b      	ldr	r0, [pc, #44]	; (80028c4 <LCD_displaySettingTemp+0x48>)
 8002898:	f001 fe72 	bl	8004580 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD_t, "C");
 800289c:	490a      	ldr	r1, [pc, #40]	; (80028c8 <LCD_displaySettingTemp+0x4c>)
 800289e:	4809      	ldr	r0, [pc, #36]	; (80028c4 <LCD_displaySettingTemp+0x48>)
 80028a0:	f001 fec1 	bl	8004626 <CLCD_I2C_WriteString>
		break;
 80028a4:	e009      	b.n	80028ba <LCD_displaySettingTemp+0x3e>
		CLCD_I2C_SetCursor(&LCD_t, 14, 0);
 80028a6:	2200      	movs	r2, #0
 80028a8:	210e      	movs	r1, #14
 80028aa:	4806      	ldr	r0, [pc, #24]	; (80028c4 <LCD_displaySettingTemp+0x48>)
 80028ac:	f001 fe68 	bl	8004580 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD_t, "F");
 80028b0:	4906      	ldr	r1, [pc, #24]	; (80028cc <LCD_displaySettingTemp+0x50>)
 80028b2:	4804      	ldr	r0, [pc, #16]	; (80028c4 <LCD_displaySettingTemp+0x48>)
 80028b4:	f001 feb7 	bl	8004626 <CLCD_I2C_WriteString>
		break;
 80028b8:	bf00      	nop
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000528 	.word	0x20000528
 80028c8:	0800ca30 	.word	0x0800ca30
 80028cc:	0800ca34 	.word	0x0800ca34

080028d0 <LCD_displaySettingPress>:

void LCD_displaySettingPress(uint8_t idx){
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
	switch(idx){
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <LCD_displaySettingPress+0x16>
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d00a      	beq.n	80028fa <LCD_displaySettingPress+0x2a>
		CLCD_I2C_SetCursor(&LCD_t, 13, 1);
		CLCD_I2C_WriteString(&LCD_t, "Atm");
		break;
	}
	}
}
 80028e4:	e013      	b.n	800290e <LCD_displaySettingPress+0x3e>
		CLCD_I2C_SetCursor(&LCD_t, 13, 1);
 80028e6:	2201      	movs	r2, #1
 80028e8:	210d      	movs	r1, #13
 80028ea:	480b      	ldr	r0, [pc, #44]	; (8002918 <LCD_displaySettingPress+0x48>)
 80028ec:	f001 fe48 	bl	8004580 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD_t, "hPa");
 80028f0:	490a      	ldr	r1, [pc, #40]	; (800291c <LCD_displaySettingPress+0x4c>)
 80028f2:	4809      	ldr	r0, [pc, #36]	; (8002918 <LCD_displaySettingPress+0x48>)
 80028f4:	f001 fe97 	bl	8004626 <CLCD_I2C_WriteString>
		break;
 80028f8:	e009      	b.n	800290e <LCD_displaySettingPress+0x3e>
		CLCD_I2C_SetCursor(&LCD_t, 13, 1);
 80028fa:	2201      	movs	r2, #1
 80028fc:	210d      	movs	r1, #13
 80028fe:	4806      	ldr	r0, [pc, #24]	; (8002918 <LCD_displaySettingPress+0x48>)
 8002900:	f001 fe3e 	bl	8004580 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD_t, "Atm");
 8002904:	4906      	ldr	r1, [pc, #24]	; (8002920 <LCD_displaySettingPress+0x50>)
 8002906:	4804      	ldr	r0, [pc, #16]	; (8002918 <LCD_displaySettingPress+0x48>)
 8002908:	f001 fe8d 	bl	8004626 <CLCD_I2C_WriteString>
		break;
 800290c:	bf00      	nop
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	20000528 	.word	0x20000528
 800291c:	0800ca38 	.word	0x0800ca38
 8002920:	0800ca3c 	.word	0x0800ca3c

08002924 <LCD_putChar>:

void LCD_putChar(char character){
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	71fb      	strb	r3, [r7, #7]
	CLCD_I2C_WriteChar(&LCD_t, character);
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	4619      	mov	r1, r3
 8002932:	4803      	ldr	r0, [pc, #12]	; (8002940 <LCD_putChar+0x1c>)
 8002934:	f001 fe67 	bl	8004606 <CLCD_I2C_WriteChar>
}
 8002938:	bf00      	nop
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20000528 	.word	0x20000528

08002944 <SetCursor>:

void SetCursor(int x, int y){
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
	CLCD_I2C_SetCursor(&LCD_t, x, y);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	4619      	mov	r1, r3
 8002958:	4803      	ldr	r0, [pc, #12]	; (8002968 <SetCursor+0x24>)
 800295a:	f001 fe11 	bl	8004580 <CLCD_I2C_SetCursor>
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20000528 	.word	0x20000528

0800296c <LCD_DisplayConnectWifi>:

void LCD_DisplayConnectWifi(void){
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
	CLCD_I2C_SetCursor(&LCD_t, 0, 0);
 8002970:	2200      	movs	r2, #0
 8002972:	2100      	movs	r1, #0
 8002974:	4808      	ldr	r0, [pc, #32]	; (8002998 <LCD_DisplayConnectWifi+0x2c>)
 8002976:	f001 fe03 	bl	8004580 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD_t, "ESP Connecting");
 800297a:	4908      	ldr	r1, [pc, #32]	; (800299c <LCD_DisplayConnectWifi+0x30>)
 800297c:	4806      	ldr	r0, [pc, #24]	; (8002998 <LCD_DisplayConnectWifi+0x2c>)
 800297e:	f001 fe52 	bl	8004626 <CLCD_I2C_WriteString>
	CLCD_I2C_SetCursor(&LCD_t, 0, 1);
 8002982:	2201      	movs	r2, #1
 8002984:	2100      	movs	r1, #0
 8002986:	4804      	ldr	r0, [pc, #16]	; (8002998 <LCD_DisplayConnectWifi+0x2c>)
 8002988:	f001 fdfa 	bl	8004580 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD_t, "Wifi...");
 800298c:	4904      	ldr	r1, [pc, #16]	; (80029a0 <LCD_DisplayConnectWifi+0x34>)
 800298e:	4802      	ldr	r0, [pc, #8]	; (8002998 <LCD_DisplayConnectWifi+0x2c>)
 8002990:	f001 fe49 	bl	8004626 <CLCD_I2C_WriteString>
}
 8002994:	bf00      	nop
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20000528 	.word	0x20000528
 800299c:	0800ca40 	.word	0x0800ca40
 80029a0:	0800ca50 	.word	0x0800ca50

080029a4 <LCD_DisplayConnectedWifi>:

void LCD_DisplayConnectedWifi(void){
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
	CLCD_I2C_SetCursor(&LCD_t, 0, 0);
 80029a8:	2200      	movs	r2, #0
 80029aa:	2100      	movs	r1, #0
 80029ac:	4808      	ldr	r0, [pc, #32]	; (80029d0 <LCD_DisplayConnectedWifi+0x2c>)
 80029ae:	f001 fde7 	bl	8004580 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD_t, "ESP Connected");
 80029b2:	4908      	ldr	r1, [pc, #32]	; (80029d4 <LCD_DisplayConnectedWifi+0x30>)
 80029b4:	4806      	ldr	r0, [pc, #24]	; (80029d0 <LCD_DisplayConnectedWifi+0x2c>)
 80029b6:	f001 fe36 	bl	8004626 <CLCD_I2C_WriteString>
	CLCD_I2C_SetCursor(&LCD_t, 0, 1);
 80029ba:	2201      	movs	r2, #1
 80029bc:	2100      	movs	r1, #0
 80029be:	4804      	ldr	r0, [pc, #16]	; (80029d0 <LCD_DisplayConnectedWifi+0x2c>)
 80029c0:	f001 fdde 	bl	8004580 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD_t, "Wifi...");
 80029c4:	4904      	ldr	r1, [pc, #16]	; (80029d8 <LCD_DisplayConnectedWifi+0x34>)
 80029c6:	4802      	ldr	r0, [pc, #8]	; (80029d0 <LCD_DisplayConnectedWifi+0x2c>)
 80029c8:	f001 fe2d 	bl	8004626 <CLCD_I2C_WriteString>
}
 80029cc:	bf00      	nop
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20000528 	.word	0x20000528
 80029d4:	0800ca58 	.word	0x0800ca58
 80029d8:	0800ca50 	.word	0x0800ca50

080029dc <LCD_DisplayConfigServer>:

void LCD_DisplayConfigServer(void){
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
	CLCD_I2C_SetCursor(&LCD_t, 0, 0);
 80029e0:	2200      	movs	r2, #0
 80029e2:	2100      	movs	r1, #0
 80029e4:	4804      	ldr	r0, [pc, #16]	; (80029f8 <LCD_DisplayConfigServer+0x1c>)
 80029e6:	f001 fdcb 	bl	8004580 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD_t, "ESP Config Server");
 80029ea:	4904      	ldr	r1, [pc, #16]	; (80029fc <LCD_DisplayConfigServer+0x20>)
 80029ec:	4802      	ldr	r0, [pc, #8]	; (80029f8 <LCD_DisplayConfigServer+0x1c>)
 80029ee:	f001 fe1a 	bl	8004626 <CLCD_I2C_WriteString>
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000528 	.word	0x20000528
 80029fc:	0800ca68 	.word	0x0800ca68

08002a00 <LCD_DisplayConnectServerBroker>:

void LCD_DisplayConnectServerBroker(void){
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
	CLCD_I2C_SetCursor(&LCD_t, 0, 0);
 8002a04:	2200      	movs	r2, #0
 8002a06:	2100      	movs	r1, #0
 8002a08:	4808      	ldr	r0, [pc, #32]	; (8002a2c <LCD_DisplayConnectServerBroker+0x2c>)
 8002a0a:	f001 fdb9 	bl	8004580 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD_t, "Connect Server");
 8002a0e:	4908      	ldr	r1, [pc, #32]	; (8002a30 <LCD_DisplayConnectServerBroker+0x30>)
 8002a10:	4806      	ldr	r0, [pc, #24]	; (8002a2c <LCD_DisplayConnectServerBroker+0x2c>)
 8002a12:	f001 fe08 	bl	8004626 <CLCD_I2C_WriteString>
	CLCD_I2C_SetCursor(&LCD_t, 0, 1);
 8002a16:	2201      	movs	r2, #1
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4804      	ldr	r0, [pc, #16]	; (8002a2c <LCD_DisplayConnectServerBroker+0x2c>)
 8002a1c:	f001 fdb0 	bl	8004580 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD_t, "Broker");
 8002a20:	4904      	ldr	r1, [pc, #16]	; (8002a34 <LCD_DisplayConnectServerBroker+0x34>)
 8002a22:	4802      	ldr	r0, [pc, #8]	; (8002a2c <LCD_DisplayConnectServerBroker+0x2c>)
 8002a24:	f001 fdff 	bl	8004626 <CLCD_I2C_WriteString>
}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20000528 	.word	0x20000528
 8002a30:	0800ca7c 	.word	0x0800ca7c
 8002a34:	0800ca8c 	.word	0x0800ca8c

08002a38 <ReadPressure>:





void ReadPressure(void){
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
	BMP180_Get_Presure(&BMP180_t);
 8002a3c:	4802      	ldr	r0, [pc, #8]	; (8002a48 <ReadPressure+0x10>)
 8002a3e:	f001 fb77 	bl	8004130 <BMP180_Get_Presure>
}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	2000053c 	.word	0x2000053c

08002a4c <SendRequestForLTdata>:

void SendRequestForLTdata(void){
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
	BH1750_TriggerReceiveData(&BH1750_t);
 8002a50:	4802      	ldr	r0, [pc, #8]	; (8002a5c <SendRequestForLTdata+0x10>)
 8002a52:	f001 f9e5 	bl	8003e20 <BH1750_TriggerReceiveData>
}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	2000054c 	.word	0x2000054c

08002a60 <ReadLightIntensity>:

void ReadLightIntensity(void){
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
	BH1750_ReadData(&BH1750_t);
 8002a64:	4802      	ldr	r0, [pc, #8]	; (8002a70 <ReadLightIntensity+0x10>)
 8002a66:	f001 f997 	bl	8003d98 <BH1750_ReadData>
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	2000054c 	.word	0x2000054c

08002a74 <Uart_SendData>:


void Uart_SendData(void){
 8002a74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a78:	b086      	sub	sp, #24
 8002a7a:	af06      	add	r7, sp, #24
	if(flagUpdateData){
 8002a7c:	4b17      	ldr	r3, [pc, #92]	; (8002adc <Uart_SendData+0x68>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d027      	beq.n	8002ad4 <Uart_SendData+0x60>
		sprintf(msg, "Humidity:%0.1f;Temperature:%0.1f;AirPressure:%0.1f;LightIntensity:%d\r\n", DHT20_t.Humidity, DHT20_t.Temperature, BMP180_t.Pressure, BH1750_t.Value);
 8002a84:	4b16      	ldr	r3, [pc, #88]	; (8002ae0 <Uart_SendData+0x6c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fd fccd 	bl	8000428 <__aeabi_f2d>
 8002a8e:	4680      	mov	r8, r0
 8002a90:	4689      	mov	r9, r1
 8002a92:	4b13      	ldr	r3, [pc, #76]	; (8002ae0 <Uart_SendData+0x6c>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fd fcc6 	bl	8000428 <__aeabi_f2d>
 8002a9c:	4604      	mov	r4, r0
 8002a9e:	460d      	mov	r5, r1
 8002aa0:	4b10      	ldr	r3, [pc, #64]	; (8002ae4 <Uart_SendData+0x70>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fd fcbf 	bl	8000428 <__aeabi_f2d>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	490e      	ldr	r1, [pc, #56]	; (8002ae8 <Uart_SendData+0x74>)
 8002ab0:	8809      	ldrh	r1, [r1, #0]
 8002ab2:	9104      	str	r1, [sp, #16]
 8002ab4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002ab8:	e9cd 4500 	strd	r4, r5, [sp]
 8002abc:	4642      	mov	r2, r8
 8002abe:	464b      	mov	r3, r9
 8002ac0:	490a      	ldr	r1, [pc, #40]	; (8002aec <Uart_SendData+0x78>)
 8002ac2:	480b      	ldr	r0, [pc, #44]	; (8002af0 <Uart_SendData+0x7c>)
 8002ac4:	f007 fd98 	bl	800a5f8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, sizeof(msg), 10);
 8002ac8:	230a      	movs	r3, #10
 8002aca:	2280      	movs	r2, #128	; 0x80
 8002acc:	4908      	ldr	r1, [pc, #32]	; (8002af0 <Uart_SendData+0x7c>)
 8002ace:	4809      	ldr	r0, [pc, #36]	; (8002af4 <Uart_SendData+0x80>)
 8002ad0:	f005 ffa5 	bl	8008a1e <HAL_UART_Transmit>
	}
}
 8002ad4:	bf00      	nop
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002adc:	20000564 	.word	0x20000564
 8002ae0:	20000558 	.word	0x20000558
 8002ae4:	2000053c 	.word	0x2000053c
 8002ae8:	2000054c 	.word	0x2000054c
 8002aec:	0800ca94 	.word	0x0800ca94
 8002af0:	200004a8 	.word	0x200004a8
 8002af4:	20000a3c 	.word	0x20000a3c

08002af8 <Connect_AdafruitServer>:
}


// AT API

void Connect_AdafruitServer(void){
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af02      	add	r7, sp, #8
	int count = 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	607b      	str	r3, [r7, #4]
	LCD_DisplayConnectEsp(0);
 8002b02:	2000      	movs	r0, #0
 8002b04:	f7ff fe04 	bl	8002710 <LCD_DisplayConnectEsp>
	turnOnBlue();
 8002b08:	f7ff fce2 	bl	80024d0 <turnOnBlue>
	HAL_Delay(1000);
 8002b0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b10:	f001 ff82 	bl	8004a18 <HAL_Delay>
	while(!ESP_Init(&hEsp)){
 8002b14:	e008      	b.n	8002b28 <Connect_AdafruitServer+0x30>
		turnOnRed();
 8002b16:	f7ff fce7 	bl	80024e8 <turnOnRed>
		HAL_Delay(1000);
 8002b1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b1e:	f001 ff7b 	bl	8004a18 <HAL_Delay>
		ESP_Init(&hEsp);
 8002b22:	4866      	ldr	r0, [pc, #408]	; (8002cbc <Connect_AdafruitServer+0x1c4>)
 8002b24:	f7fe fd2e 	bl	8001584 <ESP_Init>
	while(!ESP_Init(&hEsp)){
 8002b28:	4864      	ldr	r0, [pc, #400]	; (8002cbc <Connect_AdafruitServer+0x1c4>)
 8002b2a:	f7fe fd2b 	bl	8001584 <ESP_Init>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	f083 0301 	eor.w	r3, r3, #1
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1ed      	bne.n	8002b16 <Connect_AdafruitServer+0x1e>
	}
	LCD_Clear();
 8002b3a:	f7ff fd89 	bl	8002650 <LCD_Clear>
	HAL_Delay(3);
 8002b3e:	2003      	movs	r0, #3
 8002b40:	f001 ff6a 	bl	8004a18 <HAL_Delay>
	LCD_DisplayConnectWifi();
 8002b44:	f7ff ff12 	bl	800296c <LCD_DisplayConnectWifi>

	ESP_WifiInit(&hEsp);
 8002b48:	485c      	ldr	r0, [pc, #368]	; (8002cbc <Connect_AdafruitServer+0x1c4>)
 8002b4a:	f7fe fd77 	bl	800163c <ESP_WifiInit>
	HAL_Delay(100);
 8002b4e:	2064      	movs	r0, #100	; 0x64
 8002b50:	f001 ff62 	bl	8004a18 <HAL_Delay>
	ESP_WifiMode(&hEsp, ESP_WIFIMODE_STATION, 1);
 8002b54:	2201      	movs	r2, #1
 8002b56:	2101      	movs	r1, #1
 8002b58:	4858      	ldr	r0, [pc, #352]	; (8002cbc <Connect_AdafruitServer+0x1c4>)
 8002b5a:	f7fe fe15 	bl	8001788 <ESP_WifiMode>
	HAL_Delay(100);
 8002b5e:	2064      	movs	r0, #100	; 0x64
 8002b60:	f001 ff5a 	bl	8004a18 <HAL_Delay>
//	if(!ESP_WifiStationIsConnect(&hEsp)){
	while(!ESP_WifiStationConnect(&hEsp, pSSID, PassWord, NULL, 10000)){
 8002b64:	e010      	b.n	8002b88 <Connect_AdafruitServer+0x90>
		turnOnRed();
 8002b66:	f7ff fcbf 	bl	80024e8 <turnOnRed>
		HAL_Delay(5000);
 8002b6a:	f241 3088 	movw	r0, #5000	; 0x1388
 8002b6e:	f001 ff53 	bl	8004a18 <HAL_Delay>
		ESP_WifiStationConnect(&hEsp, pSSID, PassWord, NULL, 10000);
 8002b72:	4b53      	ldr	r3, [pc, #332]	; (8002cc0 <Connect_AdafruitServer+0x1c8>)
 8002b74:	6819      	ldr	r1, [r3, #0]
 8002b76:	4b53      	ldr	r3, [pc, #332]	; (8002cc4 <Connect_AdafruitServer+0x1cc>)
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	f242 7310 	movw	r3, #10000	; 0x2710
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	2300      	movs	r3, #0
 8002b82:	484e      	ldr	r0, [pc, #312]	; (8002cbc <Connect_AdafruitServer+0x1c4>)
 8002b84:	f7fe fd88 	bl	8001698 <ESP_WifiStationConnect>
	while(!ESP_WifiStationConnect(&hEsp, pSSID, PassWord, NULL, 10000)){
 8002b88:	4b4d      	ldr	r3, [pc, #308]	; (8002cc0 <Connect_AdafruitServer+0x1c8>)
 8002b8a:	6819      	ldr	r1, [r3, #0]
 8002b8c:	4b4d      	ldr	r3, [pc, #308]	; (8002cc4 <Connect_AdafruitServer+0x1cc>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	f242 7310 	movw	r3, #10000	; 0x2710
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	2300      	movs	r3, #0
 8002b98:	4848      	ldr	r0, [pc, #288]	; (8002cbc <Connect_AdafruitServer+0x1c4>)
 8002b9a:	f7fe fd7d 	bl	8001698 <ESP_WifiStationConnect>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f083 0301 	eor.w	r3, r3, #1
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1dd      	bne.n	8002b66 <Connect_AdafruitServer+0x6e>
	}
	LCD_Clear();
 8002baa:	f7ff fd51 	bl	8002650 <LCD_Clear>
	HAL_Delay(1);
 8002bae:	2001      	movs	r0, #1
 8002bb0:	f001 ff32 	bl	8004a18 <HAL_Delay>
	LCD_DisplayConnectedWifi();
 8002bb4:	f7ff fef6 	bl	80029a4 <LCD_DisplayConnectedWifi>
//	}
	turnOnBlue();
 8002bb8:	f7ff fc8a 	bl	80024d0 <turnOnBlue>
	HAL_Delay(1000);
 8002bbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bc0:	f001 ff2a 	bl	8004a18 <HAL_Delay>
	LCD_Clear();
 8002bc4:	f7ff fd44 	bl	8002650 <LCD_Clear>
	HAL_Delay(1);
 8002bc8:	2001      	movs	r0, #1
 8002bca:	f001 ff25 	bl	8004a18 <HAL_Delay>
	LCD_DisplayConfigServer();
 8002bce:	f7ff ff05 	bl	80029dc <LCD_DisplayConfigServer>
	while(!ESP_MQTTConfig(&hEsp, UserID, Key)){
 8002bd2:	e015      	b.n	8002c00 <Connect_AdafruitServer+0x108>
		turnOnRed();
 8002bd4:	f7ff fc88 	bl	80024e8 <turnOnRed>
		if(count == 2) ResetESP32();
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d101      	bne.n	8002be2 <Connect_AdafruitServer+0xea>
 8002bde:	f000 f99f 	bl	8002f20 <ResetESP32>
		HAL_Delay(5000);
 8002be2:	f241 3088 	movw	r0, #5000	; 0x1388
 8002be6:	f001 ff17 	bl	8004a18 <HAL_Delay>
		ESP_MQTTConfig(&hEsp, UserID, Key);
 8002bea:	4b37      	ldr	r3, [pc, #220]	; (8002cc8 <Connect_AdafruitServer+0x1d0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a37      	ldr	r2, [pc, #220]	; (8002ccc <Connect_AdafruitServer+0x1d4>)
 8002bf0:	6812      	ldr	r2, [r2, #0]
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4831      	ldr	r0, [pc, #196]	; (8002cbc <Connect_AdafruitServer+0x1c4>)
 8002bf6:	f7fe fe2b 	bl	8001850 <ESP_MQTTConfig>
		count++;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	607b      	str	r3, [r7, #4]
	while(!ESP_MQTTConfig(&hEsp, UserID, Key)){
 8002c00:	4b31      	ldr	r3, [pc, #196]	; (8002cc8 <Connect_AdafruitServer+0x1d0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a31      	ldr	r2, [pc, #196]	; (8002ccc <Connect_AdafruitServer+0x1d4>)
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	4619      	mov	r1, r3
 8002c0a:	482c      	ldr	r0, [pc, #176]	; (8002cbc <Connect_AdafruitServer+0x1c4>)
 8002c0c:	f7fe fe20 	bl	8001850 <ESP_MQTTConfig>
 8002c10:	4603      	mov	r3, r0
 8002c12:	f083 0301 	eor.w	r3, r3, #1
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1db      	bne.n	8002bd4 <Connect_AdafruitServer+0xdc>
	}
	count = 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	607b      	str	r3, [r7, #4]
	turnOnBlue();
 8002c20:	f7ff fc56 	bl	80024d0 <turnOnBlue>
	HAL_Delay(5000);
 8002c24:	f241 3088 	movw	r0, #5000	; 0x1388
 8002c28:	f001 fef6 	bl	8004a18 <HAL_Delay>
	LCD_Clear();
 8002c2c:	f7ff fd10 	bl	8002650 <LCD_Clear>
	HAL_Delay(1);
 8002c30:	2001      	movs	r0, #1
 8002c32:	f001 fef1 	bl	8004a18 <HAL_Delay>
	LCD_DisplayConnectServerBroker();
 8002c36:	f7ff fee3 	bl	8002a00 <LCD_DisplayConnectServerBroker>

	while(!ESP_MQTTConnect(&hEsp, Server, Port)){
 8002c3a:	e015      	b.n	8002c68 <Connect_AdafruitServer+0x170>
		if(count == 2) ResetESP32();
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d101      	bne.n	8002c46 <Connect_AdafruitServer+0x14e>
 8002c42:	f000 f96d 	bl	8002f20 <ResetESP32>
		turnOnRed();
 8002c46:	f7ff fc4f 	bl	80024e8 <turnOnRed>
		HAL_Delay(10000);
 8002c4a:	f242 7010 	movw	r0, #10000	; 0x2710
 8002c4e:	f001 fee3 	bl	8004a18 <HAL_Delay>
		ESP_MQTTConnect(&hEsp, Server, Port);
 8002c52:	4b1f      	ldr	r3, [pc, #124]	; (8002cd0 <Connect_AdafruitServer+0x1d8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f240 725b 	movw	r2, #1883	; 0x75b
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4817      	ldr	r0, [pc, #92]	; (8002cbc <Connect_AdafruitServer+0x1c4>)
 8002c5e:	f7fe fe55 	bl	800190c <ESP_MQTTConnect>
		count++;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3301      	adds	r3, #1
 8002c66:	607b      	str	r3, [r7, #4]
	while(!ESP_MQTTConnect(&hEsp, Server, Port)){
 8002c68:	4b19      	ldr	r3, [pc, #100]	; (8002cd0 <Connect_AdafruitServer+0x1d8>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f240 725b 	movw	r2, #1883	; 0x75b
 8002c70:	4619      	mov	r1, r3
 8002c72:	4812      	ldr	r0, [pc, #72]	; (8002cbc <Connect_AdafruitServer+0x1c4>)
 8002c74:	f7fe fe4a 	bl	800190c <ESP_MQTTConnect>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	f083 0301 	eor.w	r3, r3, #1
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1db      	bne.n	8002c3c <Connect_AdafruitServer+0x144>
	}
	turnOnBlue();
 8002c84:	f7ff fc24 	bl	80024d0 <turnOnBlue>
	HAL_Delay(5000);
 8002c88:	f241 3088 	movw	r0, #5000	; 0x1388
 8002c8c:	f001 fec4 	bl	8004a18 <HAL_Delay>

	flagConnect = true;
 8002c90:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <Connect_AdafruitServer+0x1dc>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	701a      	strb	r2, [r3, #0]
	flagConfig = true;
 8002c96:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <Connect_AdafruitServer+0x1e0>)
 8002c98:	2201      	movs	r2, #1
 8002c9a:	701a      	strb	r2, [r3, #0]
	turnOnGreen();
 8002c9c:	f7ff fc0a 	bl	80024b4 <turnOnGreen>
	LCD_DisplayConnectEsp(1);
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	f7ff fd35 	bl	8002710 <LCD_DisplayConnectEsp>
	HAL_Delay(1000);
 8002ca6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002caa:	f001 feb5 	bl	8004a18 <HAL_Delay>
	LCD_Clear();
 8002cae:	f7ff fccf 	bl	8002650 <LCD_Clear>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000238 	.word	0x20000238
 8002cc0:	2000001c 	.word	0x2000001c
 8002cc4:	20000020 	.word	0x20000020
 8002cc8:	20000024 	.word	0x20000024
 8002ccc:	20000028 	.word	0x20000028
 8002cd0:	2000002c 	.word	0x2000002c
 8002cd4:	20000596 	.word	0x20000596
 8002cd8:	20000597 	.word	0x20000597

08002cdc <Publish_Temperature_Task>:

unsigned char Publish_Temperature_Task(void){
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
	if(flagConnect){
 8002ce0:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <Publish_Temperature_Task+0x3c>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d013      	beq.n	8002d10 <Publish_Temperature_Task+0x34>
		sprintf(TemperatureStr, "%0.1f", DHT20_t.Temperature);
 8002ce8:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <Publish_Temperature_Task+0x40>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fd fb9b 	bl	8000428 <__aeabi_f2d>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	490a      	ldr	r1, [pc, #40]	; (8002d20 <Publish_Temperature_Task+0x44>)
 8002cf8:	480a      	ldr	r0, [pc, #40]	; (8002d24 <Publish_Temperature_Task+0x48>)
 8002cfa:	f007 fc7d 	bl	800a5f8 <siprintf>
		return ESP_MQTTPublish(&hEsp, TemperatureFeed, TemperatureStr);
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <Publish_Temperature_Task+0x4c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a08      	ldr	r2, [pc, #32]	; (8002d24 <Publish_Temperature_Task+0x48>)
 8002d04:	4619      	mov	r1, r3
 8002d06:	4809      	ldr	r0, [pc, #36]	; (8002d2c <Publish_Temperature_Task+0x50>)
 8002d08:	f7fe fe5e 	bl	80019c8 <ESP_MQTTPublish>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	e000      	b.n	8002d12 <Publish_Temperature_Task+0x36>
	}
	return 0;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	20000596 	.word	0x20000596
 8002d1c:	20000558 	.word	0x20000558
 8002d20:	0800cadc 	.word	0x0800cadc
 8002d24:	20000580 	.word	0x20000580
 8002d28:	20000010 	.word	0x20000010
 8002d2c:	20000238 	.word	0x20000238

08002d30 <Publish_Humidity_Task>:

unsigned char Publish_Humidity_Task(void){
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
	if(flagConnect){
 8002d34:	4b0d      	ldr	r3, [pc, #52]	; (8002d6c <Publish_Humidity_Task+0x3c>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d013      	beq.n	8002d64 <Publish_Humidity_Task+0x34>
		sprintf(HumidityStr, "%0.1f", DHT20_t.Humidity);
 8002d3c:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <Publish_Humidity_Task+0x40>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fd fb71 	bl	8000428 <__aeabi_f2d>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	490a      	ldr	r1, [pc, #40]	; (8002d74 <Publish_Humidity_Task+0x44>)
 8002d4c:	480a      	ldr	r0, [pc, #40]	; (8002d78 <Publish_Humidity_Task+0x48>)
 8002d4e:	f007 fc53 	bl	800a5f8 <siprintf>
		return ESP_MQTTPublish(&hEsp, HumidityFeed, HumidityStr);
 8002d52:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <Publish_Humidity_Task+0x4c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a08      	ldr	r2, [pc, #32]	; (8002d78 <Publish_Humidity_Task+0x48>)
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4809      	ldr	r0, [pc, #36]	; (8002d80 <Publish_Humidity_Task+0x50>)
 8002d5c:	f7fe fe34 	bl	80019c8 <ESP_MQTTPublish>
 8002d60:	4603      	mov	r3, r0
 8002d62:	e000      	b.n	8002d66 <Publish_Humidity_Task+0x36>
	}
	return 0;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20000596 	.word	0x20000596
 8002d70:	20000558 	.word	0x20000558
 8002d74:	0800cadc 	.word	0x0800cadc
 8002d78:	20000574 	.word	0x20000574
 8002d7c:	20000018 	.word	0x20000018
 8002d80:	20000238 	.word	0x20000238

08002d84 <Publish_LightIntensity_Task>:

unsigned char Publish_LightIntensity_Task(void){
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
	if(flagConnect){
 8002d88:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <Publish_LightIntensity_Task+0x34>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00f      	beq.n	8002db0 <Publish_LightIntensity_Task+0x2c>
		sprintf(LightIntensityStr, "%d", BH1750_t.Value);
 8002d90:	4b0a      	ldr	r3, [pc, #40]	; (8002dbc <Publish_LightIntensity_Task+0x38>)
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	490a      	ldr	r1, [pc, #40]	; (8002dc0 <Publish_LightIntensity_Task+0x3c>)
 8002d98:	480a      	ldr	r0, [pc, #40]	; (8002dc4 <Publish_LightIntensity_Task+0x40>)
 8002d9a:	f007 fc2d 	bl	800a5f8 <siprintf>
		return ESP_MQTTPublish(&hEsp, LightIntensityFeed, LightIntensityStr);
 8002d9e:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <Publish_LightIntensity_Task+0x44>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a08      	ldr	r2, [pc, #32]	; (8002dc4 <Publish_LightIntensity_Task+0x40>)
 8002da4:	4619      	mov	r1, r3
 8002da6:	4809      	ldr	r0, [pc, #36]	; (8002dcc <Publish_LightIntensity_Task+0x48>)
 8002da8:	f7fe fe0e 	bl	80019c8 <ESP_MQTTPublish>
 8002dac:	4603      	mov	r3, r0
 8002dae:	e000      	b.n	8002db2 <Publish_LightIntensity_Task+0x2e>
	}
	return 0;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20000596 	.word	0x20000596
 8002dbc:	2000054c 	.word	0x2000054c
 8002dc0:	0800cae4 	.word	0x0800cae4
 8002dc4:	20000568 	.word	0x20000568
 8002dc8:	2000000c 	.word	0x2000000c
 8002dcc:	20000238 	.word	0x20000238

08002dd0 <Publish_AirPressure_Task>:

unsigned char Publish_AirPressure_Task(void){
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
	if(flagConnect){
 8002dd4:	4b0d      	ldr	r3, [pc, #52]	; (8002e0c <Publish_AirPressure_Task+0x3c>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d013      	beq.n	8002e04 <Publish_AirPressure_Task+0x34>
		sprintf(AirPressureStr, "%0.1f", BMP180_t.Pressure);
 8002ddc:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <Publish_AirPressure_Task+0x40>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7fd fb21 	bl	8000428 <__aeabi_f2d>
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	490a      	ldr	r1, [pc, #40]	; (8002e14 <Publish_AirPressure_Task+0x44>)
 8002dec:	480a      	ldr	r0, [pc, #40]	; (8002e18 <Publish_AirPressure_Task+0x48>)
 8002dee:	f007 fc03 	bl	800a5f8 <siprintf>
		return ESP_MQTTPublish(&hEsp, AirPressureFeed, AirPressureStr);
 8002df2:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <Publish_AirPressure_Task+0x4c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a08      	ldr	r2, [pc, #32]	; (8002e18 <Publish_AirPressure_Task+0x48>)
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4809      	ldr	r0, [pc, #36]	; (8002e20 <Publish_AirPressure_Task+0x50>)
 8002dfc:	f7fe fde4 	bl	80019c8 <ESP_MQTTPublish>
 8002e00:	4603      	mov	r3, r0
 8002e02:	e000      	b.n	8002e06 <Publish_AirPressure_Task+0x36>
	}
	return 0;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000596 	.word	0x20000596
 8002e10:	2000053c 	.word	0x2000053c
 8002e14:	0800cadc 	.word	0x0800cadc
 8002e18:	2000058c 	.word	0x2000058c
 8002e1c:	20000014 	.word	0x20000014
 8002e20:	20000238 	.word	0x20000238

08002e24 <Publish_Task>:

void Publish_Task(void){
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
	switch(flagConnect){
 8002e28:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <Publish_Task+0x7c>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d01f      	beq.n	8002e70 <Publish_Task+0x4c>
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d12e      	bne.n	8002e92 <Publish_Task+0x6e>
	case 1:{
		do{
			if(!Publish_AirPressure_Task()){
 8002e34:	f7ff ffcc 	bl	8002dd0 <Publish_AirPressure_Task>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00f      	beq.n	8002e5e <Publish_Task+0x3a>
				break;
			}
			if(!Publish_Humidity_Task()){
 8002e3e:	f7ff ff77 	bl	8002d30 <Publish_Humidity_Task>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00c      	beq.n	8002e62 <Publish_Task+0x3e>
				break;
			}
			if(!Publish_Temperature_Task()){
 8002e48:	f7ff ff48 	bl	8002cdc <Publish_Temperature_Task>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d009      	beq.n	8002e66 <Publish_Task+0x42>
				break;
			}
			if(!Publish_LightIntensity_Task()){
 8002e52:	f7ff ff97 	bl	8002d84 <Publish_LightIntensity_Task>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d11e      	bne.n	8002e9a <Publish_Task+0x76>
				break;
 8002e5c:	e004      	b.n	8002e68 <Publish_Task+0x44>
				break;
 8002e5e:	bf00      	nop
 8002e60:	e002      	b.n	8002e68 <Publish_Task+0x44>
				break;
 8002e62:	bf00      	nop
 8002e64:	e000      	b.n	8002e68 <Publish_Task+0x44>
				break;
 8002e66:	bf00      	nop
			}

			return;
		}
		while(0);
		flagConnect = 0;
 8002e68:	4b0d      	ldr	r3, [pc, #52]	; (8002ea0 <Publish_Task+0x7c>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	701a      	strb	r2, [r3, #0]
		return;
 8002e6e:	e015      	b.n	8002e9c <Publish_Task+0x78>
	}
	case 0:{
		SCH_Add_Task(ResetESP32, 0, 0);
 8002e70:	2200      	movs	r2, #0
 8002e72:	2100      	movs	r1, #0
 8002e74:	480b      	ldr	r0, [pc, #44]	; (8002ea4 <Publish_Task+0x80>)
 8002e76:	f000 f893 	bl	8002fa0 <SCH_Add_Task>
		SCH_Add_Task(Reconncet_Server, 0, 400);
 8002e7a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002e7e:	2100      	movs	r1, #0
 8002e80:	4809      	ldr	r0, [pc, #36]	; (8002ea8 <Publish_Task+0x84>)
 8002e82:	f000 f88d 	bl	8002fa0 <SCH_Add_Task>
		SCH_Add_Task(Reconnect_MQTTBroker, 0, 1000);
 8002e86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4807      	ldr	r0, [pc, #28]	; (8002eac <Publish_Task+0x88>)
 8002e8e:	f000 f887 	bl	8002fa0 <SCH_Add_Task>
	}
	}

	flagConnect = false;
 8002e92:	4b03      	ldr	r3, [pc, #12]	; (8002ea0 <Publish_Task+0x7c>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	701a      	strb	r2, [r3, #0]
 8002e98:	e000      	b.n	8002e9c <Publish_Task+0x78>
			return;
 8002e9a:	bf00      	nop
}
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20000596 	.word	0x20000596
 8002ea4:	08002f21 	.word	0x08002f21
 8002ea8:	08002ebd 	.word	0x08002ebd
 8002eac:	08002ef1 	.word	0x08002ef1

08002eb0 <Check_ServerConnect_Task>:

void Check_ServerConnect_Task(void){
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
	if(!flagConnect){

	}
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <Reconncet_Server>:

void Reconncet_Server(void){
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
	if(ESP_MQTTConfig(&hEsp, UserID, Key)){
 8002ec0:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <Reconncet_Server+0x24>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a07      	ldr	r2, [pc, #28]	; (8002ee4 <Reconncet_Server+0x28>)
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4807      	ldr	r0, [pc, #28]	; (8002ee8 <Reconncet_Server+0x2c>)
 8002ecc:	f7fe fcc0 	bl	8001850 <ESP_MQTTConfig>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <Reconncet_Server+0x20>
		flagConfig = true;
 8002ed6:	4b05      	ldr	r3, [pc, #20]	; (8002eec <Reconncet_Server+0x30>)
 8002ed8:	2201      	movs	r2, #1
 8002eda:	701a      	strb	r2, [r3, #0]
	}
}
 8002edc:	bf00      	nop
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	20000024 	.word	0x20000024
 8002ee4:	20000028 	.word	0x20000028
 8002ee8:	20000238 	.word	0x20000238
 8002eec:	20000597 	.word	0x20000597

08002ef0 <Reconnect_MQTTBroker>:
void Reconnect_MQTTBroker(void){
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
	if(ESP_MQTTConnect(&hEsp, Server, Port)){
 8002ef4:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <Reconnect_MQTTBroker+0x24>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f240 725b 	movw	r2, #1883	; 0x75b
 8002efc:	4619      	mov	r1, r3
 8002efe:	4806      	ldr	r0, [pc, #24]	; (8002f18 <Reconnect_MQTTBroker+0x28>)
 8002f00:	f7fe fd04 	bl	800190c <ESP_MQTTConnect>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <Reconnect_MQTTBroker+0x20>
		flagConnect = true;
 8002f0a:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <Reconnect_MQTTBroker+0x2c>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	701a      	strb	r2, [r3, #0]
	}
}
 8002f10:	bf00      	nop
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	2000002c 	.word	0x2000002c
 8002f18:	20000238 	.word	0x20000238
 8002f1c:	20000596 	.word	0x20000596

08002f20 <ResetESP32>:

void ResetESP32(void){
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
	ESP_Restart(&hEsp);
 8002f24:	4802      	ldr	r0, [pc, #8]	; (8002f30 <ResetESP32+0x10>)
 8002f26:	f7fe fb5b 	bl	80015e0 <ESP_Restart>
}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20000238 	.word	0x20000238

08002f34 <addNode>:

#include "scheduler_O(1).h"

Container* container = NULL;

S_Task* addNode(void(*pFunction)(), int delay, int period){
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
	S_Task* newNode = (struct S_Task*)malloc(sizeof(struct S_Task));
 8002f40:	2010      	movs	r0, #16
 8002f42:	f006 fd51 	bl	80099e8 <malloc>
 8002f46:	4603      	mov	r3, r0
 8002f48:	617b      	str	r3, [r7, #20]
	newNode->Delay = delay;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	601a      	str	r2, [r3, #0]
	newNode->Period = period;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	605a      	str	r2, [r3, #4]
	newNode->pTask = pFunction;
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	609a      	str	r2, [r3, #8]
	newNode->next = NULL;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	60da      	str	r2, [r3, #12]
	return newNode;
 8002f62:	697b      	ldr	r3, [r7, #20]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <SCH_Init>:

void SCH_Init(void){
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
	container = (struct Container*)malloc(sizeof(struct Container));
 8002f70:	2008      	movs	r0, #8
 8002f72:	f006 fd39 	bl	80099e8 <malloc>
 8002f76:	4603      	mov	r3, r0
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <SCH_Init+0x30>)
 8002f7c:	601a      	str	r2, [r3, #0]
	container->tail = NULL;
 8002f7e:	4b07      	ldr	r3, [pc, #28]	; (8002f9c <SCH_Init+0x30>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2200      	movs	r2, #0
 8002f84:	605a      	str	r2, [r3, #4]
	container->numTask = 0;
 8002f86:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <SCH_Init+0x30>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	705a      	strb	r2, [r3, #1]
	container->emptySlot = 0;
 8002f8e:	4b03      	ldr	r3, [pc, #12]	; (8002f9c <SCH_Init+0x30>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2200      	movs	r2, #0
 8002f94:	701a      	strb	r2, [r3, #0]
}
 8002f96:	bf00      	nop
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	2000059c 	.word	0x2000059c

08002fa0 <SCH_Add_Task>:

void SCH_Add_Task(void(*pFunction)(), int PERIOD, int DELAY){
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08a      	sub	sp, #40	; 0x28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
    S_Task* newNode;

    if(container->tail == NULL){
 8002fac:	4b80      	ldr	r3, [pc, #512]	; (80031b0 <SCH_Add_Task+0x210>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d115      	bne.n	8002fe2 <SCH_Add_Task+0x42>
        // add first node
        newNode = addNode(pFunction, DELAY, PERIOD);
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f7ff ffba 	bl	8002f34 <addNode>
 8002fc0:	6178      	str	r0, [r7, #20]
        container->tail = newNode;
 8002fc2:	4b7b      	ldr	r3, [pc, #492]	; (80031b0 <SCH_Add_Task+0x210>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	605a      	str	r2, [r3, #4]
        container->tail->next =  newNode;
 8002fca:	4b79      	ldr	r3, [pc, #484]	; (80031b0 <SCH_Add_Task+0x210>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	60da      	str	r2, [r3, #12]
        container->numTask++;
 8002fd4:	4b76      	ldr	r3, [pc, #472]	; (80031b0 <SCH_Add_Task+0x210>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	785a      	ldrb	r2, [r3, #1]
 8002fda:	3201      	adds	r2, #1
 8002fdc:	b2d2      	uxtb	r2, r2
 8002fde:	705a      	strb	r2, [r3, #1]
 8002fe0:	e134      	b.n	800324c <SCH_Add_Task+0x2ac>
    }
    else{
        S_Task* prevTail = container->tail->next;
 8002fe2:	4b73      	ldr	r3, [pc, #460]	; (80031b0 <SCH_Add_Task+0x210>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	627b      	str	r3, [r7, #36]	; 0x24
        S_Task* temp = container->tail->next;
 8002fec:	4b70      	ldr	r3, [pc, #448]	; (80031b0 <SCH_Add_Task+0x210>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	623b      	str	r3, [r7, #32]
        int Total = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
        for(int i = 0; i < container->numTask; i++){
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61bb      	str	r3, [r7, #24]
 8002ffe:	e11d      	b.n	800323c <SCH_Add_Task+0x29c>
            Total += temp->Delay;
 8003000:	6a3b      	ldr	r3, [r7, #32]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	69fa      	ldr	r2, [r7, #28]
 8003006:	4413      	add	r3, r2
 8003008:	61fb      	str	r3, [r7, #28]
            if((Total + temp->next->Delay > DELAY) && temp != container->tail){
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	4413      	add	r3, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	429a      	cmp	r2, r3
 8003018:	f280 80b4 	bge.w	8003184 <SCH_Add_Task+0x1e4>
 800301c:	4b64      	ldr	r3, [pc, #400]	; (80031b0 <SCH_Add_Task+0x210>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	6a3a      	ldr	r2, [r7, #32]
 8003024:	429a      	cmp	r2, r3
 8003026:	f000 80ad 	beq.w	8003184 <SCH_Add_Task+0x1e4>
                // add head
                if(Total > DELAY){
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	429a      	cmp	r2, r3
 8003030:	dd4a      	ble.n	80030c8 <SCH_Add_Task+0x128>
                    if(container->emptySlot == 0){
 8003032:	4b5f      	ldr	r3, [pc, #380]	; (80031b0 <SCH_Add_Task+0x210>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d11a      	bne.n	8003072 <SCH_Add_Task+0xd2>
                        newNode = addNode(pFunction, DELAY, PERIOD);
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f7ff ff77 	bl	8002f34 <addNode>
 8003046:	6178      	str	r0, [r7, #20]
                        // update next node DELAY
                        temp->Delay -= DELAY;
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	1ad2      	subs	r2, r2, r3
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	601a      	str	r2, [r3, #0]
                        // update newNode position
                        newNode->next = temp;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	6a3a      	ldr	r2, [r7, #32]
 8003058:	60da      	str	r2, [r3, #12]
                        container->tail->next = newNode;
 800305a:	4b55      	ldr	r3, [pc, #340]	; (80031b0 <SCH_Add_Task+0x210>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	60da      	str	r2, [r3, #12]
                        //update numTask
                        container->numTask++;
 8003064:	4b52      	ldr	r3, [pc, #328]	; (80031b0 <SCH_Add_Task+0x210>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	785a      	ldrb	r2, [r3, #1]
 800306a:	3201      	adds	r2, #1
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	705a      	strb	r2, [r3, #1]
                        return;
 8003070:	e0ec      	b.n	800324c <SCH_Add_Task+0x2ac>
                    }
                    else{
                        // update new head
                        container->tail->Delay = DELAY;
 8003072:	4b4f      	ldr	r3, [pc, #316]	; (80031b0 <SCH_Add_Task+0x210>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	601a      	str	r2, [r3, #0]
                        container->tail->Period = PERIOD;
 800307c:	4b4c      	ldr	r3, [pc, #304]	; (80031b0 <SCH_Add_Task+0x210>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	605a      	str	r2, [r3, #4]
                        container->tail->pTask = pFunction;
 8003086:	4b4a      	ldr	r3, [pc, #296]	; (80031b0 <SCH_Add_Task+0x210>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	609a      	str	r2, [r3, #8]
                        //update next to node DELAY
                        temp->Delay -= DELAY;
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	1ad2      	subs	r2, r2, r3
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	601a      	str	r2, [r3, #0]
                        // update tail
                        while(prevTail->next != container->tail){
 800309c:	e002      	b.n	80030a4 <SCH_Add_Task+0x104>
                            prevTail = prevTail->next;
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24
                        while(prevTail->next != container->tail){
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	4b41      	ldr	r3, [pc, #260]	; (80031b0 <SCH_Add_Task+0x210>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d1f5      	bne.n	800309e <SCH_Add_Task+0xfe>
                        }
                        container->tail = prevTail;
 80030b2:	4b3f      	ldr	r3, [pc, #252]	; (80031b0 <SCH_Add_Task+0x210>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b8:	605a      	str	r2, [r3, #4]
                        // update emptySlot
                        container->emptySlot--;
 80030ba:	4b3d      	ldr	r3, [pc, #244]	; (80031b0 <SCH_Add_Task+0x210>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	781a      	ldrb	r2, [r3, #0]
 80030c0:	3a01      	subs	r2, #1
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	701a      	strb	r2, [r3, #0]
                        return;
 80030c6:	e0c1      	b.n	800324c <SCH_Add_Task+0x2ac>
                    }
                }
                // add middle
                if(container->emptySlot == 0){
 80030c8:	4b39      	ldr	r3, [pc, #228]	; (80031b0 <SCH_Add_Task+0x210>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d11f      	bne.n	8003112 <SCH_Add_Task+0x172>
                    // update newNode DELAY
                    newNode = addNode(pFunction, DELAY - Total, PERIOD);
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	4619      	mov	r1, r3
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f7ff ff29 	bl	8002f34 <addNode>
 80030e2:	6178      	str	r0, [r7, #20]
                    // update position
                    newNode->next = temp->next;
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	60da      	str	r2, [r3, #12]
                    temp->next = newNode;
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	60da      	str	r2, [r3, #12]
                    // update next to DELAY
                    newNode->next->Delay -=  newNode->Delay;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	6819      	ldr	r1, [r3, #0]
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	1a8a      	subs	r2, r1, r2
 8003102:	601a      	str	r2, [r3, #0]

                    container->numTask++;
 8003104:	4b2a      	ldr	r3, [pc, #168]	; (80031b0 <SCH_Add_Task+0x210>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	785a      	ldrb	r2, [r3, #1]
 800310a:	3201      	adds	r2, #1
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	705a      	strb	r2, [r3, #1]
                    return;
 8003110:	e09c      	b.n	800324c <SCH_Add_Task+0x2ac>
                }
                else{
                    // update newNode DELAY
                    newNode = container->tail;
 8003112:	4b27      	ldr	r3, [pc, #156]	; (80031b0 <SCH_Add_Task+0x210>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	617b      	str	r3, [r7, #20]
                    newNode->Delay = DELAY - Total;
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	1ad2      	subs	r2, r2, r3
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	601a      	str	r2, [r3, #0]
                    newNode->Period = PERIOD;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	605a      	str	r2, [r3, #4]
                    newNode->pTask = pFunction;
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	609a      	str	r2, [r3, #8]
                    // update new tail
                    while(prevTail->next != container->tail){
 8003130:	e002      	b.n	8003138 <SCH_Add_Task+0x198>
                        prevTail = prevTail->next;
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	627b      	str	r3, [r7, #36]	; 0x24
                    while(prevTail->next != container->tail){
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	4b1c      	ldr	r3, [pc, #112]	; (80031b0 <SCH_Add_Task+0x210>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	429a      	cmp	r2, r3
 8003144:	d1f5      	bne.n	8003132 <SCH_Add_Task+0x192>
                    }
                    prevTail->next = newNode->next;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	60da      	str	r2, [r3, #12]
                    container->tail = prevTail;
 800314e:	4b18      	ldr	r3, [pc, #96]	; (80031b0 <SCH_Add_Task+0x210>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003154:	605a      	str	r2, [r3, #4]
                    // update new node position
                    newNode->next = temp->next;
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	60da      	str	r2, [r3, #12]
                    temp->next = newNode;
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	60da      	str	r2, [r3, #12]
                    // update next to DELAY
                    newNode->next->Delay -= newNode->Delay;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	6819      	ldr	r1, [r3, #0]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	1a8a      	subs	r2, r1, r2
 8003174:	601a      	str	r2, [r3, #0]

                    container->emptySlot--;
 8003176:	4b0e      	ldr	r3, [pc, #56]	; (80031b0 <SCH_Add_Task+0x210>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	781a      	ldrb	r2, [r3, #0]
 800317c:	3a01      	subs	r2, #1
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	701a      	strb	r2, [r3, #0]
                    return;
 8003182:	e063      	b.n	800324c <SCH_Add_Task+0x2ac>
                }
            }

            // add tail
            if(temp->pTask == NULL){
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d113      	bne.n	80031b4 <SCH_Add_Task+0x214>
                temp->Delay = DELAY - Total;
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	1ad2      	subs	r2, r2, r3
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	601a      	str	r2, [r3, #0]
                temp->Period = PERIOD;
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	605a      	str	r2, [r3, #4]
                temp->pTask = pFunction;
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	609a      	str	r2, [r3, #8]
                // update empty slot
                container->emptySlot--;
 80031a2:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <SCH_Add_Task+0x210>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	781a      	ldrb	r2, [r3, #0]
 80031a8:	3a01      	subs	r2, #1
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	701a      	strb	r2, [r3, #0]
                return;
 80031ae:	e04d      	b.n	800324c <SCH_Add_Task+0x2ac>
 80031b0:	2000059c 	.word	0x2000059c
            }
            if(temp == container->tail){
 80031b4:	4b27      	ldr	r3, [pc, #156]	; (8003254 <SCH_Add_Task+0x2b4>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	6a3a      	ldr	r2, [r7, #32]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d137      	bne.n	8003230 <SCH_Add_Task+0x290>
                if(container->emptySlot == 0){
 80031c0:	4b24      	ldr	r3, [pc, #144]	; (8003254 <SCH_Add_Task+0x2b4>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d11a      	bne.n	8003200 <SCH_Add_Task+0x260>
                    // printf("%d\n", DELAY);
                    // printf("%d\n", Total);
                    // update DELAY
                    newNode = addNode(pFunction, DELAY - Total, PERIOD);
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	4619      	mov	r1, r3
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f7ff fead 	bl	8002f34 <addNode>
 80031da:	6178      	str	r0, [r7, #20]
                    // update position
                    newNode->next = temp->next;
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	60da      	str	r2, [r3, #12]
                    temp->next = newNode;
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	60da      	str	r2, [r3, #12]
                    container->tail = newNode;
 80031ea:	4b1a      	ldr	r3, [pc, #104]	; (8003254 <SCH_Add_Task+0x2b4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	605a      	str	r2, [r3, #4]
                    // update num Task
                    container->numTask++;
 80031f2:	4b18      	ldr	r3, [pc, #96]	; (8003254 <SCH_Add_Task+0x2b4>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	785a      	ldrb	r2, [r3, #1]
 80031f8:	3201      	adds	r2, #1
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	705a      	strb	r2, [r3, #1]
                    return;
 80031fe:	e025      	b.n	800324c <SCH_Add_Task+0x2ac>
                }
                else{ // error here
                    container->tail->Delay = DELAY - Total;
 8003200:	4b14      	ldr	r3, [pc, #80]	; (8003254 <SCH_Add_Task+0x2b4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	69fa      	ldr	r2, [r7, #28]
 800320a:	1a8a      	subs	r2, r1, r2
 800320c:	601a      	str	r2, [r3, #0]
                    container->tail->Period = PERIOD;
 800320e:	4b11      	ldr	r3, [pc, #68]	; (8003254 <SCH_Add_Task+0x2b4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	605a      	str	r2, [r3, #4]
                    container->tail->pTask = pFunction;
 8003218:	4b0e      	ldr	r3, [pc, #56]	; (8003254 <SCH_Add_Task+0x2b4>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	609a      	str	r2, [r3, #8]
                    // update empty slot
                    container->emptySlot--;
 8003222:	4b0c      	ldr	r3, [pc, #48]	; (8003254 <SCH_Add_Task+0x2b4>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	781a      	ldrb	r2, [r3, #0]
 8003228:	3a01      	subs	r2, #1
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	701a      	strb	r2, [r3, #0]
                    return;
 800322e:	e00d      	b.n	800324c <SCH_Add_Task+0x2ac>
                }
            }
            temp = temp->next;
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	623b      	str	r3, [r7, #32]
        for(int i = 0; i < container->numTask; i++){
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	3301      	adds	r3, #1
 800323a:	61bb      	str	r3, [r7, #24]
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <SCH_Add_Task+0x2b4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	785b      	ldrb	r3, [r3, #1]
 8003242:	461a      	mov	r2, r3
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	4293      	cmp	r3, r2
 8003248:	f6ff aeda 	blt.w	8003000 <SCH_Add_Task+0x60>
        }
    }
}
 800324c:	3728      	adds	r7, #40	; 0x28
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	2000059c 	.word	0x2000059c

08003258 <SCH_Delete_Task>:

void SCH_Delete_Task(void){
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
	container->tail->next->Delay = 0;
 800325c:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <SCH_Delete_Task+0x4c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
	container->tail->next->Period = 0;
 8003268:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <SCH_Delete_Task+0x4c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	605a      	str	r2, [r3, #4]
	container->tail->next->pTask = NULL;
 8003274:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <SCH_Delete_Task+0x4c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	609a      	str	r2, [r3, #8]
	container->tail = container->tail->next;
 8003280:	4b08      	ldr	r3, [pc, #32]	; (80032a4 <SCH_Delete_Task+0x4c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	4b07      	ldr	r3, [pc, #28]	; (80032a4 <SCH_Delete_Task+0x4c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68d2      	ldr	r2, [r2, #12]
 800328c:	605a      	str	r2, [r3, #4]
	container->emptySlot++;
 800328e:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <SCH_Delete_Task+0x4c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	781a      	ldrb	r2, [r3, #0]
 8003294:	3201      	adds	r2, #1
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	701a      	strb	r2, [r3, #0]
}
 800329a:	bf00      	nop
 800329c:	46bd      	mov	sp, r7
 800329e:	bc80      	pop	{r7}
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	2000059c 	.word	0x2000059c

080032a8 <SCH_Update_Task>:

void SCH_Update_Task(void){
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
	if(container != NULL && container->tail != NULL){
 80032ac:	4b0d      	ldr	r3, [pc, #52]	; (80032e4 <SCH_Update_Task+0x3c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d012      	beq.n	80032da <SCH_Update_Task+0x32>
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <SCH_Update_Task+0x3c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00d      	beq.n	80032da <SCH_Update_Task+0x32>
		if(container->tail->next->Delay > 0){
 80032be:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <SCH_Update_Task+0x3c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	dd06      	ble.n	80032da <SCH_Update_Task+0x32>
			container->tail->next->Delay--;
 80032cc:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <SCH_Update_Task+0x3c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	3a01      	subs	r2, #1
 80032d8:	601a      	str	r2, [r3, #0]
		}
	}

}
 80032da:	bf00      	nop
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	2000059c 	.word	0x2000059c

080032e8 <SCH_Dispatch_Task>:

void SCH_Dispatch_Task(void){
 80032e8:	b590      	push	{r4, r7, lr}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
	if(container->tail->next->Delay == 0){
 80032ee:	4b12      	ldr	r3, [pc, #72]	; (8003338 <SCH_Dispatch_Task+0x50>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d118      	bne.n	800332e <SCH_Dispatch_Task+0x46>
		(*(container -> tail -> next -> pTask))();
 80032fc:	4b0e      	ldr	r3, [pc, #56]	; (8003338 <SCH_Dispatch_Task+0x50>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	4798      	blx	r3
		struct S_Task temp = *(container -> tail -> next);
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <SCH_Dispatch_Task+0x50>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	463c      	mov	r4, r7
 8003312:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003314:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		SCH_Delete_Task();
 8003318:	f7ff ff9e 	bl	8003258 <SCH_Delete_Task>
		if(temp.Period != 0){
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d005      	beq.n	800332e <SCH_Dispatch_Task+0x46>
			SCH_Add_Task(temp.pTask, temp.Period, temp.Period);
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff fe39 	bl	8002fa0 <SCH_Add_Task>
		}
	}

//	SCH_Go_To_Sleep();
}
 800332e:	bf00      	nop
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	bd90      	pop	{r4, r7, pc}
 8003336:	bf00      	nop
 8003338:	2000059c 	.word	0x2000059c

0800333c <HAL_TIM_PeriodElapsedCallback>:
	}
}



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800334c:	d101      	bne.n	8003352 <HAL_TIM_PeriodElapsedCallback+0x16>
		SCH_Update_Task();
 800334e:	f7ff ffab 	bl	80032a8 <SCH_Update_Task>
	}
}
 8003352:	bf00      	nop
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
	...

0800335c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003362:	4b15      	ldr	r3, [pc, #84]	; (80033b8 <HAL_MspInit+0x5c>)
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	4a14      	ldr	r2, [pc, #80]	; (80033b8 <HAL_MspInit+0x5c>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	6193      	str	r3, [r2, #24]
 800336e:	4b12      	ldr	r3, [pc, #72]	; (80033b8 <HAL_MspInit+0x5c>)
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800337a:	4b0f      	ldr	r3, [pc, #60]	; (80033b8 <HAL_MspInit+0x5c>)
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	4a0e      	ldr	r2, [pc, #56]	; (80033b8 <HAL_MspInit+0x5c>)
 8003380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003384:	61d3      	str	r3, [r2, #28]
 8003386:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <HAL_MspInit+0x5c>)
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338e:	607b      	str	r3, [r7, #4]
 8003390:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003392:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <HAL_MspInit+0x60>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	4a04      	ldr	r2, [pc, #16]	; (80033bc <HAL_MspInit+0x60>)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033ae:	bf00      	nop
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr
 80033b8:	40021000 	.word	0x40021000
 80033bc:	40010000 	.word	0x40010000

080033c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80033c4:	e7fe      	b.n	80033c4 <NMI_Handler+0x4>

080033c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033c6:	b480      	push	{r7}
 80033c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033ca:	e7fe      	b.n	80033ca <HardFault_Handler+0x4>

080033cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033d0:	e7fe      	b.n	80033d0 <MemManage_Handler+0x4>

080033d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033d2:	b480      	push	{r7}
 80033d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033d6:	e7fe      	b.n	80033d6 <BusFault_Handler+0x4>

080033d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033dc:	e7fe      	b.n	80033dc <UsageFault_Handler+0x4>

080033de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033de:	b480      	push	{r7}
 80033e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033e2:	bf00      	nop
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr

080033ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033ea:	b480      	push	{r7}
 80033ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr

080033f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033f6:	b480      	push	{r7}
 80033f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033fa:	bf00      	nop
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr

08003402 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003406:	f001 faeb 	bl	80049e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800340a:	bf00      	nop
 800340c:	bd80      	pop	{r7, pc}
	...

08003410 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003414:	4802      	ldr	r0, [pc, #8]	; (8003420 <DMA1_Channel2_IRQHandler+0x10>)
 8003416:	f001 fd9f 	bl	8004f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	20000b58 	.word	0x20000b58

08003424 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003428:	4802      	ldr	r0, [pc, #8]	; (8003434 <DMA1_Channel4_IRQHandler+0x10>)
 800342a:	f001 fd95 	bl	8004f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800342e:	bf00      	nop
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	20000b14 	.word	0x20000b14

08003438 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800343c:	4802      	ldr	r0, [pc, #8]	; (8003448 <TIM2_IRQHandler+0x10>)
 800343e:	f004 fc8f 	bl	8007d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	200005ec 	.word	0x200005ec

0800344c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003450:	4802      	ldr	r0, [pc, #8]	; (800345c <USART1_IRQHandler+0x10>)
 8003452:	f005 fc6d 	bl	8008d30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20000a3c 	.word	0x20000a3c

08003460 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003464:	4802      	ldr	r0, [pc, #8]	; (8003470 <USART3_IRQHandler+0x10>)
 8003466:	f005 fc63 	bl	8008d30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800346a:	bf00      	nop
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20000acc 	.word	0x20000acc

08003474 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  return 1;
 8003478:	2301      	movs	r3, #1
}
 800347a:	4618      	mov	r0, r3
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr

08003482 <_kill>:

int _kill(int pid, int sig)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800348c:	f007 f990 	bl	800a7b0 <__errno>
 8003490:	4603      	mov	r3, r0
 8003492:	2216      	movs	r2, #22
 8003494:	601a      	str	r2, [r3, #0]
  return -1;
 8003496:	f04f 33ff 	mov.w	r3, #4294967295
}
 800349a:	4618      	mov	r0, r3
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <_exit>:

void _exit (int status)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b082      	sub	sp, #8
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80034aa:	f04f 31ff 	mov.w	r1, #4294967295
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff ffe7 	bl	8003482 <_kill>
  while (1) {}    /* Make sure we hang here */
 80034b4:	e7fe      	b.n	80034b4 <_exit+0x12>

080034b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b086      	sub	sp, #24
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034c2:	2300      	movs	r3, #0
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	e00a      	b.n	80034de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034c8:	f3af 8000 	nop.w
 80034cc:	4601      	mov	r1, r0
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	60ba      	str	r2, [r7, #8]
 80034d4:	b2ca      	uxtb	r2, r1
 80034d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	3301      	adds	r3, #1
 80034dc:	617b      	str	r3, [r7, #20]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	dbf0      	blt.n	80034c8 <_read+0x12>
  }

  return len;
 80034e6:	687b      	ldr	r3, [r7, #4]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	e009      	b.n	8003516 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	60ba      	str	r2, [r7, #8]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	3301      	adds	r3, #1
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	429a      	cmp	r2, r3
 800351c:	dbf1      	blt.n	8003502 <_write+0x12>
  }
  return len;
 800351e:	687b      	ldr	r3, [r7, #4]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <_close>:

int _close(int file)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003530:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003534:	4618      	mov	r0, r3
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr

0800353e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
 8003546:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800354e:	605a      	str	r2, [r3, #4]
  return 0;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr

0800355c <_isatty>:

int _isatty(int file)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003564:	2301      	movs	r3, #1
}
 8003566:	4618      	mov	r0, r3
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr

08003570 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr

08003588 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003590:	4a14      	ldr	r2, [pc, #80]	; (80035e4 <_sbrk+0x5c>)
 8003592:	4b15      	ldr	r3, [pc, #84]	; (80035e8 <_sbrk+0x60>)
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800359c:	4b13      	ldr	r3, [pc, #76]	; (80035ec <_sbrk+0x64>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d102      	bne.n	80035aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035a4:	4b11      	ldr	r3, [pc, #68]	; (80035ec <_sbrk+0x64>)
 80035a6:	4a12      	ldr	r2, [pc, #72]	; (80035f0 <_sbrk+0x68>)
 80035a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035aa:	4b10      	ldr	r3, [pc, #64]	; (80035ec <_sbrk+0x64>)
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4413      	add	r3, r2
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d207      	bcs.n	80035c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035b8:	f007 f8fa 	bl	800a7b0 <__errno>
 80035bc:	4603      	mov	r3, r0
 80035be:	220c      	movs	r2, #12
 80035c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035c2:	f04f 33ff 	mov.w	r3, #4294967295
 80035c6:	e009      	b.n	80035dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035c8:	4b08      	ldr	r3, [pc, #32]	; (80035ec <_sbrk+0x64>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035ce:	4b07      	ldr	r3, [pc, #28]	; (80035ec <_sbrk+0x64>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4413      	add	r3, r2
 80035d6:	4a05      	ldr	r2, [pc, #20]	; (80035ec <_sbrk+0x64>)
 80035d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035da:	68fb      	ldr	r3, [r7, #12]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	20005000 	.word	0x20005000
 80035e8:	00000400 	.word	0x00000400
 80035ec:	200005a0 	.word	0x200005a0
 80035f0:	20000d28 	.word	0x20000d28

080035f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035f8:	bf00      	nop
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr

08003600 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b096      	sub	sp, #88	; 0x58
 8003604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003606:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	605a      	str	r2, [r3, #4]
 8003610:	609a      	str	r2, [r3, #8]
 8003612:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003614:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800361e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	605a      	str	r2, [r3, #4]
 8003628:	609a      	str	r2, [r3, #8]
 800362a:	60da      	str	r2, [r3, #12]
 800362c:	611a      	str	r2, [r3, #16]
 800362e:	615a      	str	r2, [r3, #20]
 8003630:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003632:	1d3b      	adds	r3, r7, #4
 8003634:	2220      	movs	r2, #32
 8003636:	2100      	movs	r1, #0
 8003638:	4618      	mov	r0, r3
 800363a:	f007 f840 	bl	800a6be <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800363e:	4b4a      	ldr	r3, [pc, #296]	; (8003768 <MX_TIM1_Init+0x168>)
 8003640:	4a4a      	ldr	r2, [pc, #296]	; (800376c <MX_TIM1_Init+0x16c>)
 8003642:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 799;
 8003644:	4b48      	ldr	r3, [pc, #288]	; (8003768 <MX_TIM1_Init+0x168>)
 8003646:	f240 321f 	movw	r2, #799	; 0x31f
 800364a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800364c:	4b46      	ldr	r3, [pc, #280]	; (8003768 <MX_TIM1_Init+0x168>)
 800364e:	2200      	movs	r2, #0
 8003650:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 8003652:	4b45      	ldr	r3, [pc, #276]	; (8003768 <MX_TIM1_Init+0x168>)
 8003654:	2209      	movs	r2, #9
 8003656:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003658:	4b43      	ldr	r3, [pc, #268]	; (8003768 <MX_TIM1_Init+0x168>)
 800365a:	2200      	movs	r2, #0
 800365c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800365e:	4b42      	ldr	r3, [pc, #264]	; (8003768 <MX_TIM1_Init+0x168>)
 8003660:	2200      	movs	r2, #0
 8003662:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003664:	4b40      	ldr	r3, [pc, #256]	; (8003768 <MX_TIM1_Init+0x168>)
 8003666:	2200      	movs	r2, #0
 8003668:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800366a:	483f      	ldr	r0, [pc, #252]	; (8003768 <MX_TIM1_Init+0x168>)
 800366c:	f004 f9dc 	bl	8007a28 <HAL_TIM_Base_Init>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003676:	f7fe fed2 	bl	800241e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800367a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800367e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003680:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003684:	4619      	mov	r1, r3
 8003686:	4838      	ldr	r0, [pc, #224]	; (8003768 <MX_TIM1_Init+0x168>)
 8003688:	f004 fd1c 	bl	80080c4 <HAL_TIM_ConfigClockSource>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003692:	f7fe fec4 	bl	800241e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003696:	4834      	ldr	r0, [pc, #208]	; (8003768 <MX_TIM1_Init+0x168>)
 8003698:	f004 fa68 	bl	8007b6c <HAL_TIM_PWM_Init>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80036a2:	f7fe febc 	bl	800241e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036a6:	2300      	movs	r3, #0
 80036a8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036aa:	2300      	movs	r3, #0
 80036ac:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80036ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80036b2:	4619      	mov	r1, r3
 80036b4:	482c      	ldr	r0, [pc, #176]	; (8003768 <MX_TIM1_Init+0x168>)
 80036b6:	f005 f8a1 	bl	80087fc <HAL_TIMEx_MasterConfigSynchronization>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80036c0:	f7fe fead 	bl	800241e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036c4:	2360      	movs	r3, #96	; 0x60
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80036c8:	2300      	movs	r3, #0
 80036ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036cc:	2300      	movs	r3, #0
 80036ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80036d0:	2300      	movs	r3, #0
 80036d2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036d4:	2300      	movs	r3, #0
 80036d6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80036d8:	2300      	movs	r3, #0
 80036da:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80036dc:	2300      	movs	r3, #0
 80036de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80036e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036e4:	2200      	movs	r2, #0
 80036e6:	4619      	mov	r1, r3
 80036e8:	481f      	ldr	r0, [pc, #124]	; (8003768 <MX_TIM1_Init+0x168>)
 80036ea:	f004 fc29 	bl	8007f40 <HAL_TIM_PWM_ConfigChannel>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80036f4:	f7fe fe93 	bl	800241e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80036f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036fc:	2204      	movs	r2, #4
 80036fe:	4619      	mov	r1, r3
 8003700:	4819      	ldr	r0, [pc, #100]	; (8003768 <MX_TIM1_Init+0x168>)
 8003702:	f004 fc1d 	bl	8007f40 <HAL_TIM_PWM_ConfigChannel>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800370c:	f7fe fe87 	bl	800241e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003714:	2208      	movs	r2, #8
 8003716:	4619      	mov	r1, r3
 8003718:	4813      	ldr	r0, [pc, #76]	; (8003768 <MX_TIM1_Init+0x168>)
 800371a:	f004 fc11 	bl	8007f40 <HAL_TIM_PWM_ConfigChannel>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003724:	f7fe fe7b 	bl	800241e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003728:	2300      	movs	r3, #0
 800372a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800372c:	2300      	movs	r3, #0
 800372e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003730:	2300      	movs	r3, #0
 8003732:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003734:	2300      	movs	r3, #0
 8003736:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003738:	2300      	movs	r3, #0
 800373a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800373c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003740:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003742:	2300      	movs	r3, #0
 8003744:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003746:	1d3b      	adds	r3, r7, #4
 8003748:	4619      	mov	r1, r3
 800374a:	4807      	ldr	r0, [pc, #28]	; (8003768 <MX_TIM1_Init+0x168>)
 800374c:	f005 f8b4 	bl	80088b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8003756:	f7fe fe62 	bl	800241e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800375a:	4803      	ldr	r0, [pc, #12]	; (8003768 <MX_TIM1_Init+0x168>)
 800375c:	f000 f88c 	bl	8003878 <HAL_TIM_MspPostInit>

}
 8003760:	bf00      	nop
 8003762:	3758      	adds	r7, #88	; 0x58
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	200005a4 	.word	0x200005a4
 800376c:	40012c00 	.word	0x40012c00

08003770 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003776:	f107 0308 	add.w	r3, r7, #8
 800377a:	2200      	movs	r2, #0
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	605a      	str	r2, [r3, #4]
 8003780:	609a      	str	r2, [r3, #8]
 8003782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003784:	463b      	mov	r3, r7
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800378c:	4b1d      	ldr	r3, [pc, #116]	; (8003804 <MX_TIM2_Init+0x94>)
 800378e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003792:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8003794:	4b1b      	ldr	r3, [pc, #108]	; (8003804 <MX_TIM2_Init+0x94>)
 8003796:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800379a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800379c:	4b19      	ldr	r3, [pc, #100]	; (8003804 <MX_TIM2_Init+0x94>)
 800379e:	2200      	movs	r2, #0
 80037a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80037a2:	4b18      	ldr	r3, [pc, #96]	; (8003804 <MX_TIM2_Init+0x94>)
 80037a4:	2209      	movs	r2, #9
 80037a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037a8:	4b16      	ldr	r3, [pc, #88]	; (8003804 <MX_TIM2_Init+0x94>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037ae:	4b15      	ldr	r3, [pc, #84]	; (8003804 <MX_TIM2_Init+0x94>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80037b4:	4813      	ldr	r0, [pc, #76]	; (8003804 <MX_TIM2_Init+0x94>)
 80037b6:	f004 f937 	bl	8007a28 <HAL_TIM_Base_Init>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80037c0:	f7fe fe2d 	bl	800241e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80037ca:	f107 0308 	add.w	r3, r7, #8
 80037ce:	4619      	mov	r1, r3
 80037d0:	480c      	ldr	r0, [pc, #48]	; (8003804 <MX_TIM2_Init+0x94>)
 80037d2:	f004 fc77 	bl	80080c4 <HAL_TIM_ConfigClockSource>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80037dc:	f7fe fe1f 	bl	800241e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037e0:	2300      	movs	r3, #0
 80037e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037e4:	2300      	movs	r3, #0
 80037e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80037e8:	463b      	mov	r3, r7
 80037ea:	4619      	mov	r1, r3
 80037ec:	4805      	ldr	r0, [pc, #20]	; (8003804 <MX_TIM2_Init+0x94>)
 80037ee:	f005 f805 	bl	80087fc <HAL_TIMEx_MasterConfigSynchronization>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80037f8:	f7fe fe11 	bl	800241e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80037fc:	bf00      	nop
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	200005ec 	.word	0x200005ec

08003808 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a16      	ldr	r2, [pc, #88]	; (8003870 <HAL_TIM_Base_MspInit+0x68>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d10c      	bne.n	8003834 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800381a:	4b16      	ldr	r3, [pc, #88]	; (8003874 <HAL_TIM_Base_MspInit+0x6c>)
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	4a15      	ldr	r2, [pc, #84]	; (8003874 <HAL_TIM_Base_MspInit+0x6c>)
 8003820:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003824:	6193      	str	r3, [r2, #24]
 8003826:	4b13      	ldr	r3, [pc, #76]	; (8003874 <HAL_TIM_Base_MspInit+0x6c>)
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003832:	e018      	b.n	8003866 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800383c:	d113      	bne.n	8003866 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800383e:	4b0d      	ldr	r3, [pc, #52]	; (8003874 <HAL_TIM_Base_MspInit+0x6c>)
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	4a0c      	ldr	r2, [pc, #48]	; (8003874 <HAL_TIM_Base_MspInit+0x6c>)
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	61d3      	str	r3, [r2, #28]
 800384a:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <HAL_TIM_Base_MspInit+0x6c>)
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	60bb      	str	r3, [r7, #8]
 8003854:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003856:	2200      	movs	r2, #0
 8003858:	2100      	movs	r1, #0
 800385a:	201c      	movs	r0, #28
 800385c:	f001 f9d7 	bl	8004c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003860:	201c      	movs	r0, #28
 8003862:	f001 f9f0 	bl	8004c46 <HAL_NVIC_EnableIRQ>
}
 8003866:	bf00      	nop
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40012c00 	.word	0x40012c00
 8003874:	40021000 	.word	0x40021000

08003878 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003880:	f107 0310 	add.w	r3, r7, #16
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	605a      	str	r2, [r3, #4]
 800388a:	609a      	str	r2, [r3, #8]
 800388c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a10      	ldr	r2, [pc, #64]	; (80038d4 <HAL_TIM_MspPostInit+0x5c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d118      	bne.n	80038ca <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003898:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <HAL_TIM_MspPostInit+0x60>)
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	4a0e      	ldr	r2, [pc, #56]	; (80038d8 <HAL_TIM_MspPostInit+0x60>)
 800389e:	f043 0304 	orr.w	r3, r3, #4
 80038a2:	6193      	str	r3, [r2, #24]
 80038a4:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <HAL_TIM_MspPostInit+0x60>)
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80038b0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80038b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b6:	2302      	movs	r3, #2
 80038b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ba:	2302      	movs	r3, #2
 80038bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038be:	f107 0310 	add.w	r3, r7, #16
 80038c2:	4619      	mov	r1, r3
 80038c4:	4805      	ldr	r0, [pc, #20]	; (80038dc <HAL_TIM_MspPostInit+0x64>)
 80038c6:	f001 fc85 	bl	80051d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80038ca:	bf00      	nop
 80038cc:	3720      	adds	r7, #32
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40012c00 	.word	0x40012c00
 80038d8:	40021000 	.word	0x40021000
 80038dc:	40010800 	.word	0x40010800

080038e0 <HAL_UART_RxCpltCallback>:
	Uart_ESPSendByte(str, sizeof(str));
}

// call back

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
	ESP_Callback(huart);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7fe f8c9 	bl	8001a80 <ESP_Callback>
	if(huart->Instance == USART1){
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a19      	ldr	r2, [pc, #100]	; (8003958 <HAL_UART_RxCpltCallback+0x78>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d112      	bne.n	800391e <HAL_UART_RxCpltCallback+0x3e>
		buffer1_flag = 1;
 80038f8:	4b18      	ldr	r3, [pc, #96]	; (800395c <HAL_UART_RxCpltCallback+0x7c>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	701a      	strb	r2, [r3, #0]
		buffer1[index_buffer1++] = receive_buffer1;
 80038fe:	4b18      	ldr	r3, [pc, #96]	; (8003960 <HAL_UART_RxCpltCallback+0x80>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	b2d1      	uxtb	r1, r2
 8003906:	4a16      	ldr	r2, [pc, #88]	; (8003960 <HAL_UART_RxCpltCallback+0x80>)
 8003908:	7011      	strb	r1, [r2, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	4b15      	ldr	r3, [pc, #84]	; (8003964 <HAL_UART_RxCpltCallback+0x84>)
 800390e:	7819      	ldrb	r1, [r3, #0]
 8003910:	4b15      	ldr	r3, [pc, #84]	; (8003968 <HAL_UART_RxCpltCallback+0x88>)
 8003912:	5499      	strb	r1, [r3, r2]
		if(index_buffer1 > (BUFFER_SIZE - 1)) index_buffer1 = 0;
		HAL_UART_Receive_IT(huart, &receive_buffer1, 1);
 8003914:	2201      	movs	r2, #1
 8003916:	4913      	ldr	r1, [pc, #76]	; (8003964 <HAL_UART_RxCpltCallback+0x84>)
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f005 f90b 	bl	8008b34 <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a12      	ldr	r2, [pc, #72]	; (800396c <HAL_UART_RxCpltCallback+0x8c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d112      	bne.n	800394e <HAL_UART_RxCpltCallback+0x6e>
		buffer2_flag = 1;
 8003928:	4b11      	ldr	r3, [pc, #68]	; (8003970 <HAL_UART_RxCpltCallback+0x90>)
 800392a:	2201      	movs	r2, #1
 800392c:	701a      	strb	r2, [r3, #0]
		buffer2[index_buffer2++] = receive_buffer2;
 800392e:	4b11      	ldr	r3, [pc, #68]	; (8003974 <HAL_UART_RxCpltCallback+0x94>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	1c5a      	adds	r2, r3, #1
 8003934:	b2d1      	uxtb	r1, r2
 8003936:	4a0f      	ldr	r2, [pc, #60]	; (8003974 <HAL_UART_RxCpltCallback+0x94>)
 8003938:	7011      	strb	r1, [r2, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	4b0e      	ldr	r3, [pc, #56]	; (8003978 <HAL_UART_RxCpltCallback+0x98>)
 800393e:	7819      	ldrb	r1, [r3, #0]
 8003940:	4b0e      	ldr	r3, [pc, #56]	; (800397c <HAL_UART_RxCpltCallback+0x9c>)
 8003942:	5499      	strb	r1, [r3, r2]
		if(index_buffer2 > (BUFFER_SIZE - 1)) index_buffer2 = 0;
		HAL_UART_Receive_IT(huart, &receive_buffer2, 1);
 8003944:	2201      	movs	r2, #1
 8003946:	490c      	ldr	r1, [pc, #48]	; (8003978 <HAL_UART_RxCpltCallback+0x98>)
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f005 f8f3 	bl	8008b34 <HAL_UART_Receive_IT>

	}
}
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40013800 	.word	0x40013800
 800395c:	20000636 	.word	0x20000636
 8003960:	20000a38 	.word	0x20000a38
 8003964:	20000634 	.word	0x20000634
 8003968:	20000638 	.word	0x20000638
 800396c:	40004400 	.word	0x40004400
 8003970:	20000637 	.word	0x20000637
 8003974:	20000a39 	.word	0x20000a39
 8003978:	20000635 	.word	0x20000635
 800397c:	20000838 	.word	0x20000838

08003980 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003984:	4b11      	ldr	r3, [pc, #68]	; (80039cc <MX_USART1_UART_Init+0x4c>)
 8003986:	4a12      	ldr	r2, [pc, #72]	; (80039d0 <MX_USART1_UART_Init+0x50>)
 8003988:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800398a:	4b10      	ldr	r3, [pc, #64]	; (80039cc <MX_USART1_UART_Init+0x4c>)
 800398c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003990:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003992:	4b0e      	ldr	r3, [pc, #56]	; (80039cc <MX_USART1_UART_Init+0x4c>)
 8003994:	2200      	movs	r2, #0
 8003996:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003998:	4b0c      	ldr	r3, [pc, #48]	; (80039cc <MX_USART1_UART_Init+0x4c>)
 800399a:	2200      	movs	r2, #0
 800399c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800399e:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <MX_USART1_UART_Init+0x4c>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80039a4:	4b09      	ldr	r3, [pc, #36]	; (80039cc <MX_USART1_UART_Init+0x4c>)
 80039a6:	220c      	movs	r2, #12
 80039a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039aa:	4b08      	ldr	r3, [pc, #32]	; (80039cc <MX_USART1_UART_Init+0x4c>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80039b0:	4b06      	ldr	r3, [pc, #24]	; (80039cc <MX_USART1_UART_Init+0x4c>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80039b6:	4805      	ldr	r0, [pc, #20]	; (80039cc <MX_USART1_UART_Init+0x4c>)
 80039b8:	f004 ffe1 	bl	800897e <HAL_UART_Init>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80039c2:	f7fe fd2c 	bl	800241e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80039c6:	bf00      	nop
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000a3c 	.word	0x20000a3c
 80039d0:	40013800 	.word	0x40013800

080039d4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80039d8:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <MX_USART2_UART_Init+0x4c>)
 80039da:	4a12      	ldr	r2, [pc, #72]	; (8003a24 <MX_USART2_UART_Init+0x50>)
 80039dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80039de:	4b10      	ldr	r3, [pc, #64]	; (8003a20 <MX_USART2_UART_Init+0x4c>)
 80039e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80039e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039e6:	4b0e      	ldr	r3, [pc, #56]	; (8003a20 <MX_USART2_UART_Init+0x4c>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039ec:	4b0c      	ldr	r3, [pc, #48]	; (8003a20 <MX_USART2_UART_Init+0x4c>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039f2:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <MX_USART2_UART_Init+0x4c>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039f8:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <MX_USART2_UART_Init+0x4c>)
 80039fa:	220c      	movs	r2, #12
 80039fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039fe:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <MX_USART2_UART_Init+0x4c>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a04:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <MX_USART2_UART_Init+0x4c>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a0a:	4805      	ldr	r0, [pc, #20]	; (8003a20 <MX_USART2_UART_Init+0x4c>)
 8003a0c:	f004 ffb7 	bl	800897e <HAL_UART_Init>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003a16:	f7fe fd02 	bl	800241e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003a1a:	bf00      	nop
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	20000a84 	.word	0x20000a84
 8003a24:	40004400 	.word	0x40004400

08003a28 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003a2c:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <MX_USART3_UART_Init+0x4c>)
 8003a2e:	4a12      	ldr	r2, [pc, #72]	; (8003a78 <MX_USART3_UART_Init+0x50>)
 8003a30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003a32:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <MX_USART3_UART_Init+0x4c>)
 8003a34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003a3a:	4b0e      	ldr	r3, [pc, #56]	; (8003a74 <MX_USART3_UART_Init+0x4c>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003a40:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <MX_USART3_UART_Init+0x4c>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003a46:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <MX_USART3_UART_Init+0x4c>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003a4c:	4b09      	ldr	r3, [pc, #36]	; (8003a74 <MX_USART3_UART_Init+0x4c>)
 8003a4e:	220c      	movs	r2, #12
 8003a50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a52:	4b08      	ldr	r3, [pc, #32]	; (8003a74 <MX_USART3_UART_Init+0x4c>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a58:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <MX_USART3_UART_Init+0x4c>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003a5e:	4805      	ldr	r0, [pc, #20]	; (8003a74 <MX_USART3_UART_Init+0x4c>)
 8003a60:	f004 ff8d 	bl	800897e <HAL_UART_Init>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003a6a:	f7fe fcd8 	bl	800241e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003a6e:	bf00      	nop
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	20000acc 	.word	0x20000acc
 8003a78:	40004800 	.word	0x40004800

08003a7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08e      	sub	sp, #56	; 0x38
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	609a      	str	r2, [r3, #8]
 8003a90:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a87      	ldr	r2, [pc, #540]	; (8003cb4 <HAL_UART_MspInit+0x238>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d16c      	bne.n	8003b76 <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a9c:	4b86      	ldr	r3, [pc, #536]	; (8003cb8 <HAL_UART_MspInit+0x23c>)
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	4a85      	ldr	r2, [pc, #532]	; (8003cb8 <HAL_UART_MspInit+0x23c>)
 8003aa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aa6:	6193      	str	r3, [r2, #24]
 8003aa8:	4b83      	ldr	r3, [pc, #524]	; (8003cb8 <HAL_UART_MspInit+0x23c>)
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ab0:	623b      	str	r3, [r7, #32]
 8003ab2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ab4:	4b80      	ldr	r3, [pc, #512]	; (8003cb8 <HAL_UART_MspInit+0x23c>)
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	4a7f      	ldr	r2, [pc, #508]	; (8003cb8 <HAL_UART_MspInit+0x23c>)
 8003aba:	f043 0308 	orr.w	r3, r3, #8
 8003abe:	6193      	str	r3, [r2, #24]
 8003ac0:	4b7d      	ldr	r3, [pc, #500]	; (8003cb8 <HAL_UART_MspInit+0x23c>)
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	61fb      	str	r3, [r7, #28]
 8003aca:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003acc:	2340      	movs	r3, #64	; 0x40
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003adc:	4619      	mov	r1, r3
 8003ade:	4877      	ldr	r0, [pc, #476]	; (8003cbc <HAL_UART_MspInit+0x240>)
 8003ae0:	f001 fb78 	bl	80051d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003ae4:	2380      	movs	r3, #128	; 0x80
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003af4:	4619      	mov	r1, r3
 8003af6:	4871      	ldr	r0, [pc, #452]	; (8003cbc <HAL_UART_MspInit+0x240>)
 8003af8:	f001 fb6c 	bl	80051d4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8003afc:	4b70      	ldr	r3, [pc, #448]	; (8003cc0 <HAL_UART_MspInit+0x244>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	637b      	str	r3, [r7, #52]	; 0x34
 8003b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b04:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003b08:	637b      	str	r3, [r7, #52]	; 0x34
 8003b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b0c:	f043 0304 	orr.w	r3, r3, #4
 8003b10:	637b      	str	r3, [r7, #52]	; 0x34
 8003b12:	4a6b      	ldr	r2, [pc, #428]	; (8003cc0 <HAL_UART_MspInit+0x244>)
 8003b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b16:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003b18:	4b6a      	ldr	r3, [pc, #424]	; (8003cc4 <HAL_UART_MspInit+0x248>)
 8003b1a:	4a6b      	ldr	r2, [pc, #428]	; (8003cc8 <HAL_UART_MspInit+0x24c>)
 8003b1c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b1e:	4b69      	ldr	r3, [pc, #420]	; (8003cc4 <HAL_UART_MspInit+0x248>)
 8003b20:	2210      	movs	r2, #16
 8003b22:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b24:	4b67      	ldr	r3, [pc, #412]	; (8003cc4 <HAL_UART_MspInit+0x248>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b2a:	4b66      	ldr	r3, [pc, #408]	; (8003cc4 <HAL_UART_MspInit+0x248>)
 8003b2c:	2280      	movs	r2, #128	; 0x80
 8003b2e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b30:	4b64      	ldr	r3, [pc, #400]	; (8003cc4 <HAL_UART_MspInit+0x248>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b36:	4b63      	ldr	r3, [pc, #396]	; (8003cc4 <HAL_UART_MspInit+0x248>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003b3c:	4b61      	ldr	r3, [pc, #388]	; (8003cc4 <HAL_UART_MspInit+0x248>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b42:	4b60      	ldr	r3, [pc, #384]	; (8003cc4 <HAL_UART_MspInit+0x248>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003b48:	485e      	ldr	r0, [pc, #376]	; (8003cc4 <HAL_UART_MspInit+0x248>)
 8003b4a:	f001 f897 	bl	8004c7c <HAL_DMA_Init>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <HAL_UART_MspInit+0xdc>
    {
      Error_Handler();
 8003b54:	f7fe fc63 	bl	800241e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a5a      	ldr	r2, [pc, #360]	; (8003cc4 <HAL_UART_MspInit+0x248>)
 8003b5c:	639a      	str	r2, [r3, #56]	; 0x38
 8003b5e:	4a59      	ldr	r2, [pc, #356]	; (8003cc4 <HAL_UART_MspInit+0x248>)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003b64:	2200      	movs	r2, #0
 8003b66:	2100      	movs	r1, #0
 8003b68:	2025      	movs	r0, #37	; 0x25
 8003b6a:	f001 f850 	bl	8004c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003b6e:	2025      	movs	r0, #37	; 0x25
 8003b70:	f001 f869 	bl	8004c46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003b74:	e09a      	b.n	8003cac <HAL_UART_MspInit+0x230>
  else if(uartHandle->Instance==USART2)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a54      	ldr	r2, [pc, #336]	; (8003ccc <HAL_UART_MspInit+0x250>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d130      	bne.n	8003be2 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b80:	4b4d      	ldr	r3, [pc, #308]	; (8003cb8 <HAL_UART_MspInit+0x23c>)
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	4a4c      	ldr	r2, [pc, #304]	; (8003cb8 <HAL_UART_MspInit+0x23c>)
 8003b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b8a:	61d3      	str	r3, [r2, #28]
 8003b8c:	4b4a      	ldr	r3, [pc, #296]	; (8003cb8 <HAL_UART_MspInit+0x23c>)
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b94:	61bb      	str	r3, [r7, #24]
 8003b96:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b98:	4b47      	ldr	r3, [pc, #284]	; (8003cb8 <HAL_UART_MspInit+0x23c>)
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	4a46      	ldr	r2, [pc, #280]	; (8003cb8 <HAL_UART_MspInit+0x23c>)
 8003b9e:	f043 0304 	orr.w	r3, r3, #4
 8003ba2:	6193      	str	r3, [r2, #24]
 8003ba4:	4b44      	ldr	r3, [pc, #272]	; (8003cb8 <HAL_UART_MspInit+0x23c>)
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	617b      	str	r3, [r7, #20]
 8003bae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003bb0:	2304      	movs	r3, #4
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4843      	ldr	r0, [pc, #268]	; (8003cd0 <HAL_UART_MspInit+0x254>)
 8003bc4:	f001 fb06 	bl	80051d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003bc8:	2308      	movs	r3, #8
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bd8:	4619      	mov	r1, r3
 8003bda:	483d      	ldr	r0, [pc, #244]	; (8003cd0 <HAL_UART_MspInit+0x254>)
 8003bdc:	f001 fafa 	bl	80051d4 <HAL_GPIO_Init>
}
 8003be0:	e064      	b.n	8003cac <HAL_UART_MspInit+0x230>
  else if(uartHandle->Instance==USART3)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a3b      	ldr	r2, [pc, #236]	; (8003cd4 <HAL_UART_MspInit+0x258>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d15f      	bne.n	8003cac <HAL_UART_MspInit+0x230>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003bec:	4b32      	ldr	r3, [pc, #200]	; (8003cb8 <HAL_UART_MspInit+0x23c>)
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	4a31      	ldr	r2, [pc, #196]	; (8003cb8 <HAL_UART_MspInit+0x23c>)
 8003bf2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bf6:	61d3      	str	r3, [r2, #28]
 8003bf8:	4b2f      	ldr	r3, [pc, #188]	; (8003cb8 <HAL_UART_MspInit+0x23c>)
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c04:	4b2c      	ldr	r3, [pc, #176]	; (8003cb8 <HAL_UART_MspInit+0x23c>)
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	4a2b      	ldr	r2, [pc, #172]	; (8003cb8 <HAL_UART_MspInit+0x23c>)
 8003c0a:	f043 0308 	orr.w	r3, r3, #8
 8003c0e:	6193      	str	r3, [r2, #24]
 8003c10:	4b29      	ldr	r3, [pc, #164]	; (8003cb8 <HAL_UART_MspInit+0x23c>)
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003c1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c22:	2302      	movs	r3, #2
 8003c24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c26:	2303      	movs	r3, #3
 8003c28:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4822      	ldr	r0, [pc, #136]	; (8003cbc <HAL_UART_MspInit+0x240>)
 8003c32:	f001 facf 	bl	80051d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003c36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c40:	2300      	movs	r3, #0
 8003c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c48:	4619      	mov	r1, r3
 8003c4a:	481c      	ldr	r0, [pc, #112]	; (8003cbc <HAL_UART_MspInit+0x240>)
 8003c4c:	f001 fac2 	bl	80051d4 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8003c50:	4b21      	ldr	r3, [pc, #132]	; (8003cd8 <HAL_UART_MspInit+0x25c>)
 8003c52:	4a22      	ldr	r2, [pc, #136]	; (8003cdc <HAL_UART_MspInit+0x260>)
 8003c54:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c56:	4b20      	ldr	r3, [pc, #128]	; (8003cd8 <HAL_UART_MspInit+0x25c>)
 8003c58:	2210      	movs	r2, #16
 8003c5a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c5c:	4b1e      	ldr	r3, [pc, #120]	; (8003cd8 <HAL_UART_MspInit+0x25c>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c62:	4b1d      	ldr	r3, [pc, #116]	; (8003cd8 <HAL_UART_MspInit+0x25c>)
 8003c64:	2280      	movs	r2, #128	; 0x80
 8003c66:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c68:	4b1b      	ldr	r3, [pc, #108]	; (8003cd8 <HAL_UART_MspInit+0x25c>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c6e:	4b1a      	ldr	r3, [pc, #104]	; (8003cd8 <HAL_UART_MspInit+0x25c>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003c74:	4b18      	ldr	r3, [pc, #96]	; (8003cd8 <HAL_UART_MspInit+0x25c>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003c7a:	4b17      	ldr	r3, [pc, #92]	; (8003cd8 <HAL_UART_MspInit+0x25c>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003c80:	4815      	ldr	r0, [pc, #84]	; (8003cd8 <HAL_UART_MspInit+0x25c>)
 8003c82:	f000 fffb 	bl	8004c7c <HAL_DMA_Init>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <HAL_UART_MspInit+0x214>
      Error_Handler();
 8003c8c:	f7fe fbc7 	bl	800241e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a11      	ldr	r2, [pc, #68]	; (8003cd8 <HAL_UART_MspInit+0x25c>)
 8003c94:	639a      	str	r2, [r3, #56]	; 0x38
 8003c96:	4a10      	ldr	r2, [pc, #64]	; (8003cd8 <HAL_UART_MspInit+0x25c>)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	2027      	movs	r0, #39	; 0x27
 8003ca2:	f000 ffb4 	bl	8004c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003ca6:	2027      	movs	r0, #39	; 0x27
 8003ca8:	f000 ffcd 	bl	8004c46 <HAL_NVIC_EnableIRQ>
}
 8003cac:	bf00      	nop
 8003cae:	3738      	adds	r7, #56	; 0x38
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40013800 	.word	0x40013800
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	40010c00 	.word	0x40010c00
 8003cc0:	40010000 	.word	0x40010000
 8003cc4:	20000b14 	.word	0x20000b14
 8003cc8:	40020044 	.word	0x40020044
 8003ccc:	40004400 	.word	0x40004400
 8003cd0:	40010800 	.word	0x40010800
 8003cd4:	40004800 	.word	0x40004800
 8003cd8:	20000b58 	.word	0x20000b58
 8003cdc:	4002001c 	.word	0x4002001c

08003ce0 <Reset_Handler>:
 8003ce0:	f7ff fc88 	bl	80035f4 <SystemInit>
 8003ce4:	480b      	ldr	r0, [pc, #44]	; (8003d14 <LoopFillZerobss+0xe>)
 8003ce6:	490c      	ldr	r1, [pc, #48]	; (8003d18 <LoopFillZerobss+0x12>)
 8003ce8:	4a0c      	ldr	r2, [pc, #48]	; (8003d1c <LoopFillZerobss+0x16>)
 8003cea:	2300      	movs	r3, #0
 8003cec:	e002      	b.n	8003cf4 <LoopCopyDataInit>

08003cee <CopyDataInit>:
 8003cee:	58d4      	ldr	r4, [r2, r3]
 8003cf0:	50c4      	str	r4, [r0, r3]
 8003cf2:	3304      	adds	r3, #4

08003cf4 <LoopCopyDataInit>:
 8003cf4:	18c4      	adds	r4, r0, r3
 8003cf6:	428c      	cmp	r4, r1
 8003cf8:	d3f9      	bcc.n	8003cee <CopyDataInit>
 8003cfa:	4a09      	ldr	r2, [pc, #36]	; (8003d20 <LoopFillZerobss+0x1a>)
 8003cfc:	4c09      	ldr	r4, [pc, #36]	; (8003d24 <LoopFillZerobss+0x1e>)
 8003cfe:	2300      	movs	r3, #0
 8003d00:	e001      	b.n	8003d06 <LoopFillZerobss>

08003d02 <FillZerobss>:
 8003d02:	6013      	str	r3, [r2, #0]
 8003d04:	3204      	adds	r2, #4

08003d06 <LoopFillZerobss>:
 8003d06:	42a2      	cmp	r2, r4
 8003d08:	d3fb      	bcc.n	8003d02 <FillZerobss>
 8003d0a:	f006 fd57 	bl	800a7bc <__libc_init_array>
 8003d0e:	f7fe faf9 	bl	8002304 <main>
 8003d12:	4770      	bx	lr
 8003d14:	20000000 	.word	0x20000000
 8003d18:	20000204 	.word	0x20000204
 8003d1c:	0800ce8c 	.word	0x0800ce8c
 8003d20:	20000204 	.word	0x20000204
 8003d24:	20000d28 	.word	0x20000d28

08003d28 <ADC1_2_IRQHandler>:
 8003d28:	e7fe      	b.n	8003d28 <ADC1_2_IRQHandler>

08003d2a <BH1750_Init>:

#include "BH1750.h"

uint8_t buffer[2];

HAL_StatusTypeDef BH1750_Init(I2C_HandleTypeDef* I2C_Name, BH1750_Typedef* BH1750_Name){
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	6039      	str	r1, [r7, #0]
	BH1750_Name->I2C_Name = I2C_Name;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	609a      	str	r2, [r3, #8]
	BH1750_Name->Address_r = BH1750_GROUND_ADDR_READ;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2247      	movs	r2, #71	; 0x47
 8003d3e:	709a      	strb	r2, [r3, #2]
	BH1750_Name->Address_w = BH1750_GROUND_ADDR_WRITE;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	2246      	movs	r2, #70	; 0x46
 8003d44:	70da      	strb	r2, [r3, #3]
	BH1750_Name->Mode = CMD_H_RES_MODE2;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2211      	movs	r2, #17
 8003d4a:	711a      	strb	r2, [r3, #4]
	BH1750_Name->Value = 0;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	801a      	strh	r2, [r3, #0]

	return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bc80      	pop	{r7}
 8003d5c:	4770      	bx	lr

08003d5e <BH1750_SendCommand>:

HAL_StatusTypeDef BH1750_SendCommand(BH1750_Typedef* BH1750_Name, uint8_t cmd){
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b084      	sub	sp, #16
 8003d62:	af02      	add	r7, sp, #8
 8003d64:	6078      	str	r0, [r7, #4]
 8003d66:	460b      	mov	r3, r1
 8003d68:	70fb      	strb	r3, [r7, #3]
	if(HAL_I2C_Master_Transmit(BH1750_Name->I2C_Name, BH1750_Name->Address_w, &cmd, sizeof(cmd), HAL_MAX_DELAY) != HAL_OK){
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6898      	ldr	r0, [r3, #8]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	78db      	ldrb	r3, [r3, #3]
 8003d72:	b299      	uxth	r1, r3
 8003d74:	1cfa      	adds	r2, r7, #3
 8003d76:	f04f 33ff 	mov.w	r3, #4294967295
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	f001 fd39 	bl	80057f4 <HAL_I2C_Master_Transmit>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <BH1750_SendCommand+0x2e>
		return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e000      	b.n	8003d8e <BH1750_SendCommand+0x30>
	}
	return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <BH1750_ReadData>:


HAL_StatusTypeDef BH1750_ReadData(BH1750_Typedef* BH1750_Name){
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af02      	add	r7, sp, #8
 8003d9e:	6078      	str	r0, [r7, #4]
	// read and covert data
	if(HAL_I2C_Master_Receive(BH1750_Name->I2C_Name, BH1750_Name->Address_r, buffer, 2, HAL_MAX_DELAY) != HAL_OK){
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6898      	ldr	r0, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	789b      	ldrb	r3, [r3, #2]
 8003da8:	b299      	uxth	r1, r3
 8003daa:	f04f 33ff 	mov.w	r3, #4294967295
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	2302      	movs	r3, #2
 8003db2:	4a19      	ldr	r2, [pc, #100]	; (8003e18 <BH1750_ReadData+0x80>)
 8003db4:	f001 fe1c 	bl	80059f0 <HAL_I2C_Master_Receive>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <BH1750_ReadData+0x2a>
		return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e025      	b.n	8003e0e <BH1750_ReadData+0x76>
	}
	BH1750_Name->Value = buffer[0];
 8003dc2:	4b15      	ldr	r3, [pc, #84]	; (8003e18 <BH1750_ReadData+0x80>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	801a      	strh	r2, [r3, #0]
	BH1750_Name->Value = (BH1750_Name->Value << 8) | buffer[1];
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	881b      	ldrh	r3, [r3, #0]
 8003dd0:	021b      	lsls	r3, r3, #8
 8003dd2:	b21a      	sxth	r2, r3
 8003dd4:	4b10      	ldr	r3, [pc, #64]	; (8003e18 <BH1750_ReadData+0x80>)
 8003dd6:	785b      	ldrb	r3, [r3, #1]
 8003dd8:	b21b      	sxth	r3, r3
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	b21b      	sxth	r3, r3
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	801a      	strh	r2, [r3, #0]

	BH1750_Name->Value /= 1.2;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fc fb0b 	bl	8000404 <__aeabi_i2d>
 8003dee:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8003df2:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <BH1750_ReadData+0x84>)
 8003df4:	f7fc fc9a 	bl	800072c <__aeabi_ddiv>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	4619      	mov	r1, r3
 8003e00:	f7fc fe42 	bl	8000a88 <__aeabi_d2uiz>
 8003e04:	4603      	mov	r3, r0
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	801a      	strh	r2, [r3, #0]


	return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	20000b9c 	.word	0x20000b9c
 8003e1c:	3ff33333 	.word	0x3ff33333

08003e20 <BH1750_TriggerReceiveData>:
HAL_StatusTypeDef BH1750_TriggerReceiveData(BH1750_Typedef* BH1750_Name){
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
	if(BH1750_SendCommand(BH1750_Name, CMD_POWER_ON) != HAL_OK){
 8003e28:	2101      	movs	r1, #1
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff ff97 	bl	8003d5e <BH1750_SendCommand>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <BH1750_TriggerReceiveData+0x1a>
		return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e012      	b.n	8003e60 <BH1750_TriggerReceiveData+0x40>
	}
	if(BH1750_SendCommand(BH1750_Name, CMD_RESET) != HAL_OK){
 8003e3a:	2103      	movs	r1, #3
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff ff8e 	bl	8003d5e <BH1750_SendCommand>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <BH1750_TriggerReceiveData+0x2c>
		return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e009      	b.n	8003e60 <BH1750_TriggerReceiveData+0x40>
	}
	if(BH1750_SendCommand(BH1750_Name, CMD_H_RES_MODE2) != HAL_OK){
 8003e4c:	2111      	movs	r1, #17
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff ff85 	bl	8003d5e <BH1750_SendCommand>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <BH1750_TriggerReceiveData+0x3e>
		return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e000      	b.n	8003e60 <BH1750_TriggerReceiveData+0x40>
	}

	return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <BMP180_Init>:
int16_t unCompTemp; // raw data
uint32_t unCompPresure; // raw data
float presureATM;
//------------------------------------------------------------

HAL_StatusTypeDef BMP180_Init(I2C_HandleTypeDef* I2C_Name, BMP180_Typedef* BMP180_Name){
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
	BMP180_Name->Pressure = 0;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	605a      	str	r2, [r3, #4]
	BMP180_Name->PressureATM = 0;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	609a      	str	r2, [r3, #8]
	BMP180_Name->Temperature = 0;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]
	BMP180_Name->I2C_Name = I2C_Name;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	60da      	str	r2, [r3, #12]

	if(HAL_I2C_IsDeviceReady(I2C_Name, BMP180_DEVICE_WRITE_REGISTER_ADDRESS, 1, 100000) != HAL_OK){
 8003e90:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <BMP180_Init+0x58>)
 8003e92:	2201      	movs	r2, #1
 8003e94:	21ee      	movs	r1, #238	; 0xee
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f002 fb84 	bl	80065a4 <HAL_I2C_IsDeviceReady>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <BMP180_Init+0x3e>
		return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e008      	b.n	8003eb8 <BMP180_Init+0x50>
	}

	if(BMP180_Get_Calibration_Values(BMP180_Name) != HAL_OK){
 8003ea6:	6838      	ldr	r0, [r7, #0]
 8003ea8:	f000 f80c 	bl	8003ec4 <BMP180_Get_Calibration_Values>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <BMP180_Init+0x4e>
		return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <BMP180_Init+0x50>
	}


	return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	000186a0 	.word	0x000186a0

08003ec4 <BMP180_Get_Calibration_Values>:

HAL_StatusTypeDef BMP180_Get_Calibration_Values(BMP180_Typedef* BMP180_Name){
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b08c      	sub	sp, #48	; 0x30
 8003ec8:	af04      	add	r7, sp, #16
 8003eca:	6078      	str	r0, [r7, #4]
	uint8_t calibrationBuff[BMP180_CALIBRATION_VALUE_LENGTH] = {0};
 8003ecc:	2300      	movs	r3, #0
 8003ece:	60bb      	str	r3, [r7, #8]
 8003ed0:	f107 030c 	add.w	r3, r7, #12
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	605a      	str	r2, [r3, #4]
 8003eda:	609a      	str	r2, [r3, #8]
 8003edc:	60da      	str	r2, [r3, #12]
 8003ede:	821a      	strh	r2, [r3, #16]
	uint8_t status = HAL_OK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	77fb      	strb	r3, [r7, #31]
	status = HAL_I2C_Mem_Read(BMP180_Name->I2C_Name, BMP180_DEVICE_READ_REGISTER_ADDRESS, BMP180_CALIBRATION_START_ADDRESS, 1, calibrationBuff, BMP180_CALIBRATION_VALUE_LENGTH, 10000); // error here
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68d8      	ldr	r0, [r3, #12]
 8003ee8:	f242 7310 	movw	r3, #10000	; 0x2710
 8003eec:	9302      	str	r3, [sp, #8]
 8003eee:	2316      	movs	r3, #22
 8003ef0:	9301      	str	r3, [sp, #4]
 8003ef2:	f107 0308 	add.w	r3, r7, #8
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	2301      	movs	r3, #1
 8003efa:	22aa      	movs	r2, #170	; 0xaa
 8003efc:	21ef      	movs	r1, #239	; 0xef
 8003efe:	f002 f8dd 	bl	80060bc <HAL_I2C_Mem_Read>
 8003f02:	4603      	mov	r3, r0
 8003f04:	77fb      	strb	r3, [r7, #31]
	/*shifting operations*/
	AC1 = calibrationBuff[0]<<8 | calibrationBuff[1]; //8 bit MSB shifting left(15,14,13..), 8 bit LSB stay(7,6,5,..0)
 8003f06:	7a3b      	ldrb	r3, [r7, #8]
 8003f08:	021b      	lsls	r3, r3, #8
 8003f0a:	b21a      	sxth	r2, r3
 8003f0c:	7a7b      	ldrb	r3, [r7, #9]
 8003f0e:	b21b      	sxth	r3, r3
 8003f10:	4313      	orrs	r3, r2
 8003f12:	b21a      	sxth	r2, r3
 8003f14:	4b56      	ldr	r3, [pc, #344]	; (8004070 <BMP180_Get_Calibration_Values+0x1ac>)
 8003f16:	801a      	strh	r2, [r3, #0]
	AC2 = calibrationBuff[2]<<8 | calibrationBuff[3];
 8003f18:	7abb      	ldrb	r3, [r7, #10]
 8003f1a:	021b      	lsls	r3, r3, #8
 8003f1c:	b21a      	sxth	r2, r3
 8003f1e:	7afb      	ldrb	r3, [r7, #11]
 8003f20:	b21b      	sxth	r3, r3
 8003f22:	4313      	orrs	r3, r2
 8003f24:	b21a      	sxth	r2, r3
 8003f26:	4b53      	ldr	r3, [pc, #332]	; (8004074 <BMP180_Get_Calibration_Values+0x1b0>)
 8003f28:	801a      	strh	r2, [r3, #0]
	AC3 = calibrationBuff[4]<<8 | calibrationBuff[5];
 8003f2a:	7b3b      	ldrb	r3, [r7, #12]
 8003f2c:	021b      	lsls	r3, r3, #8
 8003f2e:	b21a      	sxth	r2, r3
 8003f30:	7b7b      	ldrb	r3, [r7, #13]
 8003f32:	b21b      	sxth	r3, r3
 8003f34:	4313      	orrs	r3, r2
 8003f36:	b21a      	sxth	r2, r3
 8003f38:	4b4f      	ldr	r3, [pc, #316]	; (8004078 <BMP180_Get_Calibration_Values+0x1b4>)
 8003f3a:	801a      	strh	r2, [r3, #0]
	AC4 = calibrationBuff[6]<<8 | calibrationBuff[7];
 8003f3c:	7bbb      	ldrb	r3, [r7, #14]
 8003f3e:	021b      	lsls	r3, r3, #8
 8003f40:	b21a      	sxth	r2, r3
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
 8003f44:	b21b      	sxth	r3, r3
 8003f46:	4313      	orrs	r3, r2
 8003f48:	b21a      	sxth	r2, r3
 8003f4a:	4b4c      	ldr	r3, [pc, #304]	; (800407c <BMP180_Get_Calibration_Values+0x1b8>)
 8003f4c:	801a      	strh	r2, [r3, #0]
	AC5 = calibrationBuff[8]<<8 | calibrationBuff[9];
 8003f4e:	7c3b      	ldrb	r3, [r7, #16]
 8003f50:	021b      	lsls	r3, r3, #8
 8003f52:	b21a      	sxth	r2, r3
 8003f54:	7c7b      	ldrb	r3, [r7, #17]
 8003f56:	b21b      	sxth	r3, r3
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	b21a      	sxth	r2, r3
 8003f5c:	4b48      	ldr	r3, [pc, #288]	; (8004080 <BMP180_Get_Calibration_Values+0x1bc>)
 8003f5e:	801a      	strh	r2, [r3, #0]
	AC6 =calibrationBuff[10]<<8 | calibrationBuff[11];
 8003f60:	7cbb      	ldrb	r3, [r7, #18]
 8003f62:	021b      	lsls	r3, r3, #8
 8003f64:	b21a      	sxth	r2, r3
 8003f66:	7cfb      	ldrb	r3, [r7, #19]
 8003f68:	b21b      	sxth	r3, r3
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	b21a      	sxth	r2, r3
 8003f6e:	4b45      	ldr	r3, [pc, #276]	; (8004084 <BMP180_Get_Calibration_Values+0x1c0>)
 8003f70:	801a      	strh	r2, [r3, #0]
	B1 = calibrationBuff[12]<<8 | calibrationBuff[13];
 8003f72:	7d3b      	ldrb	r3, [r7, #20]
 8003f74:	021b      	lsls	r3, r3, #8
 8003f76:	b21a      	sxth	r2, r3
 8003f78:	7d7b      	ldrb	r3, [r7, #21]
 8003f7a:	b21b      	sxth	r3, r3
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	b21a      	sxth	r2, r3
 8003f80:	4b41      	ldr	r3, [pc, #260]	; (8004088 <BMP180_Get_Calibration_Values+0x1c4>)
 8003f82:	801a      	strh	r2, [r3, #0]
	B2 = calibrationBuff[14]<<8 | calibrationBuff[15];
 8003f84:	7dbb      	ldrb	r3, [r7, #22]
 8003f86:	021b      	lsls	r3, r3, #8
 8003f88:	b21a      	sxth	r2, r3
 8003f8a:	7dfb      	ldrb	r3, [r7, #23]
 8003f8c:	b21b      	sxth	r3, r3
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	b21a      	sxth	r2, r3
 8003f92:	4b3e      	ldr	r3, [pc, #248]	; (800408c <BMP180_Get_Calibration_Values+0x1c8>)
 8003f94:	801a      	strh	r2, [r3, #0]
	MB = calibrationBuff[16]<<8 | calibrationBuff[17];
 8003f96:	7e3b      	ldrb	r3, [r7, #24]
 8003f98:	021b      	lsls	r3, r3, #8
 8003f9a:	b21a      	sxth	r2, r3
 8003f9c:	7e7b      	ldrb	r3, [r7, #25]
 8003f9e:	b21b      	sxth	r3, r3
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	b21a      	sxth	r2, r3
 8003fa4:	4b3a      	ldr	r3, [pc, #232]	; (8004090 <BMP180_Get_Calibration_Values+0x1cc>)
 8003fa6:	801a      	strh	r2, [r3, #0]
	MC = calibrationBuff[18]<<8 | calibrationBuff[19];
 8003fa8:	7ebb      	ldrb	r3, [r7, #26]
 8003faa:	021b      	lsls	r3, r3, #8
 8003fac:	b21a      	sxth	r2, r3
 8003fae:	7efb      	ldrb	r3, [r7, #27]
 8003fb0:	b21b      	sxth	r3, r3
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	b21a      	sxth	r2, r3
 8003fb6:	4b37      	ldr	r3, [pc, #220]	; (8004094 <BMP180_Get_Calibration_Values+0x1d0>)
 8003fb8:	801a      	strh	r2, [r3, #0]
	MD = calibrationBuff[20]<<8 | calibrationBuff[21];
 8003fba:	7f3b      	ldrb	r3, [r7, #28]
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	b21a      	sxth	r2, r3
 8003fc0:	7f7b      	ldrb	r3, [r7, #29]
 8003fc2:	b21b      	sxth	r3, r3
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	b21a      	sxth	r2, r3
 8003fc8:	4b33      	ldr	r3, [pc, #204]	; (8004098 <BMP180_Get_Calibration_Values+0x1d4>)
 8003fca:	801a      	strh	r2, [r3, #0]

	/*CONTROL CALIBRATION VALUEs COMING FROM to EEPROM, IF THERE IS A PROBLEM, ORANGE LED WILL TURN ON*/
	/*IF ORANGE LED DOESN'T WORK, EVERYTHINK IS OK*/

	if(AC1 == 0x0000 || AC1 == 0xFFFF)
 8003fcc:	4b28      	ldr	r3, [pc, #160]	; (8004070 <BMP180_Get_Calibration_Values+0x1ac>)
 8003fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <BMP180_Get_Calibration_Values+0x116>
	{
		return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e046      	b.n	8004068 <BMP180_Get_Calibration_Values+0x1a4>
	}

	if(AC2 == 0x0000 || AC2 == 0xFFFF)
 8003fda:	4b26      	ldr	r3, [pc, #152]	; (8004074 <BMP180_Get_Calibration_Values+0x1b0>)
 8003fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <BMP180_Get_Calibration_Values+0x124>
	{
		return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e03f      	b.n	8004068 <BMP180_Get_Calibration_Values+0x1a4>
	}
	if(AC3 == 0x0000 || AC3 == 0xFFFF)
 8003fe8:	4b23      	ldr	r3, [pc, #140]	; (8004078 <BMP180_Get_Calibration_Values+0x1b4>)
 8003fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <BMP180_Get_Calibration_Values+0x132>
	{
		return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e038      	b.n	8004068 <BMP180_Get_Calibration_Values+0x1a4>
	}
	if(AC4 == 0x0000 || AC4 == 0xFFFF)
 8003ff6:	4b21      	ldr	r3, [pc, #132]	; (800407c <BMP180_Get_Calibration_Values+0x1b8>)
 8003ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <BMP180_Get_Calibration_Values+0x140>
	{
		return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e031      	b.n	8004068 <BMP180_Get_Calibration_Values+0x1a4>
	}
	if(AC5 == 0x0000 || AC5 == 0xFFFF)
 8004004:	4b1e      	ldr	r3, [pc, #120]	; (8004080 <BMP180_Get_Calibration_Values+0x1bc>)
 8004006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <BMP180_Get_Calibration_Values+0x14e>
	{
		return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e02a      	b.n	8004068 <BMP180_Get_Calibration_Values+0x1a4>
	}
	if(AC6 == 0x0000 || AC6 == 0xFFFF)
 8004012:	4b1c      	ldr	r3, [pc, #112]	; (8004084 <BMP180_Get_Calibration_Values+0x1c0>)
 8004014:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <BMP180_Get_Calibration_Values+0x15c>
	{
		return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e023      	b.n	8004068 <BMP180_Get_Calibration_Values+0x1a4>
	}
	if(B1 == 0x0000 || B1 == 0xFFFF)
 8004020:	4b19      	ldr	r3, [pc, #100]	; (8004088 <BMP180_Get_Calibration_Values+0x1c4>)
 8004022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <BMP180_Get_Calibration_Values+0x16a>
	{
		return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e01c      	b.n	8004068 <BMP180_Get_Calibration_Values+0x1a4>
	}
	if(B2 == 0x0000 || B2 == 0xFFFF)
 800402e:	4b17      	ldr	r3, [pc, #92]	; (800408c <BMP180_Get_Calibration_Values+0x1c8>)
 8004030:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <BMP180_Get_Calibration_Values+0x178>
	{
		return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e015      	b.n	8004068 <BMP180_Get_Calibration_Values+0x1a4>
	}
	if(MB == 0x0000 || MB == 0xFFFF)
 800403c:	4b14      	ldr	r3, [pc, #80]	; (8004090 <BMP180_Get_Calibration_Values+0x1cc>)
 800403e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <BMP180_Get_Calibration_Values+0x186>
	{
		return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e00e      	b.n	8004068 <BMP180_Get_Calibration_Values+0x1a4>
	}
	if(MC == 0x0000 || MC == 0xFFFF)
 800404a:	4b12      	ldr	r3, [pc, #72]	; (8004094 <BMP180_Get_Calibration_Values+0x1d0>)
 800404c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <BMP180_Get_Calibration_Values+0x194>
	{
		return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e007      	b.n	8004068 <BMP180_Get_Calibration_Values+0x1a4>
	}
	if(MD == 0x0000 || MD == 0xFFFF)
 8004058:	4b0f      	ldr	r3, [pc, #60]	; (8004098 <BMP180_Get_Calibration_Values+0x1d4>)
 800405a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <BMP180_Get_Calibration_Values+0x1a2>
	{
		return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <BMP180_Get_Calibration_Values+0x1a4>
	}

	return status;
 8004066:	7ffb      	ldrb	r3, [r7, #31]

}
 8004068:	4618      	mov	r0, r3
 800406a:	3720      	adds	r7, #32
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	20000b9e 	.word	0x20000b9e
 8004074:	20000ba0 	.word	0x20000ba0
 8004078:	20000ba2 	.word	0x20000ba2
 800407c:	20000ba4 	.word	0x20000ba4
 8004080:	20000ba6 	.word	0x20000ba6
 8004084:	20000ba8 	.word	0x20000ba8
 8004088:	20000baa 	.word	0x20000baa
 800408c:	20000bac 	.word	0x20000bac
 8004090:	20000bae 	.word	0x20000bae
 8004094:	20000bb0 	.word	0x20000bb0
 8004098:	20000bb2 	.word	0x20000bb2

0800409c <BMP180_Get_Uncompansated_Presure>:
	BMP180_Name->Temperature = (tB5 + 8) / 16 * 0.1;

	return HAL_OK;
}

HAL_StatusTypeDef BMP180_Get_Uncompansated_Presure(BMP180_Typedef* BMP180_Name){
 800409c:	b580      	push	{r7, lr}
 800409e:	b088      	sub	sp, #32
 80040a0:	af04      	add	r7, sp, #16
 80040a2:	6078      	str	r0, [r7, #4]
	uint8_t rData[3]={0};
 80040a4:	4b1f      	ldr	r3, [pc, #124]	; (8004124 <BMP180_Get_Uncompansated_Presure+0x88>)
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	81bb      	strh	r3, [r7, #12]
 80040aa:	2300      	movs	r3, #0
 80040ac:	73bb      	strb	r3, [r7, #14]
	uint8_t wData[1];
	wData[0] = 0x34 | (0x01<<6); //oversampling_setting is standard, it's mean 0x03 and shifting 6 bit to left
 80040ae:	2374      	movs	r3, #116	; 0x74
 80040b0:	723b      	strb	r3, [r7, #8]
	if(HAL_I2C_Mem_Write(BMP180_Name->I2C_Name, BMP180_DEVICE_WRITE_REGISTER_ADDRESS, 0xF4, 1, wData, 1, 100000) != HAL_OK){
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68d8      	ldr	r0, [r3, #12]
 80040b6:	4b1c      	ldr	r3, [pc, #112]	; (8004128 <BMP180_Get_Uncompansated_Presure+0x8c>)
 80040b8:	9302      	str	r3, [sp, #8]
 80040ba:	2301      	movs	r3, #1
 80040bc:	9301      	str	r3, [sp, #4]
 80040be:	f107 0308 	add.w	r3, r7, #8
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	2301      	movs	r3, #1
 80040c6:	22f4      	movs	r2, #244	; 0xf4
 80040c8:	21ee      	movs	r1, #238	; 0xee
 80040ca:	f001 fefd 	bl	8005ec8 <HAL_I2C_Mem_Write>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <BMP180_Get_Uncompansated_Presure+0x3c>
		return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e021      	b.n	800411c <BMP180_Get_Uncompansated_Presure+0x80>
	}
	HAL_Delay(8); // 8 ms delay because we selected standard(oversampling_settings)
 80040d8:	2008      	movs	r0, #8
 80040da:	f000 fc9d 	bl	8004a18 <HAL_Delay>

	if(HAL_I2C_Mem_Read(BMP180_Name->I2C_Name, BMP180_DEVICE_READ_REGISTER_ADDRESS, 0xF6, 1, rData, 3, 100000) != HAL_OK){
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68d8      	ldr	r0, [r3, #12]
 80040e2:	4b11      	ldr	r3, [pc, #68]	; (8004128 <BMP180_Get_Uncompansated_Presure+0x8c>)
 80040e4:	9302      	str	r3, [sp, #8]
 80040e6:	2303      	movs	r3, #3
 80040e8:	9301      	str	r3, [sp, #4]
 80040ea:	f107 030c 	add.w	r3, r7, #12
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	2301      	movs	r3, #1
 80040f2:	22f6      	movs	r2, #246	; 0xf6
 80040f4:	21ef      	movs	r1, #239	; 0xef
 80040f6:	f001 ffe1 	bl	80060bc <HAL_I2C_Mem_Read>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <BMP180_Get_Uncompansated_Presure+0x68>
		return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e00b      	b.n	800411c <BMP180_Get_Uncompansated_Presure+0x80>
	}
	unCompPresure = (rData[0]<<16 | rData [1]<<8 | rData[2]) >> (8 - (uint8_t)(0x03));
 8004104:	7b3b      	ldrb	r3, [r7, #12]
 8004106:	041a      	lsls	r2, r3, #16
 8004108:	7b7b      	ldrb	r3, [r7, #13]
 800410a:	021b      	lsls	r3, r3, #8
 800410c:	4313      	orrs	r3, r2
 800410e:	7bba      	ldrb	r2, [r7, #14]
 8004110:	4313      	orrs	r3, r2
 8004112:	115b      	asrs	r3, r3, #5
 8004114:	461a      	mov	r2, r3
 8004116:	4b05      	ldr	r3, [pc, #20]	; (800412c <BMP180_Get_Uncompansated_Presure+0x90>)
 8004118:	601a      	str	r2, [r3, #0]
	// shifting operation -> unCompPresure = (MSB<<16 + LSB<<8 + XLSB) >> (8-oversample_settings)
	return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	0800cae8 	.word	0x0800cae8
 8004128:	000186a0 	.word	0x000186a0
 800412c:	20000bd4 	.word	0x20000bd4

08004130 <BMP180_Get_Presure>:

HAL_StatusTypeDef BMP180_Get_Presure(BMP180_Typedef* BMP180_Name){
 8004130:	b590      	push	{r4, r7, lr}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
	if(BMP180_Get_Uncompansated_Presure(BMP180_Name) != HAL_OK){
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7ff ffaf 	bl	800409c <BMP180_Get_Uncompansated_Presure>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <BMP180_Get_Presure+0x18>
		return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e121      	b.n	800438c <BMP180_Get_Presure+0x25c>
	}

	// DATASHEET CALCULATING
	pB6 = tB5 - 4000;
 8004148:	4b95      	ldr	r3, [pc, #596]	; (80043a0 <BMP180_Get_Presure+0x270>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8004150:	4a94      	ldr	r2, [pc, #592]	; (80043a4 <BMP180_Get_Presure+0x274>)
 8004152:	6013      	str	r3, [r2, #0]
	pX1 = (B2 * (pB6 * pB6 / 4096)) / 2048;
 8004154:	4b94      	ldr	r3, [pc, #592]	; (80043a8 <BMP180_Get_Presure+0x278>)
 8004156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800415a:	4619      	mov	r1, r3
 800415c:	4b91      	ldr	r3, [pc, #580]	; (80043a4 <BMP180_Get_Presure+0x274>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a90      	ldr	r2, [pc, #576]	; (80043a4 <BMP180_Get_Presure+0x274>)
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	fb02 f303 	mul.w	r3, r2, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	da01      	bge.n	8004170 <BMP180_Get_Presure+0x40>
 800416c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8004170:	131b      	asrs	r3, r3, #12
 8004172:	fb01 f303 	mul.w	r3, r1, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	da01      	bge.n	800417e <BMP180_Get_Presure+0x4e>
 800417a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800417e:	12db      	asrs	r3, r3, #11
 8004180:	461a      	mov	r2, r3
 8004182:	4b8a      	ldr	r3, [pc, #552]	; (80043ac <BMP180_Get_Presure+0x27c>)
 8004184:	601a      	str	r2, [r3, #0]
	pX2 = AC2 * pB6 / 2048;
 8004186:	4b8a      	ldr	r3, [pc, #552]	; (80043b0 <BMP180_Get_Presure+0x280>)
 8004188:	f9b3 3000 	ldrsh.w	r3, [r3]
 800418c:	461a      	mov	r2, r3
 800418e:	4b85      	ldr	r3, [pc, #532]	; (80043a4 <BMP180_Get_Presure+0x274>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	fb02 f303 	mul.w	r3, r2, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	da01      	bge.n	800419e <BMP180_Get_Presure+0x6e>
 800419a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800419e:	12db      	asrs	r3, r3, #11
 80041a0:	461a      	mov	r2, r3
 80041a2:	4b84      	ldr	r3, [pc, #528]	; (80043b4 <BMP180_Get_Presure+0x284>)
 80041a4:	601a      	str	r2, [r3, #0]
	pX3 = pX1 + pX2;
 80041a6:	4b81      	ldr	r3, [pc, #516]	; (80043ac <BMP180_Get_Presure+0x27c>)
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	4b82      	ldr	r3, [pc, #520]	; (80043b4 <BMP180_Get_Presure+0x284>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4413      	add	r3, r2
 80041b0:	4a81      	ldr	r2, [pc, #516]	; (80043b8 <BMP180_Get_Presure+0x288>)
 80041b2:	6013      	str	r3, [r2, #0]
	pB3 = (((AC1 * 4 + pX3) << (uint8_t)0x03) + 2) / 4;
 80041b4:	4b81      	ldr	r3, [pc, #516]	; (80043bc <BMP180_Get_Presure+0x28c>)
 80041b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041ba:	009a      	lsls	r2, r3, #2
 80041bc:	4b7e      	ldr	r3, [pc, #504]	; (80043b8 <BMP180_Get_Presure+0x288>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4413      	add	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	3302      	adds	r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	da00      	bge.n	80041cc <BMP180_Get_Presure+0x9c>
 80041ca:	3303      	adds	r3, #3
 80041cc:	109b      	asrs	r3, r3, #2
 80041ce:	461a      	mov	r2, r3
 80041d0:	4b7b      	ldr	r3, [pc, #492]	; (80043c0 <BMP180_Get_Presure+0x290>)
 80041d2:	601a      	str	r2, [r3, #0]
	pX1 = AC3 * pB6 / 8192;
 80041d4:	4b7b      	ldr	r3, [pc, #492]	; (80043c4 <BMP180_Get_Presure+0x294>)
 80041d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041da:	461a      	mov	r2, r3
 80041dc:	4b71      	ldr	r3, [pc, #452]	; (80043a4 <BMP180_Get_Presure+0x274>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	fb02 f303 	mul.w	r3, r2, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	da02      	bge.n	80041ee <BMP180_Get_Presure+0xbe>
 80041e8:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80041ec:	331f      	adds	r3, #31
 80041ee:	135b      	asrs	r3, r3, #13
 80041f0:	461a      	mov	r2, r3
 80041f2:	4b6e      	ldr	r3, [pc, #440]	; (80043ac <BMP180_Get_Presure+0x27c>)
 80041f4:	601a      	str	r2, [r3, #0]
	pX2 = (B1 * (pB6 * pB6 / 4096)) / 65536;
 80041f6:	4b74      	ldr	r3, [pc, #464]	; (80043c8 <BMP180_Get_Presure+0x298>)
 80041f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041fc:	4619      	mov	r1, r3
 80041fe:	4b69      	ldr	r3, [pc, #420]	; (80043a4 <BMP180_Get_Presure+0x274>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a68      	ldr	r2, [pc, #416]	; (80043a4 <BMP180_Get_Presure+0x274>)
 8004204:	6812      	ldr	r2, [r2, #0]
 8004206:	fb02 f303 	mul.w	r3, r2, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	da01      	bge.n	8004212 <BMP180_Get_Presure+0xe2>
 800420e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8004212:	131b      	asrs	r3, r3, #12
 8004214:	fb01 f303 	mul.w	r3, r1, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	da02      	bge.n	8004222 <BMP180_Get_Presure+0xf2>
 800421c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8004220:	33ff      	adds	r3, #255	; 0xff
 8004222:	141b      	asrs	r3, r3, #16
 8004224:	461a      	mov	r2, r3
 8004226:	4b63      	ldr	r3, [pc, #396]	; (80043b4 <BMP180_Get_Presure+0x284>)
 8004228:	601a      	str	r2, [r3, #0]
	pX3 = ((pX1 + pX2) + 2) /4;
 800422a:	4b60      	ldr	r3, [pc, #384]	; (80043ac <BMP180_Get_Presure+0x27c>)
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	4b61      	ldr	r3, [pc, #388]	; (80043b4 <BMP180_Get_Presure+0x284>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4413      	add	r3, r2
 8004234:	3302      	adds	r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	da00      	bge.n	800423c <BMP180_Get_Presure+0x10c>
 800423a:	3303      	adds	r3, #3
 800423c:	109b      	asrs	r3, r3, #2
 800423e:	461a      	mov	r2, r3
 8004240:	4b5d      	ldr	r3, [pc, #372]	; (80043b8 <BMP180_Get_Presure+0x288>)
 8004242:	601a      	str	r2, [r3, #0]
	pB4 = AC4 * (unsigned long)(pX3 + 32768) / 32768;
 8004244:	4b61      	ldr	r3, [pc, #388]	; (80043cc <BMP180_Get_Presure+0x29c>)
 8004246:	f9b3 3000 	ldrsh.w	r3, [r3]
 800424a:	461a      	mov	r2, r3
 800424c:	4b5a      	ldr	r3, [pc, #360]	; (80043b8 <BMP180_Get_Presure+0x288>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004254:	fb02 f303 	mul.w	r3, r2, r3
 8004258:	0bdb      	lsrs	r3, r3, #15
 800425a:	461a      	mov	r2, r3
 800425c:	4b5c      	ldr	r3, [pc, #368]	; (80043d0 <BMP180_Get_Presure+0x2a0>)
 800425e:	601a      	str	r2, [r3, #0]
	pB7 = ((unsigned long)unCompPresure - pB3) * (50000 >> (uint8_t)0x03);
 8004260:	4b5c      	ldr	r3, [pc, #368]	; (80043d4 <BMP180_Get_Presure+0x2a4>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a56      	ldr	r2, [pc, #344]	; (80043c0 <BMP180_Get_Presure+0x290>)
 8004266:	6812      	ldr	r2, [r2, #0]
 8004268:	1a9b      	subs	r3, r3, r2
 800426a:	f641 026a 	movw	r2, #6250	; 0x186a
 800426e:	fb02 f303 	mul.w	r3, r2, r3
 8004272:	461a      	mov	r2, r3
 8004274:	4b58      	ldr	r3, [pc, #352]	; (80043d8 <BMP180_Get_Presure+0x2a8>)
 8004276:	601a      	str	r2, [r3, #0]

	if(pB7 < 0x8000000)
 8004278:	4b57      	ldr	r3, [pc, #348]	; (80043d8 <BMP180_Get_Presure+0x2a8>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004280:	da0d      	bge.n	800429e <BMP180_Get_Presure+0x16e>
		BMP180_Name->Pressure = (pB7 * 2) / pB4;
 8004282:	4b55      	ldr	r3, [pc, #340]	; (80043d8 <BMP180_Get_Presure+0x2a8>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	005a      	lsls	r2, r3, #1
 8004288:	4b51      	ldr	r3, [pc, #324]	; (80043d0 <BMP180_Get_Presure+0x2a0>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004290:	4618      	mov	r0, r3
 8004292:	f7fc fd23 	bl	8000cdc <__aeabi_i2f>
 8004296:	4602      	mov	r2, r0
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	605a      	str	r2, [r3, #4]
 800429c:	e00c      	b.n	80042b8 <BMP180_Get_Presure+0x188>
	else
		BMP180_Name->Pressure = (pB7 / pB4) * 2;
 800429e:	4b4e      	ldr	r3, [pc, #312]	; (80043d8 <BMP180_Get_Presure+0x2a8>)
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	4b4b      	ldr	r3, [pc, #300]	; (80043d0 <BMP180_Get_Presure+0x2a0>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7fc fd15 	bl	8000cdc <__aeabi_i2f>
 80042b2:	4602      	mov	r2, r0
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	605a      	str	r2, [r3, #4]

	pX1 = (BMP180_Name->Pressure / 256) * (BMP180_Name->Pressure / 256);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fc fe13 	bl	8000eec <__aeabi_fdiv>
 80042c6:	4603      	mov	r3, r0
 80042c8:	461c      	mov	r4, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fc fe0a 	bl	8000eec <__aeabi_fdiv>
 80042d8:	4603      	mov	r3, r0
 80042da:	4619      	mov	r1, r3
 80042dc:	4620      	mov	r0, r4
 80042de:	f7fc fd51 	bl	8000d84 <__aeabi_fmul>
 80042e2:	4603      	mov	r3, r0
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7fc fe9d 	bl	8001024 <__aeabi_f2iz>
 80042ea:	4603      	mov	r3, r0
 80042ec:	4a2f      	ldr	r2, [pc, #188]	; (80043ac <BMP180_Get_Presure+0x27c>)
 80042ee:	6013      	str	r3, [r2, #0]
	pX1 = (pX1 * 3038) / 65536;
 80042f0:	4b2e      	ldr	r3, [pc, #184]	; (80043ac <BMP180_Get_Presure+0x27c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f640 32de 	movw	r2, #3038	; 0xbde
 80042f8:	fb02 f303 	mul.w	r3, r2, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	da02      	bge.n	8004306 <BMP180_Get_Presure+0x1d6>
 8004300:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8004304:	33ff      	adds	r3, #255	; 0xff
 8004306:	141b      	asrs	r3, r3, #16
 8004308:	461a      	mov	r2, r3
 800430a:	4b28      	ldr	r3, [pc, #160]	; (80043ac <BMP180_Get_Presure+0x27c>)
 800430c:	601a      	str	r2, [r3, #0]
	pX2 = (-7357 * BMP180_Name->Pressure) / 65537;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	4932      	ldr	r1, [pc, #200]	; (80043dc <BMP180_Get_Presure+0x2ac>)
 8004314:	4618      	mov	r0, r3
 8004316:	f7fc fd35 	bl	8000d84 <__aeabi_fmul>
 800431a:	4603      	mov	r3, r0
 800431c:	4930      	ldr	r1, [pc, #192]	; (80043e0 <BMP180_Get_Presure+0x2b0>)
 800431e:	4618      	mov	r0, r3
 8004320:	f7fc fde4 	bl	8000eec <__aeabi_fdiv>
 8004324:	4603      	mov	r3, r0
 8004326:	4618      	mov	r0, r3
 8004328:	f7fc fe7c 	bl	8001024 <__aeabi_f2iz>
 800432c:	4603      	mov	r3, r0
 800432e:	4a21      	ldr	r2, [pc, #132]	; (80043b4 <BMP180_Get_Presure+0x284>)
 8004330:	6013      	str	r3, [r2, #0]
	BMP180_Name->Pressure = BMP180_Name->Pressure + (pX1 + pX2 + 3791) / 16; //HECTOPASCAL
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685c      	ldr	r4, [r3, #4]
 8004336:	4b1d      	ldr	r3, [pc, #116]	; (80043ac <BMP180_Get_Presure+0x27c>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	4b1e      	ldr	r3, [pc, #120]	; (80043b4 <BMP180_Get_Presure+0x284>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4413      	add	r3, r2
 8004340:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8004344:	2b00      	cmp	r3, #0
 8004346:	da00      	bge.n	800434a <BMP180_Get_Presure+0x21a>
 8004348:	330f      	adds	r3, #15
 800434a:	111b      	asrs	r3, r3, #4
 800434c:	4618      	mov	r0, r3
 800434e:	f7fc fcc5 	bl	8000cdc <__aeabi_i2f>
 8004352:	4603      	mov	r3, r0
 8004354:	4619      	mov	r1, r3
 8004356:	4620      	mov	r0, r4
 8004358:	f7fc fc0c 	bl	8000b74 <__addsf3>
 800435c:	4603      	mov	r3, r0
 800435e:	461a      	mov	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	605a      	str	r2, [r3, #4]
	BMP180_Name->PressureATM = BMP180_Name->Pressure * 0.00000986923267; //HECTOPASCAL TO ATM
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	4618      	mov	r0, r3
 800436a:	f7fc f85d 	bl	8000428 <__aeabi_f2d>
 800436e:	a30a      	add	r3, pc, #40	; (adr r3, 8004398 <BMP180_Get_Presure+0x268>)
 8004370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004374:	f7fc f8b0 	bl	80004d8 <__aeabi_dmul>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4610      	mov	r0, r2
 800437e:	4619      	mov	r1, r3
 8004380:	f7fc fba2 	bl	8000ac8 <__aeabi_d2f>
 8004384:	4602      	mov	r2, r0
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	609a      	str	r2, [r3, #8]

	return HAL_OK;
 800438a:	2300      	movs	r3, #0

}
 800438c:	4618      	mov	r0, r3
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	bd90      	pop	{r4, r7, pc}
 8004394:	f3af 8000 	nop.w
 8004398:	027e16e6 	.word	0x027e16e6
 800439c:	3ee4b281 	.word	0x3ee4b281
 80043a0:	20000bb4 	.word	0x20000bb4
 80043a4:	20000bb8 	.word	0x20000bb8
 80043a8:	20000bac 	.word	0x20000bac
 80043ac:	20000bbc 	.word	0x20000bbc
 80043b0:	20000ba0 	.word	0x20000ba0
 80043b4:	20000bc0 	.word	0x20000bc0
 80043b8:	20000bd0 	.word	0x20000bd0
 80043bc:	20000b9e 	.word	0x20000b9e
 80043c0:	20000bc4 	.word	0x20000bc4
 80043c4:	20000ba2 	.word	0x20000ba2
 80043c8:	20000baa 	.word	0x20000baa
 80043cc:	20000ba4 	.word	0x20000ba4
 80043d0:	20000bc8 	.word	0x20000bc8
 80043d4:	20000bd4 	.word	0x20000bd4
 80043d8:	20000bcc 	.word	0x20000bcc
 80043dc:	c5e5e800 	.word	0xc5e5e800
 80043e0:	47800080 	.word	0x47800080

080043e4 <CLCD_Delay>:
******************************************************************************************************************/
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	4603      	mov	r3, r0
 80043ec:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 80043ee:	88fb      	ldrh	r3, [r7, #6]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fb11 	bl	8004a18 <HAL_Delay>
}
 80043f6:	bf00      	nop
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b086      	sub	sp, #24
 8004402:	af02      	add	r7, sp, #8
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	460b      	mov	r3, r1
 8004408:	70fb      	strb	r3, [r7, #3]
 800440a:	4613      	mov	r3, r2
 800440c:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 800440e:	78fb      	ldrb	r3, [r7, #3]
 8004410:	f023 030f 	bic.w	r3, r3, #15
 8004414:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 8004416:	78fb      	ldrb	r3, [r7, #3]
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	7adb      	ldrb	r3, [r3, #11]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d007      	beq.n	8004434 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT; 
 8004424:	7bfb      	ldrb	r3, [r7, #15]
 8004426:	f043 0308 	orr.w	r3, r3, #8
 800442a:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT; 
 800442c:	7bbb      	ldrb	r3, [r7, #14]
 800442e:	f043 0308 	orr.w	r3, r3, #8
 8004432:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 8004434:	78bb      	ldrb	r3, [r7, #2]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d108      	bne.n	800444c <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	f043 0301 	orr.w	r3, r3, #1
 8004440:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 8004442:	7bbb      	ldrb	r3, [r7, #14]
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	73bb      	strb	r3, [r7, #14]
 800444a:	e00a      	b.n	8004462 <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 800444c:	78bb      	ldrb	r3, [r7, #2]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d107      	bne.n	8004462 <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	f023 0301 	bic.w	r3, r3, #1
 8004458:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 800445a:	7bbb      	ldrb	r3, [r7, #14]
 800445c:	f023 0301 	bic.w	r3, r3, #1
 8004460:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 8004462:	7bfb      	ldrb	r3, [r7, #15]
 8004464:	f043 0304 	orr.w	r3, r3, #4
 8004468:	b2db      	uxtb	r3, r3
 800446a:	723b      	strb	r3, [r7, #8]
	Data_I2C[1] = Data_H;
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 8004470:	7bbb      	ldrb	r3, [r7, #14]
 8004472:	f043 0304 	orr.w	r3, r3, #4
 8004476:	b2db      	uxtb	r3, r3
 8004478:	72bb      	strb	r3, [r7, #10]
	Data_I2C[3] = Data_L;
 800447a:	7bbb      	ldrb	r3, [r7, #14]
 800447c:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	791b      	ldrb	r3, [r3, #4]
 8004486:	b299      	uxth	r1, r3
 8004488:	f107 0208 	add.w	r2, r7, #8
 800448c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	2304      	movs	r3, #4
 8004494:	f001 f9ae 	bl	80057f4 <HAL_I2C_Master_Transmit>
}
 8004498:	bf00      	nop
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	4611      	mov	r1, r2
 80044ac:	461a      	mov	r2, r3
 80044ae:	460b      	mov	r3, r1
 80044b0:	71fb      	strb	r3, [r7, #7]
 80044b2:	4613      	mov	r3, r2
 80044b4:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	79fa      	ldrb	r2, [r7, #7]
 80044c0:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	79ba      	ldrb	r2, [r7, #6]
 80044c6:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	7e3a      	ldrb	r2, [r7, #24]
 80044cc:	719a      	strb	r2, [r3, #6]
	
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2228      	movs	r2, #40	; 0x28
 80044d2:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2206      	movs	r2, #6
 80044d8:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	220c      	movs	r2, #12
 80044de:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2214      	movs	r2, #20
 80044e4:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2208      	movs	r2, #8
 80044ea:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 80044ec:	2032      	movs	r0, #50	; 0x32
 80044ee:	f7ff ff79 	bl	80043e4 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 80044f2:	2200      	movs	r2, #0
 80044f4:	2133      	movs	r1, #51	; 0x33
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f7ff ff81 	bl	80043fe <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 80044fc:	2200      	movs	r2, #0
 80044fe:	2133      	movs	r1, #51	; 0x33
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f7ff ff7c 	bl	80043fe <CLCD_WriteI2C>
	CLCD_Delay(5);
 8004506:	2005      	movs	r0, #5
 8004508:	f7ff ff6c 	bl	80043e4 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 800450c:	2200      	movs	r2, #0
 800450e:	2132      	movs	r1, #50	; 0x32
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f7ff ff74 	bl	80043fe <CLCD_WriteI2C>
	CLCD_Delay(5);
 8004516:	2005      	movs	r0, #5
 8004518:	f7ff ff64 	bl	80043e4 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 800451c:	2200      	movs	r2, #0
 800451e:	2120      	movs	r1, #32
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f7ff ff6c 	bl	80043fe <CLCD_WriteI2C>
	CLCD_Delay(5);
 8004526:	2005      	movs	r0, #5
 8004528:	f7ff ff5c 	bl	80043e4 <CLCD_Delay>
	
	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	79db      	ldrb	r3, [r3, #7]
 8004530:	2200      	movs	r2, #0
 8004532:	4619      	mov	r1, r3
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f7ff ff62 	bl	80043fe <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	7a1b      	ldrb	r3, [r3, #8]
 800453e:	2200      	movs	r2, #0
 8004540:	4619      	mov	r1, r3
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f7ff ff5b 	bl	80043fe <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	7a5b      	ldrb	r3, [r3, #9]
 800454c:	2200      	movs	r2, #0
 800454e:	4619      	mov	r1, r3
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f7ff ff54 	bl	80043fe <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	7a9b      	ldrb	r3, [r3, #10]
 800455a:	2200      	movs	r2, #0
 800455c:	4619      	mov	r1, r3
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f7ff ff4d 	bl	80043fe <CLCD_WriteI2C>
	
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 8004564:	2200      	movs	r2, #0
 8004566:	2101      	movs	r1, #1
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f7ff ff48 	bl	80043fe <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 800456e:	2200      	movs	r2, #0
 8004570:	2102      	movs	r1, #2
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f7ff ff43 	bl	80043fe <CLCD_WriteI2C>
}
 8004578:	bf00      	nop
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	460b      	mov	r3, r1
 800458a:	70fb      	strb	r3, [r7, #3]
 800458c:	4613      	mov	r3, r2
 800458e:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8004590:	2300      	movs	r3, #0
 8004592:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	795b      	ldrb	r3, [r3, #5]
 8004598:	78fa      	ldrb	r2, [r7, #3]
 800459a:	429a      	cmp	r2, r3
 800459c:	d303      	bcc.n	80045a6 <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	795b      	ldrb	r3, [r3, #5]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	799b      	ldrb	r3, [r3, #6]
 80045aa:	78ba      	ldrb	r2, [r7, #2]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d303      	bcc.n	80045b8 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	799b      	ldrb	r3, [r3, #6]
 80045b4:	3b01      	subs	r3, #1
 80045b6:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 80045b8:	78bb      	ldrb	r3, [r7, #2]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d102      	bne.n	80045c4 <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 80045be:	78fb      	ldrb	r3, [r7, #3]
 80045c0:	73fb      	strb	r3, [r7, #15]
 80045c2:	e013      	b.n	80045ec <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 80045c4:	78bb      	ldrb	r3, [r7, #2]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d103      	bne.n	80045d2 <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 80045ca:	78fb      	ldrb	r3, [r7, #3]
 80045cc:	3340      	adds	r3, #64	; 0x40
 80045ce:	73fb      	strb	r3, [r7, #15]
 80045d0:	e00c      	b.n	80045ec <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 80045d2:	78bb      	ldrb	r3, [r7, #2]
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d103      	bne.n	80045e0 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 80045d8:	78fb      	ldrb	r3, [r7, #3]
 80045da:	3314      	adds	r3, #20
 80045dc:	73fb      	strb	r3, [r7, #15]
 80045de:	e005      	b.n	80045ec <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 80045e0:	78bb      	ldrb	r3, [r7, #2]
 80045e2:	2b03      	cmp	r3, #3
 80045e4:	d102      	bne.n	80045ec <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 80045e6:	78fb      	ldrb	r3, [r7, #3]
 80045e8:	3354      	adds	r3, #84	; 0x54
 80045ea:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2200      	movs	r2, #0
 80045f6:	4619      	mov	r1, r3
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f7ff ff00 	bl	80043fe <CLCD_WriteI2C>
}
 80045fe:	bf00      	nop
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b082      	sub	sp, #8
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
 800460e:	460b      	mov	r3, r1
 8004610:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 8004612:	78fb      	ldrb	r3, [r7, #3]
 8004614:	2201      	movs	r2, #1
 8004616:	4619      	mov	r1, r3
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7ff fef0 	bl	80043fe <CLCD_WriteI2C>
}
 800461e:	bf00      	nop
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b082      	sub	sp, #8
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
 800462e:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 8004630:	e007      	b.n	8004642 <CLCD_I2C_WriteString+0x1c>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	603a      	str	r2, [r7, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	4619      	mov	r1, r3
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7ff ffe2 	bl	8004606 <CLCD_I2C_WriteChar>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f3      	bne.n	8004632 <CLCD_I2C_WriteString+0xc>
}
 800464a:	bf00      	nop
 800464c:	bf00      	nop
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 800465c:	2200      	movs	r2, #0
 800465e:	2101      	movs	r1, #1
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7ff fecc 	bl	80043fe <CLCD_WriteI2C>
}
 8004666:	bf00      	nop
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <DHT20_Init>:
 *      Author: ASUS
 */

#include "DHT20.h"

void DHT20_Init(I2C_HandleTypeDef* i2c, DHT20_Typedef* DHT_Name){
 800466e:	b580      	push	{r7, lr}
 8004670:	b082      	sub	sp, #8
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
 8004676:	6039      	str	r1, [r7, #0]
	HAL_Delay(100);
 8004678:	2064      	movs	r0, #100	; 0x64
 800467a:	f000 f9cd 	bl	8004a18 <HAL_Delay>
	DHT_Name->Humidity = 0;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	f04f 0200 	mov.w	r2, #0
 8004684:	601a      	str	r2, [r3, #0]
	DHT_Name->Temperature = 0;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	605a      	str	r2, [r3, #4]
	DHT_Name->I2C_Name = i2c;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	609a      	str	r2, [r3, #8]
}
 8004694:	bf00      	nop
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <DHT20_CheckCRC8>:

unsigned char DHT20_CheckCRC8(DHT20_Typedef* DHT_Name ,unsigned char* pData, unsigned char length){
 800469c:	b480      	push	{r7}
 800469e:	b089      	sub	sp, #36	; 0x24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	4613      	mov	r3, r2
 80046a8:	71fb      	strb	r3, [r7, #7]
	unsigned char crc = 0xff;
 80046aa:	23ff      	movs	r3, #255	; 0xff
 80046ac:	77fb      	strb	r3, [r7, #31]
	for(int i = 0; i < length; i++){
 80046ae:	2300      	movs	r3, #0
 80046b0:	61bb      	str	r3, [r7, #24]
 80046b2:	e022      	b.n	80046fa <DHT20_CheckCRC8+0x5e>
		crc = crc ^ (*pData);
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	781a      	ldrb	r2, [r3, #0]
 80046b8:	7ffb      	ldrb	r3, [r7, #31]
 80046ba:	4053      	eors	r3, r2
 80046bc:	77fb      	strb	r3, [r7, #31]
		for(int j = 0; j < 8; j++){
 80046be:	2300      	movs	r3, #0
 80046c0:	617b      	str	r3, [r7, #20]
 80046c2:	e011      	b.n	80046e8 <DHT20_CheckCRC8+0x4c>
			if(crc & 0x80)
 80046c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	da07      	bge.n	80046dc <DHT20_CheckCRC8+0x40>
				crc = (crc << 1) ^ 0x31;
 80046cc:	7ffb      	ldrb	r3, [r7, #31]
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	b25b      	sxtb	r3, r3
 80046d2:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 80046d6:	b25b      	sxtb	r3, r3
 80046d8:	77fb      	strb	r3, [r7, #31]
 80046da:	e002      	b.n	80046e2 <DHT20_CheckCRC8+0x46>
			else
				crc <<= 1;
 80046dc:	7ffb      	ldrb	r3, [r7, #31]
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	77fb      	strb	r3, [r7, #31]
		for(int j = 0; j < 8; j++){
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	3301      	adds	r3, #1
 80046e6:	617b      	str	r3, [r7, #20]
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2b07      	cmp	r3, #7
 80046ec:	ddea      	ble.n	80046c4 <DHT20_CheckCRC8+0x28>
		}
		pData++;
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	3301      	adds	r3, #1
 80046f2:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < length; i++){
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	3301      	adds	r3, #1
 80046f8:	61bb      	str	r3, [r7, #24]
 80046fa:	79fb      	ldrb	r3, [r7, #7]
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	429a      	cmp	r2, r3
 8004700:	dbd8      	blt.n	80046b4 <DHT20_CheckCRC8+0x18>
	}
	return crc;
 8004702:	7ffb      	ldrb	r3, [r7, #31]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3724      	adds	r7, #36	; 0x24
 8004708:	46bd      	mov	sp, r7
 800470a:	bc80      	pop	{r7}
 800470c:	4770      	bx	lr

0800470e <DHT20_SendRequest>:
	}

	return status;
}

Status_Trigger_DHT20 DHT20_SendRequest(DHT20_Typedef* DHT_Name, uint8_t pRegister){
 800470e:	b580      	push	{r7, lr}
 8004710:	b088      	sub	sp, #32
 8004712:	af04      	add	r7, sp, #16
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	460b      	mov	r3, r1
 8004718:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status_init = HAL_OK;
 800471a:	2300      	movs	r3, #0
 800471c:	73bb      	strb	r3, [r7, #14]
	uint8_t value = 0;
 800471e:	2300      	movs	r3, #0
 8004720:	737b      	strb	r3, [r7, #13]
	status_init = HAL_I2C_Mem_Read(DHT_Name->I2C_Name, DHT20_SLAVE_ADDRESS << 1, (uint16_t)pRegister, I2C_MEMADD_SIZE_8BIT, &value, 1, 100);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6898      	ldr	r0, [r3, #8]
 8004726:	78fb      	ldrb	r3, [r7, #3]
 8004728:	b29a      	uxth	r2, r3
 800472a:	2364      	movs	r3, #100	; 0x64
 800472c:	9302      	str	r3, [sp, #8]
 800472e:	2301      	movs	r3, #1
 8004730:	9301      	str	r3, [sp, #4]
 8004732:	f107 030d 	add.w	r3, r7, #13
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	2301      	movs	r3, #1
 800473a:	2170      	movs	r1, #112	; 0x70
 800473c:	f001 fcbe 	bl	80060bc <HAL_I2C_Mem_Read>
 8004740:	4603      	mov	r3, r0
 8004742:	73bb      	strb	r3, [r7, #14]
	if(status_init != HAL_OK){
 8004744:	7bbb      	ldrb	r3, [r7, #14]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <DHT20_SendRequest+0x40>
		return DHT20_ERROR_INIT;
 800474a:	2301      	movs	r3, #1
 800474c:	e01d      	b.n	800478a <DHT20_SendRequest+0x7c>
	}
	Status_Trigger_DHT20 status = DHT20_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	73fb      	strb	r3, [r7, #15]
	if((value & 0x18) == 0x18){
 8004752:	7b7b      	ldrb	r3, [r7, #13]
 8004754:	f003 0318 	and.w	r3, r3, #24
 8004758:	2b18      	cmp	r3, #24
 800475a:	d113      	bne.n	8004784 <DHT20_SendRequest+0x76>
		HAL_Delay(10);
 800475c:	200a      	movs	r0, #10
 800475e:	f000 f95b 	bl	8004a18 <HAL_Delay>
		uint8_t data_t[3];
		data_t[0] = 0xAC;
 8004762:	23ac      	movs	r3, #172	; 0xac
 8004764:	723b      	strb	r3, [r7, #8]
		data_t[1] = 0x33;
 8004766:	2333      	movs	r3, #51	; 0x33
 8004768:	727b      	strb	r3, [r7, #9]
		data_t[2] = 0x00;
 800476a:	2300      	movs	r3, #0
 800476c:	72bb      	strb	r3, [r7, #10]
		HAL_I2C_Master_Transmit(DHT_Name->I2C_Name, DHT20_SLAVE_ADDRESS << 1, (uint8_t *)data_t, 3, 100);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6898      	ldr	r0, [r3, #8]
 8004772:	f107 0208 	add.w	r2, r7, #8
 8004776:	2364      	movs	r3, #100	; 0x64
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	2303      	movs	r3, #3
 800477c:	2170      	movs	r1, #112	; 0x70
 800477e:	f001 f839 	bl	80057f4 <HAL_I2C_Master_Transmit>
 8004782:	e001      	b.n	8004788 <DHT20_SendRequest+0x7a>
	}
	else{
		status = DHT20_ERROR_INIT;
 8004784:	2301      	movs	r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8004788:	7bfb      	ldrb	r3, [r7, #15]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
	...

08004794 <DHT20_ReadData>:
Status_Trigger_DHT20 DHT20_ReadData(DHT20_Typedef* DHT_Name){
 8004794:	b580      	push	{r7, lr}
 8004796:	b088      	sub	sp, #32
 8004798:	af02      	add	r7, sp, #8
 800479a:	6078      	str	r0, [r7, #4]
	Status_Trigger_DHT20 status = DHT20_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	75fb      	strb	r3, [r7, #23]
	uint8_t buffer[7];
	uint32_t data_read = 0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	613b      	str	r3, [r7, #16]

	HAL_I2C_Master_Receive(DHT_Name->I2C_Name, DHT20_SLAVE_ADDRESS << 1, buffer, 7, 100);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6898      	ldr	r0, [r3, #8]
 80047a8:	f107 0208 	add.w	r2, r7, #8
 80047ac:	2364      	movs	r3, #100	; 0x64
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	2307      	movs	r3, #7
 80047b2:	2170      	movs	r1, #112	; 0x70
 80047b4:	f001 f91c 	bl	80059f0 <HAL_I2C_Master_Receive>

	if((buffer[0] & 0x80) == 0x00){
 80047b8:	7a3b      	ldrb	r3, [r7, #8]
 80047ba:	b25b      	sxtb	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	db5f      	blt.n	8004880 <DHT20_ReadData+0xec>
		if(DHT20_CheckCRC8(DHT_Name, &buffer[0], 6)){
 80047c0:	f107 0308 	add.w	r3, r7, #8
 80047c4:	2206      	movs	r2, #6
 80047c6:	4619      	mov	r1, r3
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f7ff ff67 	bl	800469c <DHT20_CheckCRC8>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d052      	beq.n	800487a <DHT20_ReadData+0xe6>
			data_read = buffer[1];
 80047d4:	7a7b      	ldrb	r3, [r7, #9]
 80047d6:	613b      	str	r3, [r7, #16]
			data_read = data_read << 8;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	021b      	lsls	r3, r3, #8
 80047dc:	613b      	str	r3, [r7, #16]
			data_read += buffer[2];
 80047de:	7abb      	ldrb	r3, [r7, #10]
 80047e0:	461a      	mov	r2, r3
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	4413      	add	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
			data_read = data_read << 8;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	021b      	lsls	r3, r3, #8
 80047ec:	613b      	str	r3, [r7, #16]
			data_read += buffer[3];
 80047ee:	7afb      	ldrb	r3, [r7, #11]
 80047f0:	461a      	mov	r2, r3
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	4413      	add	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]
			data_read = data_read >> 4;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	091b      	lsrs	r3, r3, #4
 80047fc:	613b      	str	r3, [r7, #16]

			DHT_Name->Humidity = (float)data_read * 100 / 1048576;
 80047fe:	6938      	ldr	r0, [r7, #16]
 8004800:	f7fc fa68 	bl	8000cd4 <__aeabi_ui2f>
 8004804:	4603      	mov	r3, r0
 8004806:	4922      	ldr	r1, [pc, #136]	; (8004890 <DHT20_ReadData+0xfc>)
 8004808:	4618      	mov	r0, r3
 800480a:	f7fc fabb 	bl	8000d84 <__aeabi_fmul>
 800480e:	4603      	mov	r3, r0
 8004810:	f04f 4193 	mov.w	r1, #1233125376	; 0x49800000
 8004814:	4618      	mov	r0, r3
 8004816:	f7fc fb69 	bl	8000eec <__aeabi_fdiv>
 800481a:	4603      	mov	r3, r0
 800481c:	461a      	mov	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	601a      	str	r2, [r3, #0]

			data_read = buffer[3] & 0x0f;
 8004822:	7afb      	ldrb	r3, [r7, #11]
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	613b      	str	r3, [r7, #16]
			data_read = data_read << 8;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	021b      	lsls	r3, r3, #8
 800482e:	613b      	str	r3, [r7, #16]
			data_read += buffer[4];
 8004830:	7b3b      	ldrb	r3, [r7, #12]
 8004832:	461a      	mov	r2, r3
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	4413      	add	r3, r2
 8004838:	613b      	str	r3, [r7, #16]
			data_read = data_read << 8;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	021b      	lsls	r3, r3, #8
 800483e:	613b      	str	r3, [r7, #16]
			data_read += buffer[5];
 8004840:	7b7b      	ldrb	r3, [r7, #13]
 8004842:	461a      	mov	r2, r3
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	4413      	add	r3, r2
 8004848:	613b      	str	r3, [r7, #16]

			DHT_Name->Temperature = ((float)data_read * 200 / 1048576) - 50;
 800484a:	6938      	ldr	r0, [r7, #16]
 800484c:	f7fc fa42 	bl	8000cd4 <__aeabi_ui2f>
 8004850:	4603      	mov	r3, r0
 8004852:	4910      	ldr	r1, [pc, #64]	; (8004894 <DHT20_ReadData+0x100>)
 8004854:	4618      	mov	r0, r3
 8004856:	f7fc fa95 	bl	8000d84 <__aeabi_fmul>
 800485a:	4603      	mov	r3, r0
 800485c:	f04f 4193 	mov.w	r1, #1233125376	; 0x49800000
 8004860:	4618      	mov	r0, r3
 8004862:	f7fc fb43 	bl	8000eec <__aeabi_fdiv>
 8004866:	4603      	mov	r3, r0
 8004868:	490b      	ldr	r1, [pc, #44]	; (8004898 <DHT20_ReadData+0x104>)
 800486a:	4618      	mov	r0, r3
 800486c:	f7fc f980 	bl	8000b70 <__aeabi_fsub>
 8004870:	4603      	mov	r3, r0
 8004872:	461a      	mov	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	605a      	str	r2, [r3, #4]
 8004878:	e004      	b.n	8004884 <DHT20_ReadData+0xf0>
		}
		else{
			status = DHT20_ERROR_CRC;
 800487a:	2302      	movs	r3, #2
 800487c:	75fb      	strb	r3, [r7, #23]
 800487e:	e001      	b.n	8004884 <DHT20_ReadData+0xf0>
		}
	}
	else{
		status = DHT20_BUSY;
 8004880:	2303      	movs	r3, #3
 8004882:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8004884:	7dfb      	ldrb	r3, [r7, #23]

}
 8004886:	4618      	mov	r0, r3
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	42c80000 	.word	0x42c80000
 8004894:	43480000 	.word	0x43480000
 8004898:	42480000 	.word	0x42480000

0800489c <init_ledRGB>:
 *  Created on: Sep 20, 2024
 *      Author: ASUS
 */
#include "ledRGB.h"

HAL_StatusTypeDef init_ledRGB(TIM_HandleTypeDef* htim_rgb){
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
	if(HAL_TIM_PWM_Start(htim_rgb, TIM_CHANNEL_1) != HAL_OK){
 80048a4:	2100      	movs	r1, #0
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f003 f9b8 	bl	8007c1c <HAL_TIM_PWM_Start>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <init_ledRGB+0x1a>
		return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e012      	b.n	80048dc <init_ledRGB+0x40>
	}
	else if(HAL_TIM_PWM_Start(htim_rgb, TIM_CHANNEL_2) != HAL_OK){
 80048b6:	2104      	movs	r1, #4
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f003 f9af 	bl	8007c1c <HAL_TIM_PWM_Start>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <init_ledRGB+0x2c>
		return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e009      	b.n	80048dc <init_ledRGB+0x40>
	}
	else if(HAL_TIM_PWM_Start(htim_rgb, TIM_CHANNEL_3) != HAL_OK){
 80048c8:	2108      	movs	r1, #8
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f003 f9a6 	bl	8007c1c <HAL_TIM_PWM_Start>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <init_ledRGB+0x3e>
		return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e000      	b.n	80048dc <init_ledRGB+0x40>
	}
	return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <set_codeRGB>:

void set_codeRGB(TIM_HandleTypeDef* htim_rgb, uint32_t codeRGB) {
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
    uint8_t red = (((codeRGB >> 16) & 0xFF) * 100) / 255;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	0c1b      	lsrs	r3, r3, #16
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2264      	movs	r2, #100	; 0x64
 80048f6:	fb02 f303 	mul.w	r3, r2, r3
 80048fa:	4a15      	ldr	r2, [pc, #84]	; (8004950 <set_codeRGB+0x6c>)
 80048fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004900:	09db      	lsrs	r3, r3, #7
 8004902:	73fb      	strb	r3, [r7, #15]
    uint8_t green = (((codeRGB >> 8) & 0xFF) * 100) / 255;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	0a1b      	lsrs	r3, r3, #8
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2264      	movs	r2, #100	; 0x64
 800490c:	fb02 f303 	mul.w	r3, r2, r3
 8004910:	4a0f      	ldr	r2, [pc, #60]	; (8004950 <set_codeRGB+0x6c>)
 8004912:	fba2 2303 	umull	r2, r3, r2, r3
 8004916:	09db      	lsrs	r3, r3, #7
 8004918:	73bb      	strb	r3, [r7, #14]
    uint8_t blue = ((codeRGB & 0xFF) * 100) / 255;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2264      	movs	r2, #100	; 0x64
 8004920:	fb02 f303 	mul.w	r3, r2, r3
 8004924:	4a0a      	ldr	r2, [pc, #40]	; (8004950 <set_codeRGB+0x6c>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	09db      	lsrs	r3, r3, #7
 800492c:	737b      	strb	r3, [r7, #13]

    __HAL_TIM_SET_COMPARE(htim_rgb, TIM_CHANNEL_1, red);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	7bfa      	ldrb	r2, [r7, #15]
 8004934:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(htim_rgb, TIM_CHANNEL_2, green);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	7bba      	ldrb	r2, [r7, #14]
 800493c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(htim_rgb, TIM_CHANNEL_3, blue);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	7b7a      	ldrb	r2, [r7, #13]
 8004944:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004946:	bf00      	nop
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	bc80      	pop	{r7}
 800494e:	4770      	bx	lr
 8004950:	80808081 	.word	0x80808081

08004954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004958:	4b08      	ldr	r3, [pc, #32]	; (800497c <HAL_Init+0x28>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a07      	ldr	r2, [pc, #28]	; (800497c <HAL_Init+0x28>)
 800495e:	f043 0310 	orr.w	r3, r3, #16
 8004962:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004964:	2003      	movs	r0, #3
 8004966:	f000 f947 	bl	8004bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800496a:	200f      	movs	r0, #15
 800496c:	f000 f808 	bl	8004980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004970:	f7fe fcf4 	bl	800335c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	40022000 	.word	0x40022000

08004980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004988:	4b12      	ldr	r3, [pc, #72]	; (80049d4 <HAL_InitTick+0x54>)
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	4b12      	ldr	r3, [pc, #72]	; (80049d8 <HAL_InitTick+0x58>)
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	4619      	mov	r1, r3
 8004992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004996:	fbb3 f3f1 	udiv	r3, r3, r1
 800499a:	fbb2 f3f3 	udiv	r3, r2, r3
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 f95f 	bl	8004c62 <HAL_SYSTICK_Config>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e00e      	b.n	80049cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2b0f      	cmp	r3, #15
 80049b2:	d80a      	bhi.n	80049ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049b4:	2200      	movs	r2, #0
 80049b6:	6879      	ldr	r1, [r7, #4]
 80049b8:	f04f 30ff 	mov.w	r0, #4294967295
 80049bc:	f000 f927 	bl	8004c0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80049c0:	4a06      	ldr	r2, [pc, #24]	; (80049dc <HAL_InitTick+0x5c>)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	e000      	b.n	80049cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	20000030 	.word	0x20000030
 80049d8:	20000038 	.word	0x20000038
 80049dc:	20000034 	.word	0x20000034

080049e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049e4:	4b05      	ldr	r3, [pc, #20]	; (80049fc <HAL_IncTick+0x1c>)
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	461a      	mov	r2, r3
 80049ea:	4b05      	ldr	r3, [pc, #20]	; (8004a00 <HAL_IncTick+0x20>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4413      	add	r3, r2
 80049f0:	4a03      	ldr	r2, [pc, #12]	; (8004a00 <HAL_IncTick+0x20>)
 80049f2:	6013      	str	r3, [r2, #0]
}
 80049f4:	bf00      	nop
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc80      	pop	{r7}
 80049fa:	4770      	bx	lr
 80049fc:	20000038 	.word	0x20000038
 8004a00:	20000bd8 	.word	0x20000bd8

08004a04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
  return uwTick;
 8004a08:	4b02      	ldr	r3, [pc, #8]	; (8004a14 <HAL_GetTick+0x10>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr
 8004a14:	20000bd8 	.word	0x20000bd8

08004a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a20:	f7ff fff0 	bl	8004a04 <HAL_GetTick>
 8004a24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a30:	d005      	beq.n	8004a3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a32:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <HAL_Delay+0x44>)
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	461a      	mov	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a3e:	bf00      	nop
 8004a40:	f7ff ffe0 	bl	8004a04 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d8f7      	bhi.n	8004a40 <HAL_Delay+0x28>
  {
  }
}
 8004a50:	bf00      	nop
 8004a52:	bf00      	nop
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20000038 	.word	0x20000038

08004a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a70:	4b0c      	ldr	r3, [pc, #48]	; (8004aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a92:	4a04      	ldr	r2, [pc, #16]	; (8004aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	60d3      	str	r3, [r2, #12]
}
 8004a98:	bf00      	nop
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	e000ed00 	.word	0xe000ed00

08004aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004aac:	4b04      	ldr	r3, [pc, #16]	; (8004ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	0a1b      	lsrs	r3, r3, #8
 8004ab2:	f003 0307 	and.w	r3, r3, #7
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bc80      	pop	{r7}
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	e000ed00 	.word	0xe000ed00

08004ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	4603      	mov	r3, r0
 8004acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	db0b      	blt.n	8004aee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	f003 021f 	and.w	r2, r3, #31
 8004adc:	4906      	ldr	r1, [pc, #24]	; (8004af8 <__NVIC_EnableIRQ+0x34>)
 8004ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae2:	095b      	lsrs	r3, r3, #5
 8004ae4:	2001      	movs	r0, #1
 8004ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8004aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr
 8004af8:	e000e100 	.word	0xe000e100

08004afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	4603      	mov	r3, r0
 8004b04:	6039      	str	r1, [r7, #0]
 8004b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	db0a      	blt.n	8004b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	490c      	ldr	r1, [pc, #48]	; (8004b48 <__NVIC_SetPriority+0x4c>)
 8004b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b1a:	0112      	lsls	r2, r2, #4
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	440b      	add	r3, r1
 8004b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b24:	e00a      	b.n	8004b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	4908      	ldr	r1, [pc, #32]	; (8004b4c <__NVIC_SetPriority+0x50>)
 8004b2c:	79fb      	ldrb	r3, [r7, #7]
 8004b2e:	f003 030f 	and.w	r3, r3, #15
 8004b32:	3b04      	subs	r3, #4
 8004b34:	0112      	lsls	r2, r2, #4
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	440b      	add	r3, r1
 8004b3a:	761a      	strb	r2, [r3, #24]
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bc80      	pop	{r7}
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	e000e100 	.word	0xe000e100
 8004b4c:	e000ed00 	.word	0xe000ed00

08004b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b089      	sub	sp, #36	; 0x24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	f1c3 0307 	rsb	r3, r3, #7
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	bf28      	it	cs
 8004b6e:	2304      	movcs	r3, #4
 8004b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	3304      	adds	r3, #4
 8004b76:	2b06      	cmp	r3, #6
 8004b78:	d902      	bls.n	8004b80 <NVIC_EncodePriority+0x30>
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	3b03      	subs	r3, #3
 8004b7e:	e000      	b.n	8004b82 <NVIC_EncodePriority+0x32>
 8004b80:	2300      	movs	r3, #0
 8004b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b84:	f04f 32ff 	mov.w	r2, #4294967295
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8e:	43da      	mvns	r2, r3
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	401a      	ands	r2, r3
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b98:	f04f 31ff 	mov.w	r1, #4294967295
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba2:	43d9      	mvns	r1, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ba8:	4313      	orrs	r3, r2
         );
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3724      	adds	r7, #36	; 0x24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bc80      	pop	{r7}
 8004bb2:	4770      	bx	lr

08004bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bc4:	d301      	bcc.n	8004bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e00f      	b.n	8004bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bca:	4a0a      	ldr	r2, [pc, #40]	; (8004bf4 <SysTick_Config+0x40>)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bd2:	210f      	movs	r1, #15
 8004bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd8:	f7ff ff90 	bl	8004afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bdc:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <SysTick_Config+0x40>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004be2:	4b04      	ldr	r3, [pc, #16]	; (8004bf4 <SysTick_Config+0x40>)
 8004be4:	2207      	movs	r2, #7
 8004be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	e000e010 	.word	0xe000e010

08004bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7ff ff2d 	bl	8004a60 <__NVIC_SetPriorityGrouping>
}
 8004c06:	bf00      	nop
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b086      	sub	sp, #24
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	4603      	mov	r3, r0
 8004c16:	60b9      	str	r1, [r7, #8]
 8004c18:	607a      	str	r2, [r7, #4]
 8004c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c20:	f7ff ff42 	bl	8004aa8 <__NVIC_GetPriorityGrouping>
 8004c24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	68b9      	ldr	r1, [r7, #8]
 8004c2a:	6978      	ldr	r0, [r7, #20]
 8004c2c:	f7ff ff90 	bl	8004b50 <NVIC_EncodePriority>
 8004c30:	4602      	mov	r2, r0
 8004c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c36:	4611      	mov	r1, r2
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7ff ff5f 	bl	8004afc <__NVIC_SetPriority>
}
 8004c3e:	bf00      	nop
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b082      	sub	sp, #8
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7ff ff35 	bl	8004ac4 <__NVIC_EnableIRQ>
}
 8004c5a:	bf00      	nop
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b082      	sub	sp, #8
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff ffa2 	bl	8004bb4 <SysTick_Config>
 8004c70:	4603      	mov	r3, r0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
	...

08004c7c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e043      	b.n	8004d1a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	461a      	mov	r2, r3
 8004c98:	4b22      	ldr	r3, [pc, #136]	; (8004d24 <HAL_DMA_Init+0xa8>)
 8004c9a:	4413      	add	r3, r2
 8004c9c:	4a22      	ldr	r2, [pc, #136]	; (8004d28 <HAL_DMA_Init+0xac>)
 8004c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca2:	091b      	lsrs	r3, r3, #4
 8004ca4:	009a      	lsls	r2, r3, #2
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a1f      	ldr	r2, [pc, #124]	; (8004d2c <HAL_DMA_Init+0xb0>)
 8004cae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004cc6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004cca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004cd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ce0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bc80      	pop	{r7}
 8004d22:	4770      	bx	lr
 8004d24:	bffdfff8 	.word	0xbffdfff8
 8004d28:	cccccccd 	.word	0xcccccccd
 8004d2c:	40020000 	.word	0x40020000

08004d30 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
 8004d3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d101      	bne.n	8004d50 <HAL_DMA_Start_IT+0x20>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e04b      	b.n	8004de8 <HAL_DMA_Start_IT+0xb8>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d13a      	bne.n	8004dda <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0201 	bic.w	r2, r2, #1
 8004d80:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	68b9      	ldr	r1, [r7, #8]
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 f9f6 	bl	800517a <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d008      	beq.n	8004da8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f042 020e 	orr.w	r2, r2, #14
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	e00f      	b.n	8004dc8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0204 	bic.w	r2, r2, #4
 8004db6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 020a 	orr.w	r2, r2, #10
 8004dc6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0201 	orr.w	r2, r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	e005      	b.n	8004de6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004de2:	2302      	movs	r3, #2
 8004de4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d008      	beq.n	8004e1a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2204      	movs	r2, #4
 8004e0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e020      	b.n	8004e5c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 020e 	bic.w	r2, r2, #14
 8004e28:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0201 	bic.w	r2, r2, #1
 8004e38:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e42:	2101      	movs	r1, #1
 8004e44:	fa01 f202 	lsl.w	r2, r1, r2
 8004e48:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bc80      	pop	{r7}
 8004e64:	4770      	bx	lr
	...

08004e68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d005      	beq.n	8004e8c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2204      	movs	r2, #4
 8004e84:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	73fb      	strb	r3, [r7, #15]
 8004e8a:	e051      	b.n	8004f30 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 020e 	bic.w	r2, r2, #14
 8004e9a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0201 	bic.w	r2, r2, #1
 8004eaa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a22      	ldr	r2, [pc, #136]	; (8004f3c <HAL_DMA_Abort_IT+0xd4>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d029      	beq.n	8004f0a <HAL_DMA_Abort_IT+0xa2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a21      	ldr	r2, [pc, #132]	; (8004f40 <HAL_DMA_Abort_IT+0xd8>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d022      	beq.n	8004f06 <HAL_DMA_Abort_IT+0x9e>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a1f      	ldr	r2, [pc, #124]	; (8004f44 <HAL_DMA_Abort_IT+0xdc>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d01a      	beq.n	8004f00 <HAL_DMA_Abort_IT+0x98>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a1e      	ldr	r2, [pc, #120]	; (8004f48 <HAL_DMA_Abort_IT+0xe0>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d012      	beq.n	8004efa <HAL_DMA_Abort_IT+0x92>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a1c      	ldr	r2, [pc, #112]	; (8004f4c <HAL_DMA_Abort_IT+0xe4>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00a      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x8c>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a1b      	ldr	r2, [pc, #108]	; (8004f50 <HAL_DMA_Abort_IT+0xe8>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d102      	bne.n	8004eee <HAL_DMA_Abort_IT+0x86>
 8004ee8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004eec:	e00e      	b.n	8004f0c <HAL_DMA_Abort_IT+0xa4>
 8004eee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ef2:	e00b      	b.n	8004f0c <HAL_DMA_Abort_IT+0xa4>
 8004ef4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ef8:	e008      	b.n	8004f0c <HAL_DMA_Abort_IT+0xa4>
 8004efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004efe:	e005      	b.n	8004f0c <HAL_DMA_Abort_IT+0xa4>
 8004f00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f04:	e002      	b.n	8004f0c <HAL_DMA_Abort_IT+0xa4>
 8004f06:	2310      	movs	r3, #16
 8004f08:	e000      	b.n	8004f0c <HAL_DMA_Abort_IT+0xa4>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	4a11      	ldr	r2, [pc, #68]	; (8004f54 <HAL_DMA_Abort_IT+0xec>)
 8004f0e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	4798      	blx	r3
    } 
  }
  return status;
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	40020008 	.word	0x40020008
 8004f40:	4002001c 	.word	0x4002001c
 8004f44:	40020030 	.word	0x40020030
 8004f48:	40020044 	.word	0x40020044
 8004f4c:	40020058 	.word	0x40020058
 8004f50:	4002006c 	.word	0x4002006c
 8004f54:	40020000 	.word	0x40020000

08004f58 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f74:	2204      	movs	r2, #4
 8004f76:	409a      	lsls	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d04f      	beq.n	8005020 <HAL_DMA_IRQHandler+0xc8>
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f003 0304 	and.w	r3, r3, #4
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d04a      	beq.n	8005020 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0320 	and.w	r3, r3, #32
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d107      	bne.n	8004fa8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0204 	bic.w	r2, r2, #4
 8004fa6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a66      	ldr	r2, [pc, #408]	; (8005148 <HAL_DMA_IRQHandler+0x1f0>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d029      	beq.n	8005006 <HAL_DMA_IRQHandler+0xae>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a65      	ldr	r2, [pc, #404]	; (800514c <HAL_DMA_IRQHandler+0x1f4>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d022      	beq.n	8005002 <HAL_DMA_IRQHandler+0xaa>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a63      	ldr	r2, [pc, #396]	; (8005150 <HAL_DMA_IRQHandler+0x1f8>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d01a      	beq.n	8004ffc <HAL_DMA_IRQHandler+0xa4>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a62      	ldr	r2, [pc, #392]	; (8005154 <HAL_DMA_IRQHandler+0x1fc>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d012      	beq.n	8004ff6 <HAL_DMA_IRQHandler+0x9e>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a60      	ldr	r2, [pc, #384]	; (8005158 <HAL_DMA_IRQHandler+0x200>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00a      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0x98>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a5f      	ldr	r2, [pc, #380]	; (800515c <HAL_DMA_IRQHandler+0x204>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d102      	bne.n	8004fea <HAL_DMA_IRQHandler+0x92>
 8004fe4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004fe8:	e00e      	b.n	8005008 <HAL_DMA_IRQHandler+0xb0>
 8004fea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004fee:	e00b      	b.n	8005008 <HAL_DMA_IRQHandler+0xb0>
 8004ff0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004ff4:	e008      	b.n	8005008 <HAL_DMA_IRQHandler+0xb0>
 8004ff6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ffa:	e005      	b.n	8005008 <HAL_DMA_IRQHandler+0xb0>
 8004ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005000:	e002      	b.n	8005008 <HAL_DMA_IRQHandler+0xb0>
 8005002:	2340      	movs	r3, #64	; 0x40
 8005004:	e000      	b.n	8005008 <HAL_DMA_IRQHandler+0xb0>
 8005006:	2304      	movs	r3, #4
 8005008:	4a55      	ldr	r2, [pc, #340]	; (8005160 <HAL_DMA_IRQHandler+0x208>)
 800500a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 8094 	beq.w	800513e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800501e:	e08e      	b.n	800513e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005024:	2202      	movs	r2, #2
 8005026:	409a      	lsls	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4013      	ands	r3, r2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d056      	beq.n	80050de <HAL_DMA_IRQHandler+0x186>
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d051      	beq.n	80050de <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0320 	and.w	r3, r3, #32
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10b      	bne.n	8005060 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 020a 	bic.w	r2, r2, #10
 8005056:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a38      	ldr	r2, [pc, #224]	; (8005148 <HAL_DMA_IRQHandler+0x1f0>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d029      	beq.n	80050be <HAL_DMA_IRQHandler+0x166>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a37      	ldr	r2, [pc, #220]	; (800514c <HAL_DMA_IRQHandler+0x1f4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d022      	beq.n	80050ba <HAL_DMA_IRQHandler+0x162>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a35      	ldr	r2, [pc, #212]	; (8005150 <HAL_DMA_IRQHandler+0x1f8>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d01a      	beq.n	80050b4 <HAL_DMA_IRQHandler+0x15c>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a34      	ldr	r2, [pc, #208]	; (8005154 <HAL_DMA_IRQHandler+0x1fc>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d012      	beq.n	80050ae <HAL_DMA_IRQHandler+0x156>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a32      	ldr	r2, [pc, #200]	; (8005158 <HAL_DMA_IRQHandler+0x200>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d00a      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x150>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a31      	ldr	r2, [pc, #196]	; (800515c <HAL_DMA_IRQHandler+0x204>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d102      	bne.n	80050a2 <HAL_DMA_IRQHandler+0x14a>
 800509c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80050a0:	e00e      	b.n	80050c0 <HAL_DMA_IRQHandler+0x168>
 80050a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050a6:	e00b      	b.n	80050c0 <HAL_DMA_IRQHandler+0x168>
 80050a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050ac:	e008      	b.n	80050c0 <HAL_DMA_IRQHandler+0x168>
 80050ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050b2:	e005      	b.n	80050c0 <HAL_DMA_IRQHandler+0x168>
 80050b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050b8:	e002      	b.n	80050c0 <HAL_DMA_IRQHandler+0x168>
 80050ba:	2320      	movs	r3, #32
 80050bc:	e000      	b.n	80050c0 <HAL_DMA_IRQHandler+0x168>
 80050be:	2302      	movs	r3, #2
 80050c0:	4a27      	ldr	r2, [pc, #156]	; (8005160 <HAL_DMA_IRQHandler+0x208>)
 80050c2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d034      	beq.n	800513e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80050dc:	e02f      	b.n	800513e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	2208      	movs	r2, #8
 80050e4:	409a      	lsls	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	4013      	ands	r3, r2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d028      	beq.n	8005140 <HAL_DMA_IRQHandler+0x1e8>
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d023      	beq.n	8005140 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 020e 	bic.w	r2, r2, #14
 8005106:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005110:	2101      	movs	r1, #1
 8005112:	fa01 f202 	lsl.w	r2, r1, r2
 8005116:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005132:	2b00      	cmp	r3, #0
 8005134:	d004      	beq.n	8005140 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	4798      	blx	r3
    }
  }
  return;
 800513e:	bf00      	nop
 8005140:	bf00      	nop
}
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	40020008 	.word	0x40020008
 800514c:	4002001c 	.word	0x4002001c
 8005150:	40020030 	.word	0x40020030
 8005154:	40020044 	.word	0x40020044
 8005158:	40020058 	.word	0x40020058
 800515c:	4002006c 	.word	0x4002006c
 8005160:	40020000 	.word	0x40020000

08005164 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8005170:	4618      	mov	r0, r3
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	bc80      	pop	{r7}
 8005178:	4770      	bx	lr

0800517a <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800517a:	b480      	push	{r7}
 800517c:	b085      	sub	sp, #20
 800517e:	af00      	add	r7, sp, #0
 8005180:	60f8      	str	r0, [r7, #12]
 8005182:	60b9      	str	r1, [r7, #8]
 8005184:	607a      	str	r2, [r7, #4]
 8005186:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005190:	2101      	movs	r1, #1
 8005192:	fa01 f202 	lsl.w	r2, r1, r2
 8005196:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	2b10      	cmp	r3, #16
 80051a6:	d108      	bne.n	80051ba <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80051b8:	e007      	b.n	80051ca <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	60da      	str	r2, [r3, #12]
}
 80051ca:	bf00      	nop
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bc80      	pop	{r7}
 80051d2:	4770      	bx	lr

080051d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b08b      	sub	sp, #44	; 0x2c
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80051de:	2300      	movs	r3, #0
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80051e2:	2300      	movs	r3, #0
 80051e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051e6:	e169      	b.n	80054bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80051e8:	2201      	movs	r2, #1
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	fa02 f303 	lsl.w	r3, r2, r3
 80051f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69fa      	ldr	r2, [r7, #28]
 80051f8:	4013      	ands	r3, r2
 80051fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	429a      	cmp	r2, r3
 8005202:	f040 8158 	bne.w	80054b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	4a9a      	ldr	r2, [pc, #616]	; (8005474 <HAL_GPIO_Init+0x2a0>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d05e      	beq.n	80052ce <HAL_GPIO_Init+0xfa>
 8005210:	4a98      	ldr	r2, [pc, #608]	; (8005474 <HAL_GPIO_Init+0x2a0>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d875      	bhi.n	8005302 <HAL_GPIO_Init+0x12e>
 8005216:	4a98      	ldr	r2, [pc, #608]	; (8005478 <HAL_GPIO_Init+0x2a4>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d058      	beq.n	80052ce <HAL_GPIO_Init+0xfa>
 800521c:	4a96      	ldr	r2, [pc, #600]	; (8005478 <HAL_GPIO_Init+0x2a4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d86f      	bhi.n	8005302 <HAL_GPIO_Init+0x12e>
 8005222:	4a96      	ldr	r2, [pc, #600]	; (800547c <HAL_GPIO_Init+0x2a8>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d052      	beq.n	80052ce <HAL_GPIO_Init+0xfa>
 8005228:	4a94      	ldr	r2, [pc, #592]	; (800547c <HAL_GPIO_Init+0x2a8>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d869      	bhi.n	8005302 <HAL_GPIO_Init+0x12e>
 800522e:	4a94      	ldr	r2, [pc, #592]	; (8005480 <HAL_GPIO_Init+0x2ac>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d04c      	beq.n	80052ce <HAL_GPIO_Init+0xfa>
 8005234:	4a92      	ldr	r2, [pc, #584]	; (8005480 <HAL_GPIO_Init+0x2ac>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d863      	bhi.n	8005302 <HAL_GPIO_Init+0x12e>
 800523a:	4a92      	ldr	r2, [pc, #584]	; (8005484 <HAL_GPIO_Init+0x2b0>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d046      	beq.n	80052ce <HAL_GPIO_Init+0xfa>
 8005240:	4a90      	ldr	r2, [pc, #576]	; (8005484 <HAL_GPIO_Init+0x2b0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d85d      	bhi.n	8005302 <HAL_GPIO_Init+0x12e>
 8005246:	2b12      	cmp	r3, #18
 8005248:	d82a      	bhi.n	80052a0 <HAL_GPIO_Init+0xcc>
 800524a:	2b12      	cmp	r3, #18
 800524c:	d859      	bhi.n	8005302 <HAL_GPIO_Init+0x12e>
 800524e:	a201      	add	r2, pc, #4	; (adr r2, 8005254 <HAL_GPIO_Init+0x80>)
 8005250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005254:	080052cf 	.word	0x080052cf
 8005258:	080052a9 	.word	0x080052a9
 800525c:	080052bb 	.word	0x080052bb
 8005260:	080052fd 	.word	0x080052fd
 8005264:	08005303 	.word	0x08005303
 8005268:	08005303 	.word	0x08005303
 800526c:	08005303 	.word	0x08005303
 8005270:	08005303 	.word	0x08005303
 8005274:	08005303 	.word	0x08005303
 8005278:	08005303 	.word	0x08005303
 800527c:	08005303 	.word	0x08005303
 8005280:	08005303 	.word	0x08005303
 8005284:	08005303 	.word	0x08005303
 8005288:	08005303 	.word	0x08005303
 800528c:	08005303 	.word	0x08005303
 8005290:	08005303 	.word	0x08005303
 8005294:	08005303 	.word	0x08005303
 8005298:	080052b1 	.word	0x080052b1
 800529c:	080052c5 	.word	0x080052c5
 80052a0:	4a79      	ldr	r2, [pc, #484]	; (8005488 <HAL_GPIO_Init+0x2b4>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d013      	beq.n	80052ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80052a6:	e02c      	b.n	8005302 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	623b      	str	r3, [r7, #32]
          break;
 80052ae:	e029      	b.n	8005304 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	3304      	adds	r3, #4
 80052b6:	623b      	str	r3, [r7, #32]
          break;
 80052b8:	e024      	b.n	8005304 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	3308      	adds	r3, #8
 80052c0:	623b      	str	r3, [r7, #32]
          break;
 80052c2:	e01f      	b.n	8005304 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	330c      	adds	r3, #12
 80052ca:	623b      	str	r3, [r7, #32]
          break;
 80052cc:	e01a      	b.n	8005304 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d102      	bne.n	80052dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80052d6:	2304      	movs	r3, #4
 80052d8:	623b      	str	r3, [r7, #32]
          break;
 80052da:	e013      	b.n	8005304 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d105      	bne.n	80052f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80052e4:	2308      	movs	r3, #8
 80052e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	69fa      	ldr	r2, [r7, #28]
 80052ec:	611a      	str	r2, [r3, #16]
          break;
 80052ee:	e009      	b.n	8005304 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80052f0:	2308      	movs	r3, #8
 80052f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	69fa      	ldr	r2, [r7, #28]
 80052f8:	615a      	str	r2, [r3, #20]
          break;
 80052fa:	e003      	b.n	8005304 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80052fc:	2300      	movs	r3, #0
 80052fe:	623b      	str	r3, [r7, #32]
          break;
 8005300:	e000      	b.n	8005304 <HAL_GPIO_Init+0x130>
          break;
 8005302:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	2bff      	cmp	r3, #255	; 0xff
 8005308:	d801      	bhi.n	800530e <HAL_GPIO_Init+0x13a>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	e001      	b.n	8005312 <HAL_GPIO_Init+0x13e>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	3304      	adds	r3, #4
 8005312:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	2bff      	cmp	r3, #255	; 0xff
 8005318:	d802      	bhi.n	8005320 <HAL_GPIO_Init+0x14c>
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	e002      	b.n	8005326 <HAL_GPIO_Init+0x152>
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	3b08      	subs	r3, #8
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	210f      	movs	r1, #15
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	fa01 f303 	lsl.w	r3, r1, r3
 8005334:	43db      	mvns	r3, r3
 8005336:	401a      	ands	r2, r3
 8005338:	6a39      	ldr	r1, [r7, #32]
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	fa01 f303 	lsl.w	r3, r1, r3
 8005340:	431a      	orrs	r2, r3
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800534e:	2b00      	cmp	r3, #0
 8005350:	f000 80b1 	beq.w	80054b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005354:	4b4d      	ldr	r3, [pc, #308]	; (800548c <HAL_GPIO_Init+0x2b8>)
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	4a4c      	ldr	r2, [pc, #304]	; (800548c <HAL_GPIO_Init+0x2b8>)
 800535a:	f043 0301 	orr.w	r3, r3, #1
 800535e:	6193      	str	r3, [r2, #24]
 8005360:	4b4a      	ldr	r3, [pc, #296]	; (800548c <HAL_GPIO_Init+0x2b8>)
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	60bb      	str	r3, [r7, #8]
 800536a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800536c:	4a48      	ldr	r2, [pc, #288]	; (8005490 <HAL_GPIO_Init+0x2bc>)
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	089b      	lsrs	r3, r3, #2
 8005372:	3302      	adds	r3, #2
 8005374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005378:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	f003 0303 	and.w	r3, r3, #3
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	220f      	movs	r2, #15
 8005384:	fa02 f303 	lsl.w	r3, r2, r3
 8005388:	43db      	mvns	r3, r3
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4013      	ands	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a40      	ldr	r2, [pc, #256]	; (8005494 <HAL_GPIO_Init+0x2c0>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d013      	beq.n	80053c0 <HAL_GPIO_Init+0x1ec>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a3f      	ldr	r2, [pc, #252]	; (8005498 <HAL_GPIO_Init+0x2c4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d00d      	beq.n	80053bc <HAL_GPIO_Init+0x1e8>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a3e      	ldr	r2, [pc, #248]	; (800549c <HAL_GPIO_Init+0x2c8>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d007      	beq.n	80053b8 <HAL_GPIO_Init+0x1e4>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a3d      	ldr	r2, [pc, #244]	; (80054a0 <HAL_GPIO_Init+0x2cc>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d101      	bne.n	80053b4 <HAL_GPIO_Init+0x1e0>
 80053b0:	2303      	movs	r3, #3
 80053b2:	e006      	b.n	80053c2 <HAL_GPIO_Init+0x1ee>
 80053b4:	2304      	movs	r3, #4
 80053b6:	e004      	b.n	80053c2 <HAL_GPIO_Init+0x1ee>
 80053b8:	2302      	movs	r3, #2
 80053ba:	e002      	b.n	80053c2 <HAL_GPIO_Init+0x1ee>
 80053bc:	2301      	movs	r3, #1
 80053be:	e000      	b.n	80053c2 <HAL_GPIO_Init+0x1ee>
 80053c0:	2300      	movs	r3, #0
 80053c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053c4:	f002 0203 	and.w	r2, r2, #3
 80053c8:	0092      	lsls	r2, r2, #2
 80053ca:	4093      	lsls	r3, r2
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80053d2:	492f      	ldr	r1, [pc, #188]	; (8005490 <HAL_GPIO_Init+0x2bc>)
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	089b      	lsrs	r3, r3, #2
 80053d8:	3302      	adds	r3, #2
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d006      	beq.n	80053fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80053ec:	4b2d      	ldr	r3, [pc, #180]	; (80054a4 <HAL_GPIO_Init+0x2d0>)
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	492c      	ldr	r1, [pc, #176]	; (80054a4 <HAL_GPIO_Init+0x2d0>)
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	608b      	str	r3, [r1, #8]
 80053f8:	e006      	b.n	8005408 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80053fa:	4b2a      	ldr	r3, [pc, #168]	; (80054a4 <HAL_GPIO_Init+0x2d0>)
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	43db      	mvns	r3, r3
 8005402:	4928      	ldr	r1, [pc, #160]	; (80054a4 <HAL_GPIO_Init+0x2d0>)
 8005404:	4013      	ands	r3, r2
 8005406:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d006      	beq.n	8005422 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005414:	4b23      	ldr	r3, [pc, #140]	; (80054a4 <HAL_GPIO_Init+0x2d0>)
 8005416:	68da      	ldr	r2, [r3, #12]
 8005418:	4922      	ldr	r1, [pc, #136]	; (80054a4 <HAL_GPIO_Init+0x2d0>)
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	4313      	orrs	r3, r2
 800541e:	60cb      	str	r3, [r1, #12]
 8005420:	e006      	b.n	8005430 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005422:	4b20      	ldr	r3, [pc, #128]	; (80054a4 <HAL_GPIO_Init+0x2d0>)
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	43db      	mvns	r3, r3
 800542a:	491e      	ldr	r1, [pc, #120]	; (80054a4 <HAL_GPIO_Init+0x2d0>)
 800542c:	4013      	ands	r3, r2
 800542e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d006      	beq.n	800544a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800543c:	4b19      	ldr	r3, [pc, #100]	; (80054a4 <HAL_GPIO_Init+0x2d0>)
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	4918      	ldr	r1, [pc, #96]	; (80054a4 <HAL_GPIO_Init+0x2d0>)
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	4313      	orrs	r3, r2
 8005446:	604b      	str	r3, [r1, #4]
 8005448:	e006      	b.n	8005458 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800544a:	4b16      	ldr	r3, [pc, #88]	; (80054a4 <HAL_GPIO_Init+0x2d0>)
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	43db      	mvns	r3, r3
 8005452:	4914      	ldr	r1, [pc, #80]	; (80054a4 <HAL_GPIO_Init+0x2d0>)
 8005454:	4013      	ands	r3, r2
 8005456:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d021      	beq.n	80054a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005464:	4b0f      	ldr	r3, [pc, #60]	; (80054a4 <HAL_GPIO_Init+0x2d0>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	490e      	ldr	r1, [pc, #56]	; (80054a4 <HAL_GPIO_Init+0x2d0>)
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	4313      	orrs	r3, r2
 800546e:	600b      	str	r3, [r1, #0]
 8005470:	e021      	b.n	80054b6 <HAL_GPIO_Init+0x2e2>
 8005472:	bf00      	nop
 8005474:	10320000 	.word	0x10320000
 8005478:	10310000 	.word	0x10310000
 800547c:	10220000 	.word	0x10220000
 8005480:	10210000 	.word	0x10210000
 8005484:	10120000 	.word	0x10120000
 8005488:	10110000 	.word	0x10110000
 800548c:	40021000 	.word	0x40021000
 8005490:	40010000 	.word	0x40010000
 8005494:	40010800 	.word	0x40010800
 8005498:	40010c00 	.word	0x40010c00
 800549c:	40011000 	.word	0x40011000
 80054a0:	40011400 	.word	0x40011400
 80054a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80054a8:	4b0b      	ldr	r3, [pc, #44]	; (80054d8 <HAL_GPIO_Init+0x304>)
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	43db      	mvns	r3, r3
 80054b0:	4909      	ldr	r1, [pc, #36]	; (80054d8 <HAL_GPIO_Init+0x304>)
 80054b2:	4013      	ands	r3, r2
 80054b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	3301      	adds	r3, #1
 80054ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	fa22 f303 	lsr.w	r3, r2, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f47f ae8e 	bne.w	80051e8 <HAL_GPIO_Init+0x14>
  }
}
 80054cc:	bf00      	nop
 80054ce:	bf00      	nop
 80054d0:	372c      	adds	r7, #44	; 0x2c
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bc80      	pop	{r7}
 80054d6:	4770      	bx	lr
 80054d8:	40010400 	.word	0x40010400

080054dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	460b      	mov	r3, r1
 80054e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	887b      	ldrh	r3, [r7, #2]
 80054ee:	4013      	ands	r3, r2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80054f4:	2301      	movs	r3, #1
 80054f6:	73fb      	strb	r3, [r7, #15]
 80054f8:	e001      	b.n	80054fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80054fa:	2300      	movs	r3, #0
 80054fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80054fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	bc80      	pop	{r7}
 8005508:	4770      	bx	lr

0800550a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	460b      	mov	r3, r1
 8005514:	807b      	strh	r3, [r7, #2]
 8005516:	4613      	mov	r3, r2
 8005518:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800551a:	787b      	ldrb	r3, [r7, #1]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005520:	887a      	ldrh	r2, [r7, #2]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005526:	e003      	b.n	8005530 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005528:	887b      	ldrh	r3, [r7, #2]
 800552a:	041a      	lsls	r2, r3, #16
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	611a      	str	r2, [r3, #16]
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	bc80      	pop	{r7}
 8005538:	4770      	bx	lr

0800553a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800553a:	b480      	push	{r7}
 800553c:	b085      	sub	sp, #20
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	460b      	mov	r3, r1
 8005544:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800554c:	887a      	ldrh	r2, [r7, #2]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4013      	ands	r3, r2
 8005552:	041a      	lsls	r2, r3, #16
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	43d9      	mvns	r1, r3
 8005558:	887b      	ldrh	r3, [r7, #2]
 800555a:	400b      	ands	r3, r1
 800555c:	431a      	orrs	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	611a      	str	r2, [r3, #16]
}
 8005562:	bf00      	nop
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	bc80      	pop	{r7}
 800556a:	4770      	bx	lr

0800556c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e12b      	b.n	80057d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d106      	bne.n	8005598 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7fc fe66 	bl	8002264 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2224      	movs	r2, #36	; 0x24
 800559c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 0201 	bic.w	r2, r2, #1
 80055ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80055d0:	f002 f9e4 	bl	800799c <HAL_RCC_GetPCLK1Freq>
 80055d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	4a81      	ldr	r2, [pc, #516]	; (80057e0 <HAL_I2C_Init+0x274>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d807      	bhi.n	80055f0 <HAL_I2C_Init+0x84>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4a80      	ldr	r2, [pc, #512]	; (80057e4 <HAL_I2C_Init+0x278>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	bf94      	ite	ls
 80055e8:	2301      	movls	r3, #1
 80055ea:	2300      	movhi	r3, #0
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	e006      	b.n	80055fe <HAL_I2C_Init+0x92>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4a7d      	ldr	r2, [pc, #500]	; (80057e8 <HAL_I2C_Init+0x27c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	bf94      	ite	ls
 80055f8:	2301      	movls	r3, #1
 80055fa:	2300      	movhi	r3, #0
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e0e7      	b.n	80057d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4a78      	ldr	r2, [pc, #480]	; (80057ec <HAL_I2C_Init+0x280>)
 800560a:	fba2 2303 	umull	r2, r3, r2, r3
 800560e:	0c9b      	lsrs	r3, r3, #18
 8005610:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	430a      	orrs	r2, r1
 8005624:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	4a6a      	ldr	r2, [pc, #424]	; (80057e0 <HAL_I2C_Init+0x274>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d802      	bhi.n	8005640 <HAL_I2C_Init+0xd4>
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	3301      	adds	r3, #1
 800563e:	e009      	b.n	8005654 <HAL_I2C_Init+0xe8>
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005646:	fb02 f303 	mul.w	r3, r2, r3
 800564a:	4a69      	ldr	r2, [pc, #420]	; (80057f0 <HAL_I2C_Init+0x284>)
 800564c:	fba2 2303 	umull	r2, r3, r2, r3
 8005650:	099b      	lsrs	r3, r3, #6
 8005652:	3301      	adds	r3, #1
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	6812      	ldr	r2, [r2, #0]
 8005658:	430b      	orrs	r3, r1
 800565a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005666:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	495c      	ldr	r1, [pc, #368]	; (80057e0 <HAL_I2C_Init+0x274>)
 8005670:	428b      	cmp	r3, r1
 8005672:	d819      	bhi.n	80056a8 <HAL_I2C_Init+0x13c>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	1e59      	subs	r1, r3, #1
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005682:	1c59      	adds	r1, r3, #1
 8005684:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005688:	400b      	ands	r3, r1
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <HAL_I2C_Init+0x138>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	1e59      	subs	r1, r3, #1
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	fbb1 f3f3 	udiv	r3, r1, r3
 800569c:	3301      	adds	r3, #1
 800569e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056a2:	e051      	b.n	8005748 <HAL_I2C_Init+0x1dc>
 80056a4:	2304      	movs	r3, #4
 80056a6:	e04f      	b.n	8005748 <HAL_I2C_Init+0x1dc>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d111      	bne.n	80056d4 <HAL_I2C_Init+0x168>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	1e58      	subs	r0, r3, #1
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6859      	ldr	r1, [r3, #4]
 80056b8:	460b      	mov	r3, r1
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	440b      	add	r3, r1
 80056be:	fbb0 f3f3 	udiv	r3, r0, r3
 80056c2:	3301      	adds	r3, #1
 80056c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	bf0c      	ite	eq
 80056cc:	2301      	moveq	r3, #1
 80056ce:	2300      	movne	r3, #0
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	e012      	b.n	80056fa <HAL_I2C_Init+0x18e>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	1e58      	subs	r0, r3, #1
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6859      	ldr	r1, [r3, #4]
 80056dc:	460b      	mov	r3, r1
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	440b      	add	r3, r1
 80056e2:	0099      	lsls	r1, r3, #2
 80056e4:	440b      	add	r3, r1
 80056e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80056ea:	3301      	adds	r3, #1
 80056ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	bf0c      	ite	eq
 80056f4:	2301      	moveq	r3, #1
 80056f6:	2300      	movne	r3, #0
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <HAL_I2C_Init+0x196>
 80056fe:	2301      	movs	r3, #1
 8005700:	e022      	b.n	8005748 <HAL_I2C_Init+0x1dc>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10e      	bne.n	8005728 <HAL_I2C_Init+0x1bc>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	1e58      	subs	r0, r3, #1
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6859      	ldr	r1, [r3, #4]
 8005712:	460b      	mov	r3, r1
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	440b      	add	r3, r1
 8005718:	fbb0 f3f3 	udiv	r3, r0, r3
 800571c:	3301      	adds	r3, #1
 800571e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005726:	e00f      	b.n	8005748 <HAL_I2C_Init+0x1dc>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	1e58      	subs	r0, r3, #1
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6859      	ldr	r1, [r3, #4]
 8005730:	460b      	mov	r3, r1
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	440b      	add	r3, r1
 8005736:	0099      	lsls	r1, r3, #2
 8005738:	440b      	add	r3, r1
 800573a:	fbb0 f3f3 	udiv	r3, r0, r3
 800573e:	3301      	adds	r3, #1
 8005740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005744:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005748:	6879      	ldr	r1, [r7, #4]
 800574a:	6809      	ldr	r1, [r1, #0]
 800574c:	4313      	orrs	r3, r2
 800574e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	69da      	ldr	r2, [r3, #28]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	431a      	orrs	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	430a      	orrs	r2, r1
 800576a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005776:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	6911      	ldr	r1, [r2, #16]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	68d2      	ldr	r2, [r2, #12]
 8005782:	4311      	orrs	r1, r2
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	6812      	ldr	r2, [r2, #0]
 8005788:	430b      	orrs	r3, r1
 800578a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	695a      	ldr	r2, [r3, #20]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	431a      	orrs	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	430a      	orrs	r2, r1
 80057a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f042 0201 	orr.w	r2, r2, #1
 80057b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2220      	movs	r2, #32
 80057c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	000186a0 	.word	0x000186a0
 80057e4:	001e847f 	.word	0x001e847f
 80057e8:	003d08ff 	.word	0x003d08ff
 80057ec:	431bde83 	.word	0x431bde83
 80057f0:	10624dd3 	.word	0x10624dd3

080057f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b088      	sub	sp, #32
 80057f8:	af02      	add	r7, sp, #8
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	607a      	str	r2, [r7, #4]
 80057fe:	461a      	mov	r2, r3
 8005800:	460b      	mov	r3, r1
 8005802:	817b      	strh	r3, [r7, #10]
 8005804:	4613      	mov	r3, r2
 8005806:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005808:	f7ff f8fc 	bl	8004a04 <HAL_GetTick>
 800580c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b20      	cmp	r3, #32
 8005818:	f040 80e0 	bne.w	80059dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	2319      	movs	r3, #25
 8005822:	2201      	movs	r2, #1
 8005824:	4970      	ldr	r1, [pc, #448]	; (80059e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f001 fab8 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005832:	2302      	movs	r3, #2
 8005834:	e0d3      	b.n	80059de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_I2C_Master_Transmit+0x50>
 8005840:	2302      	movs	r3, #2
 8005842:	e0cc      	b.n	80059de <HAL_I2C_Master_Transmit+0x1ea>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b01      	cmp	r3, #1
 8005858:	d007      	beq.n	800586a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f042 0201 	orr.w	r2, r2, #1
 8005868:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005878:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2221      	movs	r2, #33	; 0x21
 800587e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2210      	movs	r2, #16
 8005886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	893a      	ldrh	r2, [r7, #8]
 800589a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	4a50      	ldr	r2, [pc, #320]	; (80059ec <HAL_I2C_Master_Transmit+0x1f8>)
 80058aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80058ac:	8979      	ldrh	r1, [r7, #10]
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	6a3a      	ldr	r2, [r7, #32]
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f000 ffa4 	bl	8006800 <I2C_MasterRequestWrite>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e08d      	b.n	80059de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058c2:	2300      	movs	r3, #0
 80058c4:	613b      	str	r3, [r7, #16]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	613b      	str	r3, [r7, #16]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	613b      	str	r3, [r7, #16]
 80058d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80058d8:	e066      	b.n	80059a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	6a39      	ldr	r1, [r7, #32]
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f001 fb76 	bl	8006fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00d      	beq.n	8005906 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	d107      	bne.n	8005902 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005900:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e06b      	b.n	80059de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	781a      	ldrb	r2, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005920:	b29b      	uxth	r3, r3
 8005922:	3b01      	subs	r3, #1
 8005924:	b29a      	uxth	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800592e:	3b01      	subs	r3, #1
 8005930:	b29a      	uxth	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	f003 0304 	and.w	r3, r3, #4
 8005940:	2b04      	cmp	r3, #4
 8005942:	d11b      	bne.n	800597c <HAL_I2C_Master_Transmit+0x188>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005948:	2b00      	cmp	r3, #0
 800594a:	d017      	beq.n	800597c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	781a      	ldrb	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005966:	b29b      	uxth	r3, r3
 8005968:	3b01      	subs	r3, #1
 800596a:	b29a      	uxth	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	6a39      	ldr	r1, [r7, #32]
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f001 fb6d 	bl	8007060 <I2C_WaitOnBTFFlagUntilTimeout>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00d      	beq.n	80059a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005990:	2b04      	cmp	r3, #4
 8005992:	d107      	bne.n	80059a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e01a      	b.n	80059de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d194      	bne.n	80058da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2220      	movs	r2, #32
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80059d8:	2300      	movs	r3, #0
 80059da:	e000      	b.n	80059de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80059dc:	2302      	movs	r3, #2
  }
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	00100002 	.word	0x00100002
 80059ec:	ffff0000 	.word	0xffff0000

080059f0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b08c      	sub	sp, #48	; 0x30
 80059f4:	af02      	add	r7, sp, #8
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	607a      	str	r2, [r7, #4]
 80059fa:	461a      	mov	r2, r3
 80059fc:	460b      	mov	r3, r1
 80059fe:	817b      	strh	r3, [r7, #10]
 8005a00:	4613      	mov	r3, r2
 8005a02:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005a04:	2300      	movs	r3, #0
 8005a06:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a08:	f7fe fffc 	bl	8004a04 <HAL_GetTick>
 8005a0c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b20      	cmp	r3, #32
 8005a18:	f040 824b 	bne.w	8005eb2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	2319      	movs	r3, #25
 8005a22:	2201      	movs	r2, #1
 8005a24:	497f      	ldr	r1, [pc, #508]	; (8005c24 <HAL_I2C_Master_Receive+0x234>)
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f001 f9b8 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8005a32:	2302      	movs	r3, #2
 8005a34:	e23e      	b.n	8005eb4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d101      	bne.n	8005a44 <HAL_I2C_Master_Receive+0x54>
 8005a40:	2302      	movs	r3, #2
 8005a42:	e237      	b.n	8005eb4 <HAL_I2C_Master_Receive+0x4c4>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d007      	beq.n	8005a6a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f042 0201 	orr.w	r2, r2, #1
 8005a68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2222      	movs	r2, #34	; 0x22
 8005a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2210      	movs	r2, #16
 8005a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	893a      	ldrh	r2, [r7, #8]
 8005a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	4a5f      	ldr	r2, [pc, #380]	; (8005c28 <HAL_I2C_Master_Receive+0x238>)
 8005aaa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005aac:	8979      	ldrh	r1, [r7, #10]
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 ff26 	bl	8006904 <I2C_MasterRequestRead>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e1f8      	b.n	8005eb4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d113      	bne.n	8005af2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aca:	2300      	movs	r3, #0
 8005acc:	61fb      	str	r3, [r7, #28]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	61fb      	str	r3, [r7, #28]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	61fb      	str	r3, [r7, #28]
 8005ade:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	e1cc      	b.n	8005e8c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d11e      	bne.n	8005b38 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b0a:	b672      	cpsid	i
}
 8005b0c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b0e:	2300      	movs	r3, #0
 8005b10:	61bb      	str	r3, [r7, #24]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	61bb      	str	r3, [r7, #24]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	61bb      	str	r3, [r7, #24]
 8005b22:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005b34:	b662      	cpsie	i
}
 8005b36:	e035      	b.n	8005ba4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d11e      	bne.n	8005b7e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b50:	b672      	cpsid	i
}
 8005b52:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b54:	2300      	movs	r3, #0
 8005b56:	617b      	str	r3, [r7, #20]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	617b      	str	r3, [r7, #20]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005b7a:	b662      	cpsie	i
}
 8005b7c:	e012      	b.n	8005ba4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b8e:	2300      	movs	r3, #0
 8005b90:	613b      	str	r3, [r7, #16]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	613b      	str	r3, [r7, #16]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	613b      	str	r3, [r7, #16]
 8005ba2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005ba4:	e172      	b.n	8005e8c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005baa:	2b03      	cmp	r3, #3
 8005bac:	f200 811f 	bhi.w	8005dee <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d123      	bne.n	8005c00 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f001 fa97 	bl	80070f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e173      	b.n	8005eb4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	691a      	ldr	r2, [r3, #16]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd6:	b2d2      	uxtb	r2, r2
 8005bd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	1c5a      	adds	r2, r3, #1
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be8:	3b01      	subs	r3, #1
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005bfe:	e145      	b.n	8005e8c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d152      	bne.n	8005cae <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0e:	2200      	movs	r2, #0
 8005c10:	4906      	ldr	r1, [pc, #24]	; (8005c2c <HAL_I2C_Master_Receive+0x23c>)
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f001 f8c2 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d008      	beq.n	8005c30 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e148      	b.n	8005eb4 <HAL_I2C_Master_Receive+0x4c4>
 8005c22:	bf00      	nop
 8005c24:	00100002 	.word	0x00100002
 8005c28:	ffff0000 	.word	0xffff0000
 8005c2c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005c30:	b672      	cpsid	i
}
 8005c32:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	691a      	ldr	r2, [r3, #16]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c60:	3b01      	subs	r3, #1
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005c76:	b662      	cpsie	i
}
 8005c78:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	691a      	ldr	r2, [r3, #16]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c84:	b2d2      	uxtb	r2, r2
 8005c86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c96:	3b01      	subs	r3, #1
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005cac:	e0ee      	b.n	8005e8c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	4981      	ldr	r1, [pc, #516]	; (8005ebc <HAL_I2C_Master_Receive+0x4cc>)
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f001 f86f 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e0f5      	b.n	8005eb4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cd6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005cd8:	b672      	cpsid	i
}
 8005cda:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	691a      	ldr	r2, [r3, #16]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	b2d2      	uxtb	r2, r2
 8005ce8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	3b01      	subs	r3, #1
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005d0e:	4b6c      	ldr	r3, [pc, #432]	; (8005ec0 <HAL_I2C_Master_Receive+0x4d0>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	08db      	lsrs	r3, r3, #3
 8005d14:	4a6b      	ldr	r2, [pc, #428]	; (8005ec4 <HAL_I2C_Master_Receive+0x4d4>)
 8005d16:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1a:	0a1a      	lsrs	r2, r3, #8
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	00da      	lsls	r2, r3, #3
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d118      	bne.n	8005d66 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	f043 0220 	orr.w	r2, r3, #32
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005d56:	b662      	cpsie	i
}
 8005d58:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e0a6      	b.n	8005eb4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	f003 0304 	and.w	r3, r3, #4
 8005d70:	2b04      	cmp	r3, #4
 8005d72:	d1d9      	bne.n	8005d28 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	691a      	ldr	r2, [r3, #16]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005da0:	3b01      	subs	r3, #1
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	3b01      	subs	r3, #1
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005db6:	b662      	cpsie	i
}
 8005db8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	691a      	ldr	r2, [r3, #16]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	b2d2      	uxtb	r2, r2
 8005dc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dcc:	1c5a      	adds	r2, r3, #1
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005dec:	e04e      	b.n	8005e8c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f001 f97c 	bl	80070f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e058      	b.n	8005eb4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	691a      	ldr	r2, [r3, #16]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	b2d2      	uxtb	r2, r2
 8005e0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	1c5a      	adds	r2, r3, #1
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	f003 0304 	and.w	r3, r3, #4
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d124      	bne.n	8005e8c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e46:	2b03      	cmp	r3, #3
 8005e48:	d107      	bne.n	8005e5a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e58:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	691a      	ldr	r2, [r3, #16]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	b2d2      	uxtb	r2, r2
 8005e66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e76:	3b01      	subs	r3, #1
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	3b01      	subs	r3, #1
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f47f ae88 	bne.w	8005ba6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	e000      	b.n	8005eb4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8005eb2:	2302      	movs	r3, #2
  }
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3728      	adds	r7, #40	; 0x28
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	00010004 	.word	0x00010004
 8005ec0:	20000030 	.word	0x20000030
 8005ec4:	14f8b589 	.word	0x14f8b589

08005ec8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af02      	add	r7, sp, #8
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	4608      	mov	r0, r1
 8005ed2:	4611      	mov	r1, r2
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	817b      	strh	r3, [r7, #10]
 8005eda:	460b      	mov	r3, r1
 8005edc:	813b      	strh	r3, [r7, #8]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ee2:	f7fe fd8f 	bl	8004a04 <HAL_GetTick>
 8005ee6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b20      	cmp	r3, #32
 8005ef2:	f040 80d9 	bne.w	80060a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	2319      	movs	r3, #25
 8005efc:	2201      	movs	r2, #1
 8005efe:	496d      	ldr	r1, [pc, #436]	; (80060b4 <HAL_I2C_Mem_Write+0x1ec>)
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 ff4b 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	e0cc      	b.n	80060aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d101      	bne.n	8005f1e <HAL_I2C_Mem_Write+0x56>
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	e0c5      	b.n	80060aa <HAL_I2C_Mem_Write+0x1e2>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d007      	beq.n	8005f44 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f042 0201 	orr.w	r2, r2, #1
 8005f42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2221      	movs	r2, #33	; 0x21
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2240      	movs	r2, #64	; 0x40
 8005f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6a3a      	ldr	r2, [r7, #32]
 8005f6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005f74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4a4d      	ldr	r2, [pc, #308]	; (80060b8 <HAL_I2C_Mem_Write+0x1f0>)
 8005f84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f86:	88f8      	ldrh	r0, [r7, #6]
 8005f88:	893a      	ldrh	r2, [r7, #8]
 8005f8a:	8979      	ldrh	r1, [r7, #10]
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	9301      	str	r3, [sp, #4]
 8005f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	4603      	mov	r3, r0
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 fd82 	bl	8006aa0 <I2C_RequestMemoryWrite>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d052      	beq.n	8006048 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e081      	b.n	80060aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f001 f810 	bl	8006fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00d      	beq.n	8005fd2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	d107      	bne.n	8005fce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fcc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e06b      	b.n	80060aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd6:	781a      	ldrb	r2, [r3, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe2:	1c5a      	adds	r2, r3, #1
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b04      	cmp	r3, #4
 800600e:	d11b      	bne.n	8006048 <HAL_I2C_Mem_Write+0x180>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006014:	2b00      	cmp	r3, #0
 8006016:	d017      	beq.n	8006048 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601c:	781a      	ldrb	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006028:	1c5a      	adds	r2, r3, #1
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006032:	3b01      	subs	r3, #1
 8006034:	b29a      	uxth	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800603e:	b29b      	uxth	r3, r3
 8006040:	3b01      	subs	r3, #1
 8006042:	b29a      	uxth	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1aa      	bne.n	8005fa6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f001 f803 	bl	8007060 <I2C_WaitOnBTFFlagUntilTimeout>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00d      	beq.n	800607c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006064:	2b04      	cmp	r3, #4
 8006066:	d107      	bne.n	8006078 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006076:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e016      	b.n	80060aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800608a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2220      	movs	r2, #32
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80060a4:	2300      	movs	r3, #0
 80060a6:	e000      	b.n	80060aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80060a8:	2302      	movs	r3, #2
  }
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	00100002 	.word	0x00100002
 80060b8:	ffff0000 	.word	0xffff0000

080060bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b08c      	sub	sp, #48	; 0x30
 80060c0:	af02      	add	r7, sp, #8
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	4608      	mov	r0, r1
 80060c6:	4611      	mov	r1, r2
 80060c8:	461a      	mov	r2, r3
 80060ca:	4603      	mov	r3, r0
 80060cc:	817b      	strh	r3, [r7, #10]
 80060ce:	460b      	mov	r3, r1
 80060d0:	813b      	strh	r3, [r7, #8]
 80060d2:	4613      	mov	r3, r2
 80060d4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80060d6:	2300      	movs	r3, #0
 80060d8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80060da:	f7fe fc93 	bl	8004a04 <HAL_GetTick>
 80060de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b20      	cmp	r3, #32
 80060ea:	f040 8250 	bne.w	800658e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	2319      	movs	r3, #25
 80060f4:	2201      	movs	r2, #1
 80060f6:	4982      	ldr	r1, [pc, #520]	; (8006300 <HAL_I2C_Mem_Read+0x244>)
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 fe4f 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8006104:	2302      	movs	r3, #2
 8006106:	e243      	b.n	8006590 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800610e:	2b01      	cmp	r3, #1
 8006110:	d101      	bne.n	8006116 <HAL_I2C_Mem_Read+0x5a>
 8006112:	2302      	movs	r3, #2
 8006114:	e23c      	b.n	8006590 <HAL_I2C_Mem_Read+0x4d4>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b01      	cmp	r3, #1
 800612a:	d007      	beq.n	800613c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 0201 	orr.w	r2, r2, #1
 800613a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800614a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2222      	movs	r2, #34	; 0x22
 8006150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2240      	movs	r2, #64	; 0x40
 8006158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006166:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800616c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006172:	b29a      	uxth	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4a62      	ldr	r2, [pc, #392]	; (8006304 <HAL_I2C_Mem_Read+0x248>)
 800617c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800617e:	88f8      	ldrh	r0, [r7, #6]
 8006180:	893a      	ldrh	r2, [r7, #8]
 8006182:	8979      	ldrh	r1, [r7, #10]
 8006184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006186:	9301      	str	r3, [sp, #4]
 8006188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	4603      	mov	r3, r0
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f000 fd1c 	bl	8006bcc <I2C_RequestMemoryRead>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e1f8      	b.n	8006590 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d113      	bne.n	80061ce <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061a6:	2300      	movs	r3, #0
 80061a8:	61fb      	str	r3, [r7, #28]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	61fb      	str	r3, [r7, #28]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	61fb      	str	r3, [r7, #28]
 80061ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061ca:	601a      	str	r2, [r3, #0]
 80061cc:	e1cc      	b.n	8006568 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d11e      	bne.n	8006214 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80061e6:	b672      	cpsid	i
}
 80061e8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061ea:	2300      	movs	r3, #0
 80061ec:	61bb      	str	r3, [r7, #24]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	61bb      	str	r3, [r7, #24]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	61bb      	str	r3, [r7, #24]
 80061fe:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800620e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006210:	b662      	cpsie	i
}
 8006212:	e035      	b.n	8006280 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006218:	2b02      	cmp	r3, #2
 800621a:	d11e      	bne.n	800625a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800622a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800622c:	b672      	cpsid	i
}
 800622e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006230:	2300      	movs	r3, #0
 8006232:	617b      	str	r3, [r7, #20]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	617b      	str	r3, [r7, #20]
 8006244:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006254:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006256:	b662      	cpsie	i
}
 8006258:	e012      	b.n	8006280 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006268:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800626a:	2300      	movs	r3, #0
 800626c:	613b      	str	r3, [r7, #16]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	695b      	ldr	r3, [r3, #20]
 8006274:	613b      	str	r3, [r7, #16]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	613b      	str	r3, [r7, #16]
 800627e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006280:	e172      	b.n	8006568 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006286:	2b03      	cmp	r3, #3
 8006288:	f200 811f 	bhi.w	80064ca <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006290:	2b01      	cmp	r3, #1
 8006292:	d123      	bne.n	80062dc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006296:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 ff29 	bl	80070f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e173      	b.n	8006590 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	691a      	ldr	r2, [r3, #16]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c4:	3b01      	subs	r3, #1
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	3b01      	subs	r3, #1
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062da:	e145      	b.n	8006568 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d152      	bne.n	800638a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	9300      	str	r3, [sp, #0]
 80062e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ea:	2200      	movs	r2, #0
 80062ec:	4906      	ldr	r1, [pc, #24]	; (8006308 <HAL_I2C_Mem_Read+0x24c>)
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f000 fd54 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d008      	beq.n	800630c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e148      	b.n	8006590 <HAL_I2C_Mem_Read+0x4d4>
 80062fe:	bf00      	nop
 8006300:	00100002 	.word	0x00100002
 8006304:	ffff0000 	.word	0xffff0000
 8006308:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800630c:	b672      	cpsid	i
}
 800630e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800631e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	691a      	ldr	r2, [r3, #16]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632a:	b2d2      	uxtb	r2, r2
 800632c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006332:	1c5a      	adds	r2, r3, #1
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800633c:	3b01      	subs	r3, #1
 800633e:	b29a      	uxth	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006348:	b29b      	uxth	r3, r3
 800634a:	3b01      	subs	r3, #1
 800634c:	b29a      	uxth	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006352:	b662      	cpsie	i
}
 8006354:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	691a      	ldr	r2, [r3, #16]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	1c5a      	adds	r2, r3, #1
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006372:	3b01      	subs	r3, #1
 8006374:	b29a      	uxth	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800637e:	b29b      	uxth	r3, r3
 8006380:	3b01      	subs	r3, #1
 8006382:	b29a      	uxth	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006388:	e0ee      	b.n	8006568 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006390:	2200      	movs	r2, #0
 8006392:	4981      	ldr	r1, [pc, #516]	; (8006598 <HAL_I2C_Mem_Read+0x4dc>)
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f000 fd01 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d001      	beq.n	80063a4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e0f5      	b.n	8006590 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80063b4:	b672      	cpsid	i
}
 80063b6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	691a      	ldr	r2, [r3, #16]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063d4:	3b01      	subs	r3, #1
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	3b01      	subs	r3, #1
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80063ea:	4b6c      	ldr	r3, [pc, #432]	; (800659c <HAL_I2C_Mem_Read+0x4e0>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	08db      	lsrs	r3, r3, #3
 80063f0:	4a6b      	ldr	r2, [pc, #428]	; (80065a0 <HAL_I2C_Mem_Read+0x4e4>)
 80063f2:	fba2 2303 	umull	r2, r3, r2, r3
 80063f6:	0a1a      	lsrs	r2, r3, #8
 80063f8:	4613      	mov	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4413      	add	r3, r2
 80063fe:	00da      	lsls	r2, r3, #3
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	3b01      	subs	r3, #1
 8006408:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800640a:	6a3b      	ldr	r3, [r7, #32]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d118      	bne.n	8006442 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2220      	movs	r2, #32
 800641a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	f043 0220 	orr.w	r2, r3, #32
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006432:	b662      	cpsie	i
}
 8006434:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e0a6      	b.n	8006590 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b04      	cmp	r3, #4
 800644e:	d1d9      	bne.n	8006404 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800645e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	691a      	ldr	r2, [r3, #16]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646a:	b2d2      	uxtb	r2, r2
 800646c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	1c5a      	adds	r2, r3, #1
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800647c:	3b01      	subs	r3, #1
 800647e:	b29a      	uxth	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006488:	b29b      	uxth	r3, r3
 800648a:	3b01      	subs	r3, #1
 800648c:	b29a      	uxth	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006492:	b662      	cpsie	i
}
 8006494:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	691a      	ldr	r2, [r3, #16]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a0:	b2d2      	uxtb	r2, r2
 80064a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064b2:	3b01      	subs	r3, #1
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064be:	b29b      	uxth	r3, r3
 80064c0:	3b01      	subs	r3, #1
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064c8:	e04e      	b.n	8006568 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 fe0e 	bl	80070f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e058      	b.n	8006590 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	691a      	ldr	r2, [r3, #16]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e8:	b2d2      	uxtb	r2, r2
 80064ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064fa:	3b01      	subs	r3, #1
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006506:	b29b      	uxth	r3, r3
 8006508:	3b01      	subs	r3, #1
 800650a:	b29a      	uxth	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	f003 0304 	and.w	r3, r3, #4
 800651a:	2b04      	cmp	r3, #4
 800651c:	d124      	bne.n	8006568 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006522:	2b03      	cmp	r3, #3
 8006524:	d107      	bne.n	8006536 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006534:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	691a      	ldr	r2, [r3, #16]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006540:	b2d2      	uxtb	r2, r2
 8006542:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006548:	1c5a      	adds	r2, r3, #1
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006552:	3b01      	subs	r3, #1
 8006554:	b29a      	uxth	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800655e:	b29b      	uxth	r3, r3
 8006560:	3b01      	subs	r3, #1
 8006562:	b29a      	uxth	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800656c:	2b00      	cmp	r3, #0
 800656e:	f47f ae88 	bne.w	8006282 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2220      	movs	r2, #32
 8006576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	e000      	b.n	8006590 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800658e:	2302      	movs	r3, #2
  }
}
 8006590:	4618      	mov	r0, r3
 8006592:	3728      	adds	r7, #40	; 0x28
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	00010004 	.word	0x00010004
 800659c:	20000030 	.word	0x20000030
 80065a0:	14f8b589 	.word	0x14f8b589

080065a4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b08a      	sub	sp, #40	; 0x28
 80065a8:	af02      	add	r7, sp, #8
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	607a      	str	r2, [r7, #4]
 80065ae:	603b      	str	r3, [r7, #0]
 80065b0:	460b      	mov	r3, r1
 80065b2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80065b4:	f7fe fa26 	bl	8004a04 <HAL_GetTick>
 80065b8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b20      	cmp	r3, #32
 80065c8:	f040 8111 	bne.w	80067ee <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	2319      	movs	r3, #25
 80065d2:	2201      	movs	r2, #1
 80065d4:	4988      	ldr	r1, [pc, #544]	; (80067f8 <HAL_I2C_IsDeviceReady+0x254>)
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f000 fbe0 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80065e2:	2302      	movs	r3, #2
 80065e4:	e104      	b.n	80067f0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d101      	bne.n	80065f4 <HAL_I2C_IsDeviceReady+0x50>
 80065f0:	2302      	movs	r3, #2
 80065f2:	e0fd      	b.n	80067f0 <HAL_I2C_IsDeviceReady+0x24c>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b01      	cmp	r3, #1
 8006608:	d007      	beq.n	800661a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f042 0201 	orr.w	r2, r2, #1
 8006618:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006628:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2224      	movs	r2, #36	; 0x24
 800662e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	4a70      	ldr	r2, [pc, #448]	; (80067fc <HAL_I2C_IsDeviceReady+0x258>)
 800663c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800664c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2200      	movs	r2, #0
 8006656:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 fb9e 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00d      	beq.n	8006682 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006674:	d103      	bne.n	800667e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800667c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e0b6      	b.n	80067f0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006682:	897b      	ldrh	r3, [r7, #10]
 8006684:	b2db      	uxtb	r3, r3
 8006686:	461a      	mov	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006690:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006692:	f7fe f9b7 	bl	8004a04 <HAL_GetTick>
 8006696:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	bf0c      	ite	eq
 80066a6:	2301      	moveq	r3, #1
 80066a8:	2300      	movne	r3, #0
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066bc:	bf0c      	ite	eq
 80066be:	2301      	moveq	r3, #1
 80066c0:	2300      	movne	r3, #0
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80066c6:	e025      	b.n	8006714 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80066c8:	f7fe f99c 	bl	8004a04 <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d302      	bcc.n	80066de <HAL_I2C_IsDeviceReady+0x13a>
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d103      	bne.n	80066e6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	22a0      	movs	r2, #160	; 0xa0
 80066e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	f003 0302 	and.w	r3, r3, #2
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	bf0c      	ite	eq
 80066f4:	2301      	moveq	r3, #1
 80066f6:	2300      	movne	r3, #0
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800670a:	bf0c      	ite	eq
 800670c:	2301      	moveq	r3, #1
 800670e:	2300      	movne	r3, #0
 8006710:	b2db      	uxtb	r3, r3
 8006712:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2ba0      	cmp	r3, #160	; 0xa0
 800671e:	d005      	beq.n	800672c <HAL_I2C_IsDeviceReady+0x188>
 8006720:	7dfb      	ldrb	r3, [r7, #23]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d102      	bne.n	800672c <HAL_I2C_IsDeviceReady+0x188>
 8006726:	7dbb      	ldrb	r3, [r7, #22]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d0cd      	beq.n	80066c8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2220      	movs	r2, #32
 8006730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	2b02      	cmp	r3, #2
 8006740:	d129      	bne.n	8006796 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006750:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006752:	2300      	movs	r3, #0
 8006754:	613b      	str	r3, [r7, #16]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	613b      	str	r3, [r7, #16]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	613b      	str	r3, [r7, #16]
 8006766:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	2319      	movs	r3, #25
 800676e:	2201      	movs	r2, #1
 8006770:	4921      	ldr	r1, [pc, #132]	; (80067f8 <HAL_I2C_IsDeviceReady+0x254>)
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f000 fb12 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d001      	beq.n	8006782 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e036      	b.n	80067f0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2220      	movs	r2, #32
 8006786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8006792:	2300      	movs	r3, #0
 8006794:	e02c      	b.n	80067f0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067a4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067ae:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	2319      	movs	r3, #25
 80067b6:	2201      	movs	r2, #1
 80067b8:	490f      	ldr	r1, [pc, #60]	; (80067f8 <HAL_I2C_IsDeviceReady+0x254>)
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f000 faee 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e012      	b.n	80067f0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	3301      	adds	r3, #1
 80067ce:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	f4ff af32 	bcc.w	800663e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2220      	movs	r2, #32
 80067de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e000      	b.n	80067f0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80067ee:	2302      	movs	r3, #2
  }
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3720      	adds	r7, #32
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	00100002 	.word	0x00100002
 80067fc:	ffff0000 	.word	0xffff0000

08006800 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b088      	sub	sp, #32
 8006804:	af02      	add	r7, sp, #8
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	607a      	str	r2, [r7, #4]
 800680a:	603b      	str	r3, [r7, #0]
 800680c:	460b      	mov	r3, r1
 800680e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006814:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	2b08      	cmp	r3, #8
 800681a:	d006      	beq.n	800682a <I2C_MasterRequestWrite+0x2a>
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d003      	beq.n	800682a <I2C_MasterRequestWrite+0x2a>
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006828:	d108      	bne.n	800683c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	e00b      	b.n	8006854 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006840:	2b12      	cmp	r3, #18
 8006842:	d107      	bne.n	8006854 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006852:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	9300      	str	r3, [sp, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f000 fa9b 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00d      	beq.n	8006888 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800687a:	d103      	bne.n	8006884 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006882:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e035      	b.n	80068f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006890:	d108      	bne.n	80068a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006892:	897b      	ldrh	r3, [r7, #10]
 8006894:	b2db      	uxtb	r3, r3
 8006896:	461a      	mov	r2, r3
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80068a0:	611a      	str	r2, [r3, #16]
 80068a2:	e01b      	b.n	80068dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80068a4:	897b      	ldrh	r3, [r7, #10]
 80068a6:	11db      	asrs	r3, r3, #7
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	f003 0306 	and.w	r3, r3, #6
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	f063 030f 	orn	r3, r3, #15
 80068b4:	b2da      	uxtb	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	490e      	ldr	r1, [pc, #56]	; (80068fc <I2C_MasterRequestWrite+0xfc>)
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f000 fae4 	bl	8006e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e010      	b.n	80068f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80068d2:	897b      	ldrh	r3, [r7, #10]
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	4907      	ldr	r1, [pc, #28]	; (8006900 <I2C_MasterRequestWrite+0x100>)
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f000 fad4 	bl	8006e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d001      	beq.n	80068f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e000      	b.n	80068f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3718      	adds	r7, #24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	00010008 	.word	0x00010008
 8006900:	00010002 	.word	0x00010002

08006904 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b088      	sub	sp, #32
 8006908:	af02      	add	r7, sp, #8
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	607a      	str	r2, [r7, #4]
 800690e:	603b      	str	r3, [r7, #0]
 8006910:	460b      	mov	r3, r1
 8006912:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006918:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006928:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	2b08      	cmp	r3, #8
 800692e:	d006      	beq.n	800693e <I2C_MasterRequestRead+0x3a>
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	2b01      	cmp	r3, #1
 8006934:	d003      	beq.n	800693e <I2C_MasterRequestRead+0x3a>
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800693c:	d108      	bne.n	8006950 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	e00b      	b.n	8006968 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006954:	2b11      	cmp	r3, #17
 8006956:	d107      	bne.n	8006968 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006966:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	9300      	str	r3, [sp, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f000 fa11 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00d      	beq.n	800699c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800698a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800698e:	d103      	bne.n	8006998 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006996:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e079      	b.n	8006a90 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069a4:	d108      	bne.n	80069b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80069a6:	897b      	ldrh	r3, [r7, #10]
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	f043 0301 	orr.w	r3, r3, #1
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	611a      	str	r2, [r3, #16]
 80069b6:	e05f      	b.n	8006a78 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80069b8:	897b      	ldrh	r3, [r7, #10]
 80069ba:	11db      	asrs	r3, r3, #7
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	f003 0306 	and.w	r3, r3, #6
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	f063 030f 	orn	r3, r3, #15
 80069c8:	b2da      	uxtb	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	4930      	ldr	r1, [pc, #192]	; (8006a98 <I2C_MasterRequestRead+0x194>)
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f000 fa5a 	bl	8006e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e054      	b.n	8006a90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80069e6:	897b      	ldrh	r3, [r7, #10]
 80069e8:	b2da      	uxtb	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	4929      	ldr	r1, [pc, #164]	; (8006a9c <I2C_MasterRequestRead+0x198>)
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f000 fa4a 	bl	8006e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d001      	beq.n	8006a06 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e044      	b.n	8006a90 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a06:	2300      	movs	r3, #0
 8006a08:	613b      	str	r3, [r7, #16]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	695b      	ldr	r3, [r3, #20]
 8006a10:	613b      	str	r3, [r7, #16]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	613b      	str	r3, [r7, #16]
 8006a1a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a2a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f000 f9af 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00d      	beq.n	8006a60 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a52:	d103      	bne.n	8006a5c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a5a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e017      	b.n	8006a90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006a60:	897b      	ldrh	r3, [r7, #10]
 8006a62:	11db      	asrs	r3, r3, #7
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	f003 0306 	and.w	r3, r3, #6
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	f063 030e 	orn	r3, r3, #14
 8006a70:	b2da      	uxtb	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	4907      	ldr	r1, [pc, #28]	; (8006a9c <I2C_MasterRequestRead+0x198>)
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 fa06 	bl	8006e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e000      	b.n	8006a90 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3718      	adds	r7, #24
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	00010008 	.word	0x00010008
 8006a9c:	00010002 	.word	0x00010002

08006aa0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b088      	sub	sp, #32
 8006aa4:	af02      	add	r7, sp, #8
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	4608      	mov	r0, r1
 8006aaa:	4611      	mov	r1, r2
 8006aac:	461a      	mov	r2, r3
 8006aae:	4603      	mov	r3, r0
 8006ab0:	817b      	strh	r3, [r7, #10]
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	813b      	strh	r3, [r7, #8]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ac8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f000 f960 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00d      	beq.n	8006afe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006af0:	d103      	bne.n	8006afa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006af8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e05f      	b.n	8006bbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006afe:	897b      	ldrh	r3, [r7, #10]
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	461a      	mov	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	6a3a      	ldr	r2, [r7, #32]
 8006b12:	492d      	ldr	r1, [pc, #180]	; (8006bc8 <I2C_RequestMemoryWrite+0x128>)
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 f9bb 	bl	8006e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d001      	beq.n	8006b24 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e04c      	b.n	8006bbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b24:	2300      	movs	r3, #0
 8006b26:	617b      	str	r3, [r7, #20]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	617b      	str	r3, [r7, #20]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	617b      	str	r3, [r7, #20]
 8006b38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b3c:	6a39      	ldr	r1, [r7, #32]
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 fa46 	bl	8006fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00d      	beq.n	8006b66 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	d107      	bne.n	8006b62 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e02b      	b.n	8006bbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b66:	88fb      	ldrh	r3, [r7, #6]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d105      	bne.n	8006b78 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b6c:	893b      	ldrh	r3, [r7, #8]
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	611a      	str	r2, [r3, #16]
 8006b76:	e021      	b.n	8006bbc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b78:	893b      	ldrh	r3, [r7, #8]
 8006b7a:	0a1b      	lsrs	r3, r3, #8
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b88:	6a39      	ldr	r1, [r7, #32]
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f000 fa20 	bl	8006fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00d      	beq.n	8006bb2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d107      	bne.n	8006bae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e005      	b.n	8006bbe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006bb2:	893b      	ldrh	r3, [r7, #8]
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3718      	adds	r7, #24
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	00010002 	.word	0x00010002

08006bcc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b088      	sub	sp, #32
 8006bd0:	af02      	add	r7, sp, #8
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	4608      	mov	r0, r1
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	461a      	mov	r2, r3
 8006bda:	4603      	mov	r3, r0
 8006bdc:	817b      	strh	r3, [r7, #10]
 8006bde:	460b      	mov	r3, r1
 8006be0:	813b      	strh	r3, [r7, #8]
 8006be2:	4613      	mov	r3, r2
 8006be4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006bf4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	6a3b      	ldr	r3, [r7, #32]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 f8c2 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00d      	beq.n	8006c3a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c2c:	d103      	bne.n	8006c36 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e0aa      	b.n	8006d90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c3a:	897b      	ldrh	r3, [r7, #10]
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	461a      	mov	r2, r3
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	6a3a      	ldr	r2, [r7, #32]
 8006c4e:	4952      	ldr	r1, [pc, #328]	; (8006d98 <I2C_RequestMemoryRead+0x1cc>)
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 f91d 	bl	8006e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d001      	beq.n	8006c60 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e097      	b.n	8006d90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c60:	2300      	movs	r3, #0
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	617b      	str	r3, [r7, #20]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	617b      	str	r3, [r7, #20]
 8006c74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c78:	6a39      	ldr	r1, [r7, #32]
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f000 f9a8 	bl	8006fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00d      	beq.n	8006ca2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8a:	2b04      	cmp	r3, #4
 8006c8c:	d107      	bne.n	8006c9e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e076      	b.n	8006d90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ca2:	88fb      	ldrh	r3, [r7, #6]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d105      	bne.n	8006cb4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ca8:	893b      	ldrh	r3, [r7, #8]
 8006caa:	b2da      	uxtb	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	611a      	str	r2, [r3, #16]
 8006cb2:	e021      	b.n	8006cf8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006cb4:	893b      	ldrh	r3, [r7, #8]
 8006cb6:	0a1b      	lsrs	r3, r3, #8
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc4:	6a39      	ldr	r1, [r7, #32]
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f000 f982 	bl	8006fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00d      	beq.n	8006cee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	d107      	bne.n	8006cea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ce8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e050      	b.n	8006d90 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006cee:	893b      	ldrh	r3, [r7, #8]
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cfa:	6a39      	ldr	r1, [r7, #32]
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f000 f967 	bl	8006fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00d      	beq.n	8006d24 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0c:	2b04      	cmp	r3, #4
 8006d0e:	d107      	bne.n	8006d20 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d1e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e035      	b.n	8006d90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d32:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	6a3b      	ldr	r3, [r7, #32]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f000 f82b 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00d      	beq.n	8006d68 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d5a:	d103      	bne.n	8006d64 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e013      	b.n	8006d90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006d68:	897b      	ldrh	r3, [r7, #10]
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	f043 0301 	orr.w	r3, r3, #1
 8006d70:	b2da      	uxtb	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7a:	6a3a      	ldr	r2, [r7, #32]
 8006d7c:	4906      	ldr	r1, [pc, #24]	; (8006d98 <I2C_RequestMemoryRead+0x1cc>)
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f000 f886 	bl	8006e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e000      	b.n	8006d90 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3718      	adds	r7, #24
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	00010002 	.word	0x00010002

08006d9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	603b      	str	r3, [r7, #0]
 8006da8:	4613      	mov	r3, r2
 8006daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006dac:	e048      	b.n	8006e40 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db4:	d044      	beq.n	8006e40 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006db6:	f7fd fe25 	bl	8004a04 <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	683a      	ldr	r2, [r7, #0]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d302      	bcc.n	8006dcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d139      	bne.n	8006e40 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	0c1b      	lsrs	r3, r3, #16
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d10d      	bne.n	8006df2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	695b      	ldr	r3, [r3, #20]
 8006ddc:	43da      	mvns	r2, r3
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	4013      	ands	r3, r2
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	bf0c      	ite	eq
 8006de8:	2301      	moveq	r3, #1
 8006dea:	2300      	movne	r3, #0
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	461a      	mov	r2, r3
 8006df0:	e00c      	b.n	8006e0c <I2C_WaitOnFlagUntilTimeout+0x70>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	43da      	mvns	r2, r3
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	bf0c      	ite	eq
 8006e04:	2301      	moveq	r3, #1
 8006e06:	2300      	movne	r3, #0
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	79fb      	ldrb	r3, [r7, #7]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d116      	bne.n	8006e40 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2220      	movs	r2, #32
 8006e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2c:	f043 0220 	orr.w	r2, r3, #32
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e023      	b.n	8006e88 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	0c1b      	lsrs	r3, r3, #16
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d10d      	bne.n	8006e66 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	695b      	ldr	r3, [r3, #20]
 8006e50:	43da      	mvns	r2, r3
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	4013      	ands	r3, r2
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	bf0c      	ite	eq
 8006e5c:	2301      	moveq	r3, #1
 8006e5e:	2300      	movne	r3, #0
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	461a      	mov	r2, r3
 8006e64:	e00c      	b.n	8006e80 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	43da      	mvns	r2, r3
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	4013      	ands	r3, r2
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	bf0c      	ite	eq
 8006e78:	2301      	moveq	r3, #1
 8006e7a:	2300      	movne	r3, #0
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	461a      	mov	r2, r3
 8006e80:	79fb      	ldrb	r3, [r7, #7]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d093      	beq.n	8006dae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
 8006e9c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e9e:	e071      	b.n	8006f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eae:	d123      	bne.n	8006ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ebe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ec8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee4:	f043 0204 	orr.w	r2, r3, #4
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e067      	b.n	8006fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006efe:	d041      	beq.n	8006f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f00:	f7fd fd80 	bl	8004a04 <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d302      	bcc.n	8006f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d136      	bne.n	8006f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	0c1b      	lsrs	r3, r3, #16
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d10c      	bne.n	8006f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	43da      	mvns	r2, r3
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	bf14      	ite	ne
 8006f32:	2301      	movne	r3, #1
 8006f34:	2300      	moveq	r3, #0
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	e00b      	b.n	8006f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	43da      	mvns	r2, r3
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	4013      	ands	r3, r2
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	bf14      	ite	ne
 8006f4c:	2301      	movne	r3, #1
 8006f4e:	2300      	moveq	r3, #0
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d016      	beq.n	8006f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f70:	f043 0220 	orr.w	r2, r3, #32
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e021      	b.n	8006fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	0c1b      	lsrs	r3, r3, #16
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d10c      	bne.n	8006fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	695b      	ldr	r3, [r3, #20]
 8006f94:	43da      	mvns	r2, r3
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	4013      	ands	r3, r2
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	bf14      	ite	ne
 8006fa0:	2301      	movne	r3, #1
 8006fa2:	2300      	moveq	r3, #0
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	e00b      	b.n	8006fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	43da      	mvns	r2, r3
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	bf14      	ite	ne
 8006fba:	2301      	movne	r3, #1
 8006fbc:	2300      	moveq	r3, #0
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f47f af6d 	bne.w	8006ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006fdc:	e034      	b.n	8007048 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f000 f8e3 	bl	80071aa <I2C_IsAcknowledgeFailed>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e034      	b.n	8007058 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff4:	d028      	beq.n	8007048 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ff6:	f7fd fd05 	bl	8004a04 <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	429a      	cmp	r2, r3
 8007004:	d302      	bcc.n	800700c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d11d      	bne.n	8007048 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007016:	2b80      	cmp	r3, #128	; 0x80
 8007018:	d016      	beq.n	8007048 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2220      	movs	r2, #32
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007034:	f043 0220 	orr.w	r2, r3, #32
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e007      	b.n	8007058 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007052:	2b80      	cmp	r3, #128	; 0x80
 8007054:	d1c3      	bne.n	8006fde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800706c:	e034      	b.n	80070d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 f89b 	bl	80071aa <I2C_IsAcknowledgeFailed>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e034      	b.n	80070e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007084:	d028      	beq.n	80070d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007086:	f7fd fcbd 	bl	8004a04 <HAL_GetTick>
 800708a:	4602      	mov	r2, r0
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	68ba      	ldr	r2, [r7, #8]
 8007092:	429a      	cmp	r2, r3
 8007094:	d302      	bcc.n	800709c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d11d      	bne.n	80070d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	f003 0304 	and.w	r3, r3, #4
 80070a6:	2b04      	cmp	r3, #4
 80070a8:	d016      	beq.n	80070d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2220      	movs	r2, #32
 80070b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c4:	f043 0220 	orr.w	r2, r3, #32
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e007      	b.n	80070e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	f003 0304 	and.w	r3, r3, #4
 80070e2:	2b04      	cmp	r3, #4
 80070e4:	d1c3      	bne.n	800706e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80070fc:	e049      	b.n	8007192 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	f003 0310 	and.w	r3, r3, #16
 8007108:	2b10      	cmp	r3, #16
 800710a:	d119      	bne.n	8007140 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f06f 0210 	mvn.w	r2, #16
 8007114:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2220      	movs	r2, #32
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e030      	b.n	80071a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007140:	f7fd fc60 	bl	8004a04 <HAL_GetTick>
 8007144:	4602      	mov	r2, r0
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	429a      	cmp	r2, r3
 800714e:	d302      	bcc.n	8007156 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d11d      	bne.n	8007192 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	695b      	ldr	r3, [r3, #20]
 800715c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007160:	2b40      	cmp	r3, #64	; 0x40
 8007162:	d016      	beq.n	8007192 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2220      	movs	r2, #32
 800716e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717e:	f043 0220 	orr.w	r2, r3, #32
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e007      	b.n	80071a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	695b      	ldr	r3, [r3, #20]
 8007198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719c:	2b40      	cmp	r3, #64	; 0x40
 800719e:	d1ae      	bne.n	80070fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b083      	sub	sp, #12
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071c0:	d11b      	bne.n	80071fa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071ca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2220      	movs	r2, #32
 80071d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	f043 0204 	orr.w	r2, r3, #4
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e000      	b.n	80071fc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	bc80      	pop	{r7}
 8007204:	4770      	bx	lr
	...

08007208 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e272      	b.n	8007700 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0301 	and.w	r3, r3, #1
 8007222:	2b00      	cmp	r3, #0
 8007224:	f000 8087 	beq.w	8007336 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007228:	4b92      	ldr	r3, [pc, #584]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f003 030c 	and.w	r3, r3, #12
 8007230:	2b04      	cmp	r3, #4
 8007232:	d00c      	beq.n	800724e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007234:	4b8f      	ldr	r3, [pc, #572]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f003 030c 	and.w	r3, r3, #12
 800723c:	2b08      	cmp	r3, #8
 800723e:	d112      	bne.n	8007266 <HAL_RCC_OscConfig+0x5e>
 8007240:	4b8c      	ldr	r3, [pc, #560]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800724c:	d10b      	bne.n	8007266 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800724e:	4b89      	ldr	r3, [pc, #548]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007256:	2b00      	cmp	r3, #0
 8007258:	d06c      	beq.n	8007334 <HAL_RCC_OscConfig+0x12c>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d168      	bne.n	8007334 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e24c      	b.n	8007700 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800726e:	d106      	bne.n	800727e <HAL_RCC_OscConfig+0x76>
 8007270:	4b80      	ldr	r3, [pc, #512]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a7f      	ldr	r2, [pc, #508]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 8007276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800727a:	6013      	str	r3, [r2, #0]
 800727c:	e02e      	b.n	80072dc <HAL_RCC_OscConfig+0xd4>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d10c      	bne.n	80072a0 <HAL_RCC_OscConfig+0x98>
 8007286:	4b7b      	ldr	r3, [pc, #492]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a7a      	ldr	r2, [pc, #488]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 800728c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007290:	6013      	str	r3, [r2, #0]
 8007292:	4b78      	ldr	r3, [pc, #480]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a77      	ldr	r2, [pc, #476]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 8007298:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800729c:	6013      	str	r3, [r2, #0]
 800729e:	e01d      	b.n	80072dc <HAL_RCC_OscConfig+0xd4>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072a8:	d10c      	bne.n	80072c4 <HAL_RCC_OscConfig+0xbc>
 80072aa:	4b72      	ldr	r3, [pc, #456]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a71      	ldr	r2, [pc, #452]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 80072b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072b4:	6013      	str	r3, [r2, #0]
 80072b6:	4b6f      	ldr	r3, [pc, #444]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a6e      	ldr	r2, [pc, #440]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 80072bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072c0:	6013      	str	r3, [r2, #0]
 80072c2:	e00b      	b.n	80072dc <HAL_RCC_OscConfig+0xd4>
 80072c4:	4b6b      	ldr	r3, [pc, #428]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a6a      	ldr	r2, [pc, #424]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 80072ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072ce:	6013      	str	r3, [r2, #0]
 80072d0:	4b68      	ldr	r3, [pc, #416]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a67      	ldr	r2, [pc, #412]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 80072d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d013      	beq.n	800730c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072e4:	f7fd fb8e 	bl	8004a04 <HAL_GetTick>
 80072e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072ea:	e008      	b.n	80072fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072ec:	f7fd fb8a 	bl	8004a04 <HAL_GetTick>
 80072f0:	4602      	mov	r2, r0
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	2b64      	cmp	r3, #100	; 0x64
 80072f8:	d901      	bls.n	80072fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	e200      	b.n	8007700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072fe:	4b5d      	ldr	r3, [pc, #372]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d0f0      	beq.n	80072ec <HAL_RCC_OscConfig+0xe4>
 800730a:	e014      	b.n	8007336 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800730c:	f7fd fb7a 	bl	8004a04 <HAL_GetTick>
 8007310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007312:	e008      	b.n	8007326 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007314:	f7fd fb76 	bl	8004a04 <HAL_GetTick>
 8007318:	4602      	mov	r2, r0
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	2b64      	cmp	r3, #100	; 0x64
 8007320:	d901      	bls.n	8007326 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e1ec      	b.n	8007700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007326:	4b53      	ldr	r3, [pc, #332]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1f0      	bne.n	8007314 <HAL_RCC_OscConfig+0x10c>
 8007332:	e000      	b.n	8007336 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0302 	and.w	r3, r3, #2
 800733e:	2b00      	cmp	r3, #0
 8007340:	d063      	beq.n	800740a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007342:	4b4c      	ldr	r3, [pc, #304]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f003 030c 	and.w	r3, r3, #12
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00b      	beq.n	8007366 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800734e:	4b49      	ldr	r3, [pc, #292]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	f003 030c 	and.w	r3, r3, #12
 8007356:	2b08      	cmp	r3, #8
 8007358:	d11c      	bne.n	8007394 <HAL_RCC_OscConfig+0x18c>
 800735a:	4b46      	ldr	r3, [pc, #280]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d116      	bne.n	8007394 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007366:	4b43      	ldr	r3, [pc, #268]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 0302 	and.w	r3, r3, #2
 800736e:	2b00      	cmp	r3, #0
 8007370:	d005      	beq.n	800737e <HAL_RCC_OscConfig+0x176>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d001      	beq.n	800737e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e1c0      	b.n	8007700 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800737e:	4b3d      	ldr	r3, [pc, #244]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	00db      	lsls	r3, r3, #3
 800738c:	4939      	ldr	r1, [pc, #228]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 800738e:	4313      	orrs	r3, r2
 8007390:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007392:	e03a      	b.n	800740a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d020      	beq.n	80073de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800739c:	4b36      	ldr	r3, [pc, #216]	; (8007478 <HAL_RCC_OscConfig+0x270>)
 800739e:	2201      	movs	r2, #1
 80073a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073a2:	f7fd fb2f 	bl	8004a04 <HAL_GetTick>
 80073a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073a8:	e008      	b.n	80073bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073aa:	f7fd fb2b 	bl	8004a04 <HAL_GetTick>
 80073ae:	4602      	mov	r2, r0
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d901      	bls.n	80073bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e1a1      	b.n	8007700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073bc:	4b2d      	ldr	r3, [pc, #180]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 0302 	and.w	r3, r3, #2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d0f0      	beq.n	80073aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073c8:	4b2a      	ldr	r3, [pc, #168]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	00db      	lsls	r3, r3, #3
 80073d6:	4927      	ldr	r1, [pc, #156]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	600b      	str	r3, [r1, #0]
 80073dc:	e015      	b.n	800740a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073de:	4b26      	ldr	r3, [pc, #152]	; (8007478 <HAL_RCC_OscConfig+0x270>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073e4:	f7fd fb0e 	bl	8004a04 <HAL_GetTick>
 80073e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073ea:	e008      	b.n	80073fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073ec:	f7fd fb0a 	bl	8004a04 <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d901      	bls.n	80073fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e180      	b.n	8007700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073fe:	4b1d      	ldr	r3, [pc, #116]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 0302 	and.w	r3, r3, #2
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1f0      	bne.n	80073ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0308 	and.w	r3, r3, #8
 8007412:	2b00      	cmp	r3, #0
 8007414:	d03a      	beq.n	800748c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	699b      	ldr	r3, [r3, #24]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d019      	beq.n	8007452 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800741e:	4b17      	ldr	r3, [pc, #92]	; (800747c <HAL_RCC_OscConfig+0x274>)
 8007420:	2201      	movs	r2, #1
 8007422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007424:	f7fd faee 	bl	8004a04 <HAL_GetTick>
 8007428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800742a:	e008      	b.n	800743e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800742c:	f7fd faea 	bl	8004a04 <HAL_GetTick>
 8007430:	4602      	mov	r2, r0
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	2b02      	cmp	r3, #2
 8007438:	d901      	bls.n	800743e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e160      	b.n	8007700 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800743e:	4b0d      	ldr	r3, [pc, #52]	; (8007474 <HAL_RCC_OscConfig+0x26c>)
 8007440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007442:	f003 0302 	and.w	r3, r3, #2
 8007446:	2b00      	cmp	r3, #0
 8007448:	d0f0      	beq.n	800742c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800744a:	2001      	movs	r0, #1
 800744c:	f000 face 	bl	80079ec <RCC_Delay>
 8007450:	e01c      	b.n	800748c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007452:	4b0a      	ldr	r3, [pc, #40]	; (800747c <HAL_RCC_OscConfig+0x274>)
 8007454:	2200      	movs	r2, #0
 8007456:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007458:	f7fd fad4 	bl	8004a04 <HAL_GetTick>
 800745c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800745e:	e00f      	b.n	8007480 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007460:	f7fd fad0 	bl	8004a04 <HAL_GetTick>
 8007464:	4602      	mov	r2, r0
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	2b02      	cmp	r3, #2
 800746c:	d908      	bls.n	8007480 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e146      	b.n	8007700 <HAL_RCC_OscConfig+0x4f8>
 8007472:	bf00      	nop
 8007474:	40021000 	.word	0x40021000
 8007478:	42420000 	.word	0x42420000
 800747c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007480:	4b92      	ldr	r3, [pc, #584]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 8007482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007484:	f003 0302 	and.w	r3, r3, #2
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1e9      	bne.n	8007460 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0304 	and.w	r3, r3, #4
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 80a6 	beq.w	80075e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800749a:	2300      	movs	r3, #0
 800749c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800749e:	4b8b      	ldr	r3, [pc, #556]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10d      	bne.n	80074c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074aa:	4b88      	ldr	r3, [pc, #544]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 80074ac:	69db      	ldr	r3, [r3, #28]
 80074ae:	4a87      	ldr	r2, [pc, #540]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 80074b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074b4:	61d3      	str	r3, [r2, #28]
 80074b6:	4b85      	ldr	r3, [pc, #532]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 80074b8:	69db      	ldr	r3, [r3, #28]
 80074ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074be:	60bb      	str	r3, [r7, #8]
 80074c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074c2:	2301      	movs	r3, #1
 80074c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074c6:	4b82      	ldr	r3, [pc, #520]	; (80076d0 <HAL_RCC_OscConfig+0x4c8>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d118      	bne.n	8007504 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80074d2:	4b7f      	ldr	r3, [pc, #508]	; (80076d0 <HAL_RCC_OscConfig+0x4c8>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a7e      	ldr	r2, [pc, #504]	; (80076d0 <HAL_RCC_OscConfig+0x4c8>)
 80074d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074de:	f7fd fa91 	bl	8004a04 <HAL_GetTick>
 80074e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074e4:	e008      	b.n	80074f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074e6:	f7fd fa8d 	bl	8004a04 <HAL_GetTick>
 80074ea:	4602      	mov	r2, r0
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	2b64      	cmp	r3, #100	; 0x64
 80074f2:	d901      	bls.n	80074f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e103      	b.n	8007700 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074f8:	4b75      	ldr	r3, [pc, #468]	; (80076d0 <HAL_RCC_OscConfig+0x4c8>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007500:	2b00      	cmp	r3, #0
 8007502:	d0f0      	beq.n	80074e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d106      	bne.n	800751a <HAL_RCC_OscConfig+0x312>
 800750c:	4b6f      	ldr	r3, [pc, #444]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	4a6e      	ldr	r2, [pc, #440]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 8007512:	f043 0301 	orr.w	r3, r3, #1
 8007516:	6213      	str	r3, [r2, #32]
 8007518:	e02d      	b.n	8007576 <HAL_RCC_OscConfig+0x36e>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10c      	bne.n	800753c <HAL_RCC_OscConfig+0x334>
 8007522:	4b6a      	ldr	r3, [pc, #424]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 8007524:	6a1b      	ldr	r3, [r3, #32]
 8007526:	4a69      	ldr	r2, [pc, #420]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 8007528:	f023 0301 	bic.w	r3, r3, #1
 800752c:	6213      	str	r3, [r2, #32]
 800752e:	4b67      	ldr	r3, [pc, #412]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	4a66      	ldr	r2, [pc, #408]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 8007534:	f023 0304 	bic.w	r3, r3, #4
 8007538:	6213      	str	r3, [r2, #32]
 800753a:	e01c      	b.n	8007576 <HAL_RCC_OscConfig+0x36e>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	2b05      	cmp	r3, #5
 8007542:	d10c      	bne.n	800755e <HAL_RCC_OscConfig+0x356>
 8007544:	4b61      	ldr	r3, [pc, #388]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 8007546:	6a1b      	ldr	r3, [r3, #32]
 8007548:	4a60      	ldr	r2, [pc, #384]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 800754a:	f043 0304 	orr.w	r3, r3, #4
 800754e:	6213      	str	r3, [r2, #32]
 8007550:	4b5e      	ldr	r3, [pc, #376]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 8007552:	6a1b      	ldr	r3, [r3, #32]
 8007554:	4a5d      	ldr	r2, [pc, #372]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 8007556:	f043 0301 	orr.w	r3, r3, #1
 800755a:	6213      	str	r3, [r2, #32]
 800755c:	e00b      	b.n	8007576 <HAL_RCC_OscConfig+0x36e>
 800755e:	4b5b      	ldr	r3, [pc, #364]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	4a5a      	ldr	r2, [pc, #360]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 8007564:	f023 0301 	bic.w	r3, r3, #1
 8007568:	6213      	str	r3, [r2, #32]
 800756a:	4b58      	ldr	r3, [pc, #352]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	4a57      	ldr	r2, [pc, #348]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 8007570:	f023 0304 	bic.w	r3, r3, #4
 8007574:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d015      	beq.n	80075aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800757e:	f7fd fa41 	bl	8004a04 <HAL_GetTick>
 8007582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007584:	e00a      	b.n	800759c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007586:	f7fd fa3d 	bl	8004a04 <HAL_GetTick>
 800758a:	4602      	mov	r2, r0
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	f241 3288 	movw	r2, #5000	; 0x1388
 8007594:	4293      	cmp	r3, r2
 8007596:	d901      	bls.n	800759c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e0b1      	b.n	8007700 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800759c:	4b4b      	ldr	r3, [pc, #300]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 800759e:	6a1b      	ldr	r3, [r3, #32]
 80075a0:	f003 0302 	and.w	r3, r3, #2
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d0ee      	beq.n	8007586 <HAL_RCC_OscConfig+0x37e>
 80075a8:	e014      	b.n	80075d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075aa:	f7fd fa2b 	bl	8004a04 <HAL_GetTick>
 80075ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075b0:	e00a      	b.n	80075c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075b2:	f7fd fa27 	bl	8004a04 <HAL_GetTick>
 80075b6:	4602      	mov	r2, r0
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d901      	bls.n	80075c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e09b      	b.n	8007700 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075c8:	4b40      	ldr	r3, [pc, #256]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 80075ca:	6a1b      	ldr	r3, [r3, #32]
 80075cc:	f003 0302 	and.w	r3, r3, #2
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1ee      	bne.n	80075b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80075d4:	7dfb      	ldrb	r3, [r7, #23]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d105      	bne.n	80075e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075da:	4b3c      	ldr	r3, [pc, #240]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	4a3b      	ldr	r2, [pc, #236]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 80075e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	69db      	ldr	r3, [r3, #28]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f000 8087 	beq.w	80076fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80075f0:	4b36      	ldr	r3, [pc, #216]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	f003 030c 	and.w	r3, r3, #12
 80075f8:	2b08      	cmp	r3, #8
 80075fa:	d061      	beq.n	80076c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	69db      	ldr	r3, [r3, #28]
 8007600:	2b02      	cmp	r3, #2
 8007602:	d146      	bne.n	8007692 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007604:	4b33      	ldr	r3, [pc, #204]	; (80076d4 <HAL_RCC_OscConfig+0x4cc>)
 8007606:	2200      	movs	r2, #0
 8007608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800760a:	f7fd f9fb 	bl	8004a04 <HAL_GetTick>
 800760e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007610:	e008      	b.n	8007624 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007612:	f7fd f9f7 	bl	8004a04 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	2b02      	cmp	r3, #2
 800761e:	d901      	bls.n	8007624 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e06d      	b.n	8007700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007624:	4b29      	ldr	r3, [pc, #164]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1f0      	bne.n	8007612 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a1b      	ldr	r3, [r3, #32]
 8007634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007638:	d108      	bne.n	800764c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800763a:	4b24      	ldr	r3, [pc, #144]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	4921      	ldr	r1, [pc, #132]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 8007648:	4313      	orrs	r3, r2
 800764a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800764c:	4b1f      	ldr	r3, [pc, #124]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a19      	ldr	r1, [r3, #32]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765c:	430b      	orrs	r3, r1
 800765e:	491b      	ldr	r1, [pc, #108]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 8007660:	4313      	orrs	r3, r2
 8007662:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007664:	4b1b      	ldr	r3, [pc, #108]	; (80076d4 <HAL_RCC_OscConfig+0x4cc>)
 8007666:	2201      	movs	r2, #1
 8007668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800766a:	f7fd f9cb 	bl	8004a04 <HAL_GetTick>
 800766e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007670:	e008      	b.n	8007684 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007672:	f7fd f9c7 	bl	8004a04 <HAL_GetTick>
 8007676:	4602      	mov	r2, r0
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	2b02      	cmp	r3, #2
 800767e:	d901      	bls.n	8007684 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007680:	2303      	movs	r3, #3
 8007682:	e03d      	b.n	8007700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007684:	4b11      	ldr	r3, [pc, #68]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d0f0      	beq.n	8007672 <HAL_RCC_OscConfig+0x46a>
 8007690:	e035      	b.n	80076fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007692:	4b10      	ldr	r3, [pc, #64]	; (80076d4 <HAL_RCC_OscConfig+0x4cc>)
 8007694:	2200      	movs	r2, #0
 8007696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007698:	f7fd f9b4 	bl	8004a04 <HAL_GetTick>
 800769c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800769e:	e008      	b.n	80076b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076a0:	f7fd f9b0 	bl	8004a04 <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d901      	bls.n	80076b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e026      	b.n	8007700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80076b2:	4b06      	ldr	r3, [pc, #24]	; (80076cc <HAL_RCC_OscConfig+0x4c4>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1f0      	bne.n	80076a0 <HAL_RCC_OscConfig+0x498>
 80076be:	e01e      	b.n	80076fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	69db      	ldr	r3, [r3, #28]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d107      	bne.n	80076d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e019      	b.n	8007700 <HAL_RCC_OscConfig+0x4f8>
 80076cc:	40021000 	.word	0x40021000
 80076d0:	40007000 	.word	0x40007000
 80076d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80076d8:	4b0b      	ldr	r3, [pc, #44]	; (8007708 <HAL_RCC_OscConfig+0x500>)
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d106      	bne.n	80076fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d001      	beq.n	80076fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e000      	b.n	8007700 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3718      	adds	r7, #24
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	40021000 	.word	0x40021000

0800770c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d101      	bne.n	8007720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e0d0      	b.n	80078c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007720:	4b6a      	ldr	r3, [pc, #424]	; (80078cc <HAL_RCC_ClockConfig+0x1c0>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0307 	and.w	r3, r3, #7
 8007728:	683a      	ldr	r2, [r7, #0]
 800772a:	429a      	cmp	r2, r3
 800772c:	d910      	bls.n	8007750 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800772e:	4b67      	ldr	r3, [pc, #412]	; (80078cc <HAL_RCC_ClockConfig+0x1c0>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f023 0207 	bic.w	r2, r3, #7
 8007736:	4965      	ldr	r1, [pc, #404]	; (80078cc <HAL_RCC_ClockConfig+0x1c0>)
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	4313      	orrs	r3, r2
 800773c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800773e:	4b63      	ldr	r3, [pc, #396]	; (80078cc <HAL_RCC_ClockConfig+0x1c0>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0307 	and.w	r3, r3, #7
 8007746:	683a      	ldr	r2, [r7, #0]
 8007748:	429a      	cmp	r2, r3
 800774a:	d001      	beq.n	8007750 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e0b8      	b.n	80078c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 0302 	and.w	r3, r3, #2
 8007758:	2b00      	cmp	r3, #0
 800775a:	d020      	beq.n	800779e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0304 	and.w	r3, r3, #4
 8007764:	2b00      	cmp	r3, #0
 8007766:	d005      	beq.n	8007774 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007768:	4b59      	ldr	r3, [pc, #356]	; (80078d0 <HAL_RCC_ClockConfig+0x1c4>)
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	4a58      	ldr	r2, [pc, #352]	; (80078d0 <HAL_RCC_ClockConfig+0x1c4>)
 800776e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007772:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0308 	and.w	r3, r3, #8
 800777c:	2b00      	cmp	r3, #0
 800777e:	d005      	beq.n	800778c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007780:	4b53      	ldr	r3, [pc, #332]	; (80078d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	4a52      	ldr	r2, [pc, #328]	; (80078d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007786:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800778a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800778c:	4b50      	ldr	r3, [pc, #320]	; (80078d0 <HAL_RCC_ClockConfig+0x1c4>)
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	494d      	ldr	r1, [pc, #308]	; (80078d0 <HAL_RCC_ClockConfig+0x1c4>)
 800779a:	4313      	orrs	r3, r2
 800779c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d040      	beq.n	800782c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d107      	bne.n	80077c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077b2:	4b47      	ldr	r3, [pc, #284]	; (80078d0 <HAL_RCC_ClockConfig+0x1c4>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d115      	bne.n	80077ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e07f      	b.n	80078c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d107      	bne.n	80077da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077ca:	4b41      	ldr	r3, [pc, #260]	; (80078d0 <HAL_RCC_ClockConfig+0x1c4>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d109      	bne.n	80077ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e073      	b.n	80078c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077da:	4b3d      	ldr	r3, [pc, #244]	; (80078d0 <HAL_RCC_ClockConfig+0x1c4>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 0302 	and.w	r3, r3, #2
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e06b      	b.n	80078c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80077ea:	4b39      	ldr	r3, [pc, #228]	; (80078d0 <HAL_RCC_ClockConfig+0x1c4>)
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f023 0203 	bic.w	r2, r3, #3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	4936      	ldr	r1, [pc, #216]	; (80078d0 <HAL_RCC_ClockConfig+0x1c4>)
 80077f8:	4313      	orrs	r3, r2
 80077fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80077fc:	f7fd f902 	bl	8004a04 <HAL_GetTick>
 8007800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007802:	e00a      	b.n	800781a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007804:	f7fd f8fe 	bl	8004a04 <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007812:	4293      	cmp	r3, r2
 8007814:	d901      	bls.n	800781a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e053      	b.n	80078c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800781a:	4b2d      	ldr	r3, [pc, #180]	; (80078d0 <HAL_RCC_ClockConfig+0x1c4>)
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	f003 020c 	and.w	r2, r3, #12
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	429a      	cmp	r2, r3
 800782a:	d1eb      	bne.n	8007804 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800782c:	4b27      	ldr	r3, [pc, #156]	; (80078cc <HAL_RCC_ClockConfig+0x1c0>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0307 	and.w	r3, r3, #7
 8007834:	683a      	ldr	r2, [r7, #0]
 8007836:	429a      	cmp	r2, r3
 8007838:	d210      	bcs.n	800785c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800783a:	4b24      	ldr	r3, [pc, #144]	; (80078cc <HAL_RCC_ClockConfig+0x1c0>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f023 0207 	bic.w	r2, r3, #7
 8007842:	4922      	ldr	r1, [pc, #136]	; (80078cc <HAL_RCC_ClockConfig+0x1c0>)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	4313      	orrs	r3, r2
 8007848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800784a:	4b20      	ldr	r3, [pc, #128]	; (80078cc <HAL_RCC_ClockConfig+0x1c0>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0307 	and.w	r3, r3, #7
 8007852:	683a      	ldr	r2, [r7, #0]
 8007854:	429a      	cmp	r2, r3
 8007856:	d001      	beq.n	800785c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e032      	b.n	80078c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 0304 	and.w	r3, r3, #4
 8007864:	2b00      	cmp	r3, #0
 8007866:	d008      	beq.n	800787a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007868:	4b19      	ldr	r3, [pc, #100]	; (80078d0 <HAL_RCC_ClockConfig+0x1c4>)
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	4916      	ldr	r1, [pc, #88]	; (80078d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007876:	4313      	orrs	r3, r2
 8007878:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0308 	and.w	r3, r3, #8
 8007882:	2b00      	cmp	r3, #0
 8007884:	d009      	beq.n	800789a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007886:	4b12      	ldr	r3, [pc, #72]	; (80078d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	00db      	lsls	r3, r3, #3
 8007894:	490e      	ldr	r1, [pc, #56]	; (80078d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007896:	4313      	orrs	r3, r2
 8007898:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800789a:	f000 f821 	bl	80078e0 <HAL_RCC_GetSysClockFreq>
 800789e:	4602      	mov	r2, r0
 80078a0:	4b0b      	ldr	r3, [pc, #44]	; (80078d0 <HAL_RCC_ClockConfig+0x1c4>)
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	091b      	lsrs	r3, r3, #4
 80078a6:	f003 030f 	and.w	r3, r3, #15
 80078aa:	490a      	ldr	r1, [pc, #40]	; (80078d4 <HAL_RCC_ClockConfig+0x1c8>)
 80078ac:	5ccb      	ldrb	r3, [r1, r3]
 80078ae:	fa22 f303 	lsr.w	r3, r2, r3
 80078b2:	4a09      	ldr	r2, [pc, #36]	; (80078d8 <HAL_RCC_ClockConfig+0x1cc>)
 80078b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80078b6:	4b09      	ldr	r3, [pc, #36]	; (80078dc <HAL_RCC_ClockConfig+0x1d0>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fd f860 	bl	8004980 <HAL_InitTick>

  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	40022000 	.word	0x40022000
 80078d0:	40021000 	.word	0x40021000
 80078d4:	0800caec 	.word	0x0800caec
 80078d8:	20000030 	.word	0x20000030
 80078dc:	20000034 	.word	0x20000034

080078e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80078e6:	2300      	movs	r3, #0
 80078e8:	60fb      	str	r3, [r7, #12]
 80078ea:	2300      	movs	r3, #0
 80078ec:	60bb      	str	r3, [r7, #8]
 80078ee:	2300      	movs	r3, #0
 80078f0:	617b      	str	r3, [r7, #20]
 80078f2:	2300      	movs	r3, #0
 80078f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80078f6:	2300      	movs	r3, #0
 80078f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80078fa:	4b1e      	ldr	r3, [pc, #120]	; (8007974 <HAL_RCC_GetSysClockFreq+0x94>)
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f003 030c 	and.w	r3, r3, #12
 8007906:	2b04      	cmp	r3, #4
 8007908:	d002      	beq.n	8007910 <HAL_RCC_GetSysClockFreq+0x30>
 800790a:	2b08      	cmp	r3, #8
 800790c:	d003      	beq.n	8007916 <HAL_RCC_GetSysClockFreq+0x36>
 800790e:	e027      	b.n	8007960 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007910:	4b19      	ldr	r3, [pc, #100]	; (8007978 <HAL_RCC_GetSysClockFreq+0x98>)
 8007912:	613b      	str	r3, [r7, #16]
      break;
 8007914:	e027      	b.n	8007966 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	0c9b      	lsrs	r3, r3, #18
 800791a:	f003 030f 	and.w	r3, r3, #15
 800791e:	4a17      	ldr	r2, [pc, #92]	; (800797c <HAL_RCC_GetSysClockFreq+0x9c>)
 8007920:	5cd3      	ldrb	r3, [r2, r3]
 8007922:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d010      	beq.n	8007950 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800792e:	4b11      	ldr	r3, [pc, #68]	; (8007974 <HAL_RCC_GetSysClockFreq+0x94>)
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	0c5b      	lsrs	r3, r3, #17
 8007934:	f003 0301 	and.w	r3, r3, #1
 8007938:	4a11      	ldr	r2, [pc, #68]	; (8007980 <HAL_RCC_GetSysClockFreq+0xa0>)
 800793a:	5cd3      	ldrb	r3, [r2, r3]
 800793c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a0d      	ldr	r2, [pc, #52]	; (8007978 <HAL_RCC_GetSysClockFreq+0x98>)
 8007942:	fb03 f202 	mul.w	r2, r3, r2
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	fbb2 f3f3 	udiv	r3, r2, r3
 800794c:	617b      	str	r3, [r7, #20]
 800794e:	e004      	b.n	800795a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a0c      	ldr	r2, [pc, #48]	; (8007984 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007954:	fb02 f303 	mul.w	r3, r2, r3
 8007958:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	613b      	str	r3, [r7, #16]
      break;
 800795e:	e002      	b.n	8007966 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007960:	4b05      	ldr	r3, [pc, #20]	; (8007978 <HAL_RCC_GetSysClockFreq+0x98>)
 8007962:	613b      	str	r3, [r7, #16]
      break;
 8007964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007966:	693b      	ldr	r3, [r7, #16]
}
 8007968:	4618      	mov	r0, r3
 800796a:	371c      	adds	r7, #28
 800796c:	46bd      	mov	sp, r7
 800796e:	bc80      	pop	{r7}
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	40021000 	.word	0x40021000
 8007978:	007a1200 	.word	0x007a1200
 800797c:	0800cb04 	.word	0x0800cb04
 8007980:	0800cb14 	.word	0x0800cb14
 8007984:	003d0900 	.word	0x003d0900

08007988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007988:	b480      	push	{r7}
 800798a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800798c:	4b02      	ldr	r3, [pc, #8]	; (8007998 <HAL_RCC_GetHCLKFreq+0x10>)
 800798e:	681b      	ldr	r3, [r3, #0]
}
 8007990:	4618      	mov	r0, r3
 8007992:	46bd      	mov	sp, r7
 8007994:	bc80      	pop	{r7}
 8007996:	4770      	bx	lr
 8007998:	20000030 	.word	0x20000030

0800799c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80079a0:	f7ff fff2 	bl	8007988 <HAL_RCC_GetHCLKFreq>
 80079a4:	4602      	mov	r2, r0
 80079a6:	4b05      	ldr	r3, [pc, #20]	; (80079bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	0a1b      	lsrs	r3, r3, #8
 80079ac:	f003 0307 	and.w	r3, r3, #7
 80079b0:	4903      	ldr	r1, [pc, #12]	; (80079c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079b2:	5ccb      	ldrb	r3, [r1, r3]
 80079b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	40021000 	.word	0x40021000
 80079c0:	0800cafc 	.word	0x0800cafc

080079c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80079c8:	f7ff ffde 	bl	8007988 <HAL_RCC_GetHCLKFreq>
 80079cc:	4602      	mov	r2, r0
 80079ce:	4b05      	ldr	r3, [pc, #20]	; (80079e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	0adb      	lsrs	r3, r3, #11
 80079d4:	f003 0307 	and.w	r3, r3, #7
 80079d8:	4903      	ldr	r1, [pc, #12]	; (80079e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079da:	5ccb      	ldrb	r3, [r1, r3]
 80079dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	40021000 	.word	0x40021000
 80079e8:	0800cafc 	.word	0x0800cafc

080079ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80079f4:	4b0a      	ldr	r3, [pc, #40]	; (8007a20 <RCC_Delay+0x34>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a0a      	ldr	r2, [pc, #40]	; (8007a24 <RCC_Delay+0x38>)
 80079fa:	fba2 2303 	umull	r2, r3, r2, r3
 80079fe:	0a5b      	lsrs	r3, r3, #9
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	fb02 f303 	mul.w	r3, r2, r3
 8007a06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007a08:	bf00      	nop
  }
  while (Delay --);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	1e5a      	subs	r2, r3, #1
 8007a0e:	60fa      	str	r2, [r7, #12]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d1f9      	bne.n	8007a08 <RCC_Delay+0x1c>
}
 8007a14:	bf00      	nop
 8007a16:	bf00      	nop
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bc80      	pop	{r7}
 8007a1e:	4770      	bx	lr
 8007a20:	20000030 	.word	0x20000030
 8007a24:	10624dd3 	.word	0x10624dd3

08007a28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d101      	bne.n	8007a3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e041      	b.n	8007abe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d106      	bne.n	8007a54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f7fb feda 	bl	8003808 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2202      	movs	r2, #2
 8007a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	3304      	adds	r3, #4
 8007a64:	4619      	mov	r1, r3
 8007a66:	4610      	mov	r0, r2
 8007a68:	f000 fc18 	bl	800829c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3708      	adds	r7, #8
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
	...

08007ac8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d001      	beq.n	8007ae0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e03a      	b.n	8007b56 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68da      	ldr	r2, [r3, #12]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f042 0201 	orr.w	r2, r2, #1
 8007af6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a18      	ldr	r2, [pc, #96]	; (8007b60 <HAL_TIM_Base_Start_IT+0x98>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d00e      	beq.n	8007b20 <HAL_TIM_Base_Start_IT+0x58>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b0a:	d009      	beq.n	8007b20 <HAL_TIM_Base_Start_IT+0x58>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a14      	ldr	r2, [pc, #80]	; (8007b64 <HAL_TIM_Base_Start_IT+0x9c>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d004      	beq.n	8007b20 <HAL_TIM_Base_Start_IT+0x58>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a13      	ldr	r2, [pc, #76]	; (8007b68 <HAL_TIM_Base_Start_IT+0xa0>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d111      	bne.n	8007b44 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f003 0307 	and.w	r3, r3, #7
 8007b2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2b06      	cmp	r3, #6
 8007b30:	d010      	beq.n	8007b54 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f042 0201 	orr.w	r2, r2, #1
 8007b40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b42:	e007      	b.n	8007b54 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f042 0201 	orr.w	r2, r2, #1
 8007b52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3714      	adds	r7, #20
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bc80      	pop	{r7}
 8007b5e:	4770      	bx	lr
 8007b60:	40012c00 	.word	0x40012c00
 8007b64:	40000400 	.word	0x40000400
 8007b68:	40000800 	.word	0x40000800

08007b6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e041      	b.n	8007c02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d106      	bne.n	8007b98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f839 	bl	8007c0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	3304      	adds	r3, #4
 8007ba8:	4619      	mov	r1, r3
 8007baa:	4610      	mov	r0, r2
 8007bac:	f000 fb76 	bl	800829c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b083      	sub	sp, #12
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c12:	bf00      	nop
 8007c14:	370c      	adds	r7, #12
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bc80      	pop	{r7}
 8007c1a:	4770      	bx	lr

08007c1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d109      	bne.n	8007c40 <HAL_TIM_PWM_Start+0x24>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	bf14      	ite	ne
 8007c38:	2301      	movne	r3, #1
 8007c3a:	2300      	moveq	r3, #0
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	e022      	b.n	8007c86 <HAL_TIM_PWM_Start+0x6a>
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	2b04      	cmp	r3, #4
 8007c44:	d109      	bne.n	8007c5a <HAL_TIM_PWM_Start+0x3e>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	bf14      	ite	ne
 8007c52:	2301      	movne	r3, #1
 8007c54:	2300      	moveq	r3, #0
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	e015      	b.n	8007c86 <HAL_TIM_PWM_Start+0x6a>
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	2b08      	cmp	r3, #8
 8007c5e:	d109      	bne.n	8007c74 <HAL_TIM_PWM_Start+0x58>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	bf14      	ite	ne
 8007c6c:	2301      	movne	r3, #1
 8007c6e:	2300      	moveq	r3, #0
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	e008      	b.n	8007c86 <HAL_TIM_PWM_Start+0x6a>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	bf14      	ite	ne
 8007c80:	2301      	movne	r3, #1
 8007c82:	2300      	moveq	r3, #0
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e05e      	b.n	8007d4c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d104      	bne.n	8007c9e <HAL_TIM_PWM_Start+0x82>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2202      	movs	r2, #2
 8007c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c9c:	e013      	b.n	8007cc6 <HAL_TIM_PWM_Start+0xaa>
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	2b04      	cmp	r3, #4
 8007ca2:	d104      	bne.n	8007cae <HAL_TIM_PWM_Start+0x92>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cac:	e00b      	b.n	8007cc6 <HAL_TIM_PWM_Start+0xaa>
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	2b08      	cmp	r3, #8
 8007cb2:	d104      	bne.n	8007cbe <HAL_TIM_PWM_Start+0xa2>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2202      	movs	r2, #2
 8007cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cbc:	e003      	b.n	8007cc6 <HAL_TIM_PWM_Start+0xaa>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	6839      	ldr	r1, [r7, #0]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f000 fd70 	bl	80087b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a1e      	ldr	r2, [pc, #120]	; (8007d54 <HAL_TIM_PWM_Start+0x138>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d107      	bne.n	8007cee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a18      	ldr	r2, [pc, #96]	; (8007d54 <HAL_TIM_PWM_Start+0x138>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d00e      	beq.n	8007d16 <HAL_TIM_PWM_Start+0xfa>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d00:	d009      	beq.n	8007d16 <HAL_TIM_PWM_Start+0xfa>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a14      	ldr	r2, [pc, #80]	; (8007d58 <HAL_TIM_PWM_Start+0x13c>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d004      	beq.n	8007d16 <HAL_TIM_PWM_Start+0xfa>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a12      	ldr	r2, [pc, #72]	; (8007d5c <HAL_TIM_PWM_Start+0x140>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d111      	bne.n	8007d3a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	f003 0307 	and.w	r3, r3, #7
 8007d20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2b06      	cmp	r3, #6
 8007d26:	d010      	beq.n	8007d4a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f042 0201 	orr.w	r2, r2, #1
 8007d36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d38:	e007      	b.n	8007d4a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f042 0201 	orr.w	r2, r2, #1
 8007d48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	40012c00 	.word	0x40012c00
 8007d58:	40000400 	.word	0x40000400
 8007d5c:	40000800 	.word	0x40000800

08007d60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	f003 0302 	and.w	r3, r3, #2
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d020      	beq.n	8007dc4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f003 0302 	and.w	r3, r3, #2
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d01b      	beq.n	8007dc4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f06f 0202 	mvn.w	r2, #2
 8007d94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	f003 0303 	and.w	r3, r3, #3
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d003      	beq.n	8007db2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fa5a 	bl	8008264 <HAL_TIM_IC_CaptureCallback>
 8007db0:	e005      	b.n	8007dbe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fa4d 	bl	8008252 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 fa5c 	bl	8008276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	f003 0304 	and.w	r3, r3, #4
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d020      	beq.n	8007e10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f003 0304 	and.w	r3, r3, #4
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d01b      	beq.n	8007e10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f06f 0204 	mvn.w	r2, #4
 8007de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2202      	movs	r2, #2
 8007de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	699b      	ldr	r3, [r3, #24]
 8007dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d003      	beq.n	8007dfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fa34 	bl	8008264 <HAL_TIM_IC_CaptureCallback>
 8007dfc:	e005      	b.n	8007e0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fa27 	bl	8008252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fa36 	bl	8008276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	f003 0308 	and.w	r3, r3, #8
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d020      	beq.n	8007e5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f003 0308 	and.w	r3, r3, #8
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d01b      	beq.n	8007e5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f06f 0208 	mvn.w	r2, #8
 8007e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2204      	movs	r2, #4
 8007e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	69db      	ldr	r3, [r3, #28]
 8007e3a:	f003 0303 	and.w	r3, r3, #3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d003      	beq.n	8007e4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fa0e 	bl	8008264 <HAL_TIM_IC_CaptureCallback>
 8007e48:	e005      	b.n	8007e56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 fa01 	bl	8008252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fa10 	bl	8008276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	f003 0310 	and.w	r3, r3, #16
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d020      	beq.n	8007ea8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f003 0310 	and.w	r3, r3, #16
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d01b      	beq.n	8007ea8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f06f 0210 	mvn.w	r2, #16
 8007e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2208      	movs	r2, #8
 8007e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	69db      	ldr	r3, [r3, #28]
 8007e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f9e8 	bl	8008264 <HAL_TIM_IC_CaptureCallback>
 8007e94:	e005      	b.n	8007ea2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f9db 	bl	8008252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f9ea 	bl	8008276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	f003 0301 	and.w	r3, r3, #1
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00c      	beq.n	8007ecc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f003 0301 	and.w	r3, r3, #1
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d007      	beq.n	8007ecc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f06f 0201 	mvn.w	r2, #1
 8007ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f7fb fa38 	bl	800333c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00c      	beq.n	8007ef0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d007      	beq.n	8007ef0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fd3e 	bl	800896c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00c      	beq.n	8007f14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d007      	beq.n	8007f14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f9ba 	bl	8008288 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	f003 0320 	and.w	r3, r3, #32
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00c      	beq.n	8007f38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f003 0320 	and.w	r3, r3, #32
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d007      	beq.n	8007f38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f06f 0220 	mvn.w	r2, #32
 8007f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fd11 	bl	800895a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f38:	bf00      	nop
 8007f3a:	3710      	adds	r7, #16
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b086      	sub	sp, #24
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d101      	bne.n	8007f5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007f5a:	2302      	movs	r3, #2
 8007f5c:	e0ae      	b.n	80080bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2201      	movs	r2, #1
 8007f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2b0c      	cmp	r3, #12
 8007f6a:	f200 809f 	bhi.w	80080ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007f6e:	a201      	add	r2, pc, #4	; (adr r2, 8007f74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f74:	08007fa9 	.word	0x08007fa9
 8007f78:	080080ad 	.word	0x080080ad
 8007f7c:	080080ad 	.word	0x080080ad
 8007f80:	080080ad 	.word	0x080080ad
 8007f84:	08007fe9 	.word	0x08007fe9
 8007f88:	080080ad 	.word	0x080080ad
 8007f8c:	080080ad 	.word	0x080080ad
 8007f90:	080080ad 	.word	0x080080ad
 8007f94:	0800802b 	.word	0x0800802b
 8007f98:	080080ad 	.word	0x080080ad
 8007f9c:	080080ad 	.word	0x080080ad
 8007fa0:	080080ad 	.word	0x080080ad
 8007fa4:	0800806b 	.word	0x0800806b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68b9      	ldr	r1, [r7, #8]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f000 f9e2 	bl	8008378 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	699a      	ldr	r2, [r3, #24]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f042 0208 	orr.w	r2, r2, #8
 8007fc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	699a      	ldr	r2, [r3, #24]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f022 0204 	bic.w	r2, r2, #4
 8007fd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	6999      	ldr	r1, [r3, #24]
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	691a      	ldr	r2, [r3, #16]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	430a      	orrs	r2, r1
 8007fe4:	619a      	str	r2, [r3, #24]
      break;
 8007fe6:	e064      	b.n	80080b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68b9      	ldr	r1, [r7, #8]
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f000 fa28 	bl	8008444 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	699a      	ldr	r2, [r3, #24]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008002:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	699a      	ldr	r2, [r3, #24]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008012:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	6999      	ldr	r1, [r3, #24]
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	021a      	lsls	r2, r3, #8
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	430a      	orrs	r2, r1
 8008026:	619a      	str	r2, [r3, #24]
      break;
 8008028:	e043      	b.n	80080b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68b9      	ldr	r1, [r7, #8]
 8008030:	4618      	mov	r0, r3
 8008032:	f000 fa71 	bl	8008518 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	69da      	ldr	r2, [r3, #28]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f042 0208 	orr.w	r2, r2, #8
 8008044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	69da      	ldr	r2, [r3, #28]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f022 0204 	bic.w	r2, r2, #4
 8008054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	69d9      	ldr	r1, [r3, #28]
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	691a      	ldr	r2, [r3, #16]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	430a      	orrs	r2, r1
 8008066:	61da      	str	r2, [r3, #28]
      break;
 8008068:	e023      	b.n	80080b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68b9      	ldr	r1, [r7, #8]
 8008070:	4618      	mov	r0, r3
 8008072:	f000 fabb 	bl	80085ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	69da      	ldr	r2, [r3, #28]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008084:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	69da      	ldr	r2, [r3, #28]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	69d9      	ldr	r1, [r3, #28]
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	021a      	lsls	r2, r3, #8
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	430a      	orrs	r2, r1
 80080a8:	61da      	str	r2, [r3, #28]
      break;
 80080aa:	e002      	b.n	80080b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	75fb      	strb	r3, [r7, #23]
      break;
 80080b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80080ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3718      	adds	r7, #24
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080ce:	2300      	movs	r3, #0
 80080d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d101      	bne.n	80080e0 <HAL_TIM_ConfigClockSource+0x1c>
 80080dc:	2302      	movs	r3, #2
 80080de:	e0b4      	b.n	800824a <HAL_TIM_ConfigClockSource+0x186>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2202      	movs	r2, #2
 80080ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80080fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008106:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008118:	d03e      	beq.n	8008198 <HAL_TIM_ConfigClockSource+0xd4>
 800811a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800811e:	f200 8087 	bhi.w	8008230 <HAL_TIM_ConfigClockSource+0x16c>
 8008122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008126:	f000 8086 	beq.w	8008236 <HAL_TIM_ConfigClockSource+0x172>
 800812a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800812e:	d87f      	bhi.n	8008230 <HAL_TIM_ConfigClockSource+0x16c>
 8008130:	2b70      	cmp	r3, #112	; 0x70
 8008132:	d01a      	beq.n	800816a <HAL_TIM_ConfigClockSource+0xa6>
 8008134:	2b70      	cmp	r3, #112	; 0x70
 8008136:	d87b      	bhi.n	8008230 <HAL_TIM_ConfigClockSource+0x16c>
 8008138:	2b60      	cmp	r3, #96	; 0x60
 800813a:	d050      	beq.n	80081de <HAL_TIM_ConfigClockSource+0x11a>
 800813c:	2b60      	cmp	r3, #96	; 0x60
 800813e:	d877      	bhi.n	8008230 <HAL_TIM_ConfigClockSource+0x16c>
 8008140:	2b50      	cmp	r3, #80	; 0x50
 8008142:	d03c      	beq.n	80081be <HAL_TIM_ConfigClockSource+0xfa>
 8008144:	2b50      	cmp	r3, #80	; 0x50
 8008146:	d873      	bhi.n	8008230 <HAL_TIM_ConfigClockSource+0x16c>
 8008148:	2b40      	cmp	r3, #64	; 0x40
 800814a:	d058      	beq.n	80081fe <HAL_TIM_ConfigClockSource+0x13a>
 800814c:	2b40      	cmp	r3, #64	; 0x40
 800814e:	d86f      	bhi.n	8008230 <HAL_TIM_ConfigClockSource+0x16c>
 8008150:	2b30      	cmp	r3, #48	; 0x30
 8008152:	d064      	beq.n	800821e <HAL_TIM_ConfigClockSource+0x15a>
 8008154:	2b30      	cmp	r3, #48	; 0x30
 8008156:	d86b      	bhi.n	8008230 <HAL_TIM_ConfigClockSource+0x16c>
 8008158:	2b20      	cmp	r3, #32
 800815a:	d060      	beq.n	800821e <HAL_TIM_ConfigClockSource+0x15a>
 800815c:	2b20      	cmp	r3, #32
 800815e:	d867      	bhi.n	8008230 <HAL_TIM_ConfigClockSource+0x16c>
 8008160:	2b00      	cmp	r3, #0
 8008162:	d05c      	beq.n	800821e <HAL_TIM_ConfigClockSource+0x15a>
 8008164:	2b10      	cmp	r3, #16
 8008166:	d05a      	beq.n	800821e <HAL_TIM_ConfigClockSource+0x15a>
 8008168:	e062      	b.n	8008230 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800817a:	f000 fafc 	bl	8008776 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800818c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	609a      	str	r2, [r3, #8]
      break;
 8008196:	e04f      	b.n	8008238 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80081a8:	f000 fae5 	bl	8008776 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	689a      	ldr	r2, [r3, #8]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081ba:	609a      	str	r2, [r3, #8]
      break;
 80081bc:	e03c      	b.n	8008238 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081ca:	461a      	mov	r2, r3
 80081cc:	f000 fa5c 	bl	8008688 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2150      	movs	r1, #80	; 0x50
 80081d6:	4618      	mov	r0, r3
 80081d8:	f000 fab3 	bl	8008742 <TIM_ITRx_SetConfig>
      break;
 80081dc:	e02c      	b.n	8008238 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081ea:	461a      	mov	r2, r3
 80081ec:	f000 fa7a 	bl	80086e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2160      	movs	r1, #96	; 0x60
 80081f6:	4618      	mov	r0, r3
 80081f8:	f000 faa3 	bl	8008742 <TIM_ITRx_SetConfig>
      break;
 80081fc:	e01c      	b.n	8008238 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800820a:	461a      	mov	r2, r3
 800820c:	f000 fa3c 	bl	8008688 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2140      	movs	r1, #64	; 0x40
 8008216:	4618      	mov	r0, r3
 8008218:	f000 fa93 	bl	8008742 <TIM_ITRx_SetConfig>
      break;
 800821c:	e00c      	b.n	8008238 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4619      	mov	r1, r3
 8008228:	4610      	mov	r0, r2
 800822a:	f000 fa8a 	bl	8008742 <TIM_ITRx_SetConfig>
      break;
 800822e:	e003      	b.n	8008238 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	73fb      	strb	r3, [r7, #15]
      break;
 8008234:	e000      	b.n	8008238 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008236:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008248:	7bfb      	ldrb	r3, [r7, #15]
}
 800824a:	4618      	mov	r0, r3
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008252:	b480      	push	{r7}
 8008254:	b083      	sub	sp, #12
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800825a:	bf00      	nop
 800825c:	370c      	adds	r7, #12
 800825e:	46bd      	mov	sp, r7
 8008260:	bc80      	pop	{r7}
 8008262:	4770      	bx	lr

08008264 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800826c:	bf00      	nop
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	bc80      	pop	{r7}
 8008274:	4770      	bx	lr

08008276 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008276:	b480      	push	{r7}
 8008278:	b083      	sub	sp, #12
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800827e:	bf00      	nop
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	bc80      	pop	{r7}
 8008286:	4770      	bx	lr

08008288 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008290:	bf00      	nop
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	bc80      	pop	{r7}
 8008298:	4770      	bx	lr
	...

0800829c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a2f      	ldr	r2, [pc, #188]	; (800836c <TIM_Base_SetConfig+0xd0>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d00b      	beq.n	80082cc <TIM_Base_SetConfig+0x30>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082ba:	d007      	beq.n	80082cc <TIM_Base_SetConfig+0x30>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a2c      	ldr	r2, [pc, #176]	; (8008370 <TIM_Base_SetConfig+0xd4>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d003      	beq.n	80082cc <TIM_Base_SetConfig+0x30>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a2b      	ldr	r2, [pc, #172]	; (8008374 <TIM_Base_SetConfig+0xd8>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d108      	bne.n	80082de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	4313      	orrs	r3, r2
 80082dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a22      	ldr	r2, [pc, #136]	; (800836c <TIM_Base_SetConfig+0xd0>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d00b      	beq.n	80082fe <TIM_Base_SetConfig+0x62>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082ec:	d007      	beq.n	80082fe <TIM_Base_SetConfig+0x62>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a1f      	ldr	r2, [pc, #124]	; (8008370 <TIM_Base_SetConfig+0xd4>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d003      	beq.n	80082fe <TIM_Base_SetConfig+0x62>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4a1e      	ldr	r2, [pc, #120]	; (8008374 <TIM_Base_SetConfig+0xd8>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d108      	bne.n	8008310 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008304:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	4313      	orrs	r3, r2
 800830e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	695b      	ldr	r3, [r3, #20]
 800831a:	4313      	orrs	r3, r2
 800831c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	689a      	ldr	r2, [r3, #8]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a0d      	ldr	r2, [pc, #52]	; (800836c <TIM_Base_SetConfig+0xd0>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d103      	bne.n	8008344 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	691a      	ldr	r2, [r3, #16]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	f003 0301 	and.w	r3, r3, #1
 8008352:	2b00      	cmp	r3, #0
 8008354:	d005      	beq.n	8008362 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	f023 0201 	bic.w	r2, r3, #1
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	611a      	str	r2, [r3, #16]
  }
}
 8008362:	bf00      	nop
 8008364:	3714      	adds	r7, #20
 8008366:	46bd      	mov	sp, r7
 8008368:	bc80      	pop	{r7}
 800836a:	4770      	bx	lr
 800836c:	40012c00 	.word	0x40012c00
 8008370:	40000400 	.word	0x40000400
 8008374:	40000800 	.word	0x40000800

08008378 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008378:	b480      	push	{r7}
 800837a:	b087      	sub	sp, #28
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a1b      	ldr	r3, [r3, #32]
 8008386:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a1b      	ldr	r3, [r3, #32]
 800838c:	f023 0201 	bic.w	r2, r3, #1
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f023 0303 	bic.w	r3, r3, #3
 80083ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	f023 0302 	bic.w	r3, r3, #2
 80083c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	697a      	ldr	r2, [r7, #20]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a1c      	ldr	r2, [pc, #112]	; (8008440 <TIM_OC1_SetConfig+0xc8>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d10c      	bne.n	80083ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	f023 0308 	bic.w	r3, r3, #8
 80083da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	697a      	ldr	r2, [r7, #20]
 80083e2:	4313      	orrs	r3, r2
 80083e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	f023 0304 	bic.w	r3, r3, #4
 80083ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a13      	ldr	r2, [pc, #76]	; (8008440 <TIM_OC1_SetConfig+0xc8>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d111      	bne.n	800841a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008404:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	695b      	ldr	r3, [r3, #20]
 800840a:	693a      	ldr	r2, [r7, #16]
 800840c:	4313      	orrs	r3, r2
 800840e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	699b      	ldr	r3, [r3, #24]
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	4313      	orrs	r3, r2
 8008418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	693a      	ldr	r2, [r7, #16]
 800841e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	685a      	ldr	r2, [r3, #4]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	697a      	ldr	r2, [r7, #20]
 8008432:	621a      	str	r2, [r3, #32]
}
 8008434:	bf00      	nop
 8008436:	371c      	adds	r7, #28
 8008438:	46bd      	mov	sp, r7
 800843a:	bc80      	pop	{r7}
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	40012c00 	.word	0x40012c00

08008444 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008444:	b480      	push	{r7}
 8008446:	b087      	sub	sp, #28
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a1b      	ldr	r3, [r3, #32]
 8008452:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6a1b      	ldr	r3, [r3, #32]
 8008458:	f023 0210 	bic.w	r2, r3, #16
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	699b      	ldr	r3, [r3, #24]
 800846a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800847a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	021b      	lsls	r3, r3, #8
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	4313      	orrs	r3, r2
 8008486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	f023 0320 	bic.w	r3, r3, #32
 800848e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	011b      	lsls	r3, r3, #4
 8008496:	697a      	ldr	r2, [r7, #20]
 8008498:	4313      	orrs	r3, r2
 800849a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a1d      	ldr	r2, [pc, #116]	; (8008514 <TIM_OC2_SetConfig+0xd0>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d10d      	bne.n	80084c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	011b      	lsls	r3, r3, #4
 80084b2:	697a      	ldr	r2, [r7, #20]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4a14      	ldr	r2, [pc, #80]	; (8008514 <TIM_OC2_SetConfig+0xd0>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d113      	bne.n	80084f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	695b      	ldr	r3, [r3, #20]
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	693a      	ldr	r2, [r7, #16]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	693a      	ldr	r2, [r7, #16]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	685a      	ldr	r2, [r3, #4]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	621a      	str	r2, [r3, #32]
}
 800850a:	bf00      	nop
 800850c:	371c      	adds	r7, #28
 800850e:	46bd      	mov	sp, r7
 8008510:	bc80      	pop	{r7}
 8008512:	4770      	bx	lr
 8008514:	40012c00 	.word	0x40012c00

08008518 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008518:	b480      	push	{r7}
 800851a:	b087      	sub	sp, #28
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6a1b      	ldr	r3, [r3, #32]
 800852c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	69db      	ldr	r3, [r3, #28]
 800853e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f023 0303 	bic.w	r3, r3, #3
 800854e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	4313      	orrs	r3, r2
 8008558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	021b      	lsls	r3, r3, #8
 8008568:	697a      	ldr	r2, [r7, #20]
 800856a:	4313      	orrs	r3, r2
 800856c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a1d      	ldr	r2, [pc, #116]	; (80085e8 <TIM_OC3_SetConfig+0xd0>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d10d      	bne.n	8008592 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800857c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	021b      	lsls	r3, r3, #8
 8008584:	697a      	ldr	r2, [r7, #20]
 8008586:	4313      	orrs	r3, r2
 8008588:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008590:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a14      	ldr	r2, [pc, #80]	; (80085e8 <TIM_OC3_SetConfig+0xd0>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d113      	bne.n	80085c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	695b      	ldr	r3, [r3, #20]
 80085ae:	011b      	lsls	r3, r3, #4
 80085b0:	693a      	ldr	r2, [r7, #16]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	699b      	ldr	r3, [r3, #24]
 80085ba:	011b      	lsls	r3, r3, #4
 80085bc:	693a      	ldr	r2, [r7, #16]
 80085be:	4313      	orrs	r3, r2
 80085c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	693a      	ldr	r2, [r7, #16]
 80085c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	68fa      	ldr	r2, [r7, #12]
 80085cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	685a      	ldr	r2, [r3, #4]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	697a      	ldr	r2, [r7, #20]
 80085da:	621a      	str	r2, [r3, #32]
}
 80085dc:	bf00      	nop
 80085de:	371c      	adds	r7, #28
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bc80      	pop	{r7}
 80085e4:	4770      	bx	lr
 80085e6:	bf00      	nop
 80085e8:	40012c00 	.word	0x40012c00

080085ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b087      	sub	sp, #28
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a1b      	ldr	r3, [r3, #32]
 80085fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a1b      	ldr	r3, [r3, #32]
 8008600:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	69db      	ldr	r3, [r3, #28]
 8008612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800861a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	021b      	lsls	r3, r3, #8
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	4313      	orrs	r3, r2
 800862e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008636:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	031b      	lsls	r3, r3, #12
 800863e:	693a      	ldr	r2, [r7, #16]
 8008640:	4313      	orrs	r3, r2
 8008642:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a0f      	ldr	r2, [pc, #60]	; (8008684 <TIM_OC4_SetConfig+0x98>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d109      	bne.n	8008660 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008652:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	695b      	ldr	r3, [r3, #20]
 8008658:	019b      	lsls	r3, r3, #6
 800865a:	697a      	ldr	r2, [r7, #20]
 800865c:	4313      	orrs	r3, r2
 800865e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	697a      	ldr	r2, [r7, #20]
 8008664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	685a      	ldr	r2, [r3, #4]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	621a      	str	r2, [r3, #32]
}
 800867a:	bf00      	nop
 800867c:	371c      	adds	r7, #28
 800867e:	46bd      	mov	sp, r7
 8008680:	bc80      	pop	{r7}
 8008682:	4770      	bx	lr
 8008684:	40012c00 	.word	0x40012c00

08008688 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008688:	b480      	push	{r7}
 800868a:	b087      	sub	sp, #28
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6a1b      	ldr	r3, [r3, #32]
 8008698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6a1b      	ldr	r3, [r3, #32]
 800869e:	f023 0201 	bic.w	r2, r3, #1
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	699b      	ldr	r3, [r3, #24]
 80086aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	011b      	lsls	r3, r3, #4
 80086b8:	693a      	ldr	r2, [r7, #16]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	f023 030a 	bic.w	r3, r3, #10
 80086c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	693a      	ldr	r2, [r7, #16]
 80086d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	697a      	ldr	r2, [r7, #20]
 80086d8:	621a      	str	r2, [r3, #32]
}
 80086da:	bf00      	nop
 80086dc:	371c      	adds	r7, #28
 80086de:	46bd      	mov	sp, r7
 80086e0:	bc80      	pop	{r7}
 80086e2:	4770      	bx	lr

080086e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b087      	sub	sp, #28
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6a1b      	ldr	r3, [r3, #32]
 80086f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	f023 0210 	bic.w	r2, r3, #16
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800870e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	031b      	lsls	r3, r3, #12
 8008714:	693a      	ldr	r2, [r7, #16]
 8008716:	4313      	orrs	r3, r2
 8008718:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008720:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	011b      	lsls	r3, r3, #4
 8008726:	697a      	ldr	r2, [r7, #20]
 8008728:	4313      	orrs	r3, r2
 800872a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	693a      	ldr	r2, [r7, #16]
 8008730:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	697a      	ldr	r2, [r7, #20]
 8008736:	621a      	str	r2, [r3, #32]
}
 8008738:	bf00      	nop
 800873a:	371c      	adds	r7, #28
 800873c:	46bd      	mov	sp, r7
 800873e:	bc80      	pop	{r7}
 8008740:	4770      	bx	lr

08008742 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008742:	b480      	push	{r7}
 8008744:	b085      	sub	sp, #20
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
 800874a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008758:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800875a:	683a      	ldr	r2, [r7, #0]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	4313      	orrs	r3, r2
 8008760:	f043 0307 	orr.w	r3, r3, #7
 8008764:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	609a      	str	r2, [r3, #8]
}
 800876c:	bf00      	nop
 800876e:	3714      	adds	r7, #20
 8008770:	46bd      	mov	sp, r7
 8008772:	bc80      	pop	{r7}
 8008774:	4770      	bx	lr

08008776 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008776:	b480      	push	{r7}
 8008778:	b087      	sub	sp, #28
 800877a:	af00      	add	r7, sp, #0
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	60b9      	str	r1, [r7, #8]
 8008780:	607a      	str	r2, [r7, #4]
 8008782:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008790:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	021a      	lsls	r2, r3, #8
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	431a      	orrs	r2, r3
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	4313      	orrs	r3, r2
 800879e:	697a      	ldr	r2, [r7, #20]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	697a      	ldr	r2, [r7, #20]
 80087a8:	609a      	str	r2, [r3, #8]
}
 80087aa:	bf00      	nop
 80087ac:	371c      	adds	r7, #28
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bc80      	pop	{r7}
 80087b2:	4770      	bx	lr

080087b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b087      	sub	sp, #28
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	f003 031f 	and.w	r3, r3, #31
 80087c6:	2201      	movs	r2, #1
 80087c8:	fa02 f303 	lsl.w	r3, r2, r3
 80087cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6a1a      	ldr	r2, [r3, #32]
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	43db      	mvns	r3, r3
 80087d6:	401a      	ands	r2, r3
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6a1a      	ldr	r2, [r3, #32]
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	f003 031f 	and.w	r3, r3, #31
 80087e6:	6879      	ldr	r1, [r7, #4]
 80087e8:	fa01 f303 	lsl.w	r3, r1, r3
 80087ec:	431a      	orrs	r2, r3
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	621a      	str	r2, [r3, #32]
}
 80087f2:	bf00      	nop
 80087f4:	371c      	adds	r7, #28
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bc80      	pop	{r7}
 80087fa:	4770      	bx	lr

080087fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800880c:	2b01      	cmp	r3, #1
 800880e:	d101      	bne.n	8008814 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008810:	2302      	movs	r3, #2
 8008812:	e046      	b.n	80088a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2202      	movs	r2, #2
 8008820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800883a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	4313      	orrs	r3, r2
 8008844:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a16      	ldr	r2, [pc, #88]	; (80088ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d00e      	beq.n	8008876 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008860:	d009      	beq.n	8008876 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a12      	ldr	r2, [pc, #72]	; (80088b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d004      	beq.n	8008876 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a10      	ldr	r2, [pc, #64]	; (80088b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d10c      	bne.n	8008890 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800887c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	68ba      	ldr	r2, [r7, #8]
 8008884:	4313      	orrs	r3, r2
 8008886:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68ba      	ldr	r2, [r7, #8]
 800888e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3714      	adds	r7, #20
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bc80      	pop	{r7}
 80088aa:	4770      	bx	lr
 80088ac:	40012c00 	.word	0x40012c00
 80088b0:	40000400 	.word	0x40000400
 80088b4:	40000800 	.word	0x40000800

080088b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80088c2:	2300      	movs	r3, #0
 80088c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d101      	bne.n	80088d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80088d0:	2302      	movs	r3, #2
 80088d2:	e03d      	b.n	8008950 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	4313      	orrs	r3, r2
 80088f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	4313      	orrs	r3, r2
 8008904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4313      	orrs	r3, r2
 8008912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	4313      	orrs	r3, r2
 8008920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	695b      	ldr	r3, [r3, #20]
 800892c:	4313      	orrs	r3, r2
 800892e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	69db      	ldr	r3, [r3, #28]
 800893a:	4313      	orrs	r3, r2
 800893c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3714      	adds	r7, #20
 8008954:	46bd      	mov	sp, r7
 8008956:	bc80      	pop	{r7}
 8008958:	4770      	bx	lr

0800895a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800895a:	b480      	push	{r7}
 800895c:	b083      	sub	sp, #12
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008962:	bf00      	nop
 8008964:	370c      	adds	r7, #12
 8008966:	46bd      	mov	sp, r7
 8008968:	bc80      	pop	{r7}
 800896a:	4770      	bx	lr

0800896c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008974:	bf00      	nop
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	bc80      	pop	{r7}
 800897c:	4770      	bx	lr

0800897e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b082      	sub	sp, #8
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d101      	bne.n	8008990 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	e042      	b.n	8008a16 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008996:	b2db      	uxtb	r3, r3
 8008998:	2b00      	cmp	r3, #0
 800899a:	d106      	bne.n	80089aa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f7fb f869 	bl	8003a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2224      	movs	r2, #36	; 0x24
 80089ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68da      	ldr	r2, [r3, #12]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089c0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 ff82 	bl	80098cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	691a      	ldr	r2, [r3, #16]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80089d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	695a      	ldr	r2, [r3, #20]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80089e6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	68da      	ldr	r2, [r3, #12]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80089f6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2220      	movs	r2, #32
 8008a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2220      	movs	r2, #32
 8008a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b08a      	sub	sp, #40	; 0x28
 8008a22:	af02      	add	r7, sp, #8
 8008a24:	60f8      	str	r0, [r7, #12]
 8008a26:	60b9      	str	r1, [r7, #8]
 8008a28:	603b      	str	r3, [r7, #0]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b20      	cmp	r3, #32
 8008a3c:	d175      	bne.n	8008b2a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d002      	beq.n	8008a4a <HAL_UART_Transmit+0x2c>
 8008a44:	88fb      	ldrh	r3, [r7, #6]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d101      	bne.n	8008a4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e06e      	b.n	8008b2c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2200      	movs	r2, #0
 8008a52:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2221      	movs	r2, #33	; 0x21
 8008a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a5c:	f7fb ffd2 	bl	8004a04 <HAL_GetTick>
 8008a60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	88fa      	ldrh	r2, [r7, #6]
 8008a66:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	88fa      	ldrh	r2, [r7, #6]
 8008a6c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a76:	d108      	bne.n	8008a8a <HAL_UART_Transmit+0x6c>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d104      	bne.n	8008a8a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008a80:	2300      	movs	r3, #0
 8008a82:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	61bb      	str	r3, [r7, #24]
 8008a88:	e003      	b.n	8008a92 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a92:	e02e      	b.n	8008af2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	9300      	str	r3, [sp, #0]
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	2180      	movs	r1, #128	; 0x80
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	f000 fcc0 	bl	8009424 <UART_WaitOnFlagUntilTimeout>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d005      	beq.n	8008ab6 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2220      	movs	r2, #32
 8008aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e03a      	b.n	8008b2c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d10b      	bne.n	8008ad4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008abc:	69bb      	ldr	r3, [r7, #24]
 8008abe:	881b      	ldrh	r3, [r3, #0]
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008aca:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	3302      	adds	r3, #2
 8008ad0:	61bb      	str	r3, [r7, #24]
 8008ad2:	e007      	b.n	8008ae4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	781a      	ldrb	r2, [r3, #0]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	3b01      	subs	r3, #1
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d1cb      	bne.n	8008a94 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	2200      	movs	r2, #0
 8008b04:	2140      	movs	r1, #64	; 0x40
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f000 fc8c 	bl	8009424 <UART_WaitOnFlagUntilTimeout>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d005      	beq.n	8008b1e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2220      	movs	r2, #32
 8008b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e006      	b.n	8008b2c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2220      	movs	r2, #32
 8008b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	e000      	b.n	8008b2c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008b2a:	2302      	movs	r3, #2
  }
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3720      	adds	r7, #32
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	4613      	mov	r3, r2
 8008b40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	2b20      	cmp	r3, #32
 8008b4c:	d112      	bne.n	8008b74 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d002      	beq.n	8008b5a <HAL_UART_Receive_IT+0x26>
 8008b54:	88fb      	ldrh	r3, [r7, #6]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d101      	bne.n	8008b5e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e00b      	b.n	8008b76 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008b64:	88fb      	ldrh	r3, [r7, #6]
 8008b66:	461a      	mov	r2, r3
 8008b68:	68b9      	ldr	r1, [r7, #8]
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f000 fcb3 	bl	80094d6 <UART_Start_Receive_IT>
 8008b70:	4603      	mov	r3, r0
 8008b72:	e000      	b.n	8008b76 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008b74:	2302      	movs	r3, #2
  }
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
	...

08008b80 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b08c      	sub	sp, #48	; 0x30
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	2b20      	cmp	r3, #32
 8008b98:	d156      	bne.n	8008c48 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d002      	beq.n	8008ba6 <HAL_UART_Transmit_DMA+0x26>
 8008ba0:	88fb      	ldrh	r3, [r7, #6]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e04f      	b.n	8008c4a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	88fa      	ldrh	r2, [r7, #6]
 8008bb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	88fa      	ldrh	r2, [r7, #6]
 8008bba:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2221      	movs	r2, #33	; 0x21
 8008bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bce:	4a21      	ldr	r2, [pc, #132]	; (8008c54 <HAL_UART_Transmit_DMA+0xd4>)
 8008bd0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd6:	4a20      	ldr	r2, [pc, #128]	; (8008c58 <HAL_UART_Transmit_DMA+0xd8>)
 8008bd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bde:	4a1f      	ldr	r2, [pc, #124]	; (8008c5c <HAL_UART_Transmit_DMA+0xdc>)
 8008be0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be6:	2200      	movs	r2, #0
 8008be8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8008bea:	f107 0308 	add.w	r3, r7, #8
 8008bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf6:	6819      	ldr	r1, [r3, #0]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	3304      	adds	r3, #4
 8008bfe:	461a      	mov	r2, r3
 8008c00:	88fb      	ldrh	r3, [r7, #6]
 8008c02:	f7fc f895 	bl	8004d30 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c0e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	3314      	adds	r3, #20
 8008c16:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	e853 3f00 	ldrex	r3, [r3]
 8008c1e:	617b      	str	r3, [r7, #20]
   return(result);
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c26:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	3314      	adds	r3, #20
 8008c2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c30:	627a      	str	r2, [r7, #36]	; 0x24
 8008c32:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c34:	6a39      	ldr	r1, [r7, #32]
 8008c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c38:	e841 2300 	strex	r3, r2, [r1]
 8008c3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d1e5      	bne.n	8008c10 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8008c44:	2300      	movs	r3, #0
 8008c46:	e000      	b.n	8008c4a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8008c48:	2302      	movs	r3, #2
  }
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3730      	adds	r7, #48	; 0x30
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	080092db 	.word	0x080092db
 8008c58:	08009375 	.word	0x08009375
 8008c5c:	08009391 	.word	0x08009391

08008c60 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b08e      	sub	sp, #56	; 0x38
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	330c      	adds	r3, #12
 8008c6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c70:	6a3b      	ldr	r3, [r7, #32]
 8008c72:	e853 3f00 	ldrex	r3, [r3]
 8008c76:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008c7e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	330c      	adds	r3, #12
 8008c86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c90:	e841 2300 	strex	r3, r2, [r1]
 8008c94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1e5      	bne.n	8008c68 <HAL_UART_AbortTransmit+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	695b      	ldr	r3, [r3, #20]
 8008ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d036      	beq.n	8008d18 <HAL_UART_AbortTransmit+0xb8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	3314      	adds	r3, #20
 8008cb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	e853 3f00 	ldrex	r3, [r3]
 8008cb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cc0:	633b      	str	r3, [r7, #48]	; 0x30
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	3314      	adds	r3, #20
 8008cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cca:	61ba      	str	r2, [r7, #24]
 8008ccc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cce:	6979      	ldr	r1, [r7, #20]
 8008cd0:	69ba      	ldr	r2, [r7, #24]
 8008cd2:	e841 2300 	strex	r3, r2, [r1]
 8008cd6:	613b      	str	r3, [r7, #16]
   return(result);
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1e5      	bne.n	8008caa <HAL_UART_AbortTransmit+0x4a>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d018      	beq.n	8008d18 <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cea:	2200      	movs	r2, #0
 8008cec:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7fc f87c 	bl	8004df0 <HAL_DMA_Abort>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00c      	beq.n	8008d18 <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7fc fa2e 	bl	8005164 <HAL_DMA_GetError>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b20      	cmp	r3, #32
 8008d0c:	d104      	bne.n	8008d18 <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2210      	movs	r2, #16
 8008d12:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_TIMEOUT;
 8008d14:	2303      	movs	r3, #3
 8008d16:	e007      	b.n	8008d28 <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2220      	movs	r2, #32
 8008d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3738      	adds	r7, #56	; 0x38
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b0ba      	sub	sp, #232	; 0xe8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	695b      	ldr	r3, [r3, #20]
 8008d52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008d56:	2300      	movs	r3, #0
 8008d58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d66:	f003 030f 	and.w	r3, r3, #15
 8008d6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008d6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d10f      	bne.n	8008d96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d7a:	f003 0320 	and.w	r3, r3, #32
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d009      	beq.n	8008d96 <HAL_UART_IRQHandler+0x66>
 8008d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d86:	f003 0320 	and.w	r3, r3, #32
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d003      	beq.n	8008d96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fcde 	bl	8009750 <UART_Receive_IT>
      return;
 8008d94:	e25b      	b.n	800924e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008d96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f000 80de 	beq.w	8008f5c <HAL_UART_IRQHandler+0x22c>
 8008da0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008da4:	f003 0301 	and.w	r3, r3, #1
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d106      	bne.n	8008dba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008db0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f000 80d1 	beq.w	8008f5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dbe:	f003 0301 	and.w	r3, r3, #1
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d00b      	beq.n	8008dde <HAL_UART_IRQHandler+0xae>
 8008dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d005      	beq.n	8008dde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dd6:	f043 0201 	orr.w	r2, r3, #1
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008de2:	f003 0304 	and.w	r3, r3, #4
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00b      	beq.n	8008e02 <HAL_UART_IRQHandler+0xd2>
 8008dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008dee:	f003 0301 	and.w	r3, r3, #1
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d005      	beq.n	8008e02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dfa:	f043 0202 	orr.w	r2, r3, #2
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e06:	f003 0302 	and.w	r3, r3, #2
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00b      	beq.n	8008e26 <HAL_UART_IRQHandler+0xf6>
 8008e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e12:	f003 0301 	and.w	r3, r3, #1
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d005      	beq.n	8008e26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e1e:	f043 0204 	orr.w	r2, r3, #4
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e2a:	f003 0308 	and.w	r3, r3, #8
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d011      	beq.n	8008e56 <HAL_UART_IRQHandler+0x126>
 8008e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e36:	f003 0320 	and.w	r3, r3, #32
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d105      	bne.n	8008e4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e42:	f003 0301 	and.w	r3, r3, #1
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d005      	beq.n	8008e56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e4e:	f043 0208 	orr.w	r2, r3, #8
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f000 81f2 	beq.w	8009244 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e64:	f003 0320 	and.w	r3, r3, #32
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d008      	beq.n	8008e7e <HAL_UART_IRQHandler+0x14e>
 8008e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e70:	f003 0320 	and.w	r3, r3, #32
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d002      	beq.n	8008e7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fc69 	bl	8009750 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	bf14      	ite	ne
 8008e8c:	2301      	movne	r3, #1
 8008e8e:	2300      	moveq	r3, #0
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e9a:	f003 0308 	and.w	r3, r3, #8
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d103      	bne.n	8008eaa <HAL_UART_IRQHandler+0x17a>
 8008ea2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d04f      	beq.n	8008f4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fb73 	bl	8009596 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	695b      	ldr	r3, [r3, #20]
 8008eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d041      	beq.n	8008f42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	3314      	adds	r3, #20
 8008ec4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ecc:	e853 3f00 	ldrex	r3, [r3]
 8008ed0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008ed4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008edc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	3314      	adds	r3, #20
 8008ee6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008eea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008eee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008ef6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008efa:	e841 2300 	strex	r3, r2, [r1]
 8008efe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008f02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1d9      	bne.n	8008ebe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d013      	beq.n	8008f3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f16:	4a7e      	ldr	r2, [pc, #504]	; (8009110 <HAL_UART_IRQHandler+0x3e0>)
 8008f18:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7fb ffa2 	bl	8004e68 <HAL_DMA_Abort_IT>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d016      	beq.n	8008f58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008f34:	4610      	mov	r0, r2
 8008f36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f38:	e00e      	b.n	8008f58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 f99c 	bl	8009278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f40:	e00a      	b.n	8008f58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 f998 	bl	8009278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f48:	e006      	b.n	8008f58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f994 	bl	8009278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008f56:	e175      	b.n	8009244 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f58:	bf00      	nop
    return;
 8008f5a:	e173      	b.n	8009244 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	f040 814f 	bne.w	8009204 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f6a:	f003 0310 	and.w	r3, r3, #16
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	f000 8148 	beq.w	8009204 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f78:	f003 0310 	and.w	r3, r3, #16
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f000 8141 	beq.w	8009204 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f82:	2300      	movs	r3, #0
 8008f84:	60bb      	str	r3, [r7, #8]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	60bb      	str	r3, [r7, #8]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	60bb      	str	r3, [r7, #8]
 8008f96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	695b      	ldr	r3, [r3, #20]
 8008f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f000 80b6 	beq.w	8009114 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008fb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f000 8145 	beq.w	8009248 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008fc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	f080 813e 	bcs.w	8009248 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008fd2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fd8:	699b      	ldr	r3, [r3, #24]
 8008fda:	2b20      	cmp	r3, #32
 8008fdc:	f000 8088 	beq.w	80090f0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	330c      	adds	r3, #12
 8008fe6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008fee:	e853 3f00 	ldrex	r3, [r3]
 8008ff2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008ff6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ffa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ffe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	330c      	adds	r3, #12
 8009008:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800900c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009010:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009014:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009018:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800901c:	e841 2300 	strex	r3, r2, [r1]
 8009020:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009024:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1d9      	bne.n	8008fe0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	3314      	adds	r3, #20
 8009032:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009034:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009036:	e853 3f00 	ldrex	r3, [r3]
 800903a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800903c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800903e:	f023 0301 	bic.w	r3, r3, #1
 8009042:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	3314      	adds	r3, #20
 800904c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009050:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009054:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009056:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009058:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800905c:	e841 2300 	strex	r3, r2, [r1]
 8009060:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009062:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009064:	2b00      	cmp	r3, #0
 8009066:	d1e1      	bne.n	800902c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	3314      	adds	r3, #20
 800906e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009070:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009072:	e853 3f00 	ldrex	r3, [r3]
 8009076:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009078:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800907a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800907e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	3314      	adds	r3, #20
 8009088:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800908c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800908e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009090:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009092:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009094:	e841 2300 	strex	r3, r2, [r1]
 8009098:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800909a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800909c:	2b00      	cmp	r3, #0
 800909e:	d1e3      	bne.n	8009068 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2220      	movs	r2, #32
 80090a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	330c      	adds	r3, #12
 80090b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090b8:	e853 3f00 	ldrex	r3, [r3]
 80090bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80090be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090c0:	f023 0310 	bic.w	r3, r3, #16
 80090c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	330c      	adds	r3, #12
 80090ce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80090d2:	65ba      	str	r2, [r7, #88]	; 0x58
 80090d4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80090d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090da:	e841 2300 	strex	r3, r2, [r1]
 80090de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80090e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1e3      	bne.n	80090ae <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7fb fe80 	bl	8004df0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2202      	movs	r2, #2
 80090f4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80090fe:	b29b      	uxth	r3, r3
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	b29b      	uxth	r3, r3
 8009104:	4619      	mov	r1, r3
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f8bf 	bl	800928a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800910c:	e09c      	b.n	8009248 <HAL_UART_IRQHandler+0x518>
 800910e:	bf00      	nop
 8009110:	0800965b 	.word	0x0800965b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800911c:	b29b      	uxth	r3, r3
 800911e:	1ad3      	subs	r3, r2, r3
 8009120:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009128:	b29b      	uxth	r3, r3
 800912a:	2b00      	cmp	r3, #0
 800912c:	f000 808e 	beq.w	800924c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009130:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009134:	2b00      	cmp	r3, #0
 8009136:	f000 8089 	beq.w	800924c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	330c      	adds	r3, #12
 8009140:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009144:	e853 3f00 	ldrex	r3, [r3]
 8009148:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800914a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800914c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009150:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	330c      	adds	r3, #12
 800915a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800915e:	647a      	str	r2, [r7, #68]	; 0x44
 8009160:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009162:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009164:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009166:	e841 2300 	strex	r3, r2, [r1]
 800916a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800916c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800916e:	2b00      	cmp	r3, #0
 8009170:	d1e3      	bne.n	800913a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	3314      	adds	r3, #20
 8009178:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917c:	e853 3f00 	ldrex	r3, [r3]
 8009180:	623b      	str	r3, [r7, #32]
   return(result);
 8009182:	6a3b      	ldr	r3, [r7, #32]
 8009184:	f023 0301 	bic.w	r3, r3, #1
 8009188:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	3314      	adds	r3, #20
 8009192:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009196:	633a      	str	r2, [r7, #48]	; 0x30
 8009198:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800919c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800919e:	e841 2300 	strex	r3, r2, [r1]
 80091a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80091a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d1e3      	bne.n	8009172 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2220      	movs	r2, #32
 80091ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	330c      	adds	r3, #12
 80091be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	e853 3f00 	ldrex	r3, [r3]
 80091c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f023 0310 	bic.w	r3, r3, #16
 80091ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	330c      	adds	r3, #12
 80091d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80091dc:	61fa      	str	r2, [r7, #28]
 80091de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e0:	69b9      	ldr	r1, [r7, #24]
 80091e2:	69fa      	ldr	r2, [r7, #28]
 80091e4:	e841 2300 	strex	r3, r2, [r1]
 80091e8:	617b      	str	r3, [r7, #20]
   return(result);
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d1e3      	bne.n	80091b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2202      	movs	r2, #2
 80091f4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80091f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80091fa:	4619      	mov	r1, r3
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 f844 	bl	800928a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009202:	e023      	b.n	800924c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800920c:	2b00      	cmp	r3, #0
 800920e:	d009      	beq.n	8009224 <HAL_UART_IRQHandler+0x4f4>
 8009210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009218:	2b00      	cmp	r3, #0
 800921a:	d003      	beq.n	8009224 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 fa30 	bl	8009682 <UART_Transmit_IT>
    return;
 8009222:	e014      	b.n	800924e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800922c:	2b00      	cmp	r3, #0
 800922e:	d00e      	beq.n	800924e <HAL_UART_IRQHandler+0x51e>
 8009230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009238:	2b00      	cmp	r3, #0
 800923a:	d008      	beq.n	800924e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 fa6f 	bl	8009720 <UART_EndTransmit_IT>
    return;
 8009242:	e004      	b.n	800924e <HAL_UART_IRQHandler+0x51e>
    return;
 8009244:	bf00      	nop
 8009246:	e002      	b.n	800924e <HAL_UART_IRQHandler+0x51e>
      return;
 8009248:	bf00      	nop
 800924a:	e000      	b.n	800924e <HAL_UART_IRQHandler+0x51e>
      return;
 800924c:	bf00      	nop
  }
}
 800924e:	37e8      	adds	r7, #232	; 0xe8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800925c:	bf00      	nop
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	bc80      	pop	{r7}
 8009264:	4770      	bx	lr

08009266 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009266:	b480      	push	{r7}
 8009268:	b083      	sub	sp, #12
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800926e:	bf00      	nop
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	bc80      	pop	{r7}
 8009276:	4770      	bx	lr

08009278 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009280:	bf00      	nop
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	bc80      	pop	{r7}
 8009288:	4770      	bx	lr

0800928a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800928a:	b480      	push	{r7}
 800928c:	b083      	sub	sp, #12
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
 8009292:	460b      	mov	r3, r1
 8009294:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009296:	bf00      	nop
 8009298:	370c      	adds	r7, #12
 800929a:	46bd      	mov	sp, r7
 800929c:	bc80      	pop	{r7}
 800929e:	4770      	bx	lr

080092a0 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 80092a8:	2300      	movs	r3, #0
 80092aa:	60fb      	str	r3, [r7, #12]
 80092ac:	2300      	movs	r3, #0
 80092ae:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	b2da      	uxtb	r2, r3
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	4313      	orrs	r3, r2
 80092ce:	b2db      	uxtb	r3, r3
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3714      	adds	r7, #20
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bc80      	pop	{r7}
 80092d8:	4770      	bx	lr

080092da <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80092da:	b580      	push	{r7, lr}
 80092dc:	b090      	sub	sp, #64	; 0x40
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f003 0320 	and.w	r3, r3, #32
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d137      	bne.n	8009366 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80092f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092f8:	2200      	movs	r2, #0
 80092fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80092fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	3314      	adds	r3, #20
 8009302:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009306:	e853 3f00 	ldrex	r3, [r3]
 800930a:	623b      	str	r3, [r7, #32]
   return(result);
 800930c:	6a3b      	ldr	r3, [r7, #32]
 800930e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009312:	63bb      	str	r3, [r7, #56]	; 0x38
 8009314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	3314      	adds	r3, #20
 800931a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800931c:	633a      	str	r2, [r7, #48]	; 0x30
 800931e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009320:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009324:	e841 2300 	strex	r3, r2, [r1]
 8009328:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800932a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932c:	2b00      	cmp	r3, #0
 800932e:	d1e5      	bne.n	80092fc <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	330c      	adds	r3, #12
 8009336:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	e853 3f00 	ldrex	r3, [r3]
 800933e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009346:	637b      	str	r3, [r7, #52]	; 0x34
 8009348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	330c      	adds	r3, #12
 800934e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009350:	61fa      	str	r2, [r7, #28]
 8009352:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009354:	69b9      	ldr	r1, [r7, #24]
 8009356:	69fa      	ldr	r2, [r7, #28]
 8009358:	e841 2300 	strex	r3, r2, [r1]
 800935c:	617b      	str	r3, [r7, #20]
   return(result);
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1e5      	bne.n	8009330 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009364:	e002      	b.n	800936c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009366:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009368:	f7ff ff74 	bl	8009254 <HAL_UART_TxCpltCallback>
}
 800936c:	bf00      	nop
 800936e:	3740      	adds	r7, #64	; 0x40
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009380:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f7ff ff6f 	bl	8009266 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009388:	bf00      	nop
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009398:	2300      	movs	r3, #0
 800939a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	695b      	ldr	r3, [r3, #20]
 80093a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	bf14      	ite	ne
 80093b0:	2301      	movne	r3, #1
 80093b2:	2300      	moveq	r3, #0
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b21      	cmp	r3, #33	; 0x21
 80093c2:	d108      	bne.n	80093d6 <UART_DMAError+0x46>
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d005      	beq.n	80093d6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	2200      	movs	r2, #0
 80093ce:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80093d0:	68b8      	ldr	r0, [r7, #8]
 80093d2:	f000 f8b9 	bl	8009548 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	695b      	ldr	r3, [r3, #20]
 80093dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	bf14      	ite	ne
 80093e4:	2301      	movne	r3, #1
 80093e6:	2300      	moveq	r3, #0
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	2b22      	cmp	r3, #34	; 0x22
 80093f6:	d108      	bne.n	800940a <UART_DMAError+0x7a>
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d005      	beq.n	800940a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	2200      	movs	r2, #0
 8009402:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009404:	68b8      	ldr	r0, [r7, #8]
 8009406:	f000 f8c6 	bl	8009596 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800940e:	f043 0210 	orr.w	r2, r3, #16
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009416:	68b8      	ldr	r0, [r7, #8]
 8009418:	f7ff ff2e 	bl	8009278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800941c:	bf00      	nop
 800941e:	3710      	adds	r7, #16
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b086      	sub	sp, #24
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	603b      	str	r3, [r7, #0]
 8009430:	4613      	mov	r3, r2
 8009432:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009434:	e03b      	b.n	80094ae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009436:	6a3b      	ldr	r3, [r7, #32]
 8009438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800943c:	d037      	beq.n	80094ae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800943e:	f7fb fae1 	bl	8004a04 <HAL_GetTick>
 8009442:	4602      	mov	r2, r0
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	1ad3      	subs	r3, r2, r3
 8009448:	6a3a      	ldr	r2, [r7, #32]
 800944a:	429a      	cmp	r2, r3
 800944c:	d302      	bcc.n	8009454 <UART_WaitOnFlagUntilTimeout+0x30>
 800944e:	6a3b      	ldr	r3, [r7, #32]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d101      	bne.n	8009458 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009454:	2303      	movs	r3, #3
 8009456:	e03a      	b.n	80094ce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	f003 0304 	and.w	r3, r3, #4
 8009462:	2b00      	cmp	r3, #0
 8009464:	d023      	beq.n	80094ae <UART_WaitOnFlagUntilTimeout+0x8a>
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	2b80      	cmp	r3, #128	; 0x80
 800946a:	d020      	beq.n	80094ae <UART_WaitOnFlagUntilTimeout+0x8a>
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	2b40      	cmp	r3, #64	; 0x40
 8009470:	d01d      	beq.n	80094ae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 0308 	and.w	r3, r3, #8
 800947c:	2b08      	cmp	r3, #8
 800947e:	d116      	bne.n	80094ae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009480:	2300      	movs	r3, #0
 8009482:	617b      	str	r3, [r7, #20]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	617b      	str	r3, [r7, #20]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	617b      	str	r3, [r7, #20]
 8009494:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009496:	68f8      	ldr	r0, [r7, #12]
 8009498:	f000 f87d 	bl	8009596 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2208      	movs	r2, #8
 80094a0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	e00f      	b.n	80094ce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	4013      	ands	r3, r2
 80094b8:	68ba      	ldr	r2, [r7, #8]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	bf0c      	ite	eq
 80094be:	2301      	moveq	r3, #1
 80094c0:	2300      	movne	r3, #0
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	461a      	mov	r2, r3
 80094c6:	79fb      	ldrb	r3, [r7, #7]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d0b4      	beq.n	8009436 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3718      	adds	r7, #24
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094d6:	b480      	push	{r7}
 80094d8:	b085      	sub	sp, #20
 80094da:	af00      	add	r7, sp, #0
 80094dc:	60f8      	str	r0, [r7, #12]
 80094de:	60b9      	str	r1, [r7, #8]
 80094e0:	4613      	mov	r3, r2
 80094e2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	68ba      	ldr	r2, [r7, #8]
 80094e8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	88fa      	ldrh	r2, [r7, #6]
 80094ee:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	88fa      	ldrh	r2, [r7, #6]
 80094f4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2200      	movs	r2, #0
 80094fa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2222      	movs	r2, #34	; 0x22
 8009500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	691b      	ldr	r3, [r3, #16]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d007      	beq.n	800951c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	68da      	ldr	r2, [r3, #12]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800951a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	695a      	ldr	r2, [r3, #20]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f042 0201 	orr.w	r2, r2, #1
 800952a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	68da      	ldr	r2, [r3, #12]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f042 0220 	orr.w	r2, r2, #32
 800953a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3714      	adds	r7, #20
 8009542:	46bd      	mov	sp, r7
 8009544:	bc80      	pop	{r7}
 8009546:	4770      	bx	lr

08009548 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009548:	b480      	push	{r7}
 800954a:	b089      	sub	sp, #36	; 0x24
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	330c      	adds	r3, #12
 8009556:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	e853 3f00 	ldrex	r3, [r3]
 800955e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009566:	61fb      	str	r3, [r7, #28]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	330c      	adds	r3, #12
 800956e:	69fa      	ldr	r2, [r7, #28]
 8009570:	61ba      	str	r2, [r7, #24]
 8009572:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009574:	6979      	ldr	r1, [r7, #20]
 8009576:	69ba      	ldr	r2, [r7, #24]
 8009578:	e841 2300 	strex	r3, r2, [r1]
 800957c:	613b      	str	r3, [r7, #16]
   return(result);
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1e5      	bne.n	8009550 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2220      	movs	r2, #32
 8009588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800958c:	bf00      	nop
 800958e:	3724      	adds	r7, #36	; 0x24
 8009590:	46bd      	mov	sp, r7
 8009592:	bc80      	pop	{r7}
 8009594:	4770      	bx	lr

08009596 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009596:	b480      	push	{r7}
 8009598:	b095      	sub	sp, #84	; 0x54
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	330c      	adds	r3, #12
 80095a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a8:	e853 3f00 	ldrex	r3, [r3]
 80095ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80095ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	330c      	adds	r3, #12
 80095bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80095be:	643a      	str	r2, [r7, #64]	; 0x40
 80095c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80095c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095c6:	e841 2300 	strex	r3, r2, [r1]
 80095ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d1e5      	bne.n	800959e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	3314      	adds	r3, #20
 80095d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095da:	6a3b      	ldr	r3, [r7, #32]
 80095dc:	e853 3f00 	ldrex	r3, [r3]
 80095e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	f023 0301 	bic.w	r3, r3, #1
 80095e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	3314      	adds	r3, #20
 80095f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095fa:	e841 2300 	strex	r3, r2, [r1]
 80095fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1e5      	bne.n	80095d2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800960a:	2b01      	cmp	r3, #1
 800960c:	d119      	bne.n	8009642 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	330c      	adds	r3, #12
 8009614:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	e853 3f00 	ldrex	r3, [r3]
 800961c:	60bb      	str	r3, [r7, #8]
   return(result);
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	f023 0310 	bic.w	r3, r3, #16
 8009624:	647b      	str	r3, [r7, #68]	; 0x44
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	330c      	adds	r3, #12
 800962c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800962e:	61ba      	str	r2, [r7, #24]
 8009630:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009632:	6979      	ldr	r1, [r7, #20]
 8009634:	69ba      	ldr	r2, [r7, #24]
 8009636:	e841 2300 	strex	r3, r2, [r1]
 800963a:	613b      	str	r3, [r7, #16]
   return(result);
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d1e5      	bne.n	800960e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2220      	movs	r2, #32
 8009646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009650:	bf00      	nop
 8009652:	3754      	adds	r7, #84	; 0x54
 8009654:	46bd      	mov	sp, r7
 8009656:	bc80      	pop	{r7}
 8009658:	4770      	bx	lr

0800965a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800965a:	b580      	push	{r7, lr}
 800965c:	b084      	sub	sp, #16
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009666:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2200      	movs	r2, #0
 800966c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2200      	movs	r2, #0
 8009672:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f7ff fdff 	bl	8009278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800967a:	bf00      	nop
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009682:	b480      	push	{r7}
 8009684:	b085      	sub	sp, #20
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009690:	b2db      	uxtb	r3, r3
 8009692:	2b21      	cmp	r3, #33	; 0x21
 8009694:	d13e      	bne.n	8009714 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800969e:	d114      	bne.n	80096ca <UART_Transmit_IT+0x48>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d110      	bne.n	80096ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6a1b      	ldr	r3, [r3, #32]
 80096ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	881b      	ldrh	r3, [r3, #0]
 80096b2:	461a      	mov	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6a1b      	ldr	r3, [r3, #32]
 80096c2:	1c9a      	adds	r2, r3, #2
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	621a      	str	r2, [r3, #32]
 80096c8:	e008      	b.n	80096dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a1b      	ldr	r3, [r3, #32]
 80096ce:	1c59      	adds	r1, r3, #1
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	6211      	str	r1, [r2, #32]
 80096d4:	781a      	ldrb	r2, [r3, #0]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	3b01      	subs	r3, #1
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	4619      	mov	r1, r3
 80096ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d10f      	bne.n	8009710 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68da      	ldr	r2, [r3, #12]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	68da      	ldr	r2, [r3, #12]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800970e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009710:	2300      	movs	r3, #0
 8009712:	e000      	b.n	8009716 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009714:	2302      	movs	r3, #2
  }
}
 8009716:	4618      	mov	r0, r3
 8009718:	3714      	adds	r7, #20
 800971a:	46bd      	mov	sp, r7
 800971c:	bc80      	pop	{r7}
 800971e:	4770      	bx	lr

08009720 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	68da      	ldr	r2, [r3, #12]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009736:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2220      	movs	r2, #32
 800973c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f7ff fd87 	bl	8009254 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009746:	2300      	movs	r3, #0
}
 8009748:	4618      	mov	r0, r3
 800974a:	3708      	adds	r7, #8
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b08c      	sub	sp, #48	; 0x30
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800975e:	b2db      	uxtb	r3, r3
 8009760:	2b22      	cmp	r3, #34	; 0x22
 8009762:	f040 80ae 	bne.w	80098c2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800976e:	d117      	bne.n	80097a0 <UART_Receive_IT+0x50>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	691b      	ldr	r3, [r3, #16]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d113      	bne.n	80097a0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009778:	2300      	movs	r3, #0
 800977a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009780:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	b29b      	uxth	r3, r3
 800978a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800978e:	b29a      	uxth	r2, r3
 8009790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009792:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009798:	1c9a      	adds	r2, r3, #2
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	629a      	str	r2, [r3, #40]	; 0x28
 800979e:	e026      	b.n	80097ee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80097a6:	2300      	movs	r3, #0
 80097a8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097b2:	d007      	beq.n	80097c4 <UART_Receive_IT+0x74>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d10a      	bne.n	80097d2 <UART_Receive_IT+0x82>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	691b      	ldr	r3, [r3, #16]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d106      	bne.n	80097d2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	b2da      	uxtb	r2, r3
 80097cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ce:	701a      	strb	r2, [r3, #0]
 80097d0:	e008      	b.n	80097e4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097de:	b2da      	uxtb	r2, r3
 80097e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e8:	1c5a      	adds	r2, r3, #1
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	3b01      	subs	r3, #1
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	4619      	mov	r1, r3
 80097fc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d15d      	bne.n	80098be <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	68da      	ldr	r2, [r3, #12]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f022 0220 	bic.w	r2, r2, #32
 8009810:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	68da      	ldr	r2, [r3, #12]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009820:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	695a      	ldr	r2, [r3, #20]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f022 0201 	bic.w	r2, r2, #1
 8009830:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2220      	movs	r2, #32
 8009836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009844:	2b01      	cmp	r3, #1
 8009846:	d135      	bne.n	80098b4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	330c      	adds	r3, #12
 8009854:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	e853 3f00 	ldrex	r3, [r3]
 800985c:	613b      	str	r3, [r7, #16]
   return(result);
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	f023 0310 	bic.w	r3, r3, #16
 8009864:	627b      	str	r3, [r7, #36]	; 0x24
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	330c      	adds	r3, #12
 800986c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800986e:	623a      	str	r2, [r7, #32]
 8009870:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009872:	69f9      	ldr	r1, [r7, #28]
 8009874:	6a3a      	ldr	r2, [r7, #32]
 8009876:	e841 2300 	strex	r3, r2, [r1]
 800987a:	61bb      	str	r3, [r7, #24]
   return(result);
 800987c:	69bb      	ldr	r3, [r7, #24]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d1e5      	bne.n	800984e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f003 0310 	and.w	r3, r3, #16
 800988c:	2b10      	cmp	r3, #16
 800988e:	d10a      	bne.n	80098a6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009890:	2300      	movs	r3, #0
 8009892:	60fb      	str	r3, [r7, #12]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	60fb      	str	r3, [r7, #12]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	60fb      	str	r3, [r7, #12]
 80098a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80098aa:	4619      	mov	r1, r3
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f7ff fcec 	bl	800928a <HAL_UARTEx_RxEventCallback>
 80098b2:	e002      	b.n	80098ba <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f7fa f813 	bl	80038e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80098ba:	2300      	movs	r3, #0
 80098bc:	e002      	b.n	80098c4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	e000      	b.n	80098c4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80098c2:	2302      	movs	r3, #2
  }
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3730      	adds	r7, #48	; 0x30
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	691b      	ldr	r3, [r3, #16]
 80098da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	68da      	ldr	r2, [r3, #12]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	430a      	orrs	r2, r1
 80098e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	689a      	ldr	r2, [r3, #8]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	691b      	ldr	r3, [r3, #16]
 80098f2:	431a      	orrs	r2, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	695b      	ldr	r3, [r3, #20]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009906:	f023 030c 	bic.w	r3, r3, #12
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	6812      	ldr	r2, [r2, #0]
 800990e:	68b9      	ldr	r1, [r7, #8]
 8009910:	430b      	orrs	r3, r1
 8009912:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	699a      	ldr	r2, [r3, #24]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	430a      	orrs	r2, r1
 8009928:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a2c      	ldr	r2, [pc, #176]	; (80099e0 <UART_SetConfig+0x114>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d103      	bne.n	800993c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009934:	f7fe f846 	bl	80079c4 <HAL_RCC_GetPCLK2Freq>
 8009938:	60f8      	str	r0, [r7, #12]
 800993a:	e002      	b.n	8009942 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800993c:	f7fe f82e 	bl	800799c <HAL_RCC_GetPCLK1Freq>
 8009940:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	4613      	mov	r3, r2
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	4413      	add	r3, r2
 800994a:	009a      	lsls	r2, r3, #2
 800994c:	441a      	add	r2, r3
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	fbb2 f3f3 	udiv	r3, r2, r3
 8009958:	4a22      	ldr	r2, [pc, #136]	; (80099e4 <UART_SetConfig+0x118>)
 800995a:	fba2 2303 	umull	r2, r3, r2, r3
 800995e:	095b      	lsrs	r3, r3, #5
 8009960:	0119      	lsls	r1, r3, #4
 8009962:	68fa      	ldr	r2, [r7, #12]
 8009964:	4613      	mov	r3, r2
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	4413      	add	r3, r2
 800996a:	009a      	lsls	r2, r3, #2
 800996c:	441a      	add	r2, r3
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	fbb2 f2f3 	udiv	r2, r2, r3
 8009978:	4b1a      	ldr	r3, [pc, #104]	; (80099e4 <UART_SetConfig+0x118>)
 800997a:	fba3 0302 	umull	r0, r3, r3, r2
 800997e:	095b      	lsrs	r3, r3, #5
 8009980:	2064      	movs	r0, #100	; 0x64
 8009982:	fb00 f303 	mul.w	r3, r0, r3
 8009986:	1ad3      	subs	r3, r2, r3
 8009988:	011b      	lsls	r3, r3, #4
 800998a:	3332      	adds	r3, #50	; 0x32
 800998c:	4a15      	ldr	r2, [pc, #84]	; (80099e4 <UART_SetConfig+0x118>)
 800998e:	fba2 2303 	umull	r2, r3, r2, r3
 8009992:	095b      	lsrs	r3, r3, #5
 8009994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009998:	4419      	add	r1, r3
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	4613      	mov	r3, r2
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	4413      	add	r3, r2
 80099a2:	009a      	lsls	r2, r3, #2
 80099a4:	441a      	add	r2, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80099b0:	4b0c      	ldr	r3, [pc, #48]	; (80099e4 <UART_SetConfig+0x118>)
 80099b2:	fba3 0302 	umull	r0, r3, r3, r2
 80099b6:	095b      	lsrs	r3, r3, #5
 80099b8:	2064      	movs	r0, #100	; 0x64
 80099ba:	fb00 f303 	mul.w	r3, r0, r3
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	011b      	lsls	r3, r3, #4
 80099c2:	3332      	adds	r3, #50	; 0x32
 80099c4:	4a07      	ldr	r2, [pc, #28]	; (80099e4 <UART_SetConfig+0x118>)
 80099c6:	fba2 2303 	umull	r2, r3, r2, r3
 80099ca:	095b      	lsrs	r3, r3, #5
 80099cc:	f003 020f 	and.w	r2, r3, #15
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	440a      	add	r2, r1
 80099d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80099d8:	bf00      	nop
 80099da:	3710      	adds	r7, #16
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	40013800 	.word	0x40013800
 80099e4:	51eb851f 	.word	0x51eb851f

080099e8 <malloc>:
 80099e8:	4b02      	ldr	r3, [pc, #8]	; (80099f4 <malloc+0xc>)
 80099ea:	4601      	mov	r1, r0
 80099ec:	6818      	ldr	r0, [r3, #0]
 80099ee:	f000 b823 	b.w	8009a38 <_malloc_r>
 80099f2:	bf00      	nop
 80099f4:	20000094 	.word	0x20000094

080099f8 <sbrk_aligned>:
 80099f8:	b570      	push	{r4, r5, r6, lr}
 80099fa:	4e0e      	ldr	r6, [pc, #56]	; (8009a34 <sbrk_aligned+0x3c>)
 80099fc:	460c      	mov	r4, r1
 80099fe:	6831      	ldr	r1, [r6, #0]
 8009a00:	4605      	mov	r5, r0
 8009a02:	b911      	cbnz	r1, 8009a0a <sbrk_aligned+0x12>
 8009a04:	f000 feb2 	bl	800a76c <_sbrk_r>
 8009a08:	6030      	str	r0, [r6, #0]
 8009a0a:	4621      	mov	r1, r4
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	f000 fead 	bl	800a76c <_sbrk_r>
 8009a12:	1c43      	adds	r3, r0, #1
 8009a14:	d00a      	beq.n	8009a2c <sbrk_aligned+0x34>
 8009a16:	1cc4      	adds	r4, r0, #3
 8009a18:	f024 0403 	bic.w	r4, r4, #3
 8009a1c:	42a0      	cmp	r0, r4
 8009a1e:	d007      	beq.n	8009a30 <sbrk_aligned+0x38>
 8009a20:	1a21      	subs	r1, r4, r0
 8009a22:	4628      	mov	r0, r5
 8009a24:	f000 fea2 	bl	800a76c <_sbrk_r>
 8009a28:	3001      	adds	r0, #1
 8009a2a:	d101      	bne.n	8009a30 <sbrk_aligned+0x38>
 8009a2c:	f04f 34ff 	mov.w	r4, #4294967295
 8009a30:	4620      	mov	r0, r4
 8009a32:	bd70      	pop	{r4, r5, r6, pc}
 8009a34:	20000be0 	.word	0x20000be0

08009a38 <_malloc_r>:
 8009a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a3c:	1ccd      	adds	r5, r1, #3
 8009a3e:	f025 0503 	bic.w	r5, r5, #3
 8009a42:	3508      	adds	r5, #8
 8009a44:	2d0c      	cmp	r5, #12
 8009a46:	bf38      	it	cc
 8009a48:	250c      	movcc	r5, #12
 8009a4a:	2d00      	cmp	r5, #0
 8009a4c:	4607      	mov	r7, r0
 8009a4e:	db01      	blt.n	8009a54 <_malloc_r+0x1c>
 8009a50:	42a9      	cmp	r1, r5
 8009a52:	d905      	bls.n	8009a60 <_malloc_r+0x28>
 8009a54:	230c      	movs	r3, #12
 8009a56:	2600      	movs	r6, #0
 8009a58:	603b      	str	r3, [r7, #0]
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009b34 <_malloc_r+0xfc>
 8009a64:	f000 f868 	bl	8009b38 <__malloc_lock>
 8009a68:	f8d8 3000 	ldr.w	r3, [r8]
 8009a6c:	461c      	mov	r4, r3
 8009a6e:	bb5c      	cbnz	r4, 8009ac8 <_malloc_r+0x90>
 8009a70:	4629      	mov	r1, r5
 8009a72:	4638      	mov	r0, r7
 8009a74:	f7ff ffc0 	bl	80099f8 <sbrk_aligned>
 8009a78:	1c43      	adds	r3, r0, #1
 8009a7a:	4604      	mov	r4, r0
 8009a7c:	d155      	bne.n	8009b2a <_malloc_r+0xf2>
 8009a7e:	f8d8 4000 	ldr.w	r4, [r8]
 8009a82:	4626      	mov	r6, r4
 8009a84:	2e00      	cmp	r6, #0
 8009a86:	d145      	bne.n	8009b14 <_malloc_r+0xdc>
 8009a88:	2c00      	cmp	r4, #0
 8009a8a:	d048      	beq.n	8009b1e <_malloc_r+0xe6>
 8009a8c:	6823      	ldr	r3, [r4, #0]
 8009a8e:	4631      	mov	r1, r6
 8009a90:	4638      	mov	r0, r7
 8009a92:	eb04 0903 	add.w	r9, r4, r3
 8009a96:	f000 fe69 	bl	800a76c <_sbrk_r>
 8009a9a:	4581      	cmp	r9, r0
 8009a9c:	d13f      	bne.n	8009b1e <_malloc_r+0xe6>
 8009a9e:	6821      	ldr	r1, [r4, #0]
 8009aa0:	4638      	mov	r0, r7
 8009aa2:	1a6d      	subs	r5, r5, r1
 8009aa4:	4629      	mov	r1, r5
 8009aa6:	f7ff ffa7 	bl	80099f8 <sbrk_aligned>
 8009aaa:	3001      	adds	r0, #1
 8009aac:	d037      	beq.n	8009b1e <_malloc_r+0xe6>
 8009aae:	6823      	ldr	r3, [r4, #0]
 8009ab0:	442b      	add	r3, r5
 8009ab2:	6023      	str	r3, [r4, #0]
 8009ab4:	f8d8 3000 	ldr.w	r3, [r8]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d038      	beq.n	8009b2e <_malloc_r+0xf6>
 8009abc:	685a      	ldr	r2, [r3, #4]
 8009abe:	42a2      	cmp	r2, r4
 8009ac0:	d12b      	bne.n	8009b1a <_malloc_r+0xe2>
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	605a      	str	r2, [r3, #4]
 8009ac6:	e00f      	b.n	8009ae8 <_malloc_r+0xb0>
 8009ac8:	6822      	ldr	r2, [r4, #0]
 8009aca:	1b52      	subs	r2, r2, r5
 8009acc:	d41f      	bmi.n	8009b0e <_malloc_r+0xd6>
 8009ace:	2a0b      	cmp	r2, #11
 8009ad0:	d917      	bls.n	8009b02 <_malloc_r+0xca>
 8009ad2:	1961      	adds	r1, r4, r5
 8009ad4:	42a3      	cmp	r3, r4
 8009ad6:	6025      	str	r5, [r4, #0]
 8009ad8:	bf18      	it	ne
 8009ada:	6059      	strne	r1, [r3, #4]
 8009adc:	6863      	ldr	r3, [r4, #4]
 8009ade:	bf08      	it	eq
 8009ae0:	f8c8 1000 	streq.w	r1, [r8]
 8009ae4:	5162      	str	r2, [r4, r5]
 8009ae6:	604b      	str	r3, [r1, #4]
 8009ae8:	4638      	mov	r0, r7
 8009aea:	f104 060b 	add.w	r6, r4, #11
 8009aee:	f000 f829 	bl	8009b44 <__malloc_unlock>
 8009af2:	f026 0607 	bic.w	r6, r6, #7
 8009af6:	1d23      	adds	r3, r4, #4
 8009af8:	1af2      	subs	r2, r6, r3
 8009afa:	d0ae      	beq.n	8009a5a <_malloc_r+0x22>
 8009afc:	1b9b      	subs	r3, r3, r6
 8009afe:	50a3      	str	r3, [r4, r2]
 8009b00:	e7ab      	b.n	8009a5a <_malloc_r+0x22>
 8009b02:	42a3      	cmp	r3, r4
 8009b04:	6862      	ldr	r2, [r4, #4]
 8009b06:	d1dd      	bne.n	8009ac4 <_malloc_r+0x8c>
 8009b08:	f8c8 2000 	str.w	r2, [r8]
 8009b0c:	e7ec      	b.n	8009ae8 <_malloc_r+0xb0>
 8009b0e:	4623      	mov	r3, r4
 8009b10:	6864      	ldr	r4, [r4, #4]
 8009b12:	e7ac      	b.n	8009a6e <_malloc_r+0x36>
 8009b14:	4634      	mov	r4, r6
 8009b16:	6876      	ldr	r6, [r6, #4]
 8009b18:	e7b4      	b.n	8009a84 <_malloc_r+0x4c>
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	e7cc      	b.n	8009ab8 <_malloc_r+0x80>
 8009b1e:	230c      	movs	r3, #12
 8009b20:	4638      	mov	r0, r7
 8009b22:	603b      	str	r3, [r7, #0]
 8009b24:	f000 f80e 	bl	8009b44 <__malloc_unlock>
 8009b28:	e797      	b.n	8009a5a <_malloc_r+0x22>
 8009b2a:	6025      	str	r5, [r4, #0]
 8009b2c:	e7dc      	b.n	8009ae8 <_malloc_r+0xb0>
 8009b2e:	605b      	str	r3, [r3, #4]
 8009b30:	deff      	udf	#255	; 0xff
 8009b32:	bf00      	nop
 8009b34:	20000bdc 	.word	0x20000bdc

08009b38 <__malloc_lock>:
 8009b38:	4801      	ldr	r0, [pc, #4]	; (8009b40 <__malloc_lock+0x8>)
 8009b3a:	f000 be64 	b.w	800a806 <__retarget_lock_acquire_recursive>
 8009b3e:	bf00      	nop
 8009b40:	20000d24 	.word	0x20000d24

08009b44 <__malloc_unlock>:
 8009b44:	4801      	ldr	r0, [pc, #4]	; (8009b4c <__malloc_unlock+0x8>)
 8009b46:	f000 be5f 	b.w	800a808 <__retarget_lock_release_recursive>
 8009b4a:	bf00      	nop
 8009b4c:	20000d24 	.word	0x20000d24

08009b50 <__cvt>:
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b56:	461f      	mov	r7, r3
 8009b58:	bfbb      	ittet	lt
 8009b5a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009b5e:	461f      	movlt	r7, r3
 8009b60:	2300      	movge	r3, #0
 8009b62:	232d      	movlt	r3, #45	; 0x2d
 8009b64:	b088      	sub	sp, #32
 8009b66:	4614      	mov	r4, r2
 8009b68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b6a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009b6c:	7013      	strb	r3, [r2, #0]
 8009b6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b70:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009b74:	f023 0820 	bic.w	r8, r3, #32
 8009b78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b7c:	d005      	beq.n	8009b8a <__cvt+0x3a>
 8009b7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009b82:	d100      	bne.n	8009b86 <__cvt+0x36>
 8009b84:	3501      	adds	r5, #1
 8009b86:	2302      	movs	r3, #2
 8009b88:	e000      	b.n	8009b8c <__cvt+0x3c>
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	aa07      	add	r2, sp, #28
 8009b8e:	9204      	str	r2, [sp, #16]
 8009b90:	aa06      	add	r2, sp, #24
 8009b92:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009b96:	e9cd 3500 	strd	r3, r5, [sp]
 8009b9a:	4622      	mov	r2, r4
 8009b9c:	463b      	mov	r3, r7
 8009b9e:	f000 fecb 	bl	800a938 <_dtoa_r>
 8009ba2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009ba6:	4606      	mov	r6, r0
 8009ba8:	d102      	bne.n	8009bb0 <__cvt+0x60>
 8009baa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009bac:	07db      	lsls	r3, r3, #31
 8009bae:	d522      	bpl.n	8009bf6 <__cvt+0xa6>
 8009bb0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009bb4:	eb06 0905 	add.w	r9, r6, r5
 8009bb8:	d110      	bne.n	8009bdc <__cvt+0x8c>
 8009bba:	7833      	ldrb	r3, [r6, #0]
 8009bbc:	2b30      	cmp	r3, #48	; 0x30
 8009bbe:	d10a      	bne.n	8009bd6 <__cvt+0x86>
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	4620      	mov	r0, r4
 8009bc6:	4639      	mov	r1, r7
 8009bc8:	f7f6 feee 	bl	80009a8 <__aeabi_dcmpeq>
 8009bcc:	b918      	cbnz	r0, 8009bd6 <__cvt+0x86>
 8009bce:	f1c5 0501 	rsb	r5, r5, #1
 8009bd2:	f8ca 5000 	str.w	r5, [sl]
 8009bd6:	f8da 3000 	ldr.w	r3, [sl]
 8009bda:	4499      	add	r9, r3
 8009bdc:	2200      	movs	r2, #0
 8009bde:	2300      	movs	r3, #0
 8009be0:	4620      	mov	r0, r4
 8009be2:	4639      	mov	r1, r7
 8009be4:	f7f6 fee0 	bl	80009a8 <__aeabi_dcmpeq>
 8009be8:	b108      	cbz	r0, 8009bee <__cvt+0x9e>
 8009bea:	f8cd 901c 	str.w	r9, [sp, #28]
 8009bee:	2230      	movs	r2, #48	; 0x30
 8009bf0:	9b07      	ldr	r3, [sp, #28]
 8009bf2:	454b      	cmp	r3, r9
 8009bf4:	d307      	bcc.n	8009c06 <__cvt+0xb6>
 8009bf6:	4630      	mov	r0, r6
 8009bf8:	9b07      	ldr	r3, [sp, #28]
 8009bfa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009bfc:	1b9b      	subs	r3, r3, r6
 8009bfe:	6013      	str	r3, [r2, #0]
 8009c00:	b008      	add	sp, #32
 8009c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c06:	1c59      	adds	r1, r3, #1
 8009c08:	9107      	str	r1, [sp, #28]
 8009c0a:	701a      	strb	r2, [r3, #0]
 8009c0c:	e7f0      	b.n	8009bf0 <__cvt+0xa0>

08009c0e <__exponent>:
 8009c0e:	4603      	mov	r3, r0
 8009c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c12:	2900      	cmp	r1, #0
 8009c14:	f803 2b02 	strb.w	r2, [r3], #2
 8009c18:	bfb6      	itet	lt
 8009c1a:	222d      	movlt	r2, #45	; 0x2d
 8009c1c:	222b      	movge	r2, #43	; 0x2b
 8009c1e:	4249      	neglt	r1, r1
 8009c20:	2909      	cmp	r1, #9
 8009c22:	7042      	strb	r2, [r0, #1]
 8009c24:	dd2a      	ble.n	8009c7c <__exponent+0x6e>
 8009c26:	f10d 0207 	add.w	r2, sp, #7
 8009c2a:	4617      	mov	r7, r2
 8009c2c:	260a      	movs	r6, #10
 8009c2e:	fb91 f5f6 	sdiv	r5, r1, r6
 8009c32:	4694      	mov	ip, r2
 8009c34:	fb06 1415 	mls	r4, r6, r5, r1
 8009c38:	3430      	adds	r4, #48	; 0x30
 8009c3a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009c3e:	460c      	mov	r4, r1
 8009c40:	2c63      	cmp	r4, #99	; 0x63
 8009c42:	4629      	mov	r1, r5
 8009c44:	f102 32ff 	add.w	r2, r2, #4294967295
 8009c48:	dcf1      	bgt.n	8009c2e <__exponent+0x20>
 8009c4a:	3130      	adds	r1, #48	; 0x30
 8009c4c:	f1ac 0402 	sub.w	r4, ip, #2
 8009c50:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009c54:	4622      	mov	r2, r4
 8009c56:	1c41      	adds	r1, r0, #1
 8009c58:	42ba      	cmp	r2, r7
 8009c5a:	d30a      	bcc.n	8009c72 <__exponent+0x64>
 8009c5c:	f10d 0209 	add.w	r2, sp, #9
 8009c60:	eba2 020c 	sub.w	r2, r2, ip
 8009c64:	42bc      	cmp	r4, r7
 8009c66:	bf88      	it	hi
 8009c68:	2200      	movhi	r2, #0
 8009c6a:	4413      	add	r3, r2
 8009c6c:	1a18      	subs	r0, r3, r0
 8009c6e:	b003      	add	sp, #12
 8009c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c72:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009c76:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009c7a:	e7ed      	b.n	8009c58 <__exponent+0x4a>
 8009c7c:	2330      	movs	r3, #48	; 0x30
 8009c7e:	3130      	adds	r1, #48	; 0x30
 8009c80:	7083      	strb	r3, [r0, #2]
 8009c82:	70c1      	strb	r1, [r0, #3]
 8009c84:	1d03      	adds	r3, r0, #4
 8009c86:	e7f1      	b.n	8009c6c <__exponent+0x5e>

08009c88 <_printf_float>:
 8009c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c8c:	b091      	sub	sp, #68	; 0x44
 8009c8e:	460c      	mov	r4, r1
 8009c90:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009c94:	4616      	mov	r6, r2
 8009c96:	461f      	mov	r7, r3
 8009c98:	4605      	mov	r5, r0
 8009c9a:	f000 fd2f 	bl	800a6fc <_localeconv_r>
 8009c9e:	6803      	ldr	r3, [r0, #0]
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ca4:	f7f6 fa54 	bl	8000150 <strlen>
 8009ca8:	2300      	movs	r3, #0
 8009caa:	930e      	str	r3, [sp, #56]	; 0x38
 8009cac:	f8d8 3000 	ldr.w	r3, [r8]
 8009cb0:	900a      	str	r0, [sp, #40]	; 0x28
 8009cb2:	3307      	adds	r3, #7
 8009cb4:	f023 0307 	bic.w	r3, r3, #7
 8009cb8:	f103 0208 	add.w	r2, r3, #8
 8009cbc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009cc0:	f8d4 b000 	ldr.w	fp, [r4]
 8009cc4:	f8c8 2000 	str.w	r2, [r8]
 8009cc8:	e9d3 a800 	ldrd	sl, r8, [r3]
 8009ccc:	4652      	mov	r2, sl
 8009cce:	4643      	mov	r3, r8
 8009cd0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009cd4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8009cd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009cda:	f04f 32ff 	mov.w	r2, #4294967295
 8009cde:	4650      	mov	r0, sl
 8009ce0:	4b9c      	ldr	r3, [pc, #624]	; (8009f54 <_printf_float+0x2cc>)
 8009ce2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ce4:	f7f6 fe92 	bl	8000a0c <__aeabi_dcmpun>
 8009ce8:	bb70      	cbnz	r0, 8009d48 <_printf_float+0xc0>
 8009cea:	f04f 32ff 	mov.w	r2, #4294967295
 8009cee:	4650      	mov	r0, sl
 8009cf0:	4b98      	ldr	r3, [pc, #608]	; (8009f54 <_printf_float+0x2cc>)
 8009cf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009cf4:	f7f6 fe6c 	bl	80009d0 <__aeabi_dcmple>
 8009cf8:	bb30      	cbnz	r0, 8009d48 <_printf_float+0xc0>
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	4650      	mov	r0, sl
 8009d00:	4641      	mov	r1, r8
 8009d02:	f7f6 fe5b 	bl	80009bc <__aeabi_dcmplt>
 8009d06:	b110      	cbz	r0, 8009d0e <_printf_float+0x86>
 8009d08:	232d      	movs	r3, #45	; 0x2d
 8009d0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d0e:	4a92      	ldr	r2, [pc, #584]	; (8009f58 <_printf_float+0x2d0>)
 8009d10:	4b92      	ldr	r3, [pc, #584]	; (8009f5c <_printf_float+0x2d4>)
 8009d12:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009d16:	bf94      	ite	ls
 8009d18:	4690      	movls	r8, r2
 8009d1a:	4698      	movhi	r8, r3
 8009d1c:	2303      	movs	r3, #3
 8009d1e:	f04f 0a00 	mov.w	sl, #0
 8009d22:	6123      	str	r3, [r4, #16]
 8009d24:	f02b 0304 	bic.w	r3, fp, #4
 8009d28:	6023      	str	r3, [r4, #0]
 8009d2a:	4633      	mov	r3, r6
 8009d2c:	4621      	mov	r1, r4
 8009d2e:	4628      	mov	r0, r5
 8009d30:	9700      	str	r7, [sp, #0]
 8009d32:	aa0f      	add	r2, sp, #60	; 0x3c
 8009d34:	f000 f9d6 	bl	800a0e4 <_printf_common>
 8009d38:	3001      	adds	r0, #1
 8009d3a:	f040 8090 	bne.w	8009e5e <_printf_float+0x1d6>
 8009d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d42:	b011      	add	sp, #68	; 0x44
 8009d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d48:	4652      	mov	r2, sl
 8009d4a:	4643      	mov	r3, r8
 8009d4c:	4650      	mov	r0, sl
 8009d4e:	4641      	mov	r1, r8
 8009d50:	f7f6 fe5c 	bl	8000a0c <__aeabi_dcmpun>
 8009d54:	b148      	cbz	r0, 8009d6a <_printf_float+0xe2>
 8009d56:	f1b8 0f00 	cmp.w	r8, #0
 8009d5a:	bfb8      	it	lt
 8009d5c:	232d      	movlt	r3, #45	; 0x2d
 8009d5e:	4a80      	ldr	r2, [pc, #512]	; (8009f60 <_printf_float+0x2d8>)
 8009d60:	bfb8      	it	lt
 8009d62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009d66:	4b7f      	ldr	r3, [pc, #508]	; (8009f64 <_printf_float+0x2dc>)
 8009d68:	e7d3      	b.n	8009d12 <_printf_float+0x8a>
 8009d6a:	6863      	ldr	r3, [r4, #4]
 8009d6c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009d70:	1c5a      	adds	r2, r3, #1
 8009d72:	d142      	bne.n	8009dfa <_printf_float+0x172>
 8009d74:	2306      	movs	r3, #6
 8009d76:	6063      	str	r3, [r4, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	9206      	str	r2, [sp, #24]
 8009d7c:	aa0e      	add	r2, sp, #56	; 0x38
 8009d7e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009d82:	aa0d      	add	r2, sp, #52	; 0x34
 8009d84:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009d88:	9203      	str	r2, [sp, #12]
 8009d8a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009d8e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009d92:	6023      	str	r3, [r4, #0]
 8009d94:	6863      	ldr	r3, [r4, #4]
 8009d96:	4652      	mov	r2, sl
 8009d98:	9300      	str	r3, [sp, #0]
 8009d9a:	4628      	mov	r0, r5
 8009d9c:	4643      	mov	r3, r8
 8009d9e:	910b      	str	r1, [sp, #44]	; 0x2c
 8009da0:	f7ff fed6 	bl	8009b50 <__cvt>
 8009da4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009da6:	4680      	mov	r8, r0
 8009da8:	2947      	cmp	r1, #71	; 0x47
 8009daa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009dac:	d108      	bne.n	8009dc0 <_printf_float+0x138>
 8009dae:	1cc8      	adds	r0, r1, #3
 8009db0:	db02      	blt.n	8009db8 <_printf_float+0x130>
 8009db2:	6863      	ldr	r3, [r4, #4]
 8009db4:	4299      	cmp	r1, r3
 8009db6:	dd40      	ble.n	8009e3a <_printf_float+0x1b2>
 8009db8:	f1a9 0902 	sub.w	r9, r9, #2
 8009dbc:	fa5f f989 	uxtb.w	r9, r9
 8009dc0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009dc4:	d81f      	bhi.n	8009e06 <_printf_float+0x17e>
 8009dc6:	464a      	mov	r2, r9
 8009dc8:	3901      	subs	r1, #1
 8009dca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009dce:	910d      	str	r1, [sp, #52]	; 0x34
 8009dd0:	f7ff ff1d 	bl	8009c0e <__exponent>
 8009dd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009dd6:	4682      	mov	sl, r0
 8009dd8:	1813      	adds	r3, r2, r0
 8009dda:	2a01      	cmp	r2, #1
 8009ddc:	6123      	str	r3, [r4, #16]
 8009dde:	dc02      	bgt.n	8009de6 <_printf_float+0x15e>
 8009de0:	6822      	ldr	r2, [r4, #0]
 8009de2:	07d2      	lsls	r2, r2, #31
 8009de4:	d501      	bpl.n	8009dea <_printf_float+0x162>
 8009de6:	3301      	adds	r3, #1
 8009de8:	6123      	str	r3, [r4, #16]
 8009dea:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d09b      	beq.n	8009d2a <_printf_float+0xa2>
 8009df2:	232d      	movs	r3, #45	; 0x2d
 8009df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009df8:	e797      	b.n	8009d2a <_printf_float+0xa2>
 8009dfa:	2947      	cmp	r1, #71	; 0x47
 8009dfc:	d1bc      	bne.n	8009d78 <_printf_float+0xf0>
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d1ba      	bne.n	8009d78 <_printf_float+0xf0>
 8009e02:	2301      	movs	r3, #1
 8009e04:	e7b7      	b.n	8009d76 <_printf_float+0xee>
 8009e06:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009e0a:	d118      	bne.n	8009e3e <_printf_float+0x1b6>
 8009e0c:	2900      	cmp	r1, #0
 8009e0e:	6863      	ldr	r3, [r4, #4]
 8009e10:	dd0b      	ble.n	8009e2a <_printf_float+0x1a2>
 8009e12:	6121      	str	r1, [r4, #16]
 8009e14:	b913      	cbnz	r3, 8009e1c <_printf_float+0x194>
 8009e16:	6822      	ldr	r2, [r4, #0]
 8009e18:	07d0      	lsls	r0, r2, #31
 8009e1a:	d502      	bpl.n	8009e22 <_printf_float+0x19a>
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	440b      	add	r3, r1
 8009e20:	6123      	str	r3, [r4, #16]
 8009e22:	f04f 0a00 	mov.w	sl, #0
 8009e26:	65a1      	str	r1, [r4, #88]	; 0x58
 8009e28:	e7df      	b.n	8009dea <_printf_float+0x162>
 8009e2a:	b913      	cbnz	r3, 8009e32 <_printf_float+0x1aa>
 8009e2c:	6822      	ldr	r2, [r4, #0]
 8009e2e:	07d2      	lsls	r2, r2, #31
 8009e30:	d501      	bpl.n	8009e36 <_printf_float+0x1ae>
 8009e32:	3302      	adds	r3, #2
 8009e34:	e7f4      	b.n	8009e20 <_printf_float+0x198>
 8009e36:	2301      	movs	r3, #1
 8009e38:	e7f2      	b.n	8009e20 <_printf_float+0x198>
 8009e3a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009e3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e40:	4299      	cmp	r1, r3
 8009e42:	db05      	blt.n	8009e50 <_printf_float+0x1c8>
 8009e44:	6823      	ldr	r3, [r4, #0]
 8009e46:	6121      	str	r1, [r4, #16]
 8009e48:	07d8      	lsls	r0, r3, #31
 8009e4a:	d5ea      	bpl.n	8009e22 <_printf_float+0x19a>
 8009e4c:	1c4b      	adds	r3, r1, #1
 8009e4e:	e7e7      	b.n	8009e20 <_printf_float+0x198>
 8009e50:	2900      	cmp	r1, #0
 8009e52:	bfcc      	ite	gt
 8009e54:	2201      	movgt	r2, #1
 8009e56:	f1c1 0202 	rsble	r2, r1, #2
 8009e5a:	4413      	add	r3, r2
 8009e5c:	e7e0      	b.n	8009e20 <_printf_float+0x198>
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	055a      	lsls	r2, r3, #21
 8009e62:	d407      	bmi.n	8009e74 <_printf_float+0x1ec>
 8009e64:	6923      	ldr	r3, [r4, #16]
 8009e66:	4642      	mov	r2, r8
 8009e68:	4631      	mov	r1, r6
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	47b8      	blx	r7
 8009e6e:	3001      	adds	r0, #1
 8009e70:	d12b      	bne.n	8009eca <_printf_float+0x242>
 8009e72:	e764      	b.n	8009d3e <_printf_float+0xb6>
 8009e74:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009e78:	f240 80dd 	bls.w	800a036 <_printf_float+0x3ae>
 8009e7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e80:	2200      	movs	r2, #0
 8009e82:	2300      	movs	r3, #0
 8009e84:	f7f6 fd90 	bl	80009a8 <__aeabi_dcmpeq>
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	d033      	beq.n	8009ef4 <_printf_float+0x26c>
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	4631      	mov	r1, r6
 8009e90:	4628      	mov	r0, r5
 8009e92:	4a35      	ldr	r2, [pc, #212]	; (8009f68 <_printf_float+0x2e0>)
 8009e94:	47b8      	blx	r7
 8009e96:	3001      	adds	r0, #1
 8009e98:	f43f af51 	beq.w	8009d3e <_printf_float+0xb6>
 8009e9c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	db02      	blt.n	8009eaa <_printf_float+0x222>
 8009ea4:	6823      	ldr	r3, [r4, #0]
 8009ea6:	07d8      	lsls	r0, r3, #31
 8009ea8:	d50f      	bpl.n	8009eca <_printf_float+0x242>
 8009eaa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009eae:	4631      	mov	r1, r6
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	47b8      	blx	r7
 8009eb4:	3001      	adds	r0, #1
 8009eb6:	f43f af42 	beq.w	8009d3e <_printf_float+0xb6>
 8009eba:	f04f 0800 	mov.w	r8, #0
 8009ebe:	f104 091a 	add.w	r9, r4, #26
 8009ec2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	4543      	cmp	r3, r8
 8009ec8:	dc09      	bgt.n	8009ede <_printf_float+0x256>
 8009eca:	6823      	ldr	r3, [r4, #0]
 8009ecc:	079b      	lsls	r3, r3, #30
 8009ece:	f100 8104 	bmi.w	800a0da <_printf_float+0x452>
 8009ed2:	68e0      	ldr	r0, [r4, #12]
 8009ed4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ed6:	4298      	cmp	r0, r3
 8009ed8:	bfb8      	it	lt
 8009eda:	4618      	movlt	r0, r3
 8009edc:	e731      	b.n	8009d42 <_printf_float+0xba>
 8009ede:	2301      	movs	r3, #1
 8009ee0:	464a      	mov	r2, r9
 8009ee2:	4631      	mov	r1, r6
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	47b8      	blx	r7
 8009ee8:	3001      	adds	r0, #1
 8009eea:	f43f af28 	beq.w	8009d3e <_printf_float+0xb6>
 8009eee:	f108 0801 	add.w	r8, r8, #1
 8009ef2:	e7e6      	b.n	8009ec2 <_printf_float+0x23a>
 8009ef4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	dc38      	bgt.n	8009f6c <_printf_float+0x2e4>
 8009efa:	2301      	movs	r3, #1
 8009efc:	4631      	mov	r1, r6
 8009efe:	4628      	mov	r0, r5
 8009f00:	4a19      	ldr	r2, [pc, #100]	; (8009f68 <_printf_float+0x2e0>)
 8009f02:	47b8      	blx	r7
 8009f04:	3001      	adds	r0, #1
 8009f06:	f43f af1a 	beq.w	8009d3e <_printf_float+0xb6>
 8009f0a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	d102      	bne.n	8009f18 <_printf_float+0x290>
 8009f12:	6823      	ldr	r3, [r4, #0]
 8009f14:	07d9      	lsls	r1, r3, #31
 8009f16:	d5d8      	bpl.n	8009eca <_printf_float+0x242>
 8009f18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f1c:	4631      	mov	r1, r6
 8009f1e:	4628      	mov	r0, r5
 8009f20:	47b8      	blx	r7
 8009f22:	3001      	adds	r0, #1
 8009f24:	f43f af0b 	beq.w	8009d3e <_printf_float+0xb6>
 8009f28:	f04f 0900 	mov.w	r9, #0
 8009f2c:	f104 0a1a 	add.w	sl, r4, #26
 8009f30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f32:	425b      	negs	r3, r3
 8009f34:	454b      	cmp	r3, r9
 8009f36:	dc01      	bgt.n	8009f3c <_printf_float+0x2b4>
 8009f38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f3a:	e794      	b.n	8009e66 <_printf_float+0x1de>
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	4652      	mov	r2, sl
 8009f40:	4631      	mov	r1, r6
 8009f42:	4628      	mov	r0, r5
 8009f44:	47b8      	blx	r7
 8009f46:	3001      	adds	r0, #1
 8009f48:	f43f aef9 	beq.w	8009d3e <_printf_float+0xb6>
 8009f4c:	f109 0901 	add.w	r9, r9, #1
 8009f50:	e7ee      	b.n	8009f30 <_printf_float+0x2a8>
 8009f52:	bf00      	nop
 8009f54:	7fefffff 	.word	0x7fefffff
 8009f58:	0800cb16 	.word	0x0800cb16
 8009f5c:	0800cb1a 	.word	0x0800cb1a
 8009f60:	0800cb1e 	.word	0x0800cb1e
 8009f64:	0800cb22 	.word	0x0800cb22
 8009f68:	0800cb26 	.word	0x0800cb26
 8009f6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f70:	429a      	cmp	r2, r3
 8009f72:	bfa8      	it	ge
 8009f74:	461a      	movge	r2, r3
 8009f76:	2a00      	cmp	r2, #0
 8009f78:	4691      	mov	r9, r2
 8009f7a:	dc37      	bgt.n	8009fec <_printf_float+0x364>
 8009f7c:	f04f 0b00 	mov.w	fp, #0
 8009f80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f84:	f104 021a 	add.w	r2, r4, #26
 8009f88:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009f8c:	ebaa 0309 	sub.w	r3, sl, r9
 8009f90:	455b      	cmp	r3, fp
 8009f92:	dc33      	bgt.n	8009ffc <_printf_float+0x374>
 8009f94:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	db3b      	blt.n	800a014 <_printf_float+0x38c>
 8009f9c:	6823      	ldr	r3, [r4, #0]
 8009f9e:	07da      	lsls	r2, r3, #31
 8009fa0:	d438      	bmi.n	800a014 <_printf_float+0x38c>
 8009fa2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009fa6:	eba2 0903 	sub.w	r9, r2, r3
 8009faa:	eba2 020a 	sub.w	r2, r2, sl
 8009fae:	4591      	cmp	r9, r2
 8009fb0:	bfa8      	it	ge
 8009fb2:	4691      	movge	r9, r2
 8009fb4:	f1b9 0f00 	cmp.w	r9, #0
 8009fb8:	dc34      	bgt.n	800a024 <_printf_float+0x39c>
 8009fba:	f04f 0800 	mov.w	r8, #0
 8009fbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fc2:	f104 0a1a 	add.w	sl, r4, #26
 8009fc6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009fca:	1a9b      	subs	r3, r3, r2
 8009fcc:	eba3 0309 	sub.w	r3, r3, r9
 8009fd0:	4543      	cmp	r3, r8
 8009fd2:	f77f af7a 	ble.w	8009eca <_printf_float+0x242>
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	4652      	mov	r2, sl
 8009fda:	4631      	mov	r1, r6
 8009fdc:	4628      	mov	r0, r5
 8009fde:	47b8      	blx	r7
 8009fe0:	3001      	adds	r0, #1
 8009fe2:	f43f aeac 	beq.w	8009d3e <_printf_float+0xb6>
 8009fe6:	f108 0801 	add.w	r8, r8, #1
 8009fea:	e7ec      	b.n	8009fc6 <_printf_float+0x33e>
 8009fec:	4613      	mov	r3, r2
 8009fee:	4631      	mov	r1, r6
 8009ff0:	4642      	mov	r2, r8
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	47b8      	blx	r7
 8009ff6:	3001      	adds	r0, #1
 8009ff8:	d1c0      	bne.n	8009f7c <_printf_float+0x2f4>
 8009ffa:	e6a0      	b.n	8009d3e <_printf_float+0xb6>
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	4631      	mov	r1, r6
 800a000:	4628      	mov	r0, r5
 800a002:	920b      	str	r2, [sp, #44]	; 0x2c
 800a004:	47b8      	blx	r7
 800a006:	3001      	adds	r0, #1
 800a008:	f43f ae99 	beq.w	8009d3e <_printf_float+0xb6>
 800a00c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a00e:	f10b 0b01 	add.w	fp, fp, #1
 800a012:	e7b9      	b.n	8009f88 <_printf_float+0x300>
 800a014:	4631      	mov	r1, r6
 800a016:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a01a:	4628      	mov	r0, r5
 800a01c:	47b8      	blx	r7
 800a01e:	3001      	adds	r0, #1
 800a020:	d1bf      	bne.n	8009fa2 <_printf_float+0x31a>
 800a022:	e68c      	b.n	8009d3e <_printf_float+0xb6>
 800a024:	464b      	mov	r3, r9
 800a026:	4631      	mov	r1, r6
 800a028:	4628      	mov	r0, r5
 800a02a:	eb08 020a 	add.w	r2, r8, sl
 800a02e:	47b8      	blx	r7
 800a030:	3001      	adds	r0, #1
 800a032:	d1c2      	bne.n	8009fba <_printf_float+0x332>
 800a034:	e683      	b.n	8009d3e <_printf_float+0xb6>
 800a036:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a038:	2a01      	cmp	r2, #1
 800a03a:	dc01      	bgt.n	800a040 <_printf_float+0x3b8>
 800a03c:	07db      	lsls	r3, r3, #31
 800a03e:	d539      	bpl.n	800a0b4 <_printf_float+0x42c>
 800a040:	2301      	movs	r3, #1
 800a042:	4642      	mov	r2, r8
 800a044:	4631      	mov	r1, r6
 800a046:	4628      	mov	r0, r5
 800a048:	47b8      	blx	r7
 800a04a:	3001      	adds	r0, #1
 800a04c:	f43f ae77 	beq.w	8009d3e <_printf_float+0xb6>
 800a050:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a054:	4631      	mov	r1, r6
 800a056:	4628      	mov	r0, r5
 800a058:	47b8      	blx	r7
 800a05a:	3001      	adds	r0, #1
 800a05c:	f43f ae6f 	beq.w	8009d3e <_printf_float+0xb6>
 800a060:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a064:	2200      	movs	r2, #0
 800a066:	2300      	movs	r3, #0
 800a068:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800a06c:	f7f6 fc9c 	bl	80009a8 <__aeabi_dcmpeq>
 800a070:	b9d8      	cbnz	r0, 800a0aa <_printf_float+0x422>
 800a072:	f109 33ff 	add.w	r3, r9, #4294967295
 800a076:	f108 0201 	add.w	r2, r8, #1
 800a07a:	4631      	mov	r1, r6
 800a07c:	4628      	mov	r0, r5
 800a07e:	47b8      	blx	r7
 800a080:	3001      	adds	r0, #1
 800a082:	d10e      	bne.n	800a0a2 <_printf_float+0x41a>
 800a084:	e65b      	b.n	8009d3e <_printf_float+0xb6>
 800a086:	2301      	movs	r3, #1
 800a088:	464a      	mov	r2, r9
 800a08a:	4631      	mov	r1, r6
 800a08c:	4628      	mov	r0, r5
 800a08e:	47b8      	blx	r7
 800a090:	3001      	adds	r0, #1
 800a092:	f43f ae54 	beq.w	8009d3e <_printf_float+0xb6>
 800a096:	f108 0801 	add.w	r8, r8, #1
 800a09a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a09c:	3b01      	subs	r3, #1
 800a09e:	4543      	cmp	r3, r8
 800a0a0:	dcf1      	bgt.n	800a086 <_printf_float+0x3fe>
 800a0a2:	4653      	mov	r3, sl
 800a0a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a0a8:	e6de      	b.n	8009e68 <_printf_float+0x1e0>
 800a0aa:	f04f 0800 	mov.w	r8, #0
 800a0ae:	f104 091a 	add.w	r9, r4, #26
 800a0b2:	e7f2      	b.n	800a09a <_printf_float+0x412>
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	4642      	mov	r2, r8
 800a0b8:	e7df      	b.n	800a07a <_printf_float+0x3f2>
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	464a      	mov	r2, r9
 800a0be:	4631      	mov	r1, r6
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	47b8      	blx	r7
 800a0c4:	3001      	adds	r0, #1
 800a0c6:	f43f ae3a 	beq.w	8009d3e <_printf_float+0xb6>
 800a0ca:	f108 0801 	add.w	r8, r8, #1
 800a0ce:	68e3      	ldr	r3, [r4, #12]
 800a0d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a0d2:	1a5b      	subs	r3, r3, r1
 800a0d4:	4543      	cmp	r3, r8
 800a0d6:	dcf0      	bgt.n	800a0ba <_printf_float+0x432>
 800a0d8:	e6fb      	b.n	8009ed2 <_printf_float+0x24a>
 800a0da:	f04f 0800 	mov.w	r8, #0
 800a0de:	f104 0919 	add.w	r9, r4, #25
 800a0e2:	e7f4      	b.n	800a0ce <_printf_float+0x446>

0800a0e4 <_printf_common>:
 800a0e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0e8:	4616      	mov	r6, r2
 800a0ea:	4699      	mov	r9, r3
 800a0ec:	688a      	ldr	r2, [r1, #8]
 800a0ee:	690b      	ldr	r3, [r1, #16]
 800a0f0:	4607      	mov	r7, r0
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	bfb8      	it	lt
 800a0f6:	4613      	movlt	r3, r2
 800a0f8:	6033      	str	r3, [r6, #0]
 800a0fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a0fe:	460c      	mov	r4, r1
 800a100:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a104:	b10a      	cbz	r2, 800a10a <_printf_common+0x26>
 800a106:	3301      	adds	r3, #1
 800a108:	6033      	str	r3, [r6, #0]
 800a10a:	6823      	ldr	r3, [r4, #0]
 800a10c:	0699      	lsls	r1, r3, #26
 800a10e:	bf42      	ittt	mi
 800a110:	6833      	ldrmi	r3, [r6, #0]
 800a112:	3302      	addmi	r3, #2
 800a114:	6033      	strmi	r3, [r6, #0]
 800a116:	6825      	ldr	r5, [r4, #0]
 800a118:	f015 0506 	ands.w	r5, r5, #6
 800a11c:	d106      	bne.n	800a12c <_printf_common+0x48>
 800a11e:	f104 0a19 	add.w	sl, r4, #25
 800a122:	68e3      	ldr	r3, [r4, #12]
 800a124:	6832      	ldr	r2, [r6, #0]
 800a126:	1a9b      	subs	r3, r3, r2
 800a128:	42ab      	cmp	r3, r5
 800a12a:	dc2b      	bgt.n	800a184 <_printf_common+0xa0>
 800a12c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a130:	1e13      	subs	r3, r2, #0
 800a132:	6822      	ldr	r2, [r4, #0]
 800a134:	bf18      	it	ne
 800a136:	2301      	movne	r3, #1
 800a138:	0692      	lsls	r2, r2, #26
 800a13a:	d430      	bmi.n	800a19e <_printf_common+0xba>
 800a13c:	4649      	mov	r1, r9
 800a13e:	4638      	mov	r0, r7
 800a140:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a144:	47c0      	blx	r8
 800a146:	3001      	adds	r0, #1
 800a148:	d023      	beq.n	800a192 <_printf_common+0xae>
 800a14a:	6823      	ldr	r3, [r4, #0]
 800a14c:	6922      	ldr	r2, [r4, #16]
 800a14e:	f003 0306 	and.w	r3, r3, #6
 800a152:	2b04      	cmp	r3, #4
 800a154:	bf14      	ite	ne
 800a156:	2500      	movne	r5, #0
 800a158:	6833      	ldreq	r3, [r6, #0]
 800a15a:	f04f 0600 	mov.w	r6, #0
 800a15e:	bf08      	it	eq
 800a160:	68e5      	ldreq	r5, [r4, #12]
 800a162:	f104 041a 	add.w	r4, r4, #26
 800a166:	bf08      	it	eq
 800a168:	1aed      	subeq	r5, r5, r3
 800a16a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a16e:	bf08      	it	eq
 800a170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a174:	4293      	cmp	r3, r2
 800a176:	bfc4      	itt	gt
 800a178:	1a9b      	subgt	r3, r3, r2
 800a17a:	18ed      	addgt	r5, r5, r3
 800a17c:	42b5      	cmp	r5, r6
 800a17e:	d11a      	bne.n	800a1b6 <_printf_common+0xd2>
 800a180:	2000      	movs	r0, #0
 800a182:	e008      	b.n	800a196 <_printf_common+0xb2>
 800a184:	2301      	movs	r3, #1
 800a186:	4652      	mov	r2, sl
 800a188:	4649      	mov	r1, r9
 800a18a:	4638      	mov	r0, r7
 800a18c:	47c0      	blx	r8
 800a18e:	3001      	adds	r0, #1
 800a190:	d103      	bne.n	800a19a <_printf_common+0xb6>
 800a192:	f04f 30ff 	mov.w	r0, #4294967295
 800a196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a19a:	3501      	adds	r5, #1
 800a19c:	e7c1      	b.n	800a122 <_printf_common+0x3e>
 800a19e:	2030      	movs	r0, #48	; 0x30
 800a1a0:	18e1      	adds	r1, r4, r3
 800a1a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1a6:	1c5a      	adds	r2, r3, #1
 800a1a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1ac:	4422      	add	r2, r4
 800a1ae:	3302      	adds	r3, #2
 800a1b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1b4:	e7c2      	b.n	800a13c <_printf_common+0x58>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	4622      	mov	r2, r4
 800a1ba:	4649      	mov	r1, r9
 800a1bc:	4638      	mov	r0, r7
 800a1be:	47c0      	blx	r8
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	d0e6      	beq.n	800a192 <_printf_common+0xae>
 800a1c4:	3601      	adds	r6, #1
 800a1c6:	e7d9      	b.n	800a17c <_printf_common+0x98>

0800a1c8 <_printf_i>:
 800a1c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1cc:	7e0f      	ldrb	r7, [r1, #24]
 800a1ce:	4691      	mov	r9, r2
 800a1d0:	2f78      	cmp	r7, #120	; 0x78
 800a1d2:	4680      	mov	r8, r0
 800a1d4:	460c      	mov	r4, r1
 800a1d6:	469a      	mov	sl, r3
 800a1d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a1da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a1de:	d807      	bhi.n	800a1f0 <_printf_i+0x28>
 800a1e0:	2f62      	cmp	r7, #98	; 0x62
 800a1e2:	d80a      	bhi.n	800a1fa <_printf_i+0x32>
 800a1e4:	2f00      	cmp	r7, #0
 800a1e6:	f000 80d5 	beq.w	800a394 <_printf_i+0x1cc>
 800a1ea:	2f58      	cmp	r7, #88	; 0x58
 800a1ec:	f000 80c1 	beq.w	800a372 <_printf_i+0x1aa>
 800a1f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a1f8:	e03a      	b.n	800a270 <_printf_i+0xa8>
 800a1fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a1fe:	2b15      	cmp	r3, #21
 800a200:	d8f6      	bhi.n	800a1f0 <_printf_i+0x28>
 800a202:	a101      	add	r1, pc, #4	; (adr r1, 800a208 <_printf_i+0x40>)
 800a204:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a208:	0800a261 	.word	0x0800a261
 800a20c:	0800a275 	.word	0x0800a275
 800a210:	0800a1f1 	.word	0x0800a1f1
 800a214:	0800a1f1 	.word	0x0800a1f1
 800a218:	0800a1f1 	.word	0x0800a1f1
 800a21c:	0800a1f1 	.word	0x0800a1f1
 800a220:	0800a275 	.word	0x0800a275
 800a224:	0800a1f1 	.word	0x0800a1f1
 800a228:	0800a1f1 	.word	0x0800a1f1
 800a22c:	0800a1f1 	.word	0x0800a1f1
 800a230:	0800a1f1 	.word	0x0800a1f1
 800a234:	0800a37b 	.word	0x0800a37b
 800a238:	0800a2a1 	.word	0x0800a2a1
 800a23c:	0800a335 	.word	0x0800a335
 800a240:	0800a1f1 	.word	0x0800a1f1
 800a244:	0800a1f1 	.word	0x0800a1f1
 800a248:	0800a39d 	.word	0x0800a39d
 800a24c:	0800a1f1 	.word	0x0800a1f1
 800a250:	0800a2a1 	.word	0x0800a2a1
 800a254:	0800a1f1 	.word	0x0800a1f1
 800a258:	0800a1f1 	.word	0x0800a1f1
 800a25c:	0800a33d 	.word	0x0800a33d
 800a260:	682b      	ldr	r3, [r5, #0]
 800a262:	1d1a      	adds	r2, r3, #4
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	602a      	str	r2, [r5, #0]
 800a268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a26c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a270:	2301      	movs	r3, #1
 800a272:	e0a0      	b.n	800a3b6 <_printf_i+0x1ee>
 800a274:	6820      	ldr	r0, [r4, #0]
 800a276:	682b      	ldr	r3, [r5, #0]
 800a278:	0607      	lsls	r7, r0, #24
 800a27a:	f103 0104 	add.w	r1, r3, #4
 800a27e:	6029      	str	r1, [r5, #0]
 800a280:	d501      	bpl.n	800a286 <_printf_i+0xbe>
 800a282:	681e      	ldr	r6, [r3, #0]
 800a284:	e003      	b.n	800a28e <_printf_i+0xc6>
 800a286:	0646      	lsls	r6, r0, #25
 800a288:	d5fb      	bpl.n	800a282 <_printf_i+0xba>
 800a28a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a28e:	2e00      	cmp	r6, #0
 800a290:	da03      	bge.n	800a29a <_printf_i+0xd2>
 800a292:	232d      	movs	r3, #45	; 0x2d
 800a294:	4276      	negs	r6, r6
 800a296:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a29a:	230a      	movs	r3, #10
 800a29c:	4859      	ldr	r0, [pc, #356]	; (800a404 <_printf_i+0x23c>)
 800a29e:	e012      	b.n	800a2c6 <_printf_i+0xfe>
 800a2a0:	682b      	ldr	r3, [r5, #0]
 800a2a2:	6820      	ldr	r0, [r4, #0]
 800a2a4:	1d19      	adds	r1, r3, #4
 800a2a6:	6029      	str	r1, [r5, #0]
 800a2a8:	0605      	lsls	r5, r0, #24
 800a2aa:	d501      	bpl.n	800a2b0 <_printf_i+0xe8>
 800a2ac:	681e      	ldr	r6, [r3, #0]
 800a2ae:	e002      	b.n	800a2b6 <_printf_i+0xee>
 800a2b0:	0641      	lsls	r1, r0, #25
 800a2b2:	d5fb      	bpl.n	800a2ac <_printf_i+0xe4>
 800a2b4:	881e      	ldrh	r6, [r3, #0]
 800a2b6:	2f6f      	cmp	r7, #111	; 0x6f
 800a2b8:	bf0c      	ite	eq
 800a2ba:	2308      	moveq	r3, #8
 800a2bc:	230a      	movne	r3, #10
 800a2be:	4851      	ldr	r0, [pc, #324]	; (800a404 <_printf_i+0x23c>)
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a2c6:	6865      	ldr	r5, [r4, #4]
 800a2c8:	2d00      	cmp	r5, #0
 800a2ca:	bfa8      	it	ge
 800a2cc:	6821      	ldrge	r1, [r4, #0]
 800a2ce:	60a5      	str	r5, [r4, #8]
 800a2d0:	bfa4      	itt	ge
 800a2d2:	f021 0104 	bicge.w	r1, r1, #4
 800a2d6:	6021      	strge	r1, [r4, #0]
 800a2d8:	b90e      	cbnz	r6, 800a2de <_printf_i+0x116>
 800a2da:	2d00      	cmp	r5, #0
 800a2dc:	d04b      	beq.n	800a376 <_printf_i+0x1ae>
 800a2de:	4615      	mov	r5, r2
 800a2e0:	fbb6 f1f3 	udiv	r1, r6, r3
 800a2e4:	fb03 6711 	mls	r7, r3, r1, r6
 800a2e8:	5dc7      	ldrb	r7, [r0, r7]
 800a2ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a2ee:	4637      	mov	r7, r6
 800a2f0:	42bb      	cmp	r3, r7
 800a2f2:	460e      	mov	r6, r1
 800a2f4:	d9f4      	bls.n	800a2e0 <_printf_i+0x118>
 800a2f6:	2b08      	cmp	r3, #8
 800a2f8:	d10b      	bne.n	800a312 <_printf_i+0x14a>
 800a2fa:	6823      	ldr	r3, [r4, #0]
 800a2fc:	07de      	lsls	r6, r3, #31
 800a2fe:	d508      	bpl.n	800a312 <_printf_i+0x14a>
 800a300:	6923      	ldr	r3, [r4, #16]
 800a302:	6861      	ldr	r1, [r4, #4]
 800a304:	4299      	cmp	r1, r3
 800a306:	bfde      	ittt	le
 800a308:	2330      	movle	r3, #48	; 0x30
 800a30a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a30e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a312:	1b52      	subs	r2, r2, r5
 800a314:	6122      	str	r2, [r4, #16]
 800a316:	464b      	mov	r3, r9
 800a318:	4621      	mov	r1, r4
 800a31a:	4640      	mov	r0, r8
 800a31c:	f8cd a000 	str.w	sl, [sp]
 800a320:	aa03      	add	r2, sp, #12
 800a322:	f7ff fedf 	bl	800a0e4 <_printf_common>
 800a326:	3001      	adds	r0, #1
 800a328:	d14a      	bne.n	800a3c0 <_printf_i+0x1f8>
 800a32a:	f04f 30ff 	mov.w	r0, #4294967295
 800a32e:	b004      	add	sp, #16
 800a330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a334:	6823      	ldr	r3, [r4, #0]
 800a336:	f043 0320 	orr.w	r3, r3, #32
 800a33a:	6023      	str	r3, [r4, #0]
 800a33c:	2778      	movs	r7, #120	; 0x78
 800a33e:	4832      	ldr	r0, [pc, #200]	; (800a408 <_printf_i+0x240>)
 800a340:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a344:	6823      	ldr	r3, [r4, #0]
 800a346:	6829      	ldr	r1, [r5, #0]
 800a348:	061f      	lsls	r7, r3, #24
 800a34a:	f851 6b04 	ldr.w	r6, [r1], #4
 800a34e:	d402      	bmi.n	800a356 <_printf_i+0x18e>
 800a350:	065f      	lsls	r7, r3, #25
 800a352:	bf48      	it	mi
 800a354:	b2b6      	uxthmi	r6, r6
 800a356:	07df      	lsls	r7, r3, #31
 800a358:	bf48      	it	mi
 800a35a:	f043 0320 	orrmi.w	r3, r3, #32
 800a35e:	6029      	str	r1, [r5, #0]
 800a360:	bf48      	it	mi
 800a362:	6023      	strmi	r3, [r4, #0]
 800a364:	b91e      	cbnz	r6, 800a36e <_printf_i+0x1a6>
 800a366:	6823      	ldr	r3, [r4, #0]
 800a368:	f023 0320 	bic.w	r3, r3, #32
 800a36c:	6023      	str	r3, [r4, #0]
 800a36e:	2310      	movs	r3, #16
 800a370:	e7a6      	b.n	800a2c0 <_printf_i+0xf8>
 800a372:	4824      	ldr	r0, [pc, #144]	; (800a404 <_printf_i+0x23c>)
 800a374:	e7e4      	b.n	800a340 <_printf_i+0x178>
 800a376:	4615      	mov	r5, r2
 800a378:	e7bd      	b.n	800a2f6 <_printf_i+0x12e>
 800a37a:	682b      	ldr	r3, [r5, #0]
 800a37c:	6826      	ldr	r6, [r4, #0]
 800a37e:	1d18      	adds	r0, r3, #4
 800a380:	6961      	ldr	r1, [r4, #20]
 800a382:	6028      	str	r0, [r5, #0]
 800a384:	0635      	lsls	r5, r6, #24
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	d501      	bpl.n	800a38e <_printf_i+0x1c6>
 800a38a:	6019      	str	r1, [r3, #0]
 800a38c:	e002      	b.n	800a394 <_printf_i+0x1cc>
 800a38e:	0670      	lsls	r0, r6, #25
 800a390:	d5fb      	bpl.n	800a38a <_printf_i+0x1c2>
 800a392:	8019      	strh	r1, [r3, #0]
 800a394:	2300      	movs	r3, #0
 800a396:	4615      	mov	r5, r2
 800a398:	6123      	str	r3, [r4, #16]
 800a39a:	e7bc      	b.n	800a316 <_printf_i+0x14e>
 800a39c:	682b      	ldr	r3, [r5, #0]
 800a39e:	2100      	movs	r1, #0
 800a3a0:	1d1a      	adds	r2, r3, #4
 800a3a2:	602a      	str	r2, [r5, #0]
 800a3a4:	681d      	ldr	r5, [r3, #0]
 800a3a6:	6862      	ldr	r2, [r4, #4]
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	f000 fa2e 	bl	800a80a <memchr>
 800a3ae:	b108      	cbz	r0, 800a3b4 <_printf_i+0x1ec>
 800a3b0:	1b40      	subs	r0, r0, r5
 800a3b2:	6060      	str	r0, [r4, #4]
 800a3b4:	6863      	ldr	r3, [r4, #4]
 800a3b6:	6123      	str	r3, [r4, #16]
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3be:	e7aa      	b.n	800a316 <_printf_i+0x14e>
 800a3c0:	462a      	mov	r2, r5
 800a3c2:	4649      	mov	r1, r9
 800a3c4:	4640      	mov	r0, r8
 800a3c6:	6923      	ldr	r3, [r4, #16]
 800a3c8:	47d0      	blx	sl
 800a3ca:	3001      	adds	r0, #1
 800a3cc:	d0ad      	beq.n	800a32a <_printf_i+0x162>
 800a3ce:	6823      	ldr	r3, [r4, #0]
 800a3d0:	079b      	lsls	r3, r3, #30
 800a3d2:	d413      	bmi.n	800a3fc <_printf_i+0x234>
 800a3d4:	68e0      	ldr	r0, [r4, #12]
 800a3d6:	9b03      	ldr	r3, [sp, #12]
 800a3d8:	4298      	cmp	r0, r3
 800a3da:	bfb8      	it	lt
 800a3dc:	4618      	movlt	r0, r3
 800a3de:	e7a6      	b.n	800a32e <_printf_i+0x166>
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	4632      	mov	r2, r6
 800a3e4:	4649      	mov	r1, r9
 800a3e6:	4640      	mov	r0, r8
 800a3e8:	47d0      	blx	sl
 800a3ea:	3001      	adds	r0, #1
 800a3ec:	d09d      	beq.n	800a32a <_printf_i+0x162>
 800a3ee:	3501      	adds	r5, #1
 800a3f0:	68e3      	ldr	r3, [r4, #12]
 800a3f2:	9903      	ldr	r1, [sp, #12]
 800a3f4:	1a5b      	subs	r3, r3, r1
 800a3f6:	42ab      	cmp	r3, r5
 800a3f8:	dcf2      	bgt.n	800a3e0 <_printf_i+0x218>
 800a3fa:	e7eb      	b.n	800a3d4 <_printf_i+0x20c>
 800a3fc:	2500      	movs	r5, #0
 800a3fe:	f104 0619 	add.w	r6, r4, #25
 800a402:	e7f5      	b.n	800a3f0 <_printf_i+0x228>
 800a404:	0800cb28 	.word	0x0800cb28
 800a408:	0800cb39 	.word	0x0800cb39

0800a40c <std>:
 800a40c:	2300      	movs	r3, #0
 800a40e:	b510      	push	{r4, lr}
 800a410:	4604      	mov	r4, r0
 800a412:	e9c0 3300 	strd	r3, r3, [r0]
 800a416:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a41a:	6083      	str	r3, [r0, #8]
 800a41c:	8181      	strh	r1, [r0, #12]
 800a41e:	6643      	str	r3, [r0, #100]	; 0x64
 800a420:	81c2      	strh	r2, [r0, #14]
 800a422:	6183      	str	r3, [r0, #24]
 800a424:	4619      	mov	r1, r3
 800a426:	2208      	movs	r2, #8
 800a428:	305c      	adds	r0, #92	; 0x5c
 800a42a:	f000 f948 	bl	800a6be <memset>
 800a42e:	4b0d      	ldr	r3, [pc, #52]	; (800a464 <std+0x58>)
 800a430:	6224      	str	r4, [r4, #32]
 800a432:	6263      	str	r3, [r4, #36]	; 0x24
 800a434:	4b0c      	ldr	r3, [pc, #48]	; (800a468 <std+0x5c>)
 800a436:	62a3      	str	r3, [r4, #40]	; 0x28
 800a438:	4b0c      	ldr	r3, [pc, #48]	; (800a46c <std+0x60>)
 800a43a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a43c:	4b0c      	ldr	r3, [pc, #48]	; (800a470 <std+0x64>)
 800a43e:	6323      	str	r3, [r4, #48]	; 0x30
 800a440:	4b0c      	ldr	r3, [pc, #48]	; (800a474 <std+0x68>)
 800a442:	429c      	cmp	r4, r3
 800a444:	d006      	beq.n	800a454 <std+0x48>
 800a446:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a44a:	4294      	cmp	r4, r2
 800a44c:	d002      	beq.n	800a454 <std+0x48>
 800a44e:	33d0      	adds	r3, #208	; 0xd0
 800a450:	429c      	cmp	r4, r3
 800a452:	d105      	bne.n	800a460 <std+0x54>
 800a454:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a45c:	f000 b9d2 	b.w	800a804 <__retarget_lock_init_recursive>
 800a460:	bd10      	pop	{r4, pc}
 800a462:	bf00      	nop
 800a464:	0800a639 	.word	0x0800a639
 800a468:	0800a65b 	.word	0x0800a65b
 800a46c:	0800a693 	.word	0x0800a693
 800a470:	0800a6b7 	.word	0x0800a6b7
 800a474:	20000be4 	.word	0x20000be4

0800a478 <stdio_exit_handler>:
 800a478:	4a02      	ldr	r2, [pc, #8]	; (800a484 <stdio_exit_handler+0xc>)
 800a47a:	4903      	ldr	r1, [pc, #12]	; (800a488 <stdio_exit_handler+0x10>)
 800a47c:	4803      	ldr	r0, [pc, #12]	; (800a48c <stdio_exit_handler+0x14>)
 800a47e:	f000 b869 	b.w	800a554 <_fwalk_sglue>
 800a482:	bf00      	nop
 800a484:	2000003c 	.word	0x2000003c
 800a488:	0800c035 	.word	0x0800c035
 800a48c:	20000048 	.word	0x20000048

0800a490 <cleanup_stdio>:
 800a490:	6841      	ldr	r1, [r0, #4]
 800a492:	4b0c      	ldr	r3, [pc, #48]	; (800a4c4 <cleanup_stdio+0x34>)
 800a494:	b510      	push	{r4, lr}
 800a496:	4299      	cmp	r1, r3
 800a498:	4604      	mov	r4, r0
 800a49a:	d001      	beq.n	800a4a0 <cleanup_stdio+0x10>
 800a49c:	f001 fdca 	bl	800c034 <_fflush_r>
 800a4a0:	68a1      	ldr	r1, [r4, #8]
 800a4a2:	4b09      	ldr	r3, [pc, #36]	; (800a4c8 <cleanup_stdio+0x38>)
 800a4a4:	4299      	cmp	r1, r3
 800a4a6:	d002      	beq.n	800a4ae <cleanup_stdio+0x1e>
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	f001 fdc3 	bl	800c034 <_fflush_r>
 800a4ae:	68e1      	ldr	r1, [r4, #12]
 800a4b0:	4b06      	ldr	r3, [pc, #24]	; (800a4cc <cleanup_stdio+0x3c>)
 800a4b2:	4299      	cmp	r1, r3
 800a4b4:	d004      	beq.n	800a4c0 <cleanup_stdio+0x30>
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4bc:	f001 bdba 	b.w	800c034 <_fflush_r>
 800a4c0:	bd10      	pop	{r4, pc}
 800a4c2:	bf00      	nop
 800a4c4:	20000be4 	.word	0x20000be4
 800a4c8:	20000c4c 	.word	0x20000c4c
 800a4cc:	20000cb4 	.word	0x20000cb4

0800a4d0 <global_stdio_init.part.0>:
 800a4d0:	b510      	push	{r4, lr}
 800a4d2:	4b0b      	ldr	r3, [pc, #44]	; (800a500 <global_stdio_init.part.0+0x30>)
 800a4d4:	4c0b      	ldr	r4, [pc, #44]	; (800a504 <global_stdio_init.part.0+0x34>)
 800a4d6:	4a0c      	ldr	r2, [pc, #48]	; (800a508 <global_stdio_init.part.0+0x38>)
 800a4d8:	4620      	mov	r0, r4
 800a4da:	601a      	str	r2, [r3, #0]
 800a4dc:	2104      	movs	r1, #4
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f7ff ff94 	bl	800a40c <std>
 800a4e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	2109      	movs	r1, #9
 800a4ec:	f7ff ff8e 	bl	800a40c <std>
 800a4f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a4f4:	2202      	movs	r2, #2
 800a4f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4fa:	2112      	movs	r1, #18
 800a4fc:	f7ff bf86 	b.w	800a40c <std>
 800a500:	20000d1c 	.word	0x20000d1c
 800a504:	20000be4 	.word	0x20000be4
 800a508:	0800a479 	.word	0x0800a479

0800a50c <__sfp_lock_acquire>:
 800a50c:	4801      	ldr	r0, [pc, #4]	; (800a514 <__sfp_lock_acquire+0x8>)
 800a50e:	f000 b97a 	b.w	800a806 <__retarget_lock_acquire_recursive>
 800a512:	bf00      	nop
 800a514:	20000d25 	.word	0x20000d25

0800a518 <__sfp_lock_release>:
 800a518:	4801      	ldr	r0, [pc, #4]	; (800a520 <__sfp_lock_release+0x8>)
 800a51a:	f000 b975 	b.w	800a808 <__retarget_lock_release_recursive>
 800a51e:	bf00      	nop
 800a520:	20000d25 	.word	0x20000d25

0800a524 <__sinit>:
 800a524:	b510      	push	{r4, lr}
 800a526:	4604      	mov	r4, r0
 800a528:	f7ff fff0 	bl	800a50c <__sfp_lock_acquire>
 800a52c:	6a23      	ldr	r3, [r4, #32]
 800a52e:	b11b      	cbz	r3, 800a538 <__sinit+0x14>
 800a530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a534:	f7ff bff0 	b.w	800a518 <__sfp_lock_release>
 800a538:	4b04      	ldr	r3, [pc, #16]	; (800a54c <__sinit+0x28>)
 800a53a:	6223      	str	r3, [r4, #32]
 800a53c:	4b04      	ldr	r3, [pc, #16]	; (800a550 <__sinit+0x2c>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d1f5      	bne.n	800a530 <__sinit+0xc>
 800a544:	f7ff ffc4 	bl	800a4d0 <global_stdio_init.part.0>
 800a548:	e7f2      	b.n	800a530 <__sinit+0xc>
 800a54a:	bf00      	nop
 800a54c:	0800a491 	.word	0x0800a491
 800a550:	20000d1c 	.word	0x20000d1c

0800a554 <_fwalk_sglue>:
 800a554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a558:	4607      	mov	r7, r0
 800a55a:	4688      	mov	r8, r1
 800a55c:	4614      	mov	r4, r2
 800a55e:	2600      	movs	r6, #0
 800a560:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a564:	f1b9 0901 	subs.w	r9, r9, #1
 800a568:	d505      	bpl.n	800a576 <_fwalk_sglue+0x22>
 800a56a:	6824      	ldr	r4, [r4, #0]
 800a56c:	2c00      	cmp	r4, #0
 800a56e:	d1f7      	bne.n	800a560 <_fwalk_sglue+0xc>
 800a570:	4630      	mov	r0, r6
 800a572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a576:	89ab      	ldrh	r3, [r5, #12]
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d907      	bls.n	800a58c <_fwalk_sglue+0x38>
 800a57c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a580:	3301      	adds	r3, #1
 800a582:	d003      	beq.n	800a58c <_fwalk_sglue+0x38>
 800a584:	4629      	mov	r1, r5
 800a586:	4638      	mov	r0, r7
 800a588:	47c0      	blx	r8
 800a58a:	4306      	orrs	r6, r0
 800a58c:	3568      	adds	r5, #104	; 0x68
 800a58e:	e7e9      	b.n	800a564 <_fwalk_sglue+0x10>

0800a590 <sniprintf>:
 800a590:	b40c      	push	{r2, r3}
 800a592:	b530      	push	{r4, r5, lr}
 800a594:	4b17      	ldr	r3, [pc, #92]	; (800a5f4 <sniprintf+0x64>)
 800a596:	1e0c      	subs	r4, r1, #0
 800a598:	681d      	ldr	r5, [r3, #0]
 800a59a:	b09d      	sub	sp, #116	; 0x74
 800a59c:	da08      	bge.n	800a5b0 <sniprintf+0x20>
 800a59e:	238b      	movs	r3, #139	; 0x8b
 800a5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5a4:	602b      	str	r3, [r5, #0]
 800a5a6:	b01d      	add	sp, #116	; 0x74
 800a5a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5ac:	b002      	add	sp, #8
 800a5ae:	4770      	bx	lr
 800a5b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a5b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a5b8:	bf0c      	ite	eq
 800a5ba:	4623      	moveq	r3, r4
 800a5bc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a5c0:	9304      	str	r3, [sp, #16]
 800a5c2:	9307      	str	r3, [sp, #28]
 800a5c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a5c8:	9002      	str	r0, [sp, #8]
 800a5ca:	9006      	str	r0, [sp, #24]
 800a5cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	ab21      	add	r3, sp, #132	; 0x84
 800a5d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a5d6:	a902      	add	r1, sp, #8
 800a5d8:	9301      	str	r3, [sp, #4]
 800a5da:	f001 fbab 	bl	800bd34 <_svfiprintf_r>
 800a5de:	1c43      	adds	r3, r0, #1
 800a5e0:	bfbc      	itt	lt
 800a5e2:	238b      	movlt	r3, #139	; 0x8b
 800a5e4:	602b      	strlt	r3, [r5, #0]
 800a5e6:	2c00      	cmp	r4, #0
 800a5e8:	d0dd      	beq.n	800a5a6 <sniprintf+0x16>
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	9b02      	ldr	r3, [sp, #8]
 800a5ee:	701a      	strb	r2, [r3, #0]
 800a5f0:	e7d9      	b.n	800a5a6 <sniprintf+0x16>
 800a5f2:	bf00      	nop
 800a5f4:	20000094 	.word	0x20000094

0800a5f8 <siprintf>:
 800a5f8:	b40e      	push	{r1, r2, r3}
 800a5fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a5fe:	b500      	push	{lr}
 800a600:	b09c      	sub	sp, #112	; 0x70
 800a602:	ab1d      	add	r3, sp, #116	; 0x74
 800a604:	9002      	str	r0, [sp, #8]
 800a606:	9006      	str	r0, [sp, #24]
 800a608:	9107      	str	r1, [sp, #28]
 800a60a:	9104      	str	r1, [sp, #16]
 800a60c:	4808      	ldr	r0, [pc, #32]	; (800a630 <siprintf+0x38>)
 800a60e:	4909      	ldr	r1, [pc, #36]	; (800a634 <siprintf+0x3c>)
 800a610:	f853 2b04 	ldr.w	r2, [r3], #4
 800a614:	9105      	str	r1, [sp, #20]
 800a616:	6800      	ldr	r0, [r0, #0]
 800a618:	a902      	add	r1, sp, #8
 800a61a:	9301      	str	r3, [sp, #4]
 800a61c:	f001 fb8a 	bl	800bd34 <_svfiprintf_r>
 800a620:	2200      	movs	r2, #0
 800a622:	9b02      	ldr	r3, [sp, #8]
 800a624:	701a      	strb	r2, [r3, #0]
 800a626:	b01c      	add	sp, #112	; 0x70
 800a628:	f85d eb04 	ldr.w	lr, [sp], #4
 800a62c:	b003      	add	sp, #12
 800a62e:	4770      	bx	lr
 800a630:	20000094 	.word	0x20000094
 800a634:	ffff0208 	.word	0xffff0208

0800a638 <__sread>:
 800a638:	b510      	push	{r4, lr}
 800a63a:	460c      	mov	r4, r1
 800a63c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a640:	f000 f882 	bl	800a748 <_read_r>
 800a644:	2800      	cmp	r0, #0
 800a646:	bfab      	itete	ge
 800a648:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a64a:	89a3      	ldrhlt	r3, [r4, #12]
 800a64c:	181b      	addge	r3, r3, r0
 800a64e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a652:	bfac      	ite	ge
 800a654:	6563      	strge	r3, [r4, #84]	; 0x54
 800a656:	81a3      	strhlt	r3, [r4, #12]
 800a658:	bd10      	pop	{r4, pc}

0800a65a <__swrite>:
 800a65a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a65e:	461f      	mov	r7, r3
 800a660:	898b      	ldrh	r3, [r1, #12]
 800a662:	4605      	mov	r5, r0
 800a664:	05db      	lsls	r3, r3, #23
 800a666:	460c      	mov	r4, r1
 800a668:	4616      	mov	r6, r2
 800a66a:	d505      	bpl.n	800a678 <__swrite+0x1e>
 800a66c:	2302      	movs	r3, #2
 800a66e:	2200      	movs	r2, #0
 800a670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a674:	f000 f856 	bl	800a724 <_lseek_r>
 800a678:	89a3      	ldrh	r3, [r4, #12]
 800a67a:	4632      	mov	r2, r6
 800a67c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a680:	81a3      	strh	r3, [r4, #12]
 800a682:	4628      	mov	r0, r5
 800a684:	463b      	mov	r3, r7
 800a686:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a68a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a68e:	f000 b87d 	b.w	800a78c <_write_r>

0800a692 <__sseek>:
 800a692:	b510      	push	{r4, lr}
 800a694:	460c      	mov	r4, r1
 800a696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a69a:	f000 f843 	bl	800a724 <_lseek_r>
 800a69e:	1c43      	adds	r3, r0, #1
 800a6a0:	89a3      	ldrh	r3, [r4, #12]
 800a6a2:	bf15      	itete	ne
 800a6a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a6a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a6aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a6ae:	81a3      	strheq	r3, [r4, #12]
 800a6b0:	bf18      	it	ne
 800a6b2:	81a3      	strhne	r3, [r4, #12]
 800a6b4:	bd10      	pop	{r4, pc}

0800a6b6 <__sclose>:
 800a6b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6ba:	f000 b823 	b.w	800a704 <_close_r>

0800a6be <memset>:
 800a6be:	4603      	mov	r3, r0
 800a6c0:	4402      	add	r2, r0
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d100      	bne.n	800a6c8 <memset+0xa>
 800a6c6:	4770      	bx	lr
 800a6c8:	f803 1b01 	strb.w	r1, [r3], #1
 800a6cc:	e7f9      	b.n	800a6c2 <memset+0x4>

0800a6ce <strstr>:
 800a6ce:	780a      	ldrb	r2, [r1, #0]
 800a6d0:	b570      	push	{r4, r5, r6, lr}
 800a6d2:	b96a      	cbnz	r2, 800a6f0 <strstr+0x22>
 800a6d4:	bd70      	pop	{r4, r5, r6, pc}
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d109      	bne.n	800a6ee <strstr+0x20>
 800a6da:	460c      	mov	r4, r1
 800a6dc:	4605      	mov	r5, r0
 800a6de:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d0f6      	beq.n	800a6d4 <strstr+0x6>
 800a6e6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a6ea:	429e      	cmp	r6, r3
 800a6ec:	d0f7      	beq.n	800a6de <strstr+0x10>
 800a6ee:	3001      	adds	r0, #1
 800a6f0:	7803      	ldrb	r3, [r0, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d1ef      	bne.n	800a6d6 <strstr+0x8>
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	e7ec      	b.n	800a6d4 <strstr+0x6>
	...

0800a6fc <_localeconv_r>:
 800a6fc:	4800      	ldr	r0, [pc, #0]	; (800a700 <_localeconv_r+0x4>)
 800a6fe:	4770      	bx	lr
 800a700:	20000188 	.word	0x20000188

0800a704 <_close_r>:
 800a704:	b538      	push	{r3, r4, r5, lr}
 800a706:	2300      	movs	r3, #0
 800a708:	4d05      	ldr	r5, [pc, #20]	; (800a720 <_close_r+0x1c>)
 800a70a:	4604      	mov	r4, r0
 800a70c:	4608      	mov	r0, r1
 800a70e:	602b      	str	r3, [r5, #0]
 800a710:	f7f8 ff0a 	bl	8003528 <_close>
 800a714:	1c43      	adds	r3, r0, #1
 800a716:	d102      	bne.n	800a71e <_close_r+0x1a>
 800a718:	682b      	ldr	r3, [r5, #0]
 800a71a:	b103      	cbz	r3, 800a71e <_close_r+0x1a>
 800a71c:	6023      	str	r3, [r4, #0]
 800a71e:	bd38      	pop	{r3, r4, r5, pc}
 800a720:	20000d20 	.word	0x20000d20

0800a724 <_lseek_r>:
 800a724:	b538      	push	{r3, r4, r5, lr}
 800a726:	4604      	mov	r4, r0
 800a728:	4608      	mov	r0, r1
 800a72a:	4611      	mov	r1, r2
 800a72c:	2200      	movs	r2, #0
 800a72e:	4d05      	ldr	r5, [pc, #20]	; (800a744 <_lseek_r+0x20>)
 800a730:	602a      	str	r2, [r5, #0]
 800a732:	461a      	mov	r2, r3
 800a734:	f7f8 ff1c 	bl	8003570 <_lseek>
 800a738:	1c43      	adds	r3, r0, #1
 800a73a:	d102      	bne.n	800a742 <_lseek_r+0x1e>
 800a73c:	682b      	ldr	r3, [r5, #0]
 800a73e:	b103      	cbz	r3, 800a742 <_lseek_r+0x1e>
 800a740:	6023      	str	r3, [r4, #0]
 800a742:	bd38      	pop	{r3, r4, r5, pc}
 800a744:	20000d20 	.word	0x20000d20

0800a748 <_read_r>:
 800a748:	b538      	push	{r3, r4, r5, lr}
 800a74a:	4604      	mov	r4, r0
 800a74c:	4608      	mov	r0, r1
 800a74e:	4611      	mov	r1, r2
 800a750:	2200      	movs	r2, #0
 800a752:	4d05      	ldr	r5, [pc, #20]	; (800a768 <_read_r+0x20>)
 800a754:	602a      	str	r2, [r5, #0]
 800a756:	461a      	mov	r2, r3
 800a758:	f7f8 fead 	bl	80034b6 <_read>
 800a75c:	1c43      	adds	r3, r0, #1
 800a75e:	d102      	bne.n	800a766 <_read_r+0x1e>
 800a760:	682b      	ldr	r3, [r5, #0]
 800a762:	b103      	cbz	r3, 800a766 <_read_r+0x1e>
 800a764:	6023      	str	r3, [r4, #0]
 800a766:	bd38      	pop	{r3, r4, r5, pc}
 800a768:	20000d20 	.word	0x20000d20

0800a76c <_sbrk_r>:
 800a76c:	b538      	push	{r3, r4, r5, lr}
 800a76e:	2300      	movs	r3, #0
 800a770:	4d05      	ldr	r5, [pc, #20]	; (800a788 <_sbrk_r+0x1c>)
 800a772:	4604      	mov	r4, r0
 800a774:	4608      	mov	r0, r1
 800a776:	602b      	str	r3, [r5, #0]
 800a778:	f7f8 ff06 	bl	8003588 <_sbrk>
 800a77c:	1c43      	adds	r3, r0, #1
 800a77e:	d102      	bne.n	800a786 <_sbrk_r+0x1a>
 800a780:	682b      	ldr	r3, [r5, #0]
 800a782:	b103      	cbz	r3, 800a786 <_sbrk_r+0x1a>
 800a784:	6023      	str	r3, [r4, #0]
 800a786:	bd38      	pop	{r3, r4, r5, pc}
 800a788:	20000d20 	.word	0x20000d20

0800a78c <_write_r>:
 800a78c:	b538      	push	{r3, r4, r5, lr}
 800a78e:	4604      	mov	r4, r0
 800a790:	4608      	mov	r0, r1
 800a792:	4611      	mov	r1, r2
 800a794:	2200      	movs	r2, #0
 800a796:	4d05      	ldr	r5, [pc, #20]	; (800a7ac <_write_r+0x20>)
 800a798:	602a      	str	r2, [r5, #0]
 800a79a:	461a      	mov	r2, r3
 800a79c:	f7f8 fea8 	bl	80034f0 <_write>
 800a7a0:	1c43      	adds	r3, r0, #1
 800a7a2:	d102      	bne.n	800a7aa <_write_r+0x1e>
 800a7a4:	682b      	ldr	r3, [r5, #0]
 800a7a6:	b103      	cbz	r3, 800a7aa <_write_r+0x1e>
 800a7a8:	6023      	str	r3, [r4, #0]
 800a7aa:	bd38      	pop	{r3, r4, r5, pc}
 800a7ac:	20000d20 	.word	0x20000d20

0800a7b0 <__errno>:
 800a7b0:	4b01      	ldr	r3, [pc, #4]	; (800a7b8 <__errno+0x8>)
 800a7b2:	6818      	ldr	r0, [r3, #0]
 800a7b4:	4770      	bx	lr
 800a7b6:	bf00      	nop
 800a7b8:	20000094 	.word	0x20000094

0800a7bc <__libc_init_array>:
 800a7bc:	b570      	push	{r4, r5, r6, lr}
 800a7be:	2600      	movs	r6, #0
 800a7c0:	4d0c      	ldr	r5, [pc, #48]	; (800a7f4 <__libc_init_array+0x38>)
 800a7c2:	4c0d      	ldr	r4, [pc, #52]	; (800a7f8 <__libc_init_array+0x3c>)
 800a7c4:	1b64      	subs	r4, r4, r5
 800a7c6:	10a4      	asrs	r4, r4, #2
 800a7c8:	42a6      	cmp	r6, r4
 800a7ca:	d109      	bne.n	800a7e0 <__libc_init_array+0x24>
 800a7cc:	f001 ffc2 	bl	800c754 <_init>
 800a7d0:	2600      	movs	r6, #0
 800a7d2:	4d0a      	ldr	r5, [pc, #40]	; (800a7fc <__libc_init_array+0x40>)
 800a7d4:	4c0a      	ldr	r4, [pc, #40]	; (800a800 <__libc_init_array+0x44>)
 800a7d6:	1b64      	subs	r4, r4, r5
 800a7d8:	10a4      	asrs	r4, r4, #2
 800a7da:	42a6      	cmp	r6, r4
 800a7dc:	d105      	bne.n	800a7ea <__libc_init_array+0x2e>
 800a7de:	bd70      	pop	{r4, r5, r6, pc}
 800a7e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7e4:	4798      	blx	r3
 800a7e6:	3601      	adds	r6, #1
 800a7e8:	e7ee      	b.n	800a7c8 <__libc_init_array+0xc>
 800a7ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7ee:	4798      	blx	r3
 800a7f0:	3601      	adds	r6, #1
 800a7f2:	e7f2      	b.n	800a7da <__libc_init_array+0x1e>
 800a7f4:	0800ce84 	.word	0x0800ce84
 800a7f8:	0800ce84 	.word	0x0800ce84
 800a7fc:	0800ce84 	.word	0x0800ce84
 800a800:	0800ce88 	.word	0x0800ce88

0800a804 <__retarget_lock_init_recursive>:
 800a804:	4770      	bx	lr

0800a806 <__retarget_lock_acquire_recursive>:
 800a806:	4770      	bx	lr

0800a808 <__retarget_lock_release_recursive>:
 800a808:	4770      	bx	lr

0800a80a <memchr>:
 800a80a:	4603      	mov	r3, r0
 800a80c:	b510      	push	{r4, lr}
 800a80e:	b2c9      	uxtb	r1, r1
 800a810:	4402      	add	r2, r0
 800a812:	4293      	cmp	r3, r2
 800a814:	4618      	mov	r0, r3
 800a816:	d101      	bne.n	800a81c <memchr+0x12>
 800a818:	2000      	movs	r0, #0
 800a81a:	e003      	b.n	800a824 <memchr+0x1a>
 800a81c:	7804      	ldrb	r4, [r0, #0]
 800a81e:	3301      	adds	r3, #1
 800a820:	428c      	cmp	r4, r1
 800a822:	d1f6      	bne.n	800a812 <memchr+0x8>
 800a824:	bd10      	pop	{r4, pc}

0800a826 <quorem>:
 800a826:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a82a:	6903      	ldr	r3, [r0, #16]
 800a82c:	690c      	ldr	r4, [r1, #16]
 800a82e:	4607      	mov	r7, r0
 800a830:	42a3      	cmp	r3, r4
 800a832:	db7f      	blt.n	800a934 <quorem+0x10e>
 800a834:	3c01      	subs	r4, #1
 800a836:	f100 0514 	add.w	r5, r0, #20
 800a83a:	f101 0814 	add.w	r8, r1, #20
 800a83e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a842:	9301      	str	r3, [sp, #4]
 800a844:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a848:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a84c:	3301      	adds	r3, #1
 800a84e:	429a      	cmp	r2, r3
 800a850:	fbb2 f6f3 	udiv	r6, r2, r3
 800a854:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a858:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a85c:	d331      	bcc.n	800a8c2 <quorem+0x9c>
 800a85e:	f04f 0e00 	mov.w	lr, #0
 800a862:	4640      	mov	r0, r8
 800a864:	46ac      	mov	ip, r5
 800a866:	46f2      	mov	sl, lr
 800a868:	f850 2b04 	ldr.w	r2, [r0], #4
 800a86c:	b293      	uxth	r3, r2
 800a86e:	fb06 e303 	mla	r3, r6, r3, lr
 800a872:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a876:	0c1a      	lsrs	r2, r3, #16
 800a878:	b29b      	uxth	r3, r3
 800a87a:	fb06 220e 	mla	r2, r6, lr, r2
 800a87e:	ebaa 0303 	sub.w	r3, sl, r3
 800a882:	f8dc a000 	ldr.w	sl, [ip]
 800a886:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a88a:	fa1f fa8a 	uxth.w	sl, sl
 800a88e:	4453      	add	r3, sl
 800a890:	f8dc a000 	ldr.w	sl, [ip]
 800a894:	b292      	uxth	r2, r2
 800a896:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a89a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8a4:	4581      	cmp	r9, r0
 800a8a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a8aa:	f84c 3b04 	str.w	r3, [ip], #4
 800a8ae:	d2db      	bcs.n	800a868 <quorem+0x42>
 800a8b0:	f855 300b 	ldr.w	r3, [r5, fp]
 800a8b4:	b92b      	cbnz	r3, 800a8c2 <quorem+0x9c>
 800a8b6:	9b01      	ldr	r3, [sp, #4]
 800a8b8:	3b04      	subs	r3, #4
 800a8ba:	429d      	cmp	r5, r3
 800a8bc:	461a      	mov	r2, r3
 800a8be:	d32d      	bcc.n	800a91c <quorem+0xf6>
 800a8c0:	613c      	str	r4, [r7, #16]
 800a8c2:	4638      	mov	r0, r7
 800a8c4:	f001 f8de 	bl	800ba84 <__mcmp>
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	db23      	blt.n	800a914 <quorem+0xee>
 800a8cc:	4629      	mov	r1, r5
 800a8ce:	2000      	movs	r0, #0
 800a8d0:	3601      	adds	r6, #1
 800a8d2:	f858 2b04 	ldr.w	r2, [r8], #4
 800a8d6:	f8d1 c000 	ldr.w	ip, [r1]
 800a8da:	b293      	uxth	r3, r2
 800a8dc:	1ac3      	subs	r3, r0, r3
 800a8de:	0c12      	lsrs	r2, r2, #16
 800a8e0:	fa1f f08c 	uxth.w	r0, ip
 800a8e4:	4403      	add	r3, r0
 800a8e6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a8ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8f4:	45c1      	cmp	r9, r8
 800a8f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a8fa:	f841 3b04 	str.w	r3, [r1], #4
 800a8fe:	d2e8      	bcs.n	800a8d2 <quorem+0xac>
 800a900:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a904:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a908:	b922      	cbnz	r2, 800a914 <quorem+0xee>
 800a90a:	3b04      	subs	r3, #4
 800a90c:	429d      	cmp	r5, r3
 800a90e:	461a      	mov	r2, r3
 800a910:	d30a      	bcc.n	800a928 <quorem+0x102>
 800a912:	613c      	str	r4, [r7, #16]
 800a914:	4630      	mov	r0, r6
 800a916:	b003      	add	sp, #12
 800a918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a91c:	6812      	ldr	r2, [r2, #0]
 800a91e:	3b04      	subs	r3, #4
 800a920:	2a00      	cmp	r2, #0
 800a922:	d1cd      	bne.n	800a8c0 <quorem+0x9a>
 800a924:	3c01      	subs	r4, #1
 800a926:	e7c8      	b.n	800a8ba <quorem+0x94>
 800a928:	6812      	ldr	r2, [r2, #0]
 800a92a:	3b04      	subs	r3, #4
 800a92c:	2a00      	cmp	r2, #0
 800a92e:	d1f0      	bne.n	800a912 <quorem+0xec>
 800a930:	3c01      	subs	r4, #1
 800a932:	e7eb      	b.n	800a90c <quorem+0xe6>
 800a934:	2000      	movs	r0, #0
 800a936:	e7ee      	b.n	800a916 <quorem+0xf0>

0800a938 <_dtoa_r>:
 800a938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a93c:	4616      	mov	r6, r2
 800a93e:	461f      	mov	r7, r3
 800a940:	69c4      	ldr	r4, [r0, #28]
 800a942:	b099      	sub	sp, #100	; 0x64
 800a944:	4605      	mov	r5, r0
 800a946:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a94a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a94e:	b974      	cbnz	r4, 800a96e <_dtoa_r+0x36>
 800a950:	2010      	movs	r0, #16
 800a952:	f7ff f849 	bl	80099e8 <malloc>
 800a956:	4602      	mov	r2, r0
 800a958:	61e8      	str	r0, [r5, #28]
 800a95a:	b920      	cbnz	r0, 800a966 <_dtoa_r+0x2e>
 800a95c:	21ef      	movs	r1, #239	; 0xef
 800a95e:	4bac      	ldr	r3, [pc, #688]	; (800ac10 <_dtoa_r+0x2d8>)
 800a960:	48ac      	ldr	r0, [pc, #688]	; (800ac14 <_dtoa_r+0x2dc>)
 800a962:	f001 fbb7 	bl	800c0d4 <__assert_func>
 800a966:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a96a:	6004      	str	r4, [r0, #0]
 800a96c:	60c4      	str	r4, [r0, #12]
 800a96e:	69eb      	ldr	r3, [r5, #28]
 800a970:	6819      	ldr	r1, [r3, #0]
 800a972:	b151      	cbz	r1, 800a98a <_dtoa_r+0x52>
 800a974:	685a      	ldr	r2, [r3, #4]
 800a976:	2301      	movs	r3, #1
 800a978:	4093      	lsls	r3, r2
 800a97a:	604a      	str	r2, [r1, #4]
 800a97c:	608b      	str	r3, [r1, #8]
 800a97e:	4628      	mov	r0, r5
 800a980:	f000 fe46 	bl	800b610 <_Bfree>
 800a984:	2200      	movs	r2, #0
 800a986:	69eb      	ldr	r3, [r5, #28]
 800a988:	601a      	str	r2, [r3, #0]
 800a98a:	1e3b      	subs	r3, r7, #0
 800a98c:	bfaf      	iteee	ge
 800a98e:	2300      	movge	r3, #0
 800a990:	2201      	movlt	r2, #1
 800a992:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a996:	9305      	strlt	r3, [sp, #20]
 800a998:	bfa8      	it	ge
 800a99a:	f8c8 3000 	strge.w	r3, [r8]
 800a99e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a9a2:	4b9d      	ldr	r3, [pc, #628]	; (800ac18 <_dtoa_r+0x2e0>)
 800a9a4:	bfb8      	it	lt
 800a9a6:	f8c8 2000 	strlt.w	r2, [r8]
 800a9aa:	ea33 0309 	bics.w	r3, r3, r9
 800a9ae:	d119      	bne.n	800a9e4 <_dtoa_r+0xac>
 800a9b0:	f242 730f 	movw	r3, #9999	; 0x270f
 800a9b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a9b6:	6013      	str	r3, [r2, #0]
 800a9b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a9bc:	4333      	orrs	r3, r6
 800a9be:	f000 8589 	beq.w	800b4d4 <_dtoa_r+0xb9c>
 800a9c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a9c4:	b953      	cbnz	r3, 800a9dc <_dtoa_r+0xa4>
 800a9c6:	4b95      	ldr	r3, [pc, #596]	; (800ac1c <_dtoa_r+0x2e4>)
 800a9c8:	e023      	b.n	800aa12 <_dtoa_r+0xda>
 800a9ca:	4b95      	ldr	r3, [pc, #596]	; (800ac20 <_dtoa_r+0x2e8>)
 800a9cc:	9303      	str	r3, [sp, #12]
 800a9ce:	3308      	adds	r3, #8
 800a9d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a9d2:	6013      	str	r3, [r2, #0]
 800a9d4:	9803      	ldr	r0, [sp, #12]
 800a9d6:	b019      	add	sp, #100	; 0x64
 800a9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9dc:	4b8f      	ldr	r3, [pc, #572]	; (800ac1c <_dtoa_r+0x2e4>)
 800a9de:	9303      	str	r3, [sp, #12]
 800a9e0:	3303      	adds	r3, #3
 800a9e2:	e7f5      	b.n	800a9d0 <_dtoa_r+0x98>
 800a9e4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a9e8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a9ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	f7f5 ffd8 	bl	80009a8 <__aeabi_dcmpeq>
 800a9f8:	4680      	mov	r8, r0
 800a9fa:	b160      	cbz	r0, 800aa16 <_dtoa_r+0xde>
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aa00:	6013      	str	r3, [r2, #0]
 800aa02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f000 8562 	beq.w	800b4ce <_dtoa_r+0xb96>
 800aa0a:	4b86      	ldr	r3, [pc, #536]	; (800ac24 <_dtoa_r+0x2ec>)
 800aa0c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800aa0e:	6013      	str	r3, [r2, #0]
 800aa10:	3b01      	subs	r3, #1
 800aa12:	9303      	str	r3, [sp, #12]
 800aa14:	e7de      	b.n	800a9d4 <_dtoa_r+0x9c>
 800aa16:	ab16      	add	r3, sp, #88	; 0x58
 800aa18:	9301      	str	r3, [sp, #4]
 800aa1a:	ab17      	add	r3, sp, #92	; 0x5c
 800aa1c:	9300      	str	r3, [sp, #0]
 800aa1e:	4628      	mov	r0, r5
 800aa20:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800aa24:	f001 f8d6 	bl	800bbd4 <__d2b>
 800aa28:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800aa2c:	4682      	mov	sl, r0
 800aa2e:	2c00      	cmp	r4, #0
 800aa30:	d07e      	beq.n	800ab30 <_dtoa_r+0x1f8>
 800aa32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aa36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa38:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800aa3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa40:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800aa44:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aa48:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	2200      	movs	r2, #0
 800aa50:	4b75      	ldr	r3, [pc, #468]	; (800ac28 <_dtoa_r+0x2f0>)
 800aa52:	f7f5 fb89 	bl	8000168 <__aeabi_dsub>
 800aa56:	a368      	add	r3, pc, #416	; (adr r3, 800abf8 <_dtoa_r+0x2c0>)
 800aa58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5c:	f7f5 fd3c 	bl	80004d8 <__aeabi_dmul>
 800aa60:	a367      	add	r3, pc, #412	; (adr r3, 800ac00 <_dtoa_r+0x2c8>)
 800aa62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa66:	f7f5 fb81 	bl	800016c <__adddf3>
 800aa6a:	4606      	mov	r6, r0
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	460f      	mov	r7, r1
 800aa70:	f7f5 fcc8 	bl	8000404 <__aeabi_i2d>
 800aa74:	a364      	add	r3, pc, #400	; (adr r3, 800ac08 <_dtoa_r+0x2d0>)
 800aa76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7a:	f7f5 fd2d 	bl	80004d8 <__aeabi_dmul>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	460b      	mov	r3, r1
 800aa82:	4630      	mov	r0, r6
 800aa84:	4639      	mov	r1, r7
 800aa86:	f7f5 fb71 	bl	800016c <__adddf3>
 800aa8a:	4606      	mov	r6, r0
 800aa8c:	460f      	mov	r7, r1
 800aa8e:	f7f5 ffd3 	bl	8000a38 <__aeabi_d2iz>
 800aa92:	2200      	movs	r2, #0
 800aa94:	4683      	mov	fp, r0
 800aa96:	2300      	movs	r3, #0
 800aa98:	4630      	mov	r0, r6
 800aa9a:	4639      	mov	r1, r7
 800aa9c:	f7f5 ff8e 	bl	80009bc <__aeabi_dcmplt>
 800aaa0:	b148      	cbz	r0, 800aab6 <_dtoa_r+0x17e>
 800aaa2:	4658      	mov	r0, fp
 800aaa4:	f7f5 fcae 	bl	8000404 <__aeabi_i2d>
 800aaa8:	4632      	mov	r2, r6
 800aaaa:	463b      	mov	r3, r7
 800aaac:	f7f5 ff7c 	bl	80009a8 <__aeabi_dcmpeq>
 800aab0:	b908      	cbnz	r0, 800aab6 <_dtoa_r+0x17e>
 800aab2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aab6:	f1bb 0f16 	cmp.w	fp, #22
 800aaba:	d857      	bhi.n	800ab6c <_dtoa_r+0x234>
 800aabc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aac0:	4b5a      	ldr	r3, [pc, #360]	; (800ac2c <_dtoa_r+0x2f4>)
 800aac2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaca:	f7f5 ff77 	bl	80009bc <__aeabi_dcmplt>
 800aace:	2800      	cmp	r0, #0
 800aad0:	d04e      	beq.n	800ab70 <_dtoa_r+0x238>
 800aad2:	2300      	movs	r3, #0
 800aad4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aad8:	930f      	str	r3, [sp, #60]	; 0x3c
 800aada:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aadc:	1b1b      	subs	r3, r3, r4
 800aade:	1e5a      	subs	r2, r3, #1
 800aae0:	bf46      	itte	mi
 800aae2:	f1c3 0901 	rsbmi	r9, r3, #1
 800aae6:	2300      	movmi	r3, #0
 800aae8:	f04f 0900 	movpl.w	r9, #0
 800aaec:	9209      	str	r2, [sp, #36]	; 0x24
 800aaee:	bf48      	it	mi
 800aaf0:	9309      	strmi	r3, [sp, #36]	; 0x24
 800aaf2:	f1bb 0f00 	cmp.w	fp, #0
 800aaf6:	db3d      	blt.n	800ab74 <_dtoa_r+0x23c>
 800aaf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aafa:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800aafe:	445b      	add	r3, fp
 800ab00:	9309      	str	r3, [sp, #36]	; 0x24
 800ab02:	2300      	movs	r3, #0
 800ab04:	930a      	str	r3, [sp, #40]	; 0x28
 800ab06:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab08:	2b09      	cmp	r3, #9
 800ab0a:	d867      	bhi.n	800abdc <_dtoa_r+0x2a4>
 800ab0c:	2b05      	cmp	r3, #5
 800ab0e:	bfc4      	itt	gt
 800ab10:	3b04      	subgt	r3, #4
 800ab12:	9322      	strgt	r3, [sp, #136]	; 0x88
 800ab14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab16:	bfc8      	it	gt
 800ab18:	2400      	movgt	r4, #0
 800ab1a:	f1a3 0302 	sub.w	r3, r3, #2
 800ab1e:	bfd8      	it	le
 800ab20:	2401      	movle	r4, #1
 800ab22:	2b03      	cmp	r3, #3
 800ab24:	f200 8086 	bhi.w	800ac34 <_dtoa_r+0x2fc>
 800ab28:	e8df f003 	tbb	[pc, r3]
 800ab2c:	5637392c 	.word	0x5637392c
 800ab30:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800ab34:	441c      	add	r4, r3
 800ab36:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800ab3a:	2b20      	cmp	r3, #32
 800ab3c:	bfc1      	itttt	gt
 800ab3e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ab42:	fa09 f903 	lslgt.w	r9, r9, r3
 800ab46:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800ab4a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ab4e:	bfd6      	itet	le
 800ab50:	f1c3 0320 	rsble	r3, r3, #32
 800ab54:	ea49 0003 	orrgt.w	r0, r9, r3
 800ab58:	fa06 f003 	lslle.w	r0, r6, r3
 800ab5c:	f7f5 fc42 	bl	80003e4 <__aeabi_ui2d>
 800ab60:	2201      	movs	r2, #1
 800ab62:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ab66:	3c01      	subs	r4, #1
 800ab68:	9213      	str	r2, [sp, #76]	; 0x4c
 800ab6a:	e76f      	b.n	800aa4c <_dtoa_r+0x114>
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	e7b3      	b.n	800aad8 <_dtoa_r+0x1a0>
 800ab70:	900f      	str	r0, [sp, #60]	; 0x3c
 800ab72:	e7b2      	b.n	800aada <_dtoa_r+0x1a2>
 800ab74:	f1cb 0300 	rsb	r3, fp, #0
 800ab78:	930a      	str	r3, [sp, #40]	; 0x28
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	eba9 090b 	sub.w	r9, r9, fp
 800ab80:	930e      	str	r3, [sp, #56]	; 0x38
 800ab82:	e7c0      	b.n	800ab06 <_dtoa_r+0x1ce>
 800ab84:	2300      	movs	r3, #0
 800ab86:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	dc55      	bgt.n	800ac3a <_dtoa_r+0x302>
 800ab8e:	2301      	movs	r3, #1
 800ab90:	461a      	mov	r2, r3
 800ab92:	9306      	str	r3, [sp, #24]
 800ab94:	9308      	str	r3, [sp, #32]
 800ab96:	9223      	str	r2, [sp, #140]	; 0x8c
 800ab98:	e00b      	b.n	800abb2 <_dtoa_r+0x27a>
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	e7f3      	b.n	800ab86 <_dtoa_r+0x24e>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	930b      	str	r3, [sp, #44]	; 0x2c
 800aba2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aba4:	445b      	add	r3, fp
 800aba6:	9306      	str	r3, [sp, #24]
 800aba8:	3301      	adds	r3, #1
 800abaa:	2b01      	cmp	r3, #1
 800abac:	9308      	str	r3, [sp, #32]
 800abae:	bfb8      	it	lt
 800abb0:	2301      	movlt	r3, #1
 800abb2:	2100      	movs	r1, #0
 800abb4:	2204      	movs	r2, #4
 800abb6:	69e8      	ldr	r0, [r5, #28]
 800abb8:	f102 0614 	add.w	r6, r2, #20
 800abbc:	429e      	cmp	r6, r3
 800abbe:	d940      	bls.n	800ac42 <_dtoa_r+0x30a>
 800abc0:	6041      	str	r1, [r0, #4]
 800abc2:	4628      	mov	r0, r5
 800abc4:	f000 fce4 	bl	800b590 <_Balloc>
 800abc8:	9003      	str	r0, [sp, #12]
 800abca:	2800      	cmp	r0, #0
 800abcc:	d13c      	bne.n	800ac48 <_dtoa_r+0x310>
 800abce:	4602      	mov	r2, r0
 800abd0:	f240 11af 	movw	r1, #431	; 0x1af
 800abd4:	4b16      	ldr	r3, [pc, #88]	; (800ac30 <_dtoa_r+0x2f8>)
 800abd6:	e6c3      	b.n	800a960 <_dtoa_r+0x28>
 800abd8:	2301      	movs	r3, #1
 800abda:	e7e1      	b.n	800aba0 <_dtoa_r+0x268>
 800abdc:	2401      	movs	r4, #1
 800abde:	2300      	movs	r3, #0
 800abe0:	940b      	str	r4, [sp, #44]	; 0x2c
 800abe2:	9322      	str	r3, [sp, #136]	; 0x88
 800abe4:	f04f 33ff 	mov.w	r3, #4294967295
 800abe8:	2200      	movs	r2, #0
 800abea:	9306      	str	r3, [sp, #24]
 800abec:	9308      	str	r3, [sp, #32]
 800abee:	2312      	movs	r3, #18
 800abf0:	e7d1      	b.n	800ab96 <_dtoa_r+0x25e>
 800abf2:	bf00      	nop
 800abf4:	f3af 8000 	nop.w
 800abf8:	636f4361 	.word	0x636f4361
 800abfc:	3fd287a7 	.word	0x3fd287a7
 800ac00:	8b60c8b3 	.word	0x8b60c8b3
 800ac04:	3fc68a28 	.word	0x3fc68a28
 800ac08:	509f79fb 	.word	0x509f79fb
 800ac0c:	3fd34413 	.word	0x3fd34413
 800ac10:	0800cb57 	.word	0x0800cb57
 800ac14:	0800cb6e 	.word	0x0800cb6e
 800ac18:	7ff00000 	.word	0x7ff00000
 800ac1c:	0800cb53 	.word	0x0800cb53
 800ac20:	0800cb4a 	.word	0x0800cb4a
 800ac24:	0800cb27 	.word	0x0800cb27
 800ac28:	3ff80000 	.word	0x3ff80000
 800ac2c:	0800cc58 	.word	0x0800cc58
 800ac30:	0800cbc6 	.word	0x0800cbc6
 800ac34:	2301      	movs	r3, #1
 800ac36:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac38:	e7d4      	b.n	800abe4 <_dtoa_r+0x2ac>
 800ac3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ac3c:	9306      	str	r3, [sp, #24]
 800ac3e:	9308      	str	r3, [sp, #32]
 800ac40:	e7b7      	b.n	800abb2 <_dtoa_r+0x27a>
 800ac42:	3101      	adds	r1, #1
 800ac44:	0052      	lsls	r2, r2, #1
 800ac46:	e7b7      	b.n	800abb8 <_dtoa_r+0x280>
 800ac48:	69eb      	ldr	r3, [r5, #28]
 800ac4a:	9a03      	ldr	r2, [sp, #12]
 800ac4c:	601a      	str	r2, [r3, #0]
 800ac4e:	9b08      	ldr	r3, [sp, #32]
 800ac50:	2b0e      	cmp	r3, #14
 800ac52:	f200 80a8 	bhi.w	800ada6 <_dtoa_r+0x46e>
 800ac56:	2c00      	cmp	r4, #0
 800ac58:	f000 80a5 	beq.w	800ada6 <_dtoa_r+0x46e>
 800ac5c:	f1bb 0f00 	cmp.w	fp, #0
 800ac60:	dd34      	ble.n	800accc <_dtoa_r+0x394>
 800ac62:	4b9a      	ldr	r3, [pc, #616]	; (800aecc <_dtoa_r+0x594>)
 800ac64:	f00b 020f 	and.w	r2, fp, #15
 800ac68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac6c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ac70:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ac74:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ac78:	ea4f 142b 	mov.w	r4, fp, asr #4
 800ac7c:	d016      	beq.n	800acac <_dtoa_r+0x374>
 800ac7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac82:	4b93      	ldr	r3, [pc, #588]	; (800aed0 <_dtoa_r+0x598>)
 800ac84:	2703      	movs	r7, #3
 800ac86:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac8a:	f7f5 fd4f 	bl	800072c <__aeabi_ddiv>
 800ac8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac92:	f004 040f 	and.w	r4, r4, #15
 800ac96:	4e8e      	ldr	r6, [pc, #568]	; (800aed0 <_dtoa_r+0x598>)
 800ac98:	b954      	cbnz	r4, 800acb0 <_dtoa_r+0x378>
 800ac9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ac9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aca2:	f7f5 fd43 	bl	800072c <__aeabi_ddiv>
 800aca6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800acaa:	e029      	b.n	800ad00 <_dtoa_r+0x3c8>
 800acac:	2702      	movs	r7, #2
 800acae:	e7f2      	b.n	800ac96 <_dtoa_r+0x35e>
 800acb0:	07e1      	lsls	r1, r4, #31
 800acb2:	d508      	bpl.n	800acc6 <_dtoa_r+0x38e>
 800acb4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800acb8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800acbc:	f7f5 fc0c 	bl	80004d8 <__aeabi_dmul>
 800acc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800acc4:	3701      	adds	r7, #1
 800acc6:	1064      	asrs	r4, r4, #1
 800acc8:	3608      	adds	r6, #8
 800acca:	e7e5      	b.n	800ac98 <_dtoa_r+0x360>
 800accc:	f000 80a5 	beq.w	800ae1a <_dtoa_r+0x4e2>
 800acd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800acd4:	f1cb 0400 	rsb	r4, fp, #0
 800acd8:	4b7c      	ldr	r3, [pc, #496]	; (800aecc <_dtoa_r+0x594>)
 800acda:	f004 020f 	and.w	r2, r4, #15
 800acde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ace2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace6:	f7f5 fbf7 	bl	80004d8 <__aeabi_dmul>
 800acea:	2702      	movs	r7, #2
 800acec:	2300      	movs	r3, #0
 800acee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800acf2:	4e77      	ldr	r6, [pc, #476]	; (800aed0 <_dtoa_r+0x598>)
 800acf4:	1124      	asrs	r4, r4, #4
 800acf6:	2c00      	cmp	r4, #0
 800acf8:	f040 8084 	bne.w	800ae04 <_dtoa_r+0x4cc>
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d1d2      	bne.n	800aca6 <_dtoa_r+0x36e>
 800ad00:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ad04:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ad08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	f000 8087 	beq.w	800ae1e <_dtoa_r+0x4e6>
 800ad10:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ad14:	2200      	movs	r2, #0
 800ad16:	4b6f      	ldr	r3, [pc, #444]	; (800aed4 <_dtoa_r+0x59c>)
 800ad18:	f7f5 fe50 	bl	80009bc <__aeabi_dcmplt>
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	d07e      	beq.n	800ae1e <_dtoa_r+0x4e6>
 800ad20:	9b08      	ldr	r3, [sp, #32]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d07b      	beq.n	800ae1e <_dtoa_r+0x4e6>
 800ad26:	9b06      	ldr	r3, [sp, #24]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	dd38      	ble.n	800ad9e <_dtoa_r+0x466>
 800ad2c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ad30:	2200      	movs	r2, #0
 800ad32:	4b69      	ldr	r3, [pc, #420]	; (800aed8 <_dtoa_r+0x5a0>)
 800ad34:	f7f5 fbd0 	bl	80004d8 <__aeabi_dmul>
 800ad38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad3c:	9c06      	ldr	r4, [sp, #24]
 800ad3e:	f10b 38ff 	add.w	r8, fp, #4294967295
 800ad42:	3701      	adds	r7, #1
 800ad44:	4638      	mov	r0, r7
 800ad46:	f7f5 fb5d 	bl	8000404 <__aeabi_i2d>
 800ad4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad4e:	f7f5 fbc3 	bl	80004d8 <__aeabi_dmul>
 800ad52:	2200      	movs	r2, #0
 800ad54:	4b61      	ldr	r3, [pc, #388]	; (800aedc <_dtoa_r+0x5a4>)
 800ad56:	f7f5 fa09 	bl	800016c <__adddf3>
 800ad5a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ad5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ad62:	9611      	str	r6, [sp, #68]	; 0x44
 800ad64:	2c00      	cmp	r4, #0
 800ad66:	d15d      	bne.n	800ae24 <_dtoa_r+0x4ec>
 800ad68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	4b5c      	ldr	r3, [pc, #368]	; (800aee0 <_dtoa_r+0x5a8>)
 800ad70:	f7f5 f9fa 	bl	8000168 <__aeabi_dsub>
 800ad74:	4602      	mov	r2, r0
 800ad76:	460b      	mov	r3, r1
 800ad78:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ad7c:	4633      	mov	r3, r6
 800ad7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ad80:	f7f5 fe3a 	bl	80009f8 <__aeabi_dcmpgt>
 800ad84:	2800      	cmp	r0, #0
 800ad86:	f040 8295 	bne.w	800b2b4 <_dtoa_r+0x97c>
 800ad8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ad90:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ad94:	f7f5 fe12 	bl	80009bc <__aeabi_dcmplt>
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	f040 8289 	bne.w	800b2b0 <_dtoa_r+0x978>
 800ad9e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800ada2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ada6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	f2c0 8151 	blt.w	800b050 <_dtoa_r+0x718>
 800adae:	f1bb 0f0e 	cmp.w	fp, #14
 800adb2:	f300 814d 	bgt.w	800b050 <_dtoa_r+0x718>
 800adb6:	4b45      	ldr	r3, [pc, #276]	; (800aecc <_dtoa_r+0x594>)
 800adb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800adbc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800adc0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800adc4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f280 80da 	bge.w	800af80 <_dtoa_r+0x648>
 800adcc:	9b08      	ldr	r3, [sp, #32]
 800adce:	2b00      	cmp	r3, #0
 800add0:	f300 80d6 	bgt.w	800af80 <_dtoa_r+0x648>
 800add4:	f040 826b 	bne.w	800b2ae <_dtoa_r+0x976>
 800add8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800addc:	2200      	movs	r2, #0
 800adde:	4b40      	ldr	r3, [pc, #256]	; (800aee0 <_dtoa_r+0x5a8>)
 800ade0:	f7f5 fb7a 	bl	80004d8 <__aeabi_dmul>
 800ade4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ade8:	f7f5 fdfc 	bl	80009e4 <__aeabi_dcmpge>
 800adec:	9c08      	ldr	r4, [sp, #32]
 800adee:	4626      	mov	r6, r4
 800adf0:	2800      	cmp	r0, #0
 800adf2:	f040 8241 	bne.w	800b278 <_dtoa_r+0x940>
 800adf6:	2331      	movs	r3, #49	; 0x31
 800adf8:	9f03      	ldr	r7, [sp, #12]
 800adfa:	f10b 0b01 	add.w	fp, fp, #1
 800adfe:	f807 3b01 	strb.w	r3, [r7], #1
 800ae02:	e23d      	b.n	800b280 <_dtoa_r+0x948>
 800ae04:	07e2      	lsls	r2, r4, #31
 800ae06:	d505      	bpl.n	800ae14 <_dtoa_r+0x4dc>
 800ae08:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ae0c:	f7f5 fb64 	bl	80004d8 <__aeabi_dmul>
 800ae10:	2301      	movs	r3, #1
 800ae12:	3701      	adds	r7, #1
 800ae14:	1064      	asrs	r4, r4, #1
 800ae16:	3608      	adds	r6, #8
 800ae18:	e76d      	b.n	800acf6 <_dtoa_r+0x3be>
 800ae1a:	2702      	movs	r7, #2
 800ae1c:	e770      	b.n	800ad00 <_dtoa_r+0x3c8>
 800ae1e:	46d8      	mov	r8, fp
 800ae20:	9c08      	ldr	r4, [sp, #32]
 800ae22:	e78f      	b.n	800ad44 <_dtoa_r+0x40c>
 800ae24:	9903      	ldr	r1, [sp, #12]
 800ae26:	4b29      	ldr	r3, [pc, #164]	; (800aecc <_dtoa_r+0x594>)
 800ae28:	4421      	add	r1, r4
 800ae2a:	9112      	str	r1, [sp, #72]	; 0x48
 800ae2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae2e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ae32:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ae36:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ae3a:	2900      	cmp	r1, #0
 800ae3c:	d054      	beq.n	800aee8 <_dtoa_r+0x5b0>
 800ae3e:	2000      	movs	r0, #0
 800ae40:	4928      	ldr	r1, [pc, #160]	; (800aee4 <_dtoa_r+0x5ac>)
 800ae42:	f7f5 fc73 	bl	800072c <__aeabi_ddiv>
 800ae46:	463b      	mov	r3, r7
 800ae48:	4632      	mov	r2, r6
 800ae4a:	f7f5 f98d 	bl	8000168 <__aeabi_dsub>
 800ae4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ae52:	9f03      	ldr	r7, [sp, #12]
 800ae54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae58:	f7f5 fdee 	bl	8000a38 <__aeabi_d2iz>
 800ae5c:	4604      	mov	r4, r0
 800ae5e:	f7f5 fad1 	bl	8000404 <__aeabi_i2d>
 800ae62:	4602      	mov	r2, r0
 800ae64:	460b      	mov	r3, r1
 800ae66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae6a:	f7f5 f97d 	bl	8000168 <__aeabi_dsub>
 800ae6e:	4602      	mov	r2, r0
 800ae70:	460b      	mov	r3, r1
 800ae72:	3430      	adds	r4, #48	; 0x30
 800ae74:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ae78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ae7c:	f807 4b01 	strb.w	r4, [r7], #1
 800ae80:	f7f5 fd9c 	bl	80009bc <__aeabi_dcmplt>
 800ae84:	2800      	cmp	r0, #0
 800ae86:	d173      	bne.n	800af70 <_dtoa_r+0x638>
 800ae88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae8c:	2000      	movs	r0, #0
 800ae8e:	4911      	ldr	r1, [pc, #68]	; (800aed4 <_dtoa_r+0x59c>)
 800ae90:	f7f5 f96a 	bl	8000168 <__aeabi_dsub>
 800ae94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ae98:	f7f5 fd90 	bl	80009bc <__aeabi_dcmplt>
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	f040 80b6 	bne.w	800b00e <_dtoa_r+0x6d6>
 800aea2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aea4:	429f      	cmp	r7, r3
 800aea6:	f43f af7a 	beq.w	800ad9e <_dtoa_r+0x466>
 800aeaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aeae:	2200      	movs	r2, #0
 800aeb0:	4b09      	ldr	r3, [pc, #36]	; (800aed8 <_dtoa_r+0x5a0>)
 800aeb2:	f7f5 fb11 	bl	80004d8 <__aeabi_dmul>
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aebc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aec0:	4b05      	ldr	r3, [pc, #20]	; (800aed8 <_dtoa_r+0x5a0>)
 800aec2:	f7f5 fb09 	bl	80004d8 <__aeabi_dmul>
 800aec6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aeca:	e7c3      	b.n	800ae54 <_dtoa_r+0x51c>
 800aecc:	0800cc58 	.word	0x0800cc58
 800aed0:	0800cc30 	.word	0x0800cc30
 800aed4:	3ff00000 	.word	0x3ff00000
 800aed8:	40240000 	.word	0x40240000
 800aedc:	401c0000 	.word	0x401c0000
 800aee0:	40140000 	.word	0x40140000
 800aee4:	3fe00000 	.word	0x3fe00000
 800aee8:	4630      	mov	r0, r6
 800aeea:	4639      	mov	r1, r7
 800aeec:	f7f5 faf4 	bl	80004d8 <__aeabi_dmul>
 800aef0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aef2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aef6:	9c03      	ldr	r4, [sp, #12]
 800aef8:	9314      	str	r3, [sp, #80]	; 0x50
 800aefa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aefe:	f7f5 fd9b 	bl	8000a38 <__aeabi_d2iz>
 800af02:	9015      	str	r0, [sp, #84]	; 0x54
 800af04:	f7f5 fa7e 	bl	8000404 <__aeabi_i2d>
 800af08:	4602      	mov	r2, r0
 800af0a:	460b      	mov	r3, r1
 800af0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af10:	f7f5 f92a 	bl	8000168 <__aeabi_dsub>
 800af14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af16:	4606      	mov	r6, r0
 800af18:	3330      	adds	r3, #48	; 0x30
 800af1a:	f804 3b01 	strb.w	r3, [r4], #1
 800af1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af20:	460f      	mov	r7, r1
 800af22:	429c      	cmp	r4, r3
 800af24:	f04f 0200 	mov.w	r2, #0
 800af28:	d124      	bne.n	800af74 <_dtoa_r+0x63c>
 800af2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800af2e:	4baf      	ldr	r3, [pc, #700]	; (800b1ec <_dtoa_r+0x8b4>)
 800af30:	f7f5 f91c 	bl	800016c <__adddf3>
 800af34:	4602      	mov	r2, r0
 800af36:	460b      	mov	r3, r1
 800af38:	4630      	mov	r0, r6
 800af3a:	4639      	mov	r1, r7
 800af3c:	f7f5 fd5c 	bl	80009f8 <__aeabi_dcmpgt>
 800af40:	2800      	cmp	r0, #0
 800af42:	d163      	bne.n	800b00c <_dtoa_r+0x6d4>
 800af44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800af48:	2000      	movs	r0, #0
 800af4a:	49a8      	ldr	r1, [pc, #672]	; (800b1ec <_dtoa_r+0x8b4>)
 800af4c:	f7f5 f90c 	bl	8000168 <__aeabi_dsub>
 800af50:	4602      	mov	r2, r0
 800af52:	460b      	mov	r3, r1
 800af54:	4630      	mov	r0, r6
 800af56:	4639      	mov	r1, r7
 800af58:	f7f5 fd30 	bl	80009bc <__aeabi_dcmplt>
 800af5c:	2800      	cmp	r0, #0
 800af5e:	f43f af1e 	beq.w	800ad9e <_dtoa_r+0x466>
 800af62:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800af64:	1e7b      	subs	r3, r7, #1
 800af66:	9314      	str	r3, [sp, #80]	; 0x50
 800af68:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800af6c:	2b30      	cmp	r3, #48	; 0x30
 800af6e:	d0f8      	beq.n	800af62 <_dtoa_r+0x62a>
 800af70:	46c3      	mov	fp, r8
 800af72:	e03b      	b.n	800afec <_dtoa_r+0x6b4>
 800af74:	4b9e      	ldr	r3, [pc, #632]	; (800b1f0 <_dtoa_r+0x8b8>)
 800af76:	f7f5 faaf 	bl	80004d8 <__aeabi_dmul>
 800af7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af7e:	e7bc      	b.n	800aefa <_dtoa_r+0x5c2>
 800af80:	9f03      	ldr	r7, [sp, #12]
 800af82:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800af86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800af8a:	4640      	mov	r0, r8
 800af8c:	4649      	mov	r1, r9
 800af8e:	f7f5 fbcd 	bl	800072c <__aeabi_ddiv>
 800af92:	f7f5 fd51 	bl	8000a38 <__aeabi_d2iz>
 800af96:	4604      	mov	r4, r0
 800af98:	f7f5 fa34 	bl	8000404 <__aeabi_i2d>
 800af9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800afa0:	f7f5 fa9a 	bl	80004d8 <__aeabi_dmul>
 800afa4:	4602      	mov	r2, r0
 800afa6:	460b      	mov	r3, r1
 800afa8:	4640      	mov	r0, r8
 800afaa:	4649      	mov	r1, r9
 800afac:	f7f5 f8dc 	bl	8000168 <__aeabi_dsub>
 800afb0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800afb4:	f807 6b01 	strb.w	r6, [r7], #1
 800afb8:	9e03      	ldr	r6, [sp, #12]
 800afba:	f8dd c020 	ldr.w	ip, [sp, #32]
 800afbe:	1bbe      	subs	r6, r7, r6
 800afc0:	45b4      	cmp	ip, r6
 800afc2:	4602      	mov	r2, r0
 800afc4:	460b      	mov	r3, r1
 800afc6:	d136      	bne.n	800b036 <_dtoa_r+0x6fe>
 800afc8:	f7f5 f8d0 	bl	800016c <__adddf3>
 800afcc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800afd0:	4680      	mov	r8, r0
 800afd2:	4689      	mov	r9, r1
 800afd4:	f7f5 fd10 	bl	80009f8 <__aeabi_dcmpgt>
 800afd8:	bb58      	cbnz	r0, 800b032 <_dtoa_r+0x6fa>
 800afda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800afde:	4640      	mov	r0, r8
 800afe0:	4649      	mov	r1, r9
 800afe2:	f7f5 fce1 	bl	80009a8 <__aeabi_dcmpeq>
 800afe6:	b108      	cbz	r0, 800afec <_dtoa_r+0x6b4>
 800afe8:	07e3      	lsls	r3, r4, #31
 800afea:	d422      	bmi.n	800b032 <_dtoa_r+0x6fa>
 800afec:	4651      	mov	r1, sl
 800afee:	4628      	mov	r0, r5
 800aff0:	f000 fb0e 	bl	800b610 <_Bfree>
 800aff4:	2300      	movs	r3, #0
 800aff6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aff8:	703b      	strb	r3, [r7, #0]
 800affa:	f10b 0301 	add.w	r3, fp, #1
 800affe:	6013      	str	r3, [r2, #0]
 800b000:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b002:	2b00      	cmp	r3, #0
 800b004:	f43f ace6 	beq.w	800a9d4 <_dtoa_r+0x9c>
 800b008:	601f      	str	r7, [r3, #0]
 800b00a:	e4e3      	b.n	800a9d4 <_dtoa_r+0x9c>
 800b00c:	4627      	mov	r7, r4
 800b00e:	463b      	mov	r3, r7
 800b010:	461f      	mov	r7, r3
 800b012:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b016:	2a39      	cmp	r2, #57	; 0x39
 800b018:	d107      	bne.n	800b02a <_dtoa_r+0x6f2>
 800b01a:	9a03      	ldr	r2, [sp, #12]
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d1f7      	bne.n	800b010 <_dtoa_r+0x6d8>
 800b020:	2230      	movs	r2, #48	; 0x30
 800b022:	9903      	ldr	r1, [sp, #12]
 800b024:	f108 0801 	add.w	r8, r8, #1
 800b028:	700a      	strb	r2, [r1, #0]
 800b02a:	781a      	ldrb	r2, [r3, #0]
 800b02c:	3201      	adds	r2, #1
 800b02e:	701a      	strb	r2, [r3, #0]
 800b030:	e79e      	b.n	800af70 <_dtoa_r+0x638>
 800b032:	46d8      	mov	r8, fp
 800b034:	e7eb      	b.n	800b00e <_dtoa_r+0x6d6>
 800b036:	2200      	movs	r2, #0
 800b038:	4b6d      	ldr	r3, [pc, #436]	; (800b1f0 <_dtoa_r+0x8b8>)
 800b03a:	f7f5 fa4d 	bl	80004d8 <__aeabi_dmul>
 800b03e:	2200      	movs	r2, #0
 800b040:	2300      	movs	r3, #0
 800b042:	4680      	mov	r8, r0
 800b044:	4689      	mov	r9, r1
 800b046:	f7f5 fcaf 	bl	80009a8 <__aeabi_dcmpeq>
 800b04a:	2800      	cmp	r0, #0
 800b04c:	d09b      	beq.n	800af86 <_dtoa_r+0x64e>
 800b04e:	e7cd      	b.n	800afec <_dtoa_r+0x6b4>
 800b050:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b052:	2a00      	cmp	r2, #0
 800b054:	f000 80c4 	beq.w	800b1e0 <_dtoa_r+0x8a8>
 800b058:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b05a:	2a01      	cmp	r2, #1
 800b05c:	f300 80a8 	bgt.w	800b1b0 <_dtoa_r+0x878>
 800b060:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b062:	2a00      	cmp	r2, #0
 800b064:	f000 80a0 	beq.w	800b1a8 <_dtoa_r+0x870>
 800b068:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b06c:	464f      	mov	r7, r9
 800b06e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b070:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b072:	2101      	movs	r1, #1
 800b074:	441a      	add	r2, r3
 800b076:	4628      	mov	r0, r5
 800b078:	4499      	add	r9, r3
 800b07a:	9209      	str	r2, [sp, #36]	; 0x24
 800b07c:	f000 fb7e 	bl	800b77c <__i2b>
 800b080:	4606      	mov	r6, r0
 800b082:	b15f      	cbz	r7, 800b09c <_dtoa_r+0x764>
 800b084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b086:	2b00      	cmp	r3, #0
 800b088:	dd08      	ble.n	800b09c <_dtoa_r+0x764>
 800b08a:	42bb      	cmp	r3, r7
 800b08c:	bfa8      	it	ge
 800b08e:	463b      	movge	r3, r7
 800b090:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b092:	eba9 0903 	sub.w	r9, r9, r3
 800b096:	1aff      	subs	r7, r7, r3
 800b098:	1ad3      	subs	r3, r2, r3
 800b09a:	9309      	str	r3, [sp, #36]	; 0x24
 800b09c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b09e:	b1f3      	cbz	r3, 800b0de <_dtoa_r+0x7a6>
 800b0a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	f000 80a0 	beq.w	800b1e8 <_dtoa_r+0x8b0>
 800b0a8:	2c00      	cmp	r4, #0
 800b0aa:	dd10      	ble.n	800b0ce <_dtoa_r+0x796>
 800b0ac:	4631      	mov	r1, r6
 800b0ae:	4622      	mov	r2, r4
 800b0b0:	4628      	mov	r0, r5
 800b0b2:	f000 fc21 	bl	800b8f8 <__pow5mult>
 800b0b6:	4652      	mov	r2, sl
 800b0b8:	4601      	mov	r1, r0
 800b0ba:	4606      	mov	r6, r0
 800b0bc:	4628      	mov	r0, r5
 800b0be:	f000 fb73 	bl	800b7a8 <__multiply>
 800b0c2:	4680      	mov	r8, r0
 800b0c4:	4651      	mov	r1, sl
 800b0c6:	4628      	mov	r0, r5
 800b0c8:	f000 faa2 	bl	800b610 <_Bfree>
 800b0cc:	46c2      	mov	sl, r8
 800b0ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0d0:	1b1a      	subs	r2, r3, r4
 800b0d2:	d004      	beq.n	800b0de <_dtoa_r+0x7a6>
 800b0d4:	4651      	mov	r1, sl
 800b0d6:	4628      	mov	r0, r5
 800b0d8:	f000 fc0e 	bl	800b8f8 <__pow5mult>
 800b0dc:	4682      	mov	sl, r0
 800b0de:	2101      	movs	r1, #1
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	f000 fb4b 	bl	800b77c <__i2b>
 800b0e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0e8:	4604      	mov	r4, r0
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	f340 8082 	ble.w	800b1f4 <_dtoa_r+0x8bc>
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	4601      	mov	r1, r0
 800b0f4:	4628      	mov	r0, r5
 800b0f6:	f000 fbff 	bl	800b8f8 <__pow5mult>
 800b0fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0fc:	4604      	mov	r4, r0
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	dd7b      	ble.n	800b1fa <_dtoa_r+0x8c2>
 800b102:	f04f 0800 	mov.w	r8, #0
 800b106:	6923      	ldr	r3, [r4, #16]
 800b108:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b10c:	6918      	ldr	r0, [r3, #16]
 800b10e:	f000 fae7 	bl	800b6e0 <__hi0bits>
 800b112:	f1c0 0020 	rsb	r0, r0, #32
 800b116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b118:	4418      	add	r0, r3
 800b11a:	f010 001f 	ands.w	r0, r0, #31
 800b11e:	f000 8092 	beq.w	800b246 <_dtoa_r+0x90e>
 800b122:	f1c0 0320 	rsb	r3, r0, #32
 800b126:	2b04      	cmp	r3, #4
 800b128:	f340 8085 	ble.w	800b236 <_dtoa_r+0x8fe>
 800b12c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b12e:	f1c0 001c 	rsb	r0, r0, #28
 800b132:	4403      	add	r3, r0
 800b134:	4481      	add	r9, r0
 800b136:	4407      	add	r7, r0
 800b138:	9309      	str	r3, [sp, #36]	; 0x24
 800b13a:	f1b9 0f00 	cmp.w	r9, #0
 800b13e:	dd05      	ble.n	800b14c <_dtoa_r+0x814>
 800b140:	4651      	mov	r1, sl
 800b142:	464a      	mov	r2, r9
 800b144:	4628      	mov	r0, r5
 800b146:	f000 fc31 	bl	800b9ac <__lshift>
 800b14a:	4682      	mov	sl, r0
 800b14c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b14e:	2b00      	cmp	r3, #0
 800b150:	dd05      	ble.n	800b15e <_dtoa_r+0x826>
 800b152:	4621      	mov	r1, r4
 800b154:	461a      	mov	r2, r3
 800b156:	4628      	mov	r0, r5
 800b158:	f000 fc28 	bl	800b9ac <__lshift>
 800b15c:	4604      	mov	r4, r0
 800b15e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b160:	2b00      	cmp	r3, #0
 800b162:	d072      	beq.n	800b24a <_dtoa_r+0x912>
 800b164:	4621      	mov	r1, r4
 800b166:	4650      	mov	r0, sl
 800b168:	f000 fc8c 	bl	800ba84 <__mcmp>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	da6c      	bge.n	800b24a <_dtoa_r+0x912>
 800b170:	2300      	movs	r3, #0
 800b172:	4651      	mov	r1, sl
 800b174:	220a      	movs	r2, #10
 800b176:	4628      	mov	r0, r5
 800b178:	f000 fa6c 	bl	800b654 <__multadd>
 800b17c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b17e:	4682      	mov	sl, r0
 800b180:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b184:	2b00      	cmp	r3, #0
 800b186:	f000 81ac 	beq.w	800b4e2 <_dtoa_r+0xbaa>
 800b18a:	2300      	movs	r3, #0
 800b18c:	4631      	mov	r1, r6
 800b18e:	220a      	movs	r2, #10
 800b190:	4628      	mov	r0, r5
 800b192:	f000 fa5f 	bl	800b654 <__multadd>
 800b196:	9b06      	ldr	r3, [sp, #24]
 800b198:	4606      	mov	r6, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	f300 8093 	bgt.w	800b2c6 <_dtoa_r+0x98e>
 800b1a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b1a2:	2b02      	cmp	r3, #2
 800b1a4:	dc59      	bgt.n	800b25a <_dtoa_r+0x922>
 800b1a6:	e08e      	b.n	800b2c6 <_dtoa_r+0x98e>
 800b1a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b1aa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b1ae:	e75d      	b.n	800b06c <_dtoa_r+0x734>
 800b1b0:	9b08      	ldr	r3, [sp, #32]
 800b1b2:	1e5c      	subs	r4, r3, #1
 800b1b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1b6:	42a3      	cmp	r3, r4
 800b1b8:	bfbf      	itttt	lt
 800b1ba:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b1bc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800b1be:	1ae3      	sublt	r3, r4, r3
 800b1c0:	18d2      	addlt	r2, r2, r3
 800b1c2:	bfa8      	it	ge
 800b1c4:	1b1c      	subge	r4, r3, r4
 800b1c6:	9b08      	ldr	r3, [sp, #32]
 800b1c8:	bfbe      	ittt	lt
 800b1ca:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b1cc:	920e      	strlt	r2, [sp, #56]	; 0x38
 800b1ce:	2400      	movlt	r4, #0
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	bfb5      	itete	lt
 800b1d4:	eba9 0703 	sublt.w	r7, r9, r3
 800b1d8:	464f      	movge	r7, r9
 800b1da:	2300      	movlt	r3, #0
 800b1dc:	9b08      	ldrge	r3, [sp, #32]
 800b1de:	e747      	b.n	800b070 <_dtoa_r+0x738>
 800b1e0:	464f      	mov	r7, r9
 800b1e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b1e4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b1e6:	e74c      	b.n	800b082 <_dtoa_r+0x74a>
 800b1e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1ea:	e773      	b.n	800b0d4 <_dtoa_r+0x79c>
 800b1ec:	3fe00000 	.word	0x3fe00000
 800b1f0:	40240000 	.word	0x40240000
 800b1f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	dc18      	bgt.n	800b22c <_dtoa_r+0x8f4>
 800b1fa:	9b04      	ldr	r3, [sp, #16]
 800b1fc:	b9b3      	cbnz	r3, 800b22c <_dtoa_r+0x8f4>
 800b1fe:	9b05      	ldr	r3, [sp, #20]
 800b200:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b204:	b993      	cbnz	r3, 800b22c <_dtoa_r+0x8f4>
 800b206:	9b05      	ldr	r3, [sp, #20]
 800b208:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b20c:	0d1b      	lsrs	r3, r3, #20
 800b20e:	051b      	lsls	r3, r3, #20
 800b210:	b17b      	cbz	r3, 800b232 <_dtoa_r+0x8fa>
 800b212:	f04f 0801 	mov.w	r8, #1
 800b216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b218:	f109 0901 	add.w	r9, r9, #1
 800b21c:	3301      	adds	r3, #1
 800b21e:	9309      	str	r3, [sp, #36]	; 0x24
 800b220:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b222:	2b00      	cmp	r3, #0
 800b224:	f47f af6f 	bne.w	800b106 <_dtoa_r+0x7ce>
 800b228:	2001      	movs	r0, #1
 800b22a:	e774      	b.n	800b116 <_dtoa_r+0x7de>
 800b22c:	f04f 0800 	mov.w	r8, #0
 800b230:	e7f6      	b.n	800b220 <_dtoa_r+0x8e8>
 800b232:	4698      	mov	r8, r3
 800b234:	e7f4      	b.n	800b220 <_dtoa_r+0x8e8>
 800b236:	d080      	beq.n	800b13a <_dtoa_r+0x802>
 800b238:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b23a:	331c      	adds	r3, #28
 800b23c:	441a      	add	r2, r3
 800b23e:	4499      	add	r9, r3
 800b240:	441f      	add	r7, r3
 800b242:	9209      	str	r2, [sp, #36]	; 0x24
 800b244:	e779      	b.n	800b13a <_dtoa_r+0x802>
 800b246:	4603      	mov	r3, r0
 800b248:	e7f6      	b.n	800b238 <_dtoa_r+0x900>
 800b24a:	9b08      	ldr	r3, [sp, #32]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	dc34      	bgt.n	800b2ba <_dtoa_r+0x982>
 800b250:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b252:	2b02      	cmp	r3, #2
 800b254:	dd31      	ble.n	800b2ba <_dtoa_r+0x982>
 800b256:	9b08      	ldr	r3, [sp, #32]
 800b258:	9306      	str	r3, [sp, #24]
 800b25a:	9b06      	ldr	r3, [sp, #24]
 800b25c:	b963      	cbnz	r3, 800b278 <_dtoa_r+0x940>
 800b25e:	4621      	mov	r1, r4
 800b260:	2205      	movs	r2, #5
 800b262:	4628      	mov	r0, r5
 800b264:	f000 f9f6 	bl	800b654 <__multadd>
 800b268:	4601      	mov	r1, r0
 800b26a:	4604      	mov	r4, r0
 800b26c:	4650      	mov	r0, sl
 800b26e:	f000 fc09 	bl	800ba84 <__mcmp>
 800b272:	2800      	cmp	r0, #0
 800b274:	f73f adbf 	bgt.w	800adf6 <_dtoa_r+0x4be>
 800b278:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b27a:	9f03      	ldr	r7, [sp, #12]
 800b27c:	ea6f 0b03 	mvn.w	fp, r3
 800b280:	f04f 0800 	mov.w	r8, #0
 800b284:	4621      	mov	r1, r4
 800b286:	4628      	mov	r0, r5
 800b288:	f000 f9c2 	bl	800b610 <_Bfree>
 800b28c:	2e00      	cmp	r6, #0
 800b28e:	f43f aead 	beq.w	800afec <_dtoa_r+0x6b4>
 800b292:	f1b8 0f00 	cmp.w	r8, #0
 800b296:	d005      	beq.n	800b2a4 <_dtoa_r+0x96c>
 800b298:	45b0      	cmp	r8, r6
 800b29a:	d003      	beq.n	800b2a4 <_dtoa_r+0x96c>
 800b29c:	4641      	mov	r1, r8
 800b29e:	4628      	mov	r0, r5
 800b2a0:	f000 f9b6 	bl	800b610 <_Bfree>
 800b2a4:	4631      	mov	r1, r6
 800b2a6:	4628      	mov	r0, r5
 800b2a8:	f000 f9b2 	bl	800b610 <_Bfree>
 800b2ac:	e69e      	b.n	800afec <_dtoa_r+0x6b4>
 800b2ae:	2400      	movs	r4, #0
 800b2b0:	4626      	mov	r6, r4
 800b2b2:	e7e1      	b.n	800b278 <_dtoa_r+0x940>
 800b2b4:	46c3      	mov	fp, r8
 800b2b6:	4626      	mov	r6, r4
 800b2b8:	e59d      	b.n	800adf6 <_dtoa_r+0x4be>
 800b2ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	f000 80c8 	beq.w	800b452 <_dtoa_r+0xb1a>
 800b2c2:	9b08      	ldr	r3, [sp, #32]
 800b2c4:	9306      	str	r3, [sp, #24]
 800b2c6:	2f00      	cmp	r7, #0
 800b2c8:	dd05      	ble.n	800b2d6 <_dtoa_r+0x99e>
 800b2ca:	4631      	mov	r1, r6
 800b2cc:	463a      	mov	r2, r7
 800b2ce:	4628      	mov	r0, r5
 800b2d0:	f000 fb6c 	bl	800b9ac <__lshift>
 800b2d4:	4606      	mov	r6, r0
 800b2d6:	f1b8 0f00 	cmp.w	r8, #0
 800b2da:	d05b      	beq.n	800b394 <_dtoa_r+0xa5c>
 800b2dc:	4628      	mov	r0, r5
 800b2de:	6871      	ldr	r1, [r6, #4]
 800b2e0:	f000 f956 	bl	800b590 <_Balloc>
 800b2e4:	4607      	mov	r7, r0
 800b2e6:	b928      	cbnz	r0, 800b2f4 <_dtoa_r+0x9bc>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b2ee:	4b81      	ldr	r3, [pc, #516]	; (800b4f4 <_dtoa_r+0xbbc>)
 800b2f0:	f7ff bb36 	b.w	800a960 <_dtoa_r+0x28>
 800b2f4:	6932      	ldr	r2, [r6, #16]
 800b2f6:	f106 010c 	add.w	r1, r6, #12
 800b2fa:	3202      	adds	r2, #2
 800b2fc:	0092      	lsls	r2, r2, #2
 800b2fe:	300c      	adds	r0, #12
 800b300:	f000 feda 	bl	800c0b8 <memcpy>
 800b304:	2201      	movs	r2, #1
 800b306:	4639      	mov	r1, r7
 800b308:	4628      	mov	r0, r5
 800b30a:	f000 fb4f 	bl	800b9ac <__lshift>
 800b30e:	46b0      	mov	r8, r6
 800b310:	4606      	mov	r6, r0
 800b312:	9b03      	ldr	r3, [sp, #12]
 800b314:	9a03      	ldr	r2, [sp, #12]
 800b316:	3301      	adds	r3, #1
 800b318:	9308      	str	r3, [sp, #32]
 800b31a:	9b06      	ldr	r3, [sp, #24]
 800b31c:	4413      	add	r3, r2
 800b31e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b320:	9b04      	ldr	r3, [sp, #16]
 800b322:	f003 0301 	and.w	r3, r3, #1
 800b326:	930a      	str	r3, [sp, #40]	; 0x28
 800b328:	9b08      	ldr	r3, [sp, #32]
 800b32a:	4621      	mov	r1, r4
 800b32c:	3b01      	subs	r3, #1
 800b32e:	4650      	mov	r0, sl
 800b330:	9304      	str	r3, [sp, #16]
 800b332:	f7ff fa78 	bl	800a826 <quorem>
 800b336:	4641      	mov	r1, r8
 800b338:	9006      	str	r0, [sp, #24]
 800b33a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b33e:	4650      	mov	r0, sl
 800b340:	f000 fba0 	bl	800ba84 <__mcmp>
 800b344:	4632      	mov	r2, r6
 800b346:	9009      	str	r0, [sp, #36]	; 0x24
 800b348:	4621      	mov	r1, r4
 800b34a:	4628      	mov	r0, r5
 800b34c:	f000 fbb6 	bl	800babc <__mdiff>
 800b350:	68c2      	ldr	r2, [r0, #12]
 800b352:	4607      	mov	r7, r0
 800b354:	bb02      	cbnz	r2, 800b398 <_dtoa_r+0xa60>
 800b356:	4601      	mov	r1, r0
 800b358:	4650      	mov	r0, sl
 800b35a:	f000 fb93 	bl	800ba84 <__mcmp>
 800b35e:	4602      	mov	r2, r0
 800b360:	4639      	mov	r1, r7
 800b362:	4628      	mov	r0, r5
 800b364:	920c      	str	r2, [sp, #48]	; 0x30
 800b366:	f000 f953 	bl	800b610 <_Bfree>
 800b36a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b36c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b36e:	9f08      	ldr	r7, [sp, #32]
 800b370:	ea43 0102 	orr.w	r1, r3, r2
 800b374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b376:	4319      	orrs	r1, r3
 800b378:	d110      	bne.n	800b39c <_dtoa_r+0xa64>
 800b37a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b37e:	d029      	beq.n	800b3d4 <_dtoa_r+0xa9c>
 800b380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b382:	2b00      	cmp	r3, #0
 800b384:	dd02      	ble.n	800b38c <_dtoa_r+0xa54>
 800b386:	9b06      	ldr	r3, [sp, #24]
 800b388:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b38c:	9b04      	ldr	r3, [sp, #16]
 800b38e:	f883 9000 	strb.w	r9, [r3]
 800b392:	e777      	b.n	800b284 <_dtoa_r+0x94c>
 800b394:	4630      	mov	r0, r6
 800b396:	e7ba      	b.n	800b30e <_dtoa_r+0x9d6>
 800b398:	2201      	movs	r2, #1
 800b39a:	e7e1      	b.n	800b360 <_dtoa_r+0xa28>
 800b39c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	db04      	blt.n	800b3ac <_dtoa_r+0xa74>
 800b3a2:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b3a4:	430b      	orrs	r3, r1
 800b3a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b3a8:	430b      	orrs	r3, r1
 800b3aa:	d120      	bne.n	800b3ee <_dtoa_r+0xab6>
 800b3ac:	2a00      	cmp	r2, #0
 800b3ae:	dded      	ble.n	800b38c <_dtoa_r+0xa54>
 800b3b0:	4651      	mov	r1, sl
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	f000 faf9 	bl	800b9ac <__lshift>
 800b3ba:	4621      	mov	r1, r4
 800b3bc:	4682      	mov	sl, r0
 800b3be:	f000 fb61 	bl	800ba84 <__mcmp>
 800b3c2:	2800      	cmp	r0, #0
 800b3c4:	dc03      	bgt.n	800b3ce <_dtoa_r+0xa96>
 800b3c6:	d1e1      	bne.n	800b38c <_dtoa_r+0xa54>
 800b3c8:	f019 0f01 	tst.w	r9, #1
 800b3cc:	d0de      	beq.n	800b38c <_dtoa_r+0xa54>
 800b3ce:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b3d2:	d1d8      	bne.n	800b386 <_dtoa_r+0xa4e>
 800b3d4:	2339      	movs	r3, #57	; 0x39
 800b3d6:	9a04      	ldr	r2, [sp, #16]
 800b3d8:	7013      	strb	r3, [r2, #0]
 800b3da:	463b      	mov	r3, r7
 800b3dc:	461f      	mov	r7, r3
 800b3de:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b3e2:	3b01      	subs	r3, #1
 800b3e4:	2a39      	cmp	r2, #57	; 0x39
 800b3e6:	d06b      	beq.n	800b4c0 <_dtoa_r+0xb88>
 800b3e8:	3201      	adds	r2, #1
 800b3ea:	701a      	strb	r2, [r3, #0]
 800b3ec:	e74a      	b.n	800b284 <_dtoa_r+0x94c>
 800b3ee:	2a00      	cmp	r2, #0
 800b3f0:	dd07      	ble.n	800b402 <_dtoa_r+0xaca>
 800b3f2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b3f6:	d0ed      	beq.n	800b3d4 <_dtoa_r+0xa9c>
 800b3f8:	9a04      	ldr	r2, [sp, #16]
 800b3fa:	f109 0301 	add.w	r3, r9, #1
 800b3fe:	7013      	strb	r3, [r2, #0]
 800b400:	e740      	b.n	800b284 <_dtoa_r+0x94c>
 800b402:	9b08      	ldr	r3, [sp, #32]
 800b404:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b406:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d042      	beq.n	800b494 <_dtoa_r+0xb5c>
 800b40e:	4651      	mov	r1, sl
 800b410:	2300      	movs	r3, #0
 800b412:	220a      	movs	r2, #10
 800b414:	4628      	mov	r0, r5
 800b416:	f000 f91d 	bl	800b654 <__multadd>
 800b41a:	45b0      	cmp	r8, r6
 800b41c:	4682      	mov	sl, r0
 800b41e:	f04f 0300 	mov.w	r3, #0
 800b422:	f04f 020a 	mov.w	r2, #10
 800b426:	4641      	mov	r1, r8
 800b428:	4628      	mov	r0, r5
 800b42a:	d107      	bne.n	800b43c <_dtoa_r+0xb04>
 800b42c:	f000 f912 	bl	800b654 <__multadd>
 800b430:	4680      	mov	r8, r0
 800b432:	4606      	mov	r6, r0
 800b434:	9b08      	ldr	r3, [sp, #32]
 800b436:	3301      	adds	r3, #1
 800b438:	9308      	str	r3, [sp, #32]
 800b43a:	e775      	b.n	800b328 <_dtoa_r+0x9f0>
 800b43c:	f000 f90a 	bl	800b654 <__multadd>
 800b440:	4631      	mov	r1, r6
 800b442:	4680      	mov	r8, r0
 800b444:	2300      	movs	r3, #0
 800b446:	220a      	movs	r2, #10
 800b448:	4628      	mov	r0, r5
 800b44a:	f000 f903 	bl	800b654 <__multadd>
 800b44e:	4606      	mov	r6, r0
 800b450:	e7f0      	b.n	800b434 <_dtoa_r+0xafc>
 800b452:	9b08      	ldr	r3, [sp, #32]
 800b454:	9306      	str	r3, [sp, #24]
 800b456:	9f03      	ldr	r7, [sp, #12]
 800b458:	4621      	mov	r1, r4
 800b45a:	4650      	mov	r0, sl
 800b45c:	f7ff f9e3 	bl	800a826 <quorem>
 800b460:	9b03      	ldr	r3, [sp, #12]
 800b462:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b466:	f807 9b01 	strb.w	r9, [r7], #1
 800b46a:	1afa      	subs	r2, r7, r3
 800b46c:	9b06      	ldr	r3, [sp, #24]
 800b46e:	4293      	cmp	r3, r2
 800b470:	dd07      	ble.n	800b482 <_dtoa_r+0xb4a>
 800b472:	4651      	mov	r1, sl
 800b474:	2300      	movs	r3, #0
 800b476:	220a      	movs	r2, #10
 800b478:	4628      	mov	r0, r5
 800b47a:	f000 f8eb 	bl	800b654 <__multadd>
 800b47e:	4682      	mov	sl, r0
 800b480:	e7ea      	b.n	800b458 <_dtoa_r+0xb20>
 800b482:	9b06      	ldr	r3, [sp, #24]
 800b484:	f04f 0800 	mov.w	r8, #0
 800b488:	2b00      	cmp	r3, #0
 800b48a:	bfcc      	ite	gt
 800b48c:	461f      	movgt	r7, r3
 800b48e:	2701      	movle	r7, #1
 800b490:	9b03      	ldr	r3, [sp, #12]
 800b492:	441f      	add	r7, r3
 800b494:	4651      	mov	r1, sl
 800b496:	2201      	movs	r2, #1
 800b498:	4628      	mov	r0, r5
 800b49a:	f000 fa87 	bl	800b9ac <__lshift>
 800b49e:	4621      	mov	r1, r4
 800b4a0:	4682      	mov	sl, r0
 800b4a2:	f000 faef 	bl	800ba84 <__mcmp>
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	dc97      	bgt.n	800b3da <_dtoa_r+0xaa2>
 800b4aa:	d102      	bne.n	800b4b2 <_dtoa_r+0xb7a>
 800b4ac:	f019 0f01 	tst.w	r9, #1
 800b4b0:	d193      	bne.n	800b3da <_dtoa_r+0xaa2>
 800b4b2:	463b      	mov	r3, r7
 800b4b4:	461f      	mov	r7, r3
 800b4b6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b4ba:	2a30      	cmp	r2, #48	; 0x30
 800b4bc:	d0fa      	beq.n	800b4b4 <_dtoa_r+0xb7c>
 800b4be:	e6e1      	b.n	800b284 <_dtoa_r+0x94c>
 800b4c0:	9a03      	ldr	r2, [sp, #12]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d18a      	bne.n	800b3dc <_dtoa_r+0xaa4>
 800b4c6:	2331      	movs	r3, #49	; 0x31
 800b4c8:	f10b 0b01 	add.w	fp, fp, #1
 800b4cc:	e797      	b.n	800b3fe <_dtoa_r+0xac6>
 800b4ce:	4b0a      	ldr	r3, [pc, #40]	; (800b4f8 <_dtoa_r+0xbc0>)
 800b4d0:	f7ff ba9f 	b.w	800aa12 <_dtoa_r+0xda>
 800b4d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	f47f aa77 	bne.w	800a9ca <_dtoa_r+0x92>
 800b4dc:	4b07      	ldr	r3, [pc, #28]	; (800b4fc <_dtoa_r+0xbc4>)
 800b4de:	f7ff ba98 	b.w	800aa12 <_dtoa_r+0xda>
 800b4e2:	9b06      	ldr	r3, [sp, #24]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	dcb6      	bgt.n	800b456 <_dtoa_r+0xb1e>
 800b4e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b4ea:	2b02      	cmp	r3, #2
 800b4ec:	f73f aeb5 	bgt.w	800b25a <_dtoa_r+0x922>
 800b4f0:	e7b1      	b.n	800b456 <_dtoa_r+0xb1e>
 800b4f2:	bf00      	nop
 800b4f4:	0800cbc6 	.word	0x0800cbc6
 800b4f8:	0800cb26 	.word	0x0800cb26
 800b4fc:	0800cb4a 	.word	0x0800cb4a

0800b500 <_free_r>:
 800b500:	b538      	push	{r3, r4, r5, lr}
 800b502:	4605      	mov	r5, r0
 800b504:	2900      	cmp	r1, #0
 800b506:	d040      	beq.n	800b58a <_free_r+0x8a>
 800b508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b50c:	1f0c      	subs	r4, r1, #4
 800b50e:	2b00      	cmp	r3, #0
 800b510:	bfb8      	it	lt
 800b512:	18e4      	addlt	r4, r4, r3
 800b514:	f7fe fb10 	bl	8009b38 <__malloc_lock>
 800b518:	4a1c      	ldr	r2, [pc, #112]	; (800b58c <_free_r+0x8c>)
 800b51a:	6813      	ldr	r3, [r2, #0]
 800b51c:	b933      	cbnz	r3, 800b52c <_free_r+0x2c>
 800b51e:	6063      	str	r3, [r4, #4]
 800b520:	6014      	str	r4, [r2, #0]
 800b522:	4628      	mov	r0, r5
 800b524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b528:	f7fe bb0c 	b.w	8009b44 <__malloc_unlock>
 800b52c:	42a3      	cmp	r3, r4
 800b52e:	d908      	bls.n	800b542 <_free_r+0x42>
 800b530:	6820      	ldr	r0, [r4, #0]
 800b532:	1821      	adds	r1, r4, r0
 800b534:	428b      	cmp	r3, r1
 800b536:	bf01      	itttt	eq
 800b538:	6819      	ldreq	r1, [r3, #0]
 800b53a:	685b      	ldreq	r3, [r3, #4]
 800b53c:	1809      	addeq	r1, r1, r0
 800b53e:	6021      	streq	r1, [r4, #0]
 800b540:	e7ed      	b.n	800b51e <_free_r+0x1e>
 800b542:	461a      	mov	r2, r3
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	b10b      	cbz	r3, 800b54c <_free_r+0x4c>
 800b548:	42a3      	cmp	r3, r4
 800b54a:	d9fa      	bls.n	800b542 <_free_r+0x42>
 800b54c:	6811      	ldr	r1, [r2, #0]
 800b54e:	1850      	adds	r0, r2, r1
 800b550:	42a0      	cmp	r0, r4
 800b552:	d10b      	bne.n	800b56c <_free_r+0x6c>
 800b554:	6820      	ldr	r0, [r4, #0]
 800b556:	4401      	add	r1, r0
 800b558:	1850      	adds	r0, r2, r1
 800b55a:	4283      	cmp	r3, r0
 800b55c:	6011      	str	r1, [r2, #0]
 800b55e:	d1e0      	bne.n	800b522 <_free_r+0x22>
 800b560:	6818      	ldr	r0, [r3, #0]
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	4408      	add	r0, r1
 800b566:	6010      	str	r0, [r2, #0]
 800b568:	6053      	str	r3, [r2, #4]
 800b56a:	e7da      	b.n	800b522 <_free_r+0x22>
 800b56c:	d902      	bls.n	800b574 <_free_r+0x74>
 800b56e:	230c      	movs	r3, #12
 800b570:	602b      	str	r3, [r5, #0]
 800b572:	e7d6      	b.n	800b522 <_free_r+0x22>
 800b574:	6820      	ldr	r0, [r4, #0]
 800b576:	1821      	adds	r1, r4, r0
 800b578:	428b      	cmp	r3, r1
 800b57a:	bf01      	itttt	eq
 800b57c:	6819      	ldreq	r1, [r3, #0]
 800b57e:	685b      	ldreq	r3, [r3, #4]
 800b580:	1809      	addeq	r1, r1, r0
 800b582:	6021      	streq	r1, [r4, #0]
 800b584:	6063      	str	r3, [r4, #4]
 800b586:	6054      	str	r4, [r2, #4]
 800b588:	e7cb      	b.n	800b522 <_free_r+0x22>
 800b58a:	bd38      	pop	{r3, r4, r5, pc}
 800b58c:	20000bdc 	.word	0x20000bdc

0800b590 <_Balloc>:
 800b590:	b570      	push	{r4, r5, r6, lr}
 800b592:	69c6      	ldr	r6, [r0, #28]
 800b594:	4604      	mov	r4, r0
 800b596:	460d      	mov	r5, r1
 800b598:	b976      	cbnz	r6, 800b5b8 <_Balloc+0x28>
 800b59a:	2010      	movs	r0, #16
 800b59c:	f7fe fa24 	bl	80099e8 <malloc>
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	61e0      	str	r0, [r4, #28]
 800b5a4:	b920      	cbnz	r0, 800b5b0 <_Balloc+0x20>
 800b5a6:	216b      	movs	r1, #107	; 0x6b
 800b5a8:	4b17      	ldr	r3, [pc, #92]	; (800b608 <_Balloc+0x78>)
 800b5aa:	4818      	ldr	r0, [pc, #96]	; (800b60c <_Balloc+0x7c>)
 800b5ac:	f000 fd92 	bl	800c0d4 <__assert_func>
 800b5b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5b4:	6006      	str	r6, [r0, #0]
 800b5b6:	60c6      	str	r6, [r0, #12]
 800b5b8:	69e6      	ldr	r6, [r4, #28]
 800b5ba:	68f3      	ldr	r3, [r6, #12]
 800b5bc:	b183      	cbz	r3, 800b5e0 <_Balloc+0x50>
 800b5be:	69e3      	ldr	r3, [r4, #28]
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b5c6:	b9b8      	cbnz	r0, 800b5f8 <_Balloc+0x68>
 800b5c8:	2101      	movs	r1, #1
 800b5ca:	fa01 f605 	lsl.w	r6, r1, r5
 800b5ce:	1d72      	adds	r2, r6, #5
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	0092      	lsls	r2, r2, #2
 800b5d4:	f000 fd9c 	bl	800c110 <_calloc_r>
 800b5d8:	b160      	cbz	r0, 800b5f4 <_Balloc+0x64>
 800b5da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b5de:	e00e      	b.n	800b5fe <_Balloc+0x6e>
 800b5e0:	2221      	movs	r2, #33	; 0x21
 800b5e2:	2104      	movs	r1, #4
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	f000 fd93 	bl	800c110 <_calloc_r>
 800b5ea:	69e3      	ldr	r3, [r4, #28]
 800b5ec:	60f0      	str	r0, [r6, #12]
 800b5ee:	68db      	ldr	r3, [r3, #12]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d1e4      	bne.n	800b5be <_Balloc+0x2e>
 800b5f4:	2000      	movs	r0, #0
 800b5f6:	bd70      	pop	{r4, r5, r6, pc}
 800b5f8:	6802      	ldr	r2, [r0, #0]
 800b5fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b5fe:	2300      	movs	r3, #0
 800b600:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b604:	e7f7      	b.n	800b5f6 <_Balloc+0x66>
 800b606:	bf00      	nop
 800b608:	0800cb57 	.word	0x0800cb57
 800b60c:	0800cbd7 	.word	0x0800cbd7

0800b610 <_Bfree>:
 800b610:	b570      	push	{r4, r5, r6, lr}
 800b612:	69c6      	ldr	r6, [r0, #28]
 800b614:	4605      	mov	r5, r0
 800b616:	460c      	mov	r4, r1
 800b618:	b976      	cbnz	r6, 800b638 <_Bfree+0x28>
 800b61a:	2010      	movs	r0, #16
 800b61c:	f7fe f9e4 	bl	80099e8 <malloc>
 800b620:	4602      	mov	r2, r0
 800b622:	61e8      	str	r0, [r5, #28]
 800b624:	b920      	cbnz	r0, 800b630 <_Bfree+0x20>
 800b626:	218f      	movs	r1, #143	; 0x8f
 800b628:	4b08      	ldr	r3, [pc, #32]	; (800b64c <_Bfree+0x3c>)
 800b62a:	4809      	ldr	r0, [pc, #36]	; (800b650 <_Bfree+0x40>)
 800b62c:	f000 fd52 	bl	800c0d4 <__assert_func>
 800b630:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b634:	6006      	str	r6, [r0, #0]
 800b636:	60c6      	str	r6, [r0, #12]
 800b638:	b13c      	cbz	r4, 800b64a <_Bfree+0x3a>
 800b63a:	69eb      	ldr	r3, [r5, #28]
 800b63c:	6862      	ldr	r2, [r4, #4]
 800b63e:	68db      	ldr	r3, [r3, #12]
 800b640:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b644:	6021      	str	r1, [r4, #0]
 800b646:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b64a:	bd70      	pop	{r4, r5, r6, pc}
 800b64c:	0800cb57 	.word	0x0800cb57
 800b650:	0800cbd7 	.word	0x0800cbd7

0800b654 <__multadd>:
 800b654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b658:	4607      	mov	r7, r0
 800b65a:	460c      	mov	r4, r1
 800b65c:	461e      	mov	r6, r3
 800b65e:	2000      	movs	r0, #0
 800b660:	690d      	ldr	r5, [r1, #16]
 800b662:	f101 0c14 	add.w	ip, r1, #20
 800b666:	f8dc 3000 	ldr.w	r3, [ip]
 800b66a:	3001      	adds	r0, #1
 800b66c:	b299      	uxth	r1, r3
 800b66e:	fb02 6101 	mla	r1, r2, r1, r6
 800b672:	0c1e      	lsrs	r6, r3, #16
 800b674:	0c0b      	lsrs	r3, r1, #16
 800b676:	fb02 3306 	mla	r3, r2, r6, r3
 800b67a:	b289      	uxth	r1, r1
 800b67c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b680:	4285      	cmp	r5, r0
 800b682:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b686:	f84c 1b04 	str.w	r1, [ip], #4
 800b68a:	dcec      	bgt.n	800b666 <__multadd+0x12>
 800b68c:	b30e      	cbz	r6, 800b6d2 <__multadd+0x7e>
 800b68e:	68a3      	ldr	r3, [r4, #8]
 800b690:	42ab      	cmp	r3, r5
 800b692:	dc19      	bgt.n	800b6c8 <__multadd+0x74>
 800b694:	6861      	ldr	r1, [r4, #4]
 800b696:	4638      	mov	r0, r7
 800b698:	3101      	adds	r1, #1
 800b69a:	f7ff ff79 	bl	800b590 <_Balloc>
 800b69e:	4680      	mov	r8, r0
 800b6a0:	b928      	cbnz	r0, 800b6ae <__multadd+0x5a>
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	21ba      	movs	r1, #186	; 0xba
 800b6a6:	4b0c      	ldr	r3, [pc, #48]	; (800b6d8 <__multadd+0x84>)
 800b6a8:	480c      	ldr	r0, [pc, #48]	; (800b6dc <__multadd+0x88>)
 800b6aa:	f000 fd13 	bl	800c0d4 <__assert_func>
 800b6ae:	6922      	ldr	r2, [r4, #16]
 800b6b0:	f104 010c 	add.w	r1, r4, #12
 800b6b4:	3202      	adds	r2, #2
 800b6b6:	0092      	lsls	r2, r2, #2
 800b6b8:	300c      	adds	r0, #12
 800b6ba:	f000 fcfd 	bl	800c0b8 <memcpy>
 800b6be:	4621      	mov	r1, r4
 800b6c0:	4638      	mov	r0, r7
 800b6c2:	f7ff ffa5 	bl	800b610 <_Bfree>
 800b6c6:	4644      	mov	r4, r8
 800b6c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b6cc:	3501      	adds	r5, #1
 800b6ce:	615e      	str	r6, [r3, #20]
 800b6d0:	6125      	str	r5, [r4, #16]
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6d8:	0800cbc6 	.word	0x0800cbc6
 800b6dc:	0800cbd7 	.word	0x0800cbd7

0800b6e0 <__hi0bits>:
 800b6e0:	0c02      	lsrs	r2, r0, #16
 800b6e2:	0412      	lsls	r2, r2, #16
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	b9ca      	cbnz	r2, 800b71c <__hi0bits+0x3c>
 800b6e8:	0403      	lsls	r3, r0, #16
 800b6ea:	2010      	movs	r0, #16
 800b6ec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b6f0:	bf04      	itt	eq
 800b6f2:	021b      	lsleq	r3, r3, #8
 800b6f4:	3008      	addeq	r0, #8
 800b6f6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b6fa:	bf04      	itt	eq
 800b6fc:	011b      	lsleq	r3, r3, #4
 800b6fe:	3004      	addeq	r0, #4
 800b700:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b704:	bf04      	itt	eq
 800b706:	009b      	lsleq	r3, r3, #2
 800b708:	3002      	addeq	r0, #2
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	db05      	blt.n	800b71a <__hi0bits+0x3a>
 800b70e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b712:	f100 0001 	add.w	r0, r0, #1
 800b716:	bf08      	it	eq
 800b718:	2020      	moveq	r0, #32
 800b71a:	4770      	bx	lr
 800b71c:	2000      	movs	r0, #0
 800b71e:	e7e5      	b.n	800b6ec <__hi0bits+0xc>

0800b720 <__lo0bits>:
 800b720:	6803      	ldr	r3, [r0, #0]
 800b722:	4602      	mov	r2, r0
 800b724:	f013 0007 	ands.w	r0, r3, #7
 800b728:	d00b      	beq.n	800b742 <__lo0bits+0x22>
 800b72a:	07d9      	lsls	r1, r3, #31
 800b72c:	d421      	bmi.n	800b772 <__lo0bits+0x52>
 800b72e:	0798      	lsls	r0, r3, #30
 800b730:	bf49      	itett	mi
 800b732:	085b      	lsrmi	r3, r3, #1
 800b734:	089b      	lsrpl	r3, r3, #2
 800b736:	2001      	movmi	r0, #1
 800b738:	6013      	strmi	r3, [r2, #0]
 800b73a:	bf5c      	itt	pl
 800b73c:	2002      	movpl	r0, #2
 800b73e:	6013      	strpl	r3, [r2, #0]
 800b740:	4770      	bx	lr
 800b742:	b299      	uxth	r1, r3
 800b744:	b909      	cbnz	r1, 800b74a <__lo0bits+0x2a>
 800b746:	2010      	movs	r0, #16
 800b748:	0c1b      	lsrs	r3, r3, #16
 800b74a:	b2d9      	uxtb	r1, r3
 800b74c:	b909      	cbnz	r1, 800b752 <__lo0bits+0x32>
 800b74e:	3008      	adds	r0, #8
 800b750:	0a1b      	lsrs	r3, r3, #8
 800b752:	0719      	lsls	r1, r3, #28
 800b754:	bf04      	itt	eq
 800b756:	091b      	lsreq	r3, r3, #4
 800b758:	3004      	addeq	r0, #4
 800b75a:	0799      	lsls	r1, r3, #30
 800b75c:	bf04      	itt	eq
 800b75e:	089b      	lsreq	r3, r3, #2
 800b760:	3002      	addeq	r0, #2
 800b762:	07d9      	lsls	r1, r3, #31
 800b764:	d403      	bmi.n	800b76e <__lo0bits+0x4e>
 800b766:	085b      	lsrs	r3, r3, #1
 800b768:	f100 0001 	add.w	r0, r0, #1
 800b76c:	d003      	beq.n	800b776 <__lo0bits+0x56>
 800b76e:	6013      	str	r3, [r2, #0]
 800b770:	4770      	bx	lr
 800b772:	2000      	movs	r0, #0
 800b774:	4770      	bx	lr
 800b776:	2020      	movs	r0, #32
 800b778:	4770      	bx	lr
	...

0800b77c <__i2b>:
 800b77c:	b510      	push	{r4, lr}
 800b77e:	460c      	mov	r4, r1
 800b780:	2101      	movs	r1, #1
 800b782:	f7ff ff05 	bl	800b590 <_Balloc>
 800b786:	4602      	mov	r2, r0
 800b788:	b928      	cbnz	r0, 800b796 <__i2b+0x1a>
 800b78a:	f240 1145 	movw	r1, #325	; 0x145
 800b78e:	4b04      	ldr	r3, [pc, #16]	; (800b7a0 <__i2b+0x24>)
 800b790:	4804      	ldr	r0, [pc, #16]	; (800b7a4 <__i2b+0x28>)
 800b792:	f000 fc9f 	bl	800c0d4 <__assert_func>
 800b796:	2301      	movs	r3, #1
 800b798:	6144      	str	r4, [r0, #20]
 800b79a:	6103      	str	r3, [r0, #16]
 800b79c:	bd10      	pop	{r4, pc}
 800b79e:	bf00      	nop
 800b7a0:	0800cbc6 	.word	0x0800cbc6
 800b7a4:	0800cbd7 	.word	0x0800cbd7

0800b7a8 <__multiply>:
 800b7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ac:	4691      	mov	r9, r2
 800b7ae:	690a      	ldr	r2, [r1, #16]
 800b7b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b7b4:	460c      	mov	r4, r1
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	bfbe      	ittt	lt
 800b7ba:	460b      	movlt	r3, r1
 800b7bc:	464c      	movlt	r4, r9
 800b7be:	4699      	movlt	r9, r3
 800b7c0:	6927      	ldr	r7, [r4, #16]
 800b7c2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b7c6:	68a3      	ldr	r3, [r4, #8]
 800b7c8:	6861      	ldr	r1, [r4, #4]
 800b7ca:	eb07 060a 	add.w	r6, r7, sl
 800b7ce:	42b3      	cmp	r3, r6
 800b7d0:	b085      	sub	sp, #20
 800b7d2:	bfb8      	it	lt
 800b7d4:	3101      	addlt	r1, #1
 800b7d6:	f7ff fedb 	bl	800b590 <_Balloc>
 800b7da:	b930      	cbnz	r0, 800b7ea <__multiply+0x42>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b7e2:	4b43      	ldr	r3, [pc, #268]	; (800b8f0 <__multiply+0x148>)
 800b7e4:	4843      	ldr	r0, [pc, #268]	; (800b8f4 <__multiply+0x14c>)
 800b7e6:	f000 fc75 	bl	800c0d4 <__assert_func>
 800b7ea:	f100 0514 	add.w	r5, r0, #20
 800b7ee:	462b      	mov	r3, r5
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b7f6:	4543      	cmp	r3, r8
 800b7f8:	d321      	bcc.n	800b83e <__multiply+0x96>
 800b7fa:	f104 0314 	add.w	r3, r4, #20
 800b7fe:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b802:	f109 0314 	add.w	r3, r9, #20
 800b806:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b80a:	9202      	str	r2, [sp, #8]
 800b80c:	1b3a      	subs	r2, r7, r4
 800b80e:	3a15      	subs	r2, #21
 800b810:	f022 0203 	bic.w	r2, r2, #3
 800b814:	3204      	adds	r2, #4
 800b816:	f104 0115 	add.w	r1, r4, #21
 800b81a:	428f      	cmp	r7, r1
 800b81c:	bf38      	it	cc
 800b81e:	2204      	movcc	r2, #4
 800b820:	9201      	str	r2, [sp, #4]
 800b822:	9a02      	ldr	r2, [sp, #8]
 800b824:	9303      	str	r3, [sp, #12]
 800b826:	429a      	cmp	r2, r3
 800b828:	d80c      	bhi.n	800b844 <__multiply+0x9c>
 800b82a:	2e00      	cmp	r6, #0
 800b82c:	dd03      	ble.n	800b836 <__multiply+0x8e>
 800b82e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b832:	2b00      	cmp	r3, #0
 800b834:	d05a      	beq.n	800b8ec <__multiply+0x144>
 800b836:	6106      	str	r6, [r0, #16]
 800b838:	b005      	add	sp, #20
 800b83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b83e:	f843 2b04 	str.w	r2, [r3], #4
 800b842:	e7d8      	b.n	800b7f6 <__multiply+0x4e>
 800b844:	f8b3 a000 	ldrh.w	sl, [r3]
 800b848:	f1ba 0f00 	cmp.w	sl, #0
 800b84c:	d023      	beq.n	800b896 <__multiply+0xee>
 800b84e:	46a9      	mov	r9, r5
 800b850:	f04f 0c00 	mov.w	ip, #0
 800b854:	f104 0e14 	add.w	lr, r4, #20
 800b858:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b85c:	f8d9 1000 	ldr.w	r1, [r9]
 800b860:	fa1f fb82 	uxth.w	fp, r2
 800b864:	b289      	uxth	r1, r1
 800b866:	fb0a 110b 	mla	r1, sl, fp, r1
 800b86a:	4461      	add	r1, ip
 800b86c:	f8d9 c000 	ldr.w	ip, [r9]
 800b870:	0c12      	lsrs	r2, r2, #16
 800b872:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b876:	fb0a c202 	mla	r2, sl, r2, ip
 800b87a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b87e:	b289      	uxth	r1, r1
 800b880:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b884:	4577      	cmp	r7, lr
 800b886:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b88a:	f849 1b04 	str.w	r1, [r9], #4
 800b88e:	d8e3      	bhi.n	800b858 <__multiply+0xb0>
 800b890:	9a01      	ldr	r2, [sp, #4]
 800b892:	f845 c002 	str.w	ip, [r5, r2]
 800b896:	9a03      	ldr	r2, [sp, #12]
 800b898:	3304      	adds	r3, #4
 800b89a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b89e:	f1b9 0f00 	cmp.w	r9, #0
 800b8a2:	d021      	beq.n	800b8e8 <__multiply+0x140>
 800b8a4:	46ae      	mov	lr, r5
 800b8a6:	f04f 0a00 	mov.w	sl, #0
 800b8aa:	6829      	ldr	r1, [r5, #0]
 800b8ac:	f104 0c14 	add.w	ip, r4, #20
 800b8b0:	f8bc b000 	ldrh.w	fp, [ip]
 800b8b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b8b8:	b289      	uxth	r1, r1
 800b8ba:	fb09 220b 	mla	r2, r9, fp, r2
 800b8be:	4452      	add	r2, sl
 800b8c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b8c4:	f84e 1b04 	str.w	r1, [lr], #4
 800b8c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b8cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b8d0:	f8be 1000 	ldrh.w	r1, [lr]
 800b8d4:	4567      	cmp	r7, ip
 800b8d6:	fb09 110a 	mla	r1, r9, sl, r1
 800b8da:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b8de:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b8e2:	d8e5      	bhi.n	800b8b0 <__multiply+0x108>
 800b8e4:	9a01      	ldr	r2, [sp, #4]
 800b8e6:	50a9      	str	r1, [r5, r2]
 800b8e8:	3504      	adds	r5, #4
 800b8ea:	e79a      	b.n	800b822 <__multiply+0x7a>
 800b8ec:	3e01      	subs	r6, #1
 800b8ee:	e79c      	b.n	800b82a <__multiply+0x82>
 800b8f0:	0800cbc6 	.word	0x0800cbc6
 800b8f4:	0800cbd7 	.word	0x0800cbd7

0800b8f8 <__pow5mult>:
 800b8f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8fc:	4615      	mov	r5, r2
 800b8fe:	f012 0203 	ands.w	r2, r2, #3
 800b902:	4606      	mov	r6, r0
 800b904:	460f      	mov	r7, r1
 800b906:	d007      	beq.n	800b918 <__pow5mult+0x20>
 800b908:	4c25      	ldr	r4, [pc, #148]	; (800b9a0 <__pow5mult+0xa8>)
 800b90a:	3a01      	subs	r2, #1
 800b90c:	2300      	movs	r3, #0
 800b90e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b912:	f7ff fe9f 	bl	800b654 <__multadd>
 800b916:	4607      	mov	r7, r0
 800b918:	10ad      	asrs	r5, r5, #2
 800b91a:	d03d      	beq.n	800b998 <__pow5mult+0xa0>
 800b91c:	69f4      	ldr	r4, [r6, #28]
 800b91e:	b97c      	cbnz	r4, 800b940 <__pow5mult+0x48>
 800b920:	2010      	movs	r0, #16
 800b922:	f7fe f861 	bl	80099e8 <malloc>
 800b926:	4602      	mov	r2, r0
 800b928:	61f0      	str	r0, [r6, #28]
 800b92a:	b928      	cbnz	r0, 800b938 <__pow5mult+0x40>
 800b92c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b930:	4b1c      	ldr	r3, [pc, #112]	; (800b9a4 <__pow5mult+0xac>)
 800b932:	481d      	ldr	r0, [pc, #116]	; (800b9a8 <__pow5mult+0xb0>)
 800b934:	f000 fbce 	bl	800c0d4 <__assert_func>
 800b938:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b93c:	6004      	str	r4, [r0, #0]
 800b93e:	60c4      	str	r4, [r0, #12]
 800b940:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b944:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b948:	b94c      	cbnz	r4, 800b95e <__pow5mult+0x66>
 800b94a:	f240 2171 	movw	r1, #625	; 0x271
 800b94e:	4630      	mov	r0, r6
 800b950:	f7ff ff14 	bl	800b77c <__i2b>
 800b954:	2300      	movs	r3, #0
 800b956:	4604      	mov	r4, r0
 800b958:	f8c8 0008 	str.w	r0, [r8, #8]
 800b95c:	6003      	str	r3, [r0, #0]
 800b95e:	f04f 0900 	mov.w	r9, #0
 800b962:	07eb      	lsls	r3, r5, #31
 800b964:	d50a      	bpl.n	800b97c <__pow5mult+0x84>
 800b966:	4639      	mov	r1, r7
 800b968:	4622      	mov	r2, r4
 800b96a:	4630      	mov	r0, r6
 800b96c:	f7ff ff1c 	bl	800b7a8 <__multiply>
 800b970:	4680      	mov	r8, r0
 800b972:	4639      	mov	r1, r7
 800b974:	4630      	mov	r0, r6
 800b976:	f7ff fe4b 	bl	800b610 <_Bfree>
 800b97a:	4647      	mov	r7, r8
 800b97c:	106d      	asrs	r5, r5, #1
 800b97e:	d00b      	beq.n	800b998 <__pow5mult+0xa0>
 800b980:	6820      	ldr	r0, [r4, #0]
 800b982:	b938      	cbnz	r0, 800b994 <__pow5mult+0x9c>
 800b984:	4622      	mov	r2, r4
 800b986:	4621      	mov	r1, r4
 800b988:	4630      	mov	r0, r6
 800b98a:	f7ff ff0d 	bl	800b7a8 <__multiply>
 800b98e:	6020      	str	r0, [r4, #0]
 800b990:	f8c0 9000 	str.w	r9, [r0]
 800b994:	4604      	mov	r4, r0
 800b996:	e7e4      	b.n	800b962 <__pow5mult+0x6a>
 800b998:	4638      	mov	r0, r7
 800b99a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b99e:	bf00      	nop
 800b9a0:	0800cd20 	.word	0x0800cd20
 800b9a4:	0800cb57 	.word	0x0800cb57
 800b9a8:	0800cbd7 	.word	0x0800cbd7

0800b9ac <__lshift>:
 800b9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9b0:	460c      	mov	r4, r1
 800b9b2:	4607      	mov	r7, r0
 800b9b4:	4691      	mov	r9, r2
 800b9b6:	6923      	ldr	r3, [r4, #16]
 800b9b8:	6849      	ldr	r1, [r1, #4]
 800b9ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b9be:	68a3      	ldr	r3, [r4, #8]
 800b9c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b9c4:	f108 0601 	add.w	r6, r8, #1
 800b9c8:	42b3      	cmp	r3, r6
 800b9ca:	db0b      	blt.n	800b9e4 <__lshift+0x38>
 800b9cc:	4638      	mov	r0, r7
 800b9ce:	f7ff fddf 	bl	800b590 <_Balloc>
 800b9d2:	4605      	mov	r5, r0
 800b9d4:	b948      	cbnz	r0, 800b9ea <__lshift+0x3e>
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b9dc:	4b27      	ldr	r3, [pc, #156]	; (800ba7c <__lshift+0xd0>)
 800b9de:	4828      	ldr	r0, [pc, #160]	; (800ba80 <__lshift+0xd4>)
 800b9e0:	f000 fb78 	bl	800c0d4 <__assert_func>
 800b9e4:	3101      	adds	r1, #1
 800b9e6:	005b      	lsls	r3, r3, #1
 800b9e8:	e7ee      	b.n	800b9c8 <__lshift+0x1c>
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	f100 0114 	add.w	r1, r0, #20
 800b9f0:	f100 0210 	add.w	r2, r0, #16
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	4553      	cmp	r3, sl
 800b9f8:	db33      	blt.n	800ba62 <__lshift+0xb6>
 800b9fa:	6920      	ldr	r0, [r4, #16]
 800b9fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba00:	f104 0314 	add.w	r3, r4, #20
 800ba04:	f019 091f 	ands.w	r9, r9, #31
 800ba08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ba10:	d02b      	beq.n	800ba6a <__lshift+0xbe>
 800ba12:	468a      	mov	sl, r1
 800ba14:	2200      	movs	r2, #0
 800ba16:	f1c9 0e20 	rsb	lr, r9, #32
 800ba1a:	6818      	ldr	r0, [r3, #0]
 800ba1c:	fa00 f009 	lsl.w	r0, r0, r9
 800ba20:	4310      	orrs	r0, r2
 800ba22:	f84a 0b04 	str.w	r0, [sl], #4
 800ba26:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba2a:	459c      	cmp	ip, r3
 800ba2c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ba30:	d8f3      	bhi.n	800ba1a <__lshift+0x6e>
 800ba32:	ebac 0304 	sub.w	r3, ip, r4
 800ba36:	3b15      	subs	r3, #21
 800ba38:	f023 0303 	bic.w	r3, r3, #3
 800ba3c:	3304      	adds	r3, #4
 800ba3e:	f104 0015 	add.w	r0, r4, #21
 800ba42:	4584      	cmp	ip, r0
 800ba44:	bf38      	it	cc
 800ba46:	2304      	movcc	r3, #4
 800ba48:	50ca      	str	r2, [r1, r3]
 800ba4a:	b10a      	cbz	r2, 800ba50 <__lshift+0xa4>
 800ba4c:	f108 0602 	add.w	r6, r8, #2
 800ba50:	3e01      	subs	r6, #1
 800ba52:	4638      	mov	r0, r7
 800ba54:	4621      	mov	r1, r4
 800ba56:	612e      	str	r6, [r5, #16]
 800ba58:	f7ff fdda 	bl	800b610 <_Bfree>
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba62:	f842 0f04 	str.w	r0, [r2, #4]!
 800ba66:	3301      	adds	r3, #1
 800ba68:	e7c5      	b.n	800b9f6 <__lshift+0x4a>
 800ba6a:	3904      	subs	r1, #4
 800ba6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba70:	459c      	cmp	ip, r3
 800ba72:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba76:	d8f9      	bhi.n	800ba6c <__lshift+0xc0>
 800ba78:	e7ea      	b.n	800ba50 <__lshift+0xa4>
 800ba7a:	bf00      	nop
 800ba7c:	0800cbc6 	.word	0x0800cbc6
 800ba80:	0800cbd7 	.word	0x0800cbd7

0800ba84 <__mcmp>:
 800ba84:	4603      	mov	r3, r0
 800ba86:	690a      	ldr	r2, [r1, #16]
 800ba88:	6900      	ldr	r0, [r0, #16]
 800ba8a:	b530      	push	{r4, r5, lr}
 800ba8c:	1a80      	subs	r0, r0, r2
 800ba8e:	d10d      	bne.n	800baac <__mcmp+0x28>
 800ba90:	3314      	adds	r3, #20
 800ba92:	3114      	adds	r1, #20
 800ba94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ba98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ba9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800baa0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800baa4:	4295      	cmp	r5, r2
 800baa6:	d002      	beq.n	800baae <__mcmp+0x2a>
 800baa8:	d304      	bcc.n	800bab4 <__mcmp+0x30>
 800baaa:	2001      	movs	r0, #1
 800baac:	bd30      	pop	{r4, r5, pc}
 800baae:	42a3      	cmp	r3, r4
 800bab0:	d3f4      	bcc.n	800ba9c <__mcmp+0x18>
 800bab2:	e7fb      	b.n	800baac <__mcmp+0x28>
 800bab4:	f04f 30ff 	mov.w	r0, #4294967295
 800bab8:	e7f8      	b.n	800baac <__mcmp+0x28>
	...

0800babc <__mdiff>:
 800babc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac0:	460d      	mov	r5, r1
 800bac2:	4607      	mov	r7, r0
 800bac4:	4611      	mov	r1, r2
 800bac6:	4628      	mov	r0, r5
 800bac8:	4614      	mov	r4, r2
 800baca:	f7ff ffdb 	bl	800ba84 <__mcmp>
 800bace:	1e06      	subs	r6, r0, #0
 800bad0:	d111      	bne.n	800baf6 <__mdiff+0x3a>
 800bad2:	4631      	mov	r1, r6
 800bad4:	4638      	mov	r0, r7
 800bad6:	f7ff fd5b 	bl	800b590 <_Balloc>
 800bada:	4602      	mov	r2, r0
 800badc:	b928      	cbnz	r0, 800baea <__mdiff+0x2e>
 800bade:	f240 2137 	movw	r1, #567	; 0x237
 800bae2:	4b3a      	ldr	r3, [pc, #232]	; (800bbcc <__mdiff+0x110>)
 800bae4:	483a      	ldr	r0, [pc, #232]	; (800bbd0 <__mdiff+0x114>)
 800bae6:	f000 faf5 	bl	800c0d4 <__assert_func>
 800baea:	2301      	movs	r3, #1
 800baec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800baf0:	4610      	mov	r0, r2
 800baf2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baf6:	bfa4      	itt	ge
 800baf8:	4623      	movge	r3, r4
 800bafa:	462c      	movge	r4, r5
 800bafc:	4638      	mov	r0, r7
 800bafe:	6861      	ldr	r1, [r4, #4]
 800bb00:	bfa6      	itte	ge
 800bb02:	461d      	movge	r5, r3
 800bb04:	2600      	movge	r6, #0
 800bb06:	2601      	movlt	r6, #1
 800bb08:	f7ff fd42 	bl	800b590 <_Balloc>
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	b918      	cbnz	r0, 800bb18 <__mdiff+0x5c>
 800bb10:	f240 2145 	movw	r1, #581	; 0x245
 800bb14:	4b2d      	ldr	r3, [pc, #180]	; (800bbcc <__mdiff+0x110>)
 800bb16:	e7e5      	b.n	800bae4 <__mdiff+0x28>
 800bb18:	f102 0814 	add.w	r8, r2, #20
 800bb1c:	46c2      	mov	sl, r8
 800bb1e:	f04f 0c00 	mov.w	ip, #0
 800bb22:	6927      	ldr	r7, [r4, #16]
 800bb24:	60c6      	str	r6, [r0, #12]
 800bb26:	692e      	ldr	r6, [r5, #16]
 800bb28:	f104 0014 	add.w	r0, r4, #20
 800bb2c:	f105 0914 	add.w	r9, r5, #20
 800bb30:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800bb34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bb38:	3410      	adds	r4, #16
 800bb3a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800bb3e:	f859 3b04 	ldr.w	r3, [r9], #4
 800bb42:	fa1f f18b 	uxth.w	r1, fp
 800bb46:	4461      	add	r1, ip
 800bb48:	fa1f fc83 	uxth.w	ip, r3
 800bb4c:	0c1b      	lsrs	r3, r3, #16
 800bb4e:	eba1 010c 	sub.w	r1, r1, ip
 800bb52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bb56:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bb5a:	b289      	uxth	r1, r1
 800bb5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800bb60:	454e      	cmp	r6, r9
 800bb62:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800bb66:	f84a 1b04 	str.w	r1, [sl], #4
 800bb6a:	d8e6      	bhi.n	800bb3a <__mdiff+0x7e>
 800bb6c:	1b73      	subs	r3, r6, r5
 800bb6e:	3b15      	subs	r3, #21
 800bb70:	f023 0303 	bic.w	r3, r3, #3
 800bb74:	3515      	adds	r5, #21
 800bb76:	3304      	adds	r3, #4
 800bb78:	42ae      	cmp	r6, r5
 800bb7a:	bf38      	it	cc
 800bb7c:	2304      	movcc	r3, #4
 800bb7e:	4418      	add	r0, r3
 800bb80:	4443      	add	r3, r8
 800bb82:	461e      	mov	r6, r3
 800bb84:	4605      	mov	r5, r0
 800bb86:	4575      	cmp	r5, lr
 800bb88:	d30e      	bcc.n	800bba8 <__mdiff+0xec>
 800bb8a:	f10e 0103 	add.w	r1, lr, #3
 800bb8e:	1a09      	subs	r1, r1, r0
 800bb90:	f021 0103 	bic.w	r1, r1, #3
 800bb94:	3803      	subs	r0, #3
 800bb96:	4586      	cmp	lr, r0
 800bb98:	bf38      	it	cc
 800bb9a:	2100      	movcc	r1, #0
 800bb9c:	440b      	add	r3, r1
 800bb9e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bba2:	b189      	cbz	r1, 800bbc8 <__mdiff+0x10c>
 800bba4:	6117      	str	r7, [r2, #16]
 800bba6:	e7a3      	b.n	800baf0 <__mdiff+0x34>
 800bba8:	f855 8b04 	ldr.w	r8, [r5], #4
 800bbac:	fa1f f188 	uxth.w	r1, r8
 800bbb0:	4461      	add	r1, ip
 800bbb2:	140c      	asrs	r4, r1, #16
 800bbb4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bbb8:	b289      	uxth	r1, r1
 800bbba:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bbbe:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800bbc2:	f846 1b04 	str.w	r1, [r6], #4
 800bbc6:	e7de      	b.n	800bb86 <__mdiff+0xca>
 800bbc8:	3f01      	subs	r7, #1
 800bbca:	e7e8      	b.n	800bb9e <__mdiff+0xe2>
 800bbcc:	0800cbc6 	.word	0x0800cbc6
 800bbd0:	0800cbd7 	.word	0x0800cbd7

0800bbd4 <__d2b>:
 800bbd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbd6:	2101      	movs	r1, #1
 800bbd8:	4617      	mov	r7, r2
 800bbda:	461c      	mov	r4, r3
 800bbdc:	9e08      	ldr	r6, [sp, #32]
 800bbde:	f7ff fcd7 	bl	800b590 <_Balloc>
 800bbe2:	4605      	mov	r5, r0
 800bbe4:	b930      	cbnz	r0, 800bbf4 <__d2b+0x20>
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	f240 310f 	movw	r1, #783	; 0x30f
 800bbec:	4b22      	ldr	r3, [pc, #136]	; (800bc78 <__d2b+0xa4>)
 800bbee:	4823      	ldr	r0, [pc, #140]	; (800bc7c <__d2b+0xa8>)
 800bbf0:	f000 fa70 	bl	800c0d4 <__assert_func>
 800bbf4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800bbf8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800bbfc:	bb24      	cbnz	r4, 800bc48 <__d2b+0x74>
 800bbfe:	2f00      	cmp	r7, #0
 800bc00:	9301      	str	r3, [sp, #4]
 800bc02:	d026      	beq.n	800bc52 <__d2b+0x7e>
 800bc04:	4668      	mov	r0, sp
 800bc06:	9700      	str	r7, [sp, #0]
 800bc08:	f7ff fd8a 	bl	800b720 <__lo0bits>
 800bc0c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bc10:	b1e8      	cbz	r0, 800bc4e <__d2b+0x7a>
 800bc12:	f1c0 0320 	rsb	r3, r0, #32
 800bc16:	fa02 f303 	lsl.w	r3, r2, r3
 800bc1a:	430b      	orrs	r3, r1
 800bc1c:	40c2      	lsrs	r2, r0
 800bc1e:	616b      	str	r3, [r5, #20]
 800bc20:	9201      	str	r2, [sp, #4]
 800bc22:	9b01      	ldr	r3, [sp, #4]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	bf14      	ite	ne
 800bc28:	2102      	movne	r1, #2
 800bc2a:	2101      	moveq	r1, #1
 800bc2c:	61ab      	str	r3, [r5, #24]
 800bc2e:	6129      	str	r1, [r5, #16]
 800bc30:	b1bc      	cbz	r4, 800bc62 <__d2b+0x8e>
 800bc32:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bc36:	4404      	add	r4, r0
 800bc38:	6034      	str	r4, [r6, #0]
 800bc3a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bc3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc40:	6018      	str	r0, [r3, #0]
 800bc42:	4628      	mov	r0, r5
 800bc44:	b003      	add	sp, #12
 800bc46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc4c:	e7d7      	b.n	800bbfe <__d2b+0x2a>
 800bc4e:	6169      	str	r1, [r5, #20]
 800bc50:	e7e7      	b.n	800bc22 <__d2b+0x4e>
 800bc52:	a801      	add	r0, sp, #4
 800bc54:	f7ff fd64 	bl	800b720 <__lo0bits>
 800bc58:	9b01      	ldr	r3, [sp, #4]
 800bc5a:	2101      	movs	r1, #1
 800bc5c:	616b      	str	r3, [r5, #20]
 800bc5e:	3020      	adds	r0, #32
 800bc60:	e7e5      	b.n	800bc2e <__d2b+0x5a>
 800bc62:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bc66:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800bc6a:	6030      	str	r0, [r6, #0]
 800bc6c:	6918      	ldr	r0, [r3, #16]
 800bc6e:	f7ff fd37 	bl	800b6e0 <__hi0bits>
 800bc72:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bc76:	e7e2      	b.n	800bc3e <__d2b+0x6a>
 800bc78:	0800cbc6 	.word	0x0800cbc6
 800bc7c:	0800cbd7 	.word	0x0800cbd7

0800bc80 <__ssputs_r>:
 800bc80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc84:	461f      	mov	r7, r3
 800bc86:	688e      	ldr	r6, [r1, #8]
 800bc88:	4682      	mov	sl, r0
 800bc8a:	42be      	cmp	r6, r7
 800bc8c:	460c      	mov	r4, r1
 800bc8e:	4690      	mov	r8, r2
 800bc90:	680b      	ldr	r3, [r1, #0]
 800bc92:	d82c      	bhi.n	800bcee <__ssputs_r+0x6e>
 800bc94:	898a      	ldrh	r2, [r1, #12]
 800bc96:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc9a:	d026      	beq.n	800bcea <__ssputs_r+0x6a>
 800bc9c:	6965      	ldr	r5, [r4, #20]
 800bc9e:	6909      	ldr	r1, [r1, #16]
 800bca0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bca4:	eba3 0901 	sub.w	r9, r3, r1
 800bca8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bcac:	1c7b      	adds	r3, r7, #1
 800bcae:	444b      	add	r3, r9
 800bcb0:	106d      	asrs	r5, r5, #1
 800bcb2:	429d      	cmp	r5, r3
 800bcb4:	bf38      	it	cc
 800bcb6:	461d      	movcc	r5, r3
 800bcb8:	0553      	lsls	r3, r2, #21
 800bcba:	d527      	bpl.n	800bd0c <__ssputs_r+0x8c>
 800bcbc:	4629      	mov	r1, r5
 800bcbe:	f7fd febb 	bl	8009a38 <_malloc_r>
 800bcc2:	4606      	mov	r6, r0
 800bcc4:	b360      	cbz	r0, 800bd20 <__ssputs_r+0xa0>
 800bcc6:	464a      	mov	r2, r9
 800bcc8:	6921      	ldr	r1, [r4, #16]
 800bcca:	f000 f9f5 	bl	800c0b8 <memcpy>
 800bcce:	89a3      	ldrh	r3, [r4, #12]
 800bcd0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bcd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcd8:	81a3      	strh	r3, [r4, #12]
 800bcda:	6126      	str	r6, [r4, #16]
 800bcdc:	444e      	add	r6, r9
 800bcde:	6026      	str	r6, [r4, #0]
 800bce0:	463e      	mov	r6, r7
 800bce2:	6165      	str	r5, [r4, #20]
 800bce4:	eba5 0509 	sub.w	r5, r5, r9
 800bce8:	60a5      	str	r5, [r4, #8]
 800bcea:	42be      	cmp	r6, r7
 800bcec:	d900      	bls.n	800bcf0 <__ssputs_r+0x70>
 800bcee:	463e      	mov	r6, r7
 800bcf0:	4632      	mov	r2, r6
 800bcf2:	4641      	mov	r1, r8
 800bcf4:	6820      	ldr	r0, [r4, #0]
 800bcf6:	f000 f9c5 	bl	800c084 <memmove>
 800bcfa:	2000      	movs	r0, #0
 800bcfc:	68a3      	ldr	r3, [r4, #8]
 800bcfe:	1b9b      	subs	r3, r3, r6
 800bd00:	60a3      	str	r3, [r4, #8]
 800bd02:	6823      	ldr	r3, [r4, #0]
 800bd04:	4433      	add	r3, r6
 800bd06:	6023      	str	r3, [r4, #0]
 800bd08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd0c:	462a      	mov	r2, r5
 800bd0e:	f000 fa25 	bl	800c15c <_realloc_r>
 800bd12:	4606      	mov	r6, r0
 800bd14:	2800      	cmp	r0, #0
 800bd16:	d1e0      	bne.n	800bcda <__ssputs_r+0x5a>
 800bd18:	4650      	mov	r0, sl
 800bd1a:	6921      	ldr	r1, [r4, #16]
 800bd1c:	f7ff fbf0 	bl	800b500 <_free_r>
 800bd20:	230c      	movs	r3, #12
 800bd22:	f8ca 3000 	str.w	r3, [sl]
 800bd26:	89a3      	ldrh	r3, [r4, #12]
 800bd28:	f04f 30ff 	mov.w	r0, #4294967295
 800bd2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd30:	81a3      	strh	r3, [r4, #12]
 800bd32:	e7e9      	b.n	800bd08 <__ssputs_r+0x88>

0800bd34 <_svfiprintf_r>:
 800bd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd38:	4698      	mov	r8, r3
 800bd3a:	898b      	ldrh	r3, [r1, #12]
 800bd3c:	4607      	mov	r7, r0
 800bd3e:	061b      	lsls	r3, r3, #24
 800bd40:	460d      	mov	r5, r1
 800bd42:	4614      	mov	r4, r2
 800bd44:	b09d      	sub	sp, #116	; 0x74
 800bd46:	d50e      	bpl.n	800bd66 <_svfiprintf_r+0x32>
 800bd48:	690b      	ldr	r3, [r1, #16]
 800bd4a:	b963      	cbnz	r3, 800bd66 <_svfiprintf_r+0x32>
 800bd4c:	2140      	movs	r1, #64	; 0x40
 800bd4e:	f7fd fe73 	bl	8009a38 <_malloc_r>
 800bd52:	6028      	str	r0, [r5, #0]
 800bd54:	6128      	str	r0, [r5, #16]
 800bd56:	b920      	cbnz	r0, 800bd62 <_svfiprintf_r+0x2e>
 800bd58:	230c      	movs	r3, #12
 800bd5a:	603b      	str	r3, [r7, #0]
 800bd5c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd60:	e0d0      	b.n	800bf04 <_svfiprintf_r+0x1d0>
 800bd62:	2340      	movs	r3, #64	; 0x40
 800bd64:	616b      	str	r3, [r5, #20]
 800bd66:	2300      	movs	r3, #0
 800bd68:	9309      	str	r3, [sp, #36]	; 0x24
 800bd6a:	2320      	movs	r3, #32
 800bd6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd70:	2330      	movs	r3, #48	; 0x30
 800bd72:	f04f 0901 	mov.w	r9, #1
 800bd76:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd7a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800bf1c <_svfiprintf_r+0x1e8>
 800bd7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd82:	4623      	mov	r3, r4
 800bd84:	469a      	mov	sl, r3
 800bd86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd8a:	b10a      	cbz	r2, 800bd90 <_svfiprintf_r+0x5c>
 800bd8c:	2a25      	cmp	r2, #37	; 0x25
 800bd8e:	d1f9      	bne.n	800bd84 <_svfiprintf_r+0x50>
 800bd90:	ebba 0b04 	subs.w	fp, sl, r4
 800bd94:	d00b      	beq.n	800bdae <_svfiprintf_r+0x7a>
 800bd96:	465b      	mov	r3, fp
 800bd98:	4622      	mov	r2, r4
 800bd9a:	4629      	mov	r1, r5
 800bd9c:	4638      	mov	r0, r7
 800bd9e:	f7ff ff6f 	bl	800bc80 <__ssputs_r>
 800bda2:	3001      	adds	r0, #1
 800bda4:	f000 80a9 	beq.w	800befa <_svfiprintf_r+0x1c6>
 800bda8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdaa:	445a      	add	r2, fp
 800bdac:	9209      	str	r2, [sp, #36]	; 0x24
 800bdae:	f89a 3000 	ldrb.w	r3, [sl]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	f000 80a1 	beq.w	800befa <_svfiprintf_r+0x1c6>
 800bdb8:	2300      	movs	r3, #0
 800bdba:	f04f 32ff 	mov.w	r2, #4294967295
 800bdbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdc2:	f10a 0a01 	add.w	sl, sl, #1
 800bdc6:	9304      	str	r3, [sp, #16]
 800bdc8:	9307      	str	r3, [sp, #28]
 800bdca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bdce:	931a      	str	r3, [sp, #104]	; 0x68
 800bdd0:	4654      	mov	r4, sl
 800bdd2:	2205      	movs	r2, #5
 800bdd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdd8:	4850      	ldr	r0, [pc, #320]	; (800bf1c <_svfiprintf_r+0x1e8>)
 800bdda:	f7fe fd16 	bl	800a80a <memchr>
 800bdde:	9a04      	ldr	r2, [sp, #16]
 800bde0:	b9d8      	cbnz	r0, 800be1a <_svfiprintf_r+0xe6>
 800bde2:	06d0      	lsls	r0, r2, #27
 800bde4:	bf44      	itt	mi
 800bde6:	2320      	movmi	r3, #32
 800bde8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdec:	0711      	lsls	r1, r2, #28
 800bdee:	bf44      	itt	mi
 800bdf0:	232b      	movmi	r3, #43	; 0x2b
 800bdf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdf6:	f89a 3000 	ldrb.w	r3, [sl]
 800bdfa:	2b2a      	cmp	r3, #42	; 0x2a
 800bdfc:	d015      	beq.n	800be2a <_svfiprintf_r+0xf6>
 800bdfe:	4654      	mov	r4, sl
 800be00:	2000      	movs	r0, #0
 800be02:	f04f 0c0a 	mov.w	ip, #10
 800be06:	9a07      	ldr	r2, [sp, #28]
 800be08:	4621      	mov	r1, r4
 800be0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be0e:	3b30      	subs	r3, #48	; 0x30
 800be10:	2b09      	cmp	r3, #9
 800be12:	d94d      	bls.n	800beb0 <_svfiprintf_r+0x17c>
 800be14:	b1b0      	cbz	r0, 800be44 <_svfiprintf_r+0x110>
 800be16:	9207      	str	r2, [sp, #28]
 800be18:	e014      	b.n	800be44 <_svfiprintf_r+0x110>
 800be1a:	eba0 0308 	sub.w	r3, r0, r8
 800be1e:	fa09 f303 	lsl.w	r3, r9, r3
 800be22:	4313      	orrs	r3, r2
 800be24:	46a2      	mov	sl, r4
 800be26:	9304      	str	r3, [sp, #16]
 800be28:	e7d2      	b.n	800bdd0 <_svfiprintf_r+0x9c>
 800be2a:	9b03      	ldr	r3, [sp, #12]
 800be2c:	1d19      	adds	r1, r3, #4
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	9103      	str	r1, [sp, #12]
 800be32:	2b00      	cmp	r3, #0
 800be34:	bfbb      	ittet	lt
 800be36:	425b      	neglt	r3, r3
 800be38:	f042 0202 	orrlt.w	r2, r2, #2
 800be3c:	9307      	strge	r3, [sp, #28]
 800be3e:	9307      	strlt	r3, [sp, #28]
 800be40:	bfb8      	it	lt
 800be42:	9204      	strlt	r2, [sp, #16]
 800be44:	7823      	ldrb	r3, [r4, #0]
 800be46:	2b2e      	cmp	r3, #46	; 0x2e
 800be48:	d10c      	bne.n	800be64 <_svfiprintf_r+0x130>
 800be4a:	7863      	ldrb	r3, [r4, #1]
 800be4c:	2b2a      	cmp	r3, #42	; 0x2a
 800be4e:	d134      	bne.n	800beba <_svfiprintf_r+0x186>
 800be50:	9b03      	ldr	r3, [sp, #12]
 800be52:	3402      	adds	r4, #2
 800be54:	1d1a      	adds	r2, r3, #4
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	9203      	str	r2, [sp, #12]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	bfb8      	it	lt
 800be5e:	f04f 33ff 	movlt.w	r3, #4294967295
 800be62:	9305      	str	r3, [sp, #20]
 800be64:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800bf20 <_svfiprintf_r+0x1ec>
 800be68:	2203      	movs	r2, #3
 800be6a:	4650      	mov	r0, sl
 800be6c:	7821      	ldrb	r1, [r4, #0]
 800be6e:	f7fe fccc 	bl	800a80a <memchr>
 800be72:	b138      	cbz	r0, 800be84 <_svfiprintf_r+0x150>
 800be74:	2240      	movs	r2, #64	; 0x40
 800be76:	9b04      	ldr	r3, [sp, #16]
 800be78:	eba0 000a 	sub.w	r0, r0, sl
 800be7c:	4082      	lsls	r2, r0
 800be7e:	4313      	orrs	r3, r2
 800be80:	3401      	adds	r4, #1
 800be82:	9304      	str	r3, [sp, #16]
 800be84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be88:	2206      	movs	r2, #6
 800be8a:	4826      	ldr	r0, [pc, #152]	; (800bf24 <_svfiprintf_r+0x1f0>)
 800be8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be90:	f7fe fcbb 	bl	800a80a <memchr>
 800be94:	2800      	cmp	r0, #0
 800be96:	d038      	beq.n	800bf0a <_svfiprintf_r+0x1d6>
 800be98:	4b23      	ldr	r3, [pc, #140]	; (800bf28 <_svfiprintf_r+0x1f4>)
 800be9a:	bb1b      	cbnz	r3, 800bee4 <_svfiprintf_r+0x1b0>
 800be9c:	9b03      	ldr	r3, [sp, #12]
 800be9e:	3307      	adds	r3, #7
 800bea0:	f023 0307 	bic.w	r3, r3, #7
 800bea4:	3308      	adds	r3, #8
 800bea6:	9303      	str	r3, [sp, #12]
 800bea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beaa:	4433      	add	r3, r6
 800beac:	9309      	str	r3, [sp, #36]	; 0x24
 800beae:	e768      	b.n	800bd82 <_svfiprintf_r+0x4e>
 800beb0:	460c      	mov	r4, r1
 800beb2:	2001      	movs	r0, #1
 800beb4:	fb0c 3202 	mla	r2, ip, r2, r3
 800beb8:	e7a6      	b.n	800be08 <_svfiprintf_r+0xd4>
 800beba:	2300      	movs	r3, #0
 800bebc:	f04f 0c0a 	mov.w	ip, #10
 800bec0:	4619      	mov	r1, r3
 800bec2:	3401      	adds	r4, #1
 800bec4:	9305      	str	r3, [sp, #20]
 800bec6:	4620      	mov	r0, r4
 800bec8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800becc:	3a30      	subs	r2, #48	; 0x30
 800bece:	2a09      	cmp	r2, #9
 800bed0:	d903      	bls.n	800beda <_svfiprintf_r+0x1a6>
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d0c6      	beq.n	800be64 <_svfiprintf_r+0x130>
 800bed6:	9105      	str	r1, [sp, #20]
 800bed8:	e7c4      	b.n	800be64 <_svfiprintf_r+0x130>
 800beda:	4604      	mov	r4, r0
 800bedc:	2301      	movs	r3, #1
 800bede:	fb0c 2101 	mla	r1, ip, r1, r2
 800bee2:	e7f0      	b.n	800bec6 <_svfiprintf_r+0x192>
 800bee4:	ab03      	add	r3, sp, #12
 800bee6:	9300      	str	r3, [sp, #0]
 800bee8:	462a      	mov	r2, r5
 800beea:	4638      	mov	r0, r7
 800beec:	4b0f      	ldr	r3, [pc, #60]	; (800bf2c <_svfiprintf_r+0x1f8>)
 800beee:	a904      	add	r1, sp, #16
 800bef0:	f7fd feca 	bl	8009c88 <_printf_float>
 800bef4:	1c42      	adds	r2, r0, #1
 800bef6:	4606      	mov	r6, r0
 800bef8:	d1d6      	bne.n	800bea8 <_svfiprintf_r+0x174>
 800befa:	89ab      	ldrh	r3, [r5, #12]
 800befc:	065b      	lsls	r3, r3, #25
 800befe:	f53f af2d 	bmi.w	800bd5c <_svfiprintf_r+0x28>
 800bf02:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf04:	b01d      	add	sp, #116	; 0x74
 800bf06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf0a:	ab03      	add	r3, sp, #12
 800bf0c:	9300      	str	r3, [sp, #0]
 800bf0e:	462a      	mov	r2, r5
 800bf10:	4638      	mov	r0, r7
 800bf12:	4b06      	ldr	r3, [pc, #24]	; (800bf2c <_svfiprintf_r+0x1f8>)
 800bf14:	a904      	add	r1, sp, #16
 800bf16:	f7fe f957 	bl	800a1c8 <_printf_i>
 800bf1a:	e7eb      	b.n	800bef4 <_svfiprintf_r+0x1c0>
 800bf1c:	0800cd2c 	.word	0x0800cd2c
 800bf20:	0800cd32 	.word	0x0800cd32
 800bf24:	0800cd36 	.word	0x0800cd36
 800bf28:	08009c89 	.word	0x08009c89
 800bf2c:	0800bc81 	.word	0x0800bc81

0800bf30 <__sflush_r>:
 800bf30:	898a      	ldrh	r2, [r1, #12]
 800bf32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf34:	4605      	mov	r5, r0
 800bf36:	0710      	lsls	r0, r2, #28
 800bf38:	460c      	mov	r4, r1
 800bf3a:	d457      	bmi.n	800bfec <__sflush_r+0xbc>
 800bf3c:	684b      	ldr	r3, [r1, #4]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	dc04      	bgt.n	800bf4c <__sflush_r+0x1c>
 800bf42:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	dc01      	bgt.n	800bf4c <__sflush_r+0x1c>
 800bf48:	2000      	movs	r0, #0
 800bf4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf4e:	2e00      	cmp	r6, #0
 800bf50:	d0fa      	beq.n	800bf48 <__sflush_r+0x18>
 800bf52:	2300      	movs	r3, #0
 800bf54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bf58:	682f      	ldr	r7, [r5, #0]
 800bf5a:	6a21      	ldr	r1, [r4, #32]
 800bf5c:	602b      	str	r3, [r5, #0]
 800bf5e:	d032      	beq.n	800bfc6 <__sflush_r+0x96>
 800bf60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf62:	89a3      	ldrh	r3, [r4, #12]
 800bf64:	075a      	lsls	r2, r3, #29
 800bf66:	d505      	bpl.n	800bf74 <__sflush_r+0x44>
 800bf68:	6863      	ldr	r3, [r4, #4]
 800bf6a:	1ac0      	subs	r0, r0, r3
 800bf6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf6e:	b10b      	cbz	r3, 800bf74 <__sflush_r+0x44>
 800bf70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf72:	1ac0      	subs	r0, r0, r3
 800bf74:	2300      	movs	r3, #0
 800bf76:	4602      	mov	r2, r0
 800bf78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf7a:	4628      	mov	r0, r5
 800bf7c:	6a21      	ldr	r1, [r4, #32]
 800bf7e:	47b0      	blx	r6
 800bf80:	1c43      	adds	r3, r0, #1
 800bf82:	89a3      	ldrh	r3, [r4, #12]
 800bf84:	d106      	bne.n	800bf94 <__sflush_r+0x64>
 800bf86:	6829      	ldr	r1, [r5, #0]
 800bf88:	291d      	cmp	r1, #29
 800bf8a:	d82b      	bhi.n	800bfe4 <__sflush_r+0xb4>
 800bf8c:	4a28      	ldr	r2, [pc, #160]	; (800c030 <__sflush_r+0x100>)
 800bf8e:	410a      	asrs	r2, r1
 800bf90:	07d6      	lsls	r6, r2, #31
 800bf92:	d427      	bmi.n	800bfe4 <__sflush_r+0xb4>
 800bf94:	2200      	movs	r2, #0
 800bf96:	6062      	str	r2, [r4, #4]
 800bf98:	6922      	ldr	r2, [r4, #16]
 800bf9a:	04d9      	lsls	r1, r3, #19
 800bf9c:	6022      	str	r2, [r4, #0]
 800bf9e:	d504      	bpl.n	800bfaa <__sflush_r+0x7a>
 800bfa0:	1c42      	adds	r2, r0, #1
 800bfa2:	d101      	bne.n	800bfa8 <__sflush_r+0x78>
 800bfa4:	682b      	ldr	r3, [r5, #0]
 800bfa6:	b903      	cbnz	r3, 800bfaa <__sflush_r+0x7a>
 800bfa8:	6560      	str	r0, [r4, #84]	; 0x54
 800bfaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bfac:	602f      	str	r7, [r5, #0]
 800bfae:	2900      	cmp	r1, #0
 800bfb0:	d0ca      	beq.n	800bf48 <__sflush_r+0x18>
 800bfb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bfb6:	4299      	cmp	r1, r3
 800bfb8:	d002      	beq.n	800bfc0 <__sflush_r+0x90>
 800bfba:	4628      	mov	r0, r5
 800bfbc:	f7ff faa0 	bl	800b500 <_free_r>
 800bfc0:	2000      	movs	r0, #0
 800bfc2:	6360      	str	r0, [r4, #52]	; 0x34
 800bfc4:	e7c1      	b.n	800bf4a <__sflush_r+0x1a>
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	4628      	mov	r0, r5
 800bfca:	47b0      	blx	r6
 800bfcc:	1c41      	adds	r1, r0, #1
 800bfce:	d1c8      	bne.n	800bf62 <__sflush_r+0x32>
 800bfd0:	682b      	ldr	r3, [r5, #0]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d0c5      	beq.n	800bf62 <__sflush_r+0x32>
 800bfd6:	2b1d      	cmp	r3, #29
 800bfd8:	d001      	beq.n	800bfde <__sflush_r+0xae>
 800bfda:	2b16      	cmp	r3, #22
 800bfdc:	d101      	bne.n	800bfe2 <__sflush_r+0xb2>
 800bfde:	602f      	str	r7, [r5, #0]
 800bfe0:	e7b2      	b.n	800bf48 <__sflush_r+0x18>
 800bfe2:	89a3      	ldrh	r3, [r4, #12]
 800bfe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfe8:	81a3      	strh	r3, [r4, #12]
 800bfea:	e7ae      	b.n	800bf4a <__sflush_r+0x1a>
 800bfec:	690f      	ldr	r7, [r1, #16]
 800bfee:	2f00      	cmp	r7, #0
 800bff0:	d0aa      	beq.n	800bf48 <__sflush_r+0x18>
 800bff2:	0793      	lsls	r3, r2, #30
 800bff4:	bf18      	it	ne
 800bff6:	2300      	movne	r3, #0
 800bff8:	680e      	ldr	r6, [r1, #0]
 800bffa:	bf08      	it	eq
 800bffc:	694b      	ldreq	r3, [r1, #20]
 800bffe:	1bf6      	subs	r6, r6, r7
 800c000:	600f      	str	r7, [r1, #0]
 800c002:	608b      	str	r3, [r1, #8]
 800c004:	2e00      	cmp	r6, #0
 800c006:	dd9f      	ble.n	800bf48 <__sflush_r+0x18>
 800c008:	4633      	mov	r3, r6
 800c00a:	463a      	mov	r2, r7
 800c00c:	4628      	mov	r0, r5
 800c00e:	6a21      	ldr	r1, [r4, #32]
 800c010:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c014:	47e0      	blx	ip
 800c016:	2800      	cmp	r0, #0
 800c018:	dc06      	bgt.n	800c028 <__sflush_r+0xf8>
 800c01a:	89a3      	ldrh	r3, [r4, #12]
 800c01c:	f04f 30ff 	mov.w	r0, #4294967295
 800c020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c024:	81a3      	strh	r3, [r4, #12]
 800c026:	e790      	b.n	800bf4a <__sflush_r+0x1a>
 800c028:	4407      	add	r7, r0
 800c02a:	1a36      	subs	r6, r6, r0
 800c02c:	e7ea      	b.n	800c004 <__sflush_r+0xd4>
 800c02e:	bf00      	nop
 800c030:	dfbffffe 	.word	0xdfbffffe

0800c034 <_fflush_r>:
 800c034:	b538      	push	{r3, r4, r5, lr}
 800c036:	690b      	ldr	r3, [r1, #16]
 800c038:	4605      	mov	r5, r0
 800c03a:	460c      	mov	r4, r1
 800c03c:	b913      	cbnz	r3, 800c044 <_fflush_r+0x10>
 800c03e:	2500      	movs	r5, #0
 800c040:	4628      	mov	r0, r5
 800c042:	bd38      	pop	{r3, r4, r5, pc}
 800c044:	b118      	cbz	r0, 800c04e <_fflush_r+0x1a>
 800c046:	6a03      	ldr	r3, [r0, #32]
 800c048:	b90b      	cbnz	r3, 800c04e <_fflush_r+0x1a>
 800c04a:	f7fe fa6b 	bl	800a524 <__sinit>
 800c04e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d0f3      	beq.n	800c03e <_fflush_r+0xa>
 800c056:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c058:	07d0      	lsls	r0, r2, #31
 800c05a:	d404      	bmi.n	800c066 <_fflush_r+0x32>
 800c05c:	0599      	lsls	r1, r3, #22
 800c05e:	d402      	bmi.n	800c066 <_fflush_r+0x32>
 800c060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c062:	f7fe fbd0 	bl	800a806 <__retarget_lock_acquire_recursive>
 800c066:	4628      	mov	r0, r5
 800c068:	4621      	mov	r1, r4
 800c06a:	f7ff ff61 	bl	800bf30 <__sflush_r>
 800c06e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c070:	4605      	mov	r5, r0
 800c072:	07da      	lsls	r2, r3, #31
 800c074:	d4e4      	bmi.n	800c040 <_fflush_r+0xc>
 800c076:	89a3      	ldrh	r3, [r4, #12]
 800c078:	059b      	lsls	r3, r3, #22
 800c07a:	d4e1      	bmi.n	800c040 <_fflush_r+0xc>
 800c07c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c07e:	f7fe fbc3 	bl	800a808 <__retarget_lock_release_recursive>
 800c082:	e7dd      	b.n	800c040 <_fflush_r+0xc>

0800c084 <memmove>:
 800c084:	4288      	cmp	r0, r1
 800c086:	b510      	push	{r4, lr}
 800c088:	eb01 0402 	add.w	r4, r1, r2
 800c08c:	d902      	bls.n	800c094 <memmove+0x10>
 800c08e:	4284      	cmp	r4, r0
 800c090:	4623      	mov	r3, r4
 800c092:	d807      	bhi.n	800c0a4 <memmove+0x20>
 800c094:	1e43      	subs	r3, r0, #1
 800c096:	42a1      	cmp	r1, r4
 800c098:	d008      	beq.n	800c0ac <memmove+0x28>
 800c09a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c09e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c0a2:	e7f8      	b.n	800c096 <memmove+0x12>
 800c0a4:	4601      	mov	r1, r0
 800c0a6:	4402      	add	r2, r0
 800c0a8:	428a      	cmp	r2, r1
 800c0aa:	d100      	bne.n	800c0ae <memmove+0x2a>
 800c0ac:	bd10      	pop	{r4, pc}
 800c0ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c0b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c0b6:	e7f7      	b.n	800c0a8 <memmove+0x24>

0800c0b8 <memcpy>:
 800c0b8:	440a      	add	r2, r1
 800c0ba:	4291      	cmp	r1, r2
 800c0bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0c0:	d100      	bne.n	800c0c4 <memcpy+0xc>
 800c0c2:	4770      	bx	lr
 800c0c4:	b510      	push	{r4, lr}
 800c0c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0ca:	4291      	cmp	r1, r2
 800c0cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0d0:	d1f9      	bne.n	800c0c6 <memcpy+0xe>
 800c0d2:	bd10      	pop	{r4, pc}

0800c0d4 <__assert_func>:
 800c0d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0d6:	4614      	mov	r4, r2
 800c0d8:	461a      	mov	r2, r3
 800c0da:	4b09      	ldr	r3, [pc, #36]	; (800c100 <__assert_func+0x2c>)
 800c0dc:	4605      	mov	r5, r0
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	68d8      	ldr	r0, [r3, #12]
 800c0e2:	b14c      	cbz	r4, 800c0f8 <__assert_func+0x24>
 800c0e4:	4b07      	ldr	r3, [pc, #28]	; (800c104 <__assert_func+0x30>)
 800c0e6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c0ea:	9100      	str	r1, [sp, #0]
 800c0ec:	462b      	mov	r3, r5
 800c0ee:	4906      	ldr	r1, [pc, #24]	; (800c108 <__assert_func+0x34>)
 800c0f0:	f000 f870 	bl	800c1d4 <fiprintf>
 800c0f4:	f000 f880 	bl	800c1f8 <abort>
 800c0f8:	4b04      	ldr	r3, [pc, #16]	; (800c10c <__assert_func+0x38>)
 800c0fa:	461c      	mov	r4, r3
 800c0fc:	e7f3      	b.n	800c0e6 <__assert_func+0x12>
 800c0fe:	bf00      	nop
 800c100:	20000094 	.word	0x20000094
 800c104:	0800cd47 	.word	0x0800cd47
 800c108:	0800cd54 	.word	0x0800cd54
 800c10c:	0800cd82 	.word	0x0800cd82

0800c110 <_calloc_r>:
 800c110:	b570      	push	{r4, r5, r6, lr}
 800c112:	fba1 5402 	umull	r5, r4, r1, r2
 800c116:	b934      	cbnz	r4, 800c126 <_calloc_r+0x16>
 800c118:	4629      	mov	r1, r5
 800c11a:	f7fd fc8d 	bl	8009a38 <_malloc_r>
 800c11e:	4606      	mov	r6, r0
 800c120:	b928      	cbnz	r0, 800c12e <_calloc_r+0x1e>
 800c122:	4630      	mov	r0, r6
 800c124:	bd70      	pop	{r4, r5, r6, pc}
 800c126:	220c      	movs	r2, #12
 800c128:	2600      	movs	r6, #0
 800c12a:	6002      	str	r2, [r0, #0]
 800c12c:	e7f9      	b.n	800c122 <_calloc_r+0x12>
 800c12e:	462a      	mov	r2, r5
 800c130:	4621      	mov	r1, r4
 800c132:	f7fe fac4 	bl	800a6be <memset>
 800c136:	e7f4      	b.n	800c122 <_calloc_r+0x12>

0800c138 <__ascii_mbtowc>:
 800c138:	b082      	sub	sp, #8
 800c13a:	b901      	cbnz	r1, 800c13e <__ascii_mbtowc+0x6>
 800c13c:	a901      	add	r1, sp, #4
 800c13e:	b142      	cbz	r2, 800c152 <__ascii_mbtowc+0x1a>
 800c140:	b14b      	cbz	r3, 800c156 <__ascii_mbtowc+0x1e>
 800c142:	7813      	ldrb	r3, [r2, #0]
 800c144:	600b      	str	r3, [r1, #0]
 800c146:	7812      	ldrb	r2, [r2, #0]
 800c148:	1e10      	subs	r0, r2, #0
 800c14a:	bf18      	it	ne
 800c14c:	2001      	movne	r0, #1
 800c14e:	b002      	add	sp, #8
 800c150:	4770      	bx	lr
 800c152:	4610      	mov	r0, r2
 800c154:	e7fb      	b.n	800c14e <__ascii_mbtowc+0x16>
 800c156:	f06f 0001 	mvn.w	r0, #1
 800c15a:	e7f8      	b.n	800c14e <__ascii_mbtowc+0x16>

0800c15c <_realloc_r>:
 800c15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c160:	4680      	mov	r8, r0
 800c162:	4614      	mov	r4, r2
 800c164:	460e      	mov	r6, r1
 800c166:	b921      	cbnz	r1, 800c172 <_realloc_r+0x16>
 800c168:	4611      	mov	r1, r2
 800c16a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c16e:	f7fd bc63 	b.w	8009a38 <_malloc_r>
 800c172:	b92a      	cbnz	r2, 800c180 <_realloc_r+0x24>
 800c174:	f7ff f9c4 	bl	800b500 <_free_r>
 800c178:	4625      	mov	r5, r4
 800c17a:	4628      	mov	r0, r5
 800c17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c180:	f000 f841 	bl	800c206 <_malloc_usable_size_r>
 800c184:	4284      	cmp	r4, r0
 800c186:	4607      	mov	r7, r0
 800c188:	d802      	bhi.n	800c190 <_realloc_r+0x34>
 800c18a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c18e:	d812      	bhi.n	800c1b6 <_realloc_r+0x5a>
 800c190:	4621      	mov	r1, r4
 800c192:	4640      	mov	r0, r8
 800c194:	f7fd fc50 	bl	8009a38 <_malloc_r>
 800c198:	4605      	mov	r5, r0
 800c19a:	2800      	cmp	r0, #0
 800c19c:	d0ed      	beq.n	800c17a <_realloc_r+0x1e>
 800c19e:	42bc      	cmp	r4, r7
 800c1a0:	4622      	mov	r2, r4
 800c1a2:	4631      	mov	r1, r6
 800c1a4:	bf28      	it	cs
 800c1a6:	463a      	movcs	r2, r7
 800c1a8:	f7ff ff86 	bl	800c0b8 <memcpy>
 800c1ac:	4631      	mov	r1, r6
 800c1ae:	4640      	mov	r0, r8
 800c1b0:	f7ff f9a6 	bl	800b500 <_free_r>
 800c1b4:	e7e1      	b.n	800c17a <_realloc_r+0x1e>
 800c1b6:	4635      	mov	r5, r6
 800c1b8:	e7df      	b.n	800c17a <_realloc_r+0x1e>

0800c1ba <__ascii_wctomb>:
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	4608      	mov	r0, r1
 800c1be:	b141      	cbz	r1, 800c1d2 <__ascii_wctomb+0x18>
 800c1c0:	2aff      	cmp	r2, #255	; 0xff
 800c1c2:	d904      	bls.n	800c1ce <__ascii_wctomb+0x14>
 800c1c4:	228a      	movs	r2, #138	; 0x8a
 800c1c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ca:	601a      	str	r2, [r3, #0]
 800c1cc:	4770      	bx	lr
 800c1ce:	2001      	movs	r0, #1
 800c1d0:	700a      	strb	r2, [r1, #0]
 800c1d2:	4770      	bx	lr

0800c1d4 <fiprintf>:
 800c1d4:	b40e      	push	{r1, r2, r3}
 800c1d6:	b503      	push	{r0, r1, lr}
 800c1d8:	4601      	mov	r1, r0
 800c1da:	ab03      	add	r3, sp, #12
 800c1dc:	4805      	ldr	r0, [pc, #20]	; (800c1f4 <fiprintf+0x20>)
 800c1de:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1e2:	6800      	ldr	r0, [r0, #0]
 800c1e4:	9301      	str	r3, [sp, #4]
 800c1e6:	f000 f83d 	bl	800c264 <_vfiprintf_r>
 800c1ea:	b002      	add	sp, #8
 800c1ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1f0:	b003      	add	sp, #12
 800c1f2:	4770      	bx	lr
 800c1f4:	20000094 	.word	0x20000094

0800c1f8 <abort>:
 800c1f8:	2006      	movs	r0, #6
 800c1fa:	b508      	push	{r3, lr}
 800c1fc:	f000 fa0a 	bl	800c614 <raise>
 800c200:	2001      	movs	r0, #1
 800c202:	f7f7 f94e 	bl	80034a2 <_exit>

0800c206 <_malloc_usable_size_r>:
 800c206:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c20a:	1f18      	subs	r0, r3, #4
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	bfbc      	itt	lt
 800c210:	580b      	ldrlt	r3, [r1, r0]
 800c212:	18c0      	addlt	r0, r0, r3
 800c214:	4770      	bx	lr

0800c216 <__sfputc_r>:
 800c216:	6893      	ldr	r3, [r2, #8]
 800c218:	b410      	push	{r4}
 800c21a:	3b01      	subs	r3, #1
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	6093      	str	r3, [r2, #8]
 800c220:	da07      	bge.n	800c232 <__sfputc_r+0x1c>
 800c222:	6994      	ldr	r4, [r2, #24]
 800c224:	42a3      	cmp	r3, r4
 800c226:	db01      	blt.n	800c22c <__sfputc_r+0x16>
 800c228:	290a      	cmp	r1, #10
 800c22a:	d102      	bne.n	800c232 <__sfputc_r+0x1c>
 800c22c:	bc10      	pop	{r4}
 800c22e:	f000 b933 	b.w	800c498 <__swbuf_r>
 800c232:	6813      	ldr	r3, [r2, #0]
 800c234:	1c58      	adds	r0, r3, #1
 800c236:	6010      	str	r0, [r2, #0]
 800c238:	7019      	strb	r1, [r3, #0]
 800c23a:	4608      	mov	r0, r1
 800c23c:	bc10      	pop	{r4}
 800c23e:	4770      	bx	lr

0800c240 <__sfputs_r>:
 800c240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c242:	4606      	mov	r6, r0
 800c244:	460f      	mov	r7, r1
 800c246:	4614      	mov	r4, r2
 800c248:	18d5      	adds	r5, r2, r3
 800c24a:	42ac      	cmp	r4, r5
 800c24c:	d101      	bne.n	800c252 <__sfputs_r+0x12>
 800c24e:	2000      	movs	r0, #0
 800c250:	e007      	b.n	800c262 <__sfputs_r+0x22>
 800c252:	463a      	mov	r2, r7
 800c254:	4630      	mov	r0, r6
 800c256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c25a:	f7ff ffdc 	bl	800c216 <__sfputc_r>
 800c25e:	1c43      	adds	r3, r0, #1
 800c260:	d1f3      	bne.n	800c24a <__sfputs_r+0xa>
 800c262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c264 <_vfiprintf_r>:
 800c264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c268:	460d      	mov	r5, r1
 800c26a:	4614      	mov	r4, r2
 800c26c:	4698      	mov	r8, r3
 800c26e:	4606      	mov	r6, r0
 800c270:	b09d      	sub	sp, #116	; 0x74
 800c272:	b118      	cbz	r0, 800c27c <_vfiprintf_r+0x18>
 800c274:	6a03      	ldr	r3, [r0, #32]
 800c276:	b90b      	cbnz	r3, 800c27c <_vfiprintf_r+0x18>
 800c278:	f7fe f954 	bl	800a524 <__sinit>
 800c27c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c27e:	07d9      	lsls	r1, r3, #31
 800c280:	d405      	bmi.n	800c28e <_vfiprintf_r+0x2a>
 800c282:	89ab      	ldrh	r3, [r5, #12]
 800c284:	059a      	lsls	r2, r3, #22
 800c286:	d402      	bmi.n	800c28e <_vfiprintf_r+0x2a>
 800c288:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c28a:	f7fe fabc 	bl	800a806 <__retarget_lock_acquire_recursive>
 800c28e:	89ab      	ldrh	r3, [r5, #12]
 800c290:	071b      	lsls	r3, r3, #28
 800c292:	d501      	bpl.n	800c298 <_vfiprintf_r+0x34>
 800c294:	692b      	ldr	r3, [r5, #16]
 800c296:	b99b      	cbnz	r3, 800c2c0 <_vfiprintf_r+0x5c>
 800c298:	4629      	mov	r1, r5
 800c29a:	4630      	mov	r0, r6
 800c29c:	f000 f93a 	bl	800c514 <__swsetup_r>
 800c2a0:	b170      	cbz	r0, 800c2c0 <_vfiprintf_r+0x5c>
 800c2a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2a4:	07dc      	lsls	r4, r3, #31
 800c2a6:	d504      	bpl.n	800c2b2 <_vfiprintf_r+0x4e>
 800c2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c2ac:	b01d      	add	sp, #116	; 0x74
 800c2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2b2:	89ab      	ldrh	r3, [r5, #12]
 800c2b4:	0598      	lsls	r0, r3, #22
 800c2b6:	d4f7      	bmi.n	800c2a8 <_vfiprintf_r+0x44>
 800c2b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2ba:	f7fe faa5 	bl	800a808 <__retarget_lock_release_recursive>
 800c2be:	e7f3      	b.n	800c2a8 <_vfiprintf_r+0x44>
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c2c4:	2320      	movs	r3, #32
 800c2c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2ca:	2330      	movs	r3, #48	; 0x30
 800c2cc:	f04f 0901 	mov.w	r9, #1
 800c2d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800c484 <_vfiprintf_r+0x220>
 800c2d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2dc:	4623      	mov	r3, r4
 800c2de:	469a      	mov	sl, r3
 800c2e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2e4:	b10a      	cbz	r2, 800c2ea <_vfiprintf_r+0x86>
 800c2e6:	2a25      	cmp	r2, #37	; 0x25
 800c2e8:	d1f9      	bne.n	800c2de <_vfiprintf_r+0x7a>
 800c2ea:	ebba 0b04 	subs.w	fp, sl, r4
 800c2ee:	d00b      	beq.n	800c308 <_vfiprintf_r+0xa4>
 800c2f0:	465b      	mov	r3, fp
 800c2f2:	4622      	mov	r2, r4
 800c2f4:	4629      	mov	r1, r5
 800c2f6:	4630      	mov	r0, r6
 800c2f8:	f7ff ffa2 	bl	800c240 <__sfputs_r>
 800c2fc:	3001      	adds	r0, #1
 800c2fe:	f000 80a9 	beq.w	800c454 <_vfiprintf_r+0x1f0>
 800c302:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c304:	445a      	add	r2, fp
 800c306:	9209      	str	r2, [sp, #36]	; 0x24
 800c308:	f89a 3000 	ldrb.w	r3, [sl]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	f000 80a1 	beq.w	800c454 <_vfiprintf_r+0x1f0>
 800c312:	2300      	movs	r3, #0
 800c314:	f04f 32ff 	mov.w	r2, #4294967295
 800c318:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c31c:	f10a 0a01 	add.w	sl, sl, #1
 800c320:	9304      	str	r3, [sp, #16]
 800c322:	9307      	str	r3, [sp, #28]
 800c324:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c328:	931a      	str	r3, [sp, #104]	; 0x68
 800c32a:	4654      	mov	r4, sl
 800c32c:	2205      	movs	r2, #5
 800c32e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c332:	4854      	ldr	r0, [pc, #336]	; (800c484 <_vfiprintf_r+0x220>)
 800c334:	f7fe fa69 	bl	800a80a <memchr>
 800c338:	9a04      	ldr	r2, [sp, #16]
 800c33a:	b9d8      	cbnz	r0, 800c374 <_vfiprintf_r+0x110>
 800c33c:	06d1      	lsls	r1, r2, #27
 800c33e:	bf44      	itt	mi
 800c340:	2320      	movmi	r3, #32
 800c342:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c346:	0713      	lsls	r3, r2, #28
 800c348:	bf44      	itt	mi
 800c34a:	232b      	movmi	r3, #43	; 0x2b
 800c34c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c350:	f89a 3000 	ldrb.w	r3, [sl]
 800c354:	2b2a      	cmp	r3, #42	; 0x2a
 800c356:	d015      	beq.n	800c384 <_vfiprintf_r+0x120>
 800c358:	4654      	mov	r4, sl
 800c35a:	2000      	movs	r0, #0
 800c35c:	f04f 0c0a 	mov.w	ip, #10
 800c360:	9a07      	ldr	r2, [sp, #28]
 800c362:	4621      	mov	r1, r4
 800c364:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c368:	3b30      	subs	r3, #48	; 0x30
 800c36a:	2b09      	cmp	r3, #9
 800c36c:	d94d      	bls.n	800c40a <_vfiprintf_r+0x1a6>
 800c36e:	b1b0      	cbz	r0, 800c39e <_vfiprintf_r+0x13a>
 800c370:	9207      	str	r2, [sp, #28]
 800c372:	e014      	b.n	800c39e <_vfiprintf_r+0x13a>
 800c374:	eba0 0308 	sub.w	r3, r0, r8
 800c378:	fa09 f303 	lsl.w	r3, r9, r3
 800c37c:	4313      	orrs	r3, r2
 800c37e:	46a2      	mov	sl, r4
 800c380:	9304      	str	r3, [sp, #16]
 800c382:	e7d2      	b.n	800c32a <_vfiprintf_r+0xc6>
 800c384:	9b03      	ldr	r3, [sp, #12]
 800c386:	1d19      	adds	r1, r3, #4
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	9103      	str	r1, [sp, #12]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	bfbb      	ittet	lt
 800c390:	425b      	neglt	r3, r3
 800c392:	f042 0202 	orrlt.w	r2, r2, #2
 800c396:	9307      	strge	r3, [sp, #28]
 800c398:	9307      	strlt	r3, [sp, #28]
 800c39a:	bfb8      	it	lt
 800c39c:	9204      	strlt	r2, [sp, #16]
 800c39e:	7823      	ldrb	r3, [r4, #0]
 800c3a0:	2b2e      	cmp	r3, #46	; 0x2e
 800c3a2:	d10c      	bne.n	800c3be <_vfiprintf_r+0x15a>
 800c3a4:	7863      	ldrb	r3, [r4, #1]
 800c3a6:	2b2a      	cmp	r3, #42	; 0x2a
 800c3a8:	d134      	bne.n	800c414 <_vfiprintf_r+0x1b0>
 800c3aa:	9b03      	ldr	r3, [sp, #12]
 800c3ac:	3402      	adds	r4, #2
 800c3ae:	1d1a      	adds	r2, r3, #4
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	9203      	str	r2, [sp, #12]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	bfb8      	it	lt
 800c3b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3bc:	9305      	str	r3, [sp, #20]
 800c3be:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c488 <_vfiprintf_r+0x224>
 800c3c2:	2203      	movs	r2, #3
 800c3c4:	4650      	mov	r0, sl
 800c3c6:	7821      	ldrb	r1, [r4, #0]
 800c3c8:	f7fe fa1f 	bl	800a80a <memchr>
 800c3cc:	b138      	cbz	r0, 800c3de <_vfiprintf_r+0x17a>
 800c3ce:	2240      	movs	r2, #64	; 0x40
 800c3d0:	9b04      	ldr	r3, [sp, #16]
 800c3d2:	eba0 000a 	sub.w	r0, r0, sl
 800c3d6:	4082      	lsls	r2, r0
 800c3d8:	4313      	orrs	r3, r2
 800c3da:	3401      	adds	r4, #1
 800c3dc:	9304      	str	r3, [sp, #16]
 800c3de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3e2:	2206      	movs	r2, #6
 800c3e4:	4829      	ldr	r0, [pc, #164]	; (800c48c <_vfiprintf_r+0x228>)
 800c3e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3ea:	f7fe fa0e 	bl	800a80a <memchr>
 800c3ee:	2800      	cmp	r0, #0
 800c3f0:	d03f      	beq.n	800c472 <_vfiprintf_r+0x20e>
 800c3f2:	4b27      	ldr	r3, [pc, #156]	; (800c490 <_vfiprintf_r+0x22c>)
 800c3f4:	bb1b      	cbnz	r3, 800c43e <_vfiprintf_r+0x1da>
 800c3f6:	9b03      	ldr	r3, [sp, #12]
 800c3f8:	3307      	adds	r3, #7
 800c3fa:	f023 0307 	bic.w	r3, r3, #7
 800c3fe:	3308      	adds	r3, #8
 800c400:	9303      	str	r3, [sp, #12]
 800c402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c404:	443b      	add	r3, r7
 800c406:	9309      	str	r3, [sp, #36]	; 0x24
 800c408:	e768      	b.n	800c2dc <_vfiprintf_r+0x78>
 800c40a:	460c      	mov	r4, r1
 800c40c:	2001      	movs	r0, #1
 800c40e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c412:	e7a6      	b.n	800c362 <_vfiprintf_r+0xfe>
 800c414:	2300      	movs	r3, #0
 800c416:	f04f 0c0a 	mov.w	ip, #10
 800c41a:	4619      	mov	r1, r3
 800c41c:	3401      	adds	r4, #1
 800c41e:	9305      	str	r3, [sp, #20]
 800c420:	4620      	mov	r0, r4
 800c422:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c426:	3a30      	subs	r2, #48	; 0x30
 800c428:	2a09      	cmp	r2, #9
 800c42a:	d903      	bls.n	800c434 <_vfiprintf_r+0x1d0>
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d0c6      	beq.n	800c3be <_vfiprintf_r+0x15a>
 800c430:	9105      	str	r1, [sp, #20]
 800c432:	e7c4      	b.n	800c3be <_vfiprintf_r+0x15a>
 800c434:	4604      	mov	r4, r0
 800c436:	2301      	movs	r3, #1
 800c438:	fb0c 2101 	mla	r1, ip, r1, r2
 800c43c:	e7f0      	b.n	800c420 <_vfiprintf_r+0x1bc>
 800c43e:	ab03      	add	r3, sp, #12
 800c440:	9300      	str	r3, [sp, #0]
 800c442:	462a      	mov	r2, r5
 800c444:	4630      	mov	r0, r6
 800c446:	4b13      	ldr	r3, [pc, #76]	; (800c494 <_vfiprintf_r+0x230>)
 800c448:	a904      	add	r1, sp, #16
 800c44a:	f7fd fc1d 	bl	8009c88 <_printf_float>
 800c44e:	4607      	mov	r7, r0
 800c450:	1c78      	adds	r0, r7, #1
 800c452:	d1d6      	bne.n	800c402 <_vfiprintf_r+0x19e>
 800c454:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c456:	07d9      	lsls	r1, r3, #31
 800c458:	d405      	bmi.n	800c466 <_vfiprintf_r+0x202>
 800c45a:	89ab      	ldrh	r3, [r5, #12]
 800c45c:	059a      	lsls	r2, r3, #22
 800c45e:	d402      	bmi.n	800c466 <_vfiprintf_r+0x202>
 800c460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c462:	f7fe f9d1 	bl	800a808 <__retarget_lock_release_recursive>
 800c466:	89ab      	ldrh	r3, [r5, #12]
 800c468:	065b      	lsls	r3, r3, #25
 800c46a:	f53f af1d 	bmi.w	800c2a8 <_vfiprintf_r+0x44>
 800c46e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c470:	e71c      	b.n	800c2ac <_vfiprintf_r+0x48>
 800c472:	ab03      	add	r3, sp, #12
 800c474:	9300      	str	r3, [sp, #0]
 800c476:	462a      	mov	r2, r5
 800c478:	4630      	mov	r0, r6
 800c47a:	4b06      	ldr	r3, [pc, #24]	; (800c494 <_vfiprintf_r+0x230>)
 800c47c:	a904      	add	r1, sp, #16
 800c47e:	f7fd fea3 	bl	800a1c8 <_printf_i>
 800c482:	e7e4      	b.n	800c44e <_vfiprintf_r+0x1ea>
 800c484:	0800cd2c 	.word	0x0800cd2c
 800c488:	0800cd32 	.word	0x0800cd32
 800c48c:	0800cd36 	.word	0x0800cd36
 800c490:	08009c89 	.word	0x08009c89
 800c494:	0800c241 	.word	0x0800c241

0800c498 <__swbuf_r>:
 800c498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c49a:	460e      	mov	r6, r1
 800c49c:	4614      	mov	r4, r2
 800c49e:	4605      	mov	r5, r0
 800c4a0:	b118      	cbz	r0, 800c4aa <__swbuf_r+0x12>
 800c4a2:	6a03      	ldr	r3, [r0, #32]
 800c4a4:	b90b      	cbnz	r3, 800c4aa <__swbuf_r+0x12>
 800c4a6:	f7fe f83d 	bl	800a524 <__sinit>
 800c4aa:	69a3      	ldr	r3, [r4, #24]
 800c4ac:	60a3      	str	r3, [r4, #8]
 800c4ae:	89a3      	ldrh	r3, [r4, #12]
 800c4b0:	071a      	lsls	r2, r3, #28
 800c4b2:	d525      	bpl.n	800c500 <__swbuf_r+0x68>
 800c4b4:	6923      	ldr	r3, [r4, #16]
 800c4b6:	b31b      	cbz	r3, 800c500 <__swbuf_r+0x68>
 800c4b8:	6823      	ldr	r3, [r4, #0]
 800c4ba:	6922      	ldr	r2, [r4, #16]
 800c4bc:	b2f6      	uxtb	r6, r6
 800c4be:	1a98      	subs	r0, r3, r2
 800c4c0:	6963      	ldr	r3, [r4, #20]
 800c4c2:	4637      	mov	r7, r6
 800c4c4:	4283      	cmp	r3, r0
 800c4c6:	dc04      	bgt.n	800c4d2 <__swbuf_r+0x3a>
 800c4c8:	4621      	mov	r1, r4
 800c4ca:	4628      	mov	r0, r5
 800c4cc:	f7ff fdb2 	bl	800c034 <_fflush_r>
 800c4d0:	b9e0      	cbnz	r0, 800c50c <__swbuf_r+0x74>
 800c4d2:	68a3      	ldr	r3, [r4, #8]
 800c4d4:	3b01      	subs	r3, #1
 800c4d6:	60a3      	str	r3, [r4, #8]
 800c4d8:	6823      	ldr	r3, [r4, #0]
 800c4da:	1c5a      	adds	r2, r3, #1
 800c4dc:	6022      	str	r2, [r4, #0]
 800c4de:	701e      	strb	r6, [r3, #0]
 800c4e0:	6962      	ldr	r2, [r4, #20]
 800c4e2:	1c43      	adds	r3, r0, #1
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d004      	beq.n	800c4f2 <__swbuf_r+0x5a>
 800c4e8:	89a3      	ldrh	r3, [r4, #12]
 800c4ea:	07db      	lsls	r3, r3, #31
 800c4ec:	d506      	bpl.n	800c4fc <__swbuf_r+0x64>
 800c4ee:	2e0a      	cmp	r6, #10
 800c4f0:	d104      	bne.n	800c4fc <__swbuf_r+0x64>
 800c4f2:	4621      	mov	r1, r4
 800c4f4:	4628      	mov	r0, r5
 800c4f6:	f7ff fd9d 	bl	800c034 <_fflush_r>
 800c4fa:	b938      	cbnz	r0, 800c50c <__swbuf_r+0x74>
 800c4fc:	4638      	mov	r0, r7
 800c4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c500:	4621      	mov	r1, r4
 800c502:	4628      	mov	r0, r5
 800c504:	f000 f806 	bl	800c514 <__swsetup_r>
 800c508:	2800      	cmp	r0, #0
 800c50a:	d0d5      	beq.n	800c4b8 <__swbuf_r+0x20>
 800c50c:	f04f 37ff 	mov.w	r7, #4294967295
 800c510:	e7f4      	b.n	800c4fc <__swbuf_r+0x64>
	...

0800c514 <__swsetup_r>:
 800c514:	b538      	push	{r3, r4, r5, lr}
 800c516:	4b2a      	ldr	r3, [pc, #168]	; (800c5c0 <__swsetup_r+0xac>)
 800c518:	4605      	mov	r5, r0
 800c51a:	6818      	ldr	r0, [r3, #0]
 800c51c:	460c      	mov	r4, r1
 800c51e:	b118      	cbz	r0, 800c528 <__swsetup_r+0x14>
 800c520:	6a03      	ldr	r3, [r0, #32]
 800c522:	b90b      	cbnz	r3, 800c528 <__swsetup_r+0x14>
 800c524:	f7fd fffe 	bl	800a524 <__sinit>
 800c528:	89a3      	ldrh	r3, [r4, #12]
 800c52a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c52e:	0718      	lsls	r0, r3, #28
 800c530:	d422      	bmi.n	800c578 <__swsetup_r+0x64>
 800c532:	06d9      	lsls	r1, r3, #27
 800c534:	d407      	bmi.n	800c546 <__swsetup_r+0x32>
 800c536:	2309      	movs	r3, #9
 800c538:	602b      	str	r3, [r5, #0]
 800c53a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c53e:	f04f 30ff 	mov.w	r0, #4294967295
 800c542:	81a3      	strh	r3, [r4, #12]
 800c544:	e034      	b.n	800c5b0 <__swsetup_r+0x9c>
 800c546:	0758      	lsls	r0, r3, #29
 800c548:	d512      	bpl.n	800c570 <__swsetup_r+0x5c>
 800c54a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c54c:	b141      	cbz	r1, 800c560 <__swsetup_r+0x4c>
 800c54e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c552:	4299      	cmp	r1, r3
 800c554:	d002      	beq.n	800c55c <__swsetup_r+0x48>
 800c556:	4628      	mov	r0, r5
 800c558:	f7fe ffd2 	bl	800b500 <_free_r>
 800c55c:	2300      	movs	r3, #0
 800c55e:	6363      	str	r3, [r4, #52]	; 0x34
 800c560:	89a3      	ldrh	r3, [r4, #12]
 800c562:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c566:	81a3      	strh	r3, [r4, #12]
 800c568:	2300      	movs	r3, #0
 800c56a:	6063      	str	r3, [r4, #4]
 800c56c:	6923      	ldr	r3, [r4, #16]
 800c56e:	6023      	str	r3, [r4, #0]
 800c570:	89a3      	ldrh	r3, [r4, #12]
 800c572:	f043 0308 	orr.w	r3, r3, #8
 800c576:	81a3      	strh	r3, [r4, #12]
 800c578:	6923      	ldr	r3, [r4, #16]
 800c57a:	b94b      	cbnz	r3, 800c590 <__swsetup_r+0x7c>
 800c57c:	89a3      	ldrh	r3, [r4, #12]
 800c57e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c582:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c586:	d003      	beq.n	800c590 <__swsetup_r+0x7c>
 800c588:	4621      	mov	r1, r4
 800c58a:	4628      	mov	r0, r5
 800c58c:	f000 f883 	bl	800c696 <__smakebuf_r>
 800c590:	89a0      	ldrh	r0, [r4, #12]
 800c592:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c596:	f010 0301 	ands.w	r3, r0, #1
 800c59a:	d00a      	beq.n	800c5b2 <__swsetup_r+0x9e>
 800c59c:	2300      	movs	r3, #0
 800c59e:	60a3      	str	r3, [r4, #8]
 800c5a0:	6963      	ldr	r3, [r4, #20]
 800c5a2:	425b      	negs	r3, r3
 800c5a4:	61a3      	str	r3, [r4, #24]
 800c5a6:	6923      	ldr	r3, [r4, #16]
 800c5a8:	b943      	cbnz	r3, 800c5bc <__swsetup_r+0xa8>
 800c5aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c5ae:	d1c4      	bne.n	800c53a <__swsetup_r+0x26>
 800c5b0:	bd38      	pop	{r3, r4, r5, pc}
 800c5b2:	0781      	lsls	r1, r0, #30
 800c5b4:	bf58      	it	pl
 800c5b6:	6963      	ldrpl	r3, [r4, #20]
 800c5b8:	60a3      	str	r3, [r4, #8]
 800c5ba:	e7f4      	b.n	800c5a6 <__swsetup_r+0x92>
 800c5bc:	2000      	movs	r0, #0
 800c5be:	e7f7      	b.n	800c5b0 <__swsetup_r+0x9c>
 800c5c0:	20000094 	.word	0x20000094

0800c5c4 <_raise_r>:
 800c5c4:	291f      	cmp	r1, #31
 800c5c6:	b538      	push	{r3, r4, r5, lr}
 800c5c8:	4604      	mov	r4, r0
 800c5ca:	460d      	mov	r5, r1
 800c5cc:	d904      	bls.n	800c5d8 <_raise_r+0x14>
 800c5ce:	2316      	movs	r3, #22
 800c5d0:	6003      	str	r3, [r0, #0]
 800c5d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c5d6:	bd38      	pop	{r3, r4, r5, pc}
 800c5d8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c5da:	b112      	cbz	r2, 800c5e2 <_raise_r+0x1e>
 800c5dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c5e0:	b94b      	cbnz	r3, 800c5f6 <_raise_r+0x32>
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	f000 f830 	bl	800c648 <_getpid_r>
 800c5e8:	462a      	mov	r2, r5
 800c5ea:	4601      	mov	r1, r0
 800c5ec:	4620      	mov	r0, r4
 800c5ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5f2:	f000 b817 	b.w	800c624 <_kill_r>
 800c5f6:	2b01      	cmp	r3, #1
 800c5f8:	d00a      	beq.n	800c610 <_raise_r+0x4c>
 800c5fa:	1c59      	adds	r1, r3, #1
 800c5fc:	d103      	bne.n	800c606 <_raise_r+0x42>
 800c5fe:	2316      	movs	r3, #22
 800c600:	6003      	str	r3, [r0, #0]
 800c602:	2001      	movs	r0, #1
 800c604:	e7e7      	b.n	800c5d6 <_raise_r+0x12>
 800c606:	2400      	movs	r4, #0
 800c608:	4628      	mov	r0, r5
 800c60a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c60e:	4798      	blx	r3
 800c610:	2000      	movs	r0, #0
 800c612:	e7e0      	b.n	800c5d6 <_raise_r+0x12>

0800c614 <raise>:
 800c614:	4b02      	ldr	r3, [pc, #8]	; (800c620 <raise+0xc>)
 800c616:	4601      	mov	r1, r0
 800c618:	6818      	ldr	r0, [r3, #0]
 800c61a:	f7ff bfd3 	b.w	800c5c4 <_raise_r>
 800c61e:	bf00      	nop
 800c620:	20000094 	.word	0x20000094

0800c624 <_kill_r>:
 800c624:	b538      	push	{r3, r4, r5, lr}
 800c626:	2300      	movs	r3, #0
 800c628:	4d06      	ldr	r5, [pc, #24]	; (800c644 <_kill_r+0x20>)
 800c62a:	4604      	mov	r4, r0
 800c62c:	4608      	mov	r0, r1
 800c62e:	4611      	mov	r1, r2
 800c630:	602b      	str	r3, [r5, #0]
 800c632:	f7f6 ff26 	bl	8003482 <_kill>
 800c636:	1c43      	adds	r3, r0, #1
 800c638:	d102      	bne.n	800c640 <_kill_r+0x1c>
 800c63a:	682b      	ldr	r3, [r5, #0]
 800c63c:	b103      	cbz	r3, 800c640 <_kill_r+0x1c>
 800c63e:	6023      	str	r3, [r4, #0]
 800c640:	bd38      	pop	{r3, r4, r5, pc}
 800c642:	bf00      	nop
 800c644:	20000d20 	.word	0x20000d20

0800c648 <_getpid_r>:
 800c648:	f7f6 bf14 	b.w	8003474 <_getpid>

0800c64c <__swhatbuf_r>:
 800c64c:	b570      	push	{r4, r5, r6, lr}
 800c64e:	460c      	mov	r4, r1
 800c650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c654:	4615      	mov	r5, r2
 800c656:	2900      	cmp	r1, #0
 800c658:	461e      	mov	r6, r3
 800c65a:	b096      	sub	sp, #88	; 0x58
 800c65c:	da0c      	bge.n	800c678 <__swhatbuf_r+0x2c>
 800c65e:	89a3      	ldrh	r3, [r4, #12]
 800c660:	2100      	movs	r1, #0
 800c662:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c666:	bf0c      	ite	eq
 800c668:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c66c:	2340      	movne	r3, #64	; 0x40
 800c66e:	2000      	movs	r0, #0
 800c670:	6031      	str	r1, [r6, #0]
 800c672:	602b      	str	r3, [r5, #0]
 800c674:	b016      	add	sp, #88	; 0x58
 800c676:	bd70      	pop	{r4, r5, r6, pc}
 800c678:	466a      	mov	r2, sp
 800c67a:	f000 f849 	bl	800c710 <_fstat_r>
 800c67e:	2800      	cmp	r0, #0
 800c680:	dbed      	blt.n	800c65e <__swhatbuf_r+0x12>
 800c682:	9901      	ldr	r1, [sp, #4]
 800c684:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c688:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c68c:	4259      	negs	r1, r3
 800c68e:	4159      	adcs	r1, r3
 800c690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c694:	e7eb      	b.n	800c66e <__swhatbuf_r+0x22>

0800c696 <__smakebuf_r>:
 800c696:	898b      	ldrh	r3, [r1, #12]
 800c698:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c69a:	079d      	lsls	r5, r3, #30
 800c69c:	4606      	mov	r6, r0
 800c69e:	460c      	mov	r4, r1
 800c6a0:	d507      	bpl.n	800c6b2 <__smakebuf_r+0x1c>
 800c6a2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c6a6:	6023      	str	r3, [r4, #0]
 800c6a8:	6123      	str	r3, [r4, #16]
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	6163      	str	r3, [r4, #20]
 800c6ae:	b002      	add	sp, #8
 800c6b0:	bd70      	pop	{r4, r5, r6, pc}
 800c6b2:	466a      	mov	r2, sp
 800c6b4:	ab01      	add	r3, sp, #4
 800c6b6:	f7ff ffc9 	bl	800c64c <__swhatbuf_r>
 800c6ba:	9900      	ldr	r1, [sp, #0]
 800c6bc:	4605      	mov	r5, r0
 800c6be:	4630      	mov	r0, r6
 800c6c0:	f7fd f9ba 	bl	8009a38 <_malloc_r>
 800c6c4:	b948      	cbnz	r0, 800c6da <__smakebuf_r+0x44>
 800c6c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6ca:	059a      	lsls	r2, r3, #22
 800c6cc:	d4ef      	bmi.n	800c6ae <__smakebuf_r+0x18>
 800c6ce:	f023 0303 	bic.w	r3, r3, #3
 800c6d2:	f043 0302 	orr.w	r3, r3, #2
 800c6d6:	81a3      	strh	r3, [r4, #12]
 800c6d8:	e7e3      	b.n	800c6a2 <__smakebuf_r+0xc>
 800c6da:	89a3      	ldrh	r3, [r4, #12]
 800c6dc:	6020      	str	r0, [r4, #0]
 800c6de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6e2:	81a3      	strh	r3, [r4, #12]
 800c6e4:	9b00      	ldr	r3, [sp, #0]
 800c6e6:	6120      	str	r0, [r4, #16]
 800c6e8:	6163      	str	r3, [r4, #20]
 800c6ea:	9b01      	ldr	r3, [sp, #4]
 800c6ec:	b15b      	cbz	r3, 800c706 <__smakebuf_r+0x70>
 800c6ee:	4630      	mov	r0, r6
 800c6f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6f4:	f000 f81e 	bl	800c734 <_isatty_r>
 800c6f8:	b128      	cbz	r0, 800c706 <__smakebuf_r+0x70>
 800c6fa:	89a3      	ldrh	r3, [r4, #12]
 800c6fc:	f023 0303 	bic.w	r3, r3, #3
 800c700:	f043 0301 	orr.w	r3, r3, #1
 800c704:	81a3      	strh	r3, [r4, #12]
 800c706:	89a3      	ldrh	r3, [r4, #12]
 800c708:	431d      	orrs	r5, r3
 800c70a:	81a5      	strh	r5, [r4, #12]
 800c70c:	e7cf      	b.n	800c6ae <__smakebuf_r+0x18>
	...

0800c710 <_fstat_r>:
 800c710:	b538      	push	{r3, r4, r5, lr}
 800c712:	2300      	movs	r3, #0
 800c714:	4d06      	ldr	r5, [pc, #24]	; (800c730 <_fstat_r+0x20>)
 800c716:	4604      	mov	r4, r0
 800c718:	4608      	mov	r0, r1
 800c71a:	4611      	mov	r1, r2
 800c71c:	602b      	str	r3, [r5, #0]
 800c71e:	f7f6 ff0e 	bl	800353e <_fstat>
 800c722:	1c43      	adds	r3, r0, #1
 800c724:	d102      	bne.n	800c72c <_fstat_r+0x1c>
 800c726:	682b      	ldr	r3, [r5, #0]
 800c728:	b103      	cbz	r3, 800c72c <_fstat_r+0x1c>
 800c72a:	6023      	str	r3, [r4, #0]
 800c72c:	bd38      	pop	{r3, r4, r5, pc}
 800c72e:	bf00      	nop
 800c730:	20000d20 	.word	0x20000d20

0800c734 <_isatty_r>:
 800c734:	b538      	push	{r3, r4, r5, lr}
 800c736:	2300      	movs	r3, #0
 800c738:	4d05      	ldr	r5, [pc, #20]	; (800c750 <_isatty_r+0x1c>)
 800c73a:	4604      	mov	r4, r0
 800c73c:	4608      	mov	r0, r1
 800c73e:	602b      	str	r3, [r5, #0]
 800c740:	f7f6 ff0c 	bl	800355c <_isatty>
 800c744:	1c43      	adds	r3, r0, #1
 800c746:	d102      	bne.n	800c74e <_isatty_r+0x1a>
 800c748:	682b      	ldr	r3, [r5, #0]
 800c74a:	b103      	cbz	r3, 800c74e <_isatty_r+0x1a>
 800c74c:	6023      	str	r3, [r4, #0]
 800c74e:	bd38      	pop	{r3, r4, r5, pc}
 800c750:	20000d20 	.word	0x20000d20

0800c754 <_init>:
 800c754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c756:	bf00      	nop
 800c758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c75a:	bc08      	pop	{r3}
 800c75c:	469e      	mov	lr, r3
 800c75e:	4770      	bx	lr

0800c760 <_fini>:
 800c760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c762:	bf00      	nop
 800c764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c766:	bc08      	pop	{r3}
 800c768:	469e      	mov	lr, r3
 800c76a:	4770      	bx	lr
